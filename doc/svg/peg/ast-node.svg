<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: hierarchy Pages: 1 -->
<svg width="2997pt" height="2587pt"
 viewBox="0.00 0.00 2996.66 2586.80" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 2582.8044)">
<title>hierarchy</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-2582.8044 2992.6592,-2582.8044 2992.6592,4 -4,4"/>
<!-- doc_0 -->
<g id="node1" class="node">
<title>doc_0</title>
<ellipse fill="none" stroke="#000000" cx="65.6592" cy="-2560.8044" rx="46.9581" ry="18"/>
<text text-anchor="middle" x="65.6592" y="-2556.6044" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">doc &#45; 336</text>
</g>
<!-- section_1 -->
<g id="node2" class="node">
<title>section_1</title>
<ellipse fill="none" stroke="#000000" cx="65.6592" cy="-1289.4022" rx="65.8187" ry="18"/>
<text text-anchor="middle" x="65.6592" y="-1285.2022" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 1&#45;336</text>
</g>
<!-- doc_0&#45;&gt;section_1 -->
<g id="edge1" class="edge">
<title>doc_0&#45;&gt;section_1</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M65.6592,-2542.3414C65.6592,-2400.9338 65.6592,-1490.4138 65.6592,-1317.671"/>
<polygon fill="#000000" stroke="#000000" points="69.1593,-1317.5897 65.6592,-1307.5898 62.1593,-1317.5898 69.1593,-1317.5897"/>
</g>
<!-- header_2 -->
<g id="node3" class="node">
<title>header_2</title>
<ellipse fill="none" stroke="#000000" cx="65.6592" cy="-18" rx="27" ry="18"/>
<text text-anchor="middle" x="65.6592" y="-13.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">0 : </text>
</g>
<!-- section_1&#45;&gt;header_2 -->
<g id="edge2" class="edge">
<title>section_1&#45;&gt;header_2</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M65.6592,-1270.9392C65.6592,-1129.5316 65.6592,-219.0116 65.6592,-46.2688"/>
<polygon fill="#000000" stroke="#000000" points="69.1593,-46.1875 65.6592,-36.1875 62.1593,-46.1876 69.1593,-46.1875"/>
</g>
<!-- codeblock_3 -->
<g id="node4" class="node">
<title>codeblock_3</title>
<ellipse fill="none" stroke="#000000" cx="342.6592" cy="-2560.8044" rx="59.5308" ry="18"/>
<text text-anchor="middle" x="342.6592" y="-2556.6044" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">codeblock_3</text>
</g>
<!-- leaf_9 -->
<g id="node5" class="node">
<title>leaf_9</title>
<polygon fill="none" stroke="#c0c0c0" points="536.1592,-1487.503 149.1592,-1487.503 149.1592,-1091.3014 536.1592,-1091.3014 536.1592,-1487.503"/>
<text text-anchor="middle" x="342.6592" y="-1472.5025" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;AST tools</text>
<text text-anchor="middle" x="342.6592" y="-1457.1025" font-family="Inconsolata" font-size="14.00" fill="#000000">local lpeg = require &quot;lpeg&quot;</text>
<text text-anchor="middle" x="342.6592" y="-1441.7024" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;local clu = require &quot;clu/prelude&quot;</text>
<text text-anchor="middle" x="342.6592" y="-1410.3024" font-family="Inconsolata" font-size="14.00" fill="#000000">local u = require &quot;lib/util&quot;</text>
<text text-anchor="middle" x="342.6592" y="-1378.9024" font-family="Inconsolata" font-size="14.00" fill="#000000">local ansi = require &quot;ansi&quot;</text>
<text text-anchor="middle" x="342.6592" y="-1363.5024" font-family="Inconsolata" font-size="14.00" fill="#000000">local walker = require &quot;peg/walker&quot;</text>
<text text-anchor="middle" x="342.6592" y="-1348.1023" font-family="Inconsolata" font-size="14.00" fill="#000000">local Forest = require &quot;peg/forest&quot;</text>
<text text-anchor="middle" x="342.6592" y="-1332.7023" font-family="Inconsolata" font-size="14.00" fill="#000000">local cyan = tostring(ansi.cyan)</text>
<text text-anchor="middle" x="342.6592" y="-1317.3023" font-family="Inconsolata" font-size="14.00" fill="#000000">local blue = tostring(ansi.blue)</text>
<text text-anchor="middle" x="342.6592" y="-1301.9022" font-family="Inconsolata" font-size="14.00" fill="#000000">local magenta = tostring(ansi.magenta)</text>
<text text-anchor="middle" x="342.6592" y="-1286.5022" font-family="Inconsolata" font-size="14.00" fill="#000000">local clear = tostring(ansi.clear)</text>
<text text-anchor="middle" x="342.6592" y="-1271.1022" font-family="Inconsolata" font-size="14.00" fill="#000000">local green = tostring(ansi.green)</text>
<text text-anchor="middle" x="342.6592" y="-1255.7021" font-family="Inconsolata" font-size="14.00" fill="#000000">local red = tostring(ansi.red)</text>
<text text-anchor="middle" x="342.6592" y="-1240.3021" font-family="Inconsolata" font-size="14.00" fill="#000000">local grey = tostring(ansi.dim)..tostring(ansi.white)</text>
<text text-anchor="middle" x="342.6592" y="-1160.9021" font-family="Inconsolata" font-size="14.00" fill="#000000">local function ast_range(node)</text>
<text text-anchor="middle" x="342.6592" y="-1145.502" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local root = node:root()</text>
<text text-anchor="middle" x="342.6592" y="-1130.102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local first, last, _ = &#160;root.index(node)</text>
<text text-anchor="middle" x="342.6592" y="-1114.702" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return root.index, first, last</text>
<text text-anchor="middle" x="342.6592" y="-1099.302" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
</g>
<!-- codeblock_3&#45;&gt;leaf_9 -->
<g id="edge3" class="edge">
<title>codeblock_3&#45;&gt;leaf_9</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M342.6592,-2542.3414C342.6592,-2429.1906 342.6592,-1823.5922 342.6592,-1497.5807"/>
<polygon fill="#000000" stroke="#000000" points="346.1593,-1497.539 342.6592,-1487.539 339.1593,-1497.539 346.1593,-1497.539"/>
</g>
<!-- codeblock_4 -->
<g id="node6" class="node">
<title>codeblock_4</title>
<ellipse fill="none" stroke="#000000" cx="817.6592" cy="-2560.8044" rx="59.5308" ry="18"/>
<text text-anchor="middle" x="817.6592" y="-2556.6044" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">codeblock_4</text>
</g>
<!-- leaf_10 -->
<g id="node7" class="node">
<title>leaf_10</title>
<polygon fill="none" stroke="#c0c0c0" points="1081.1592,-2506.7067 554.1592,-2506.7067 554.1592,-72.0978 1081.1592,-72.0978 1081.1592,-2506.7067"/>
<text text-anchor="middle" x="817.6592" y="-2491.6044" font-family="Inconsolata" font-size="14.00" fill="#000000">local function _ast_range(node)</text>
<text text-anchor="middle" x="817.6592" y="-2476.2044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local root = node:root()</text>
<text text-anchor="middle" x="817.6592" y="-2460.8044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return root.index, node.first, node.last</text>
<text text-anchor="middle" x="817.6592" y="-2445.4043" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="817.6592" y="-2414.0043" font-family="Inconsolata" font-size="14.00" fill="#000000">local c = { id = magenta,</text>
<text text-anchor="middle" x="817.6592" y="-2398.6043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;range = grey,</text>
<text text-anchor="middle" x="817.6592" y="-2383.2042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;str = red,</text>
<text text-anchor="middle" x="817.6592" y="-2367.8042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;num = blue,</text>
<text text-anchor="middle" x="817.6592" y="-2352.4042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;span = clear,</text>
<text text-anchor="middle" x="817.6592" y="-2337.0042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;val = green,}</text>
<text text-anchor="middle" x="817.6592" y="-2305.6041" font-family="Inconsolata" font-size="14.00" fill="#000000">local function node_pr(node, depth, str)</text>
<text text-anchor="middle" x="817.6592" y="-2290.2041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if node.isnode then</text>
<text text-anchor="middle" x="817.6592" y="-2274.8041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local phrase = &quot;&quot;</text>
<text text-anchor="middle" x="817.6592" y="-2259.404" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local prefix = (&quot; &#160;&quot;):rep(depth)</text>
<text text-anchor="middle" x="817.6592" y="-2244.004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if node.isrecursive then </text>
<text text-anchor="middle" x="817.6592" y="-2228.604" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;phrase = red..&quot;*&quot;..prefix:sub(1,&#45;2)..clear</text>
<text text-anchor="middle" x="817.6592" y="-2213.2039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;else </text>
<text text-anchor="middle" x="817.6592" y="-2197.8039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;phrase = prefix</text>
<text text-anchor="middle" x="817.6592" y="-2182.4039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-2167.0038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if node.last then </text>
<text text-anchor="middle" x="817.6592" y="-2151.6038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;phrase = phrase..</text>
<text text-anchor="middle" x="817.6592" y="-2136.2038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.id..node.id..&quot; &quot;..</text>
<text text-anchor="middle" x="817.6592" y="-2120.8037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.range..node.first..</text>
<text text-anchor="middle" x="817.6592" y="-2105.4037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;&#45;&quot;..c.range..node.last..clear..&quot;\n&quot;</text>
<text text-anchor="middle" x="817.6592" y="-2090.0037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-2074.6037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if node.val then</text>
<text text-anchor="middle" x="817.6592" y="-2059.2036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;phrase = phrase..prefix..&#39;&quot;&#39;..c.val..node.val..clear..&#39;&quot;&#39;..&quot;\n&quot;</text>
<text text-anchor="middle" x="817.6592" y="-2043.8036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end </text>
<text text-anchor="middle" x="817.6592" y="-2028.4036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return phrase</text>
<text text-anchor="middle" x="817.6592" y="-2013.0035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-1997.6035" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="817.6592" y="-1950.2035" font-family="Inconsolata" font-size="14.00" fill="#000000">local function ast_tostring(ast, depth, og, phrase)</text>
<text text-anchor="middle" x="817.6592" y="-1934.8034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local depth = depth or 0</text>
<text text-anchor="middle" x="817.6592" y="-1919.4034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local og = og or ast.str</text>
<text text-anchor="middle" x="817.6592" y="-1904.0034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local phrase = phrase or &quot;&quot;</text>
<text text-anchor="middle" x="817.6592" y="-1888.6033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if ast.isnode then</text>
<text text-anchor="middle" x="817.6592" y="-1873.2033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;phrase = phrase..node_pr(ast,depth,og)</text>
<text text-anchor="middle" x="817.6592" y="-1857.8033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-1842.4032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i,v in ipairs(ast) do</text>
<text text-anchor="middle" x="817.6592" y="-1827.0032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;phrase = ast_tostring(v,depth+1,og,phrase)</text>
<text text-anchor="middle" x="817.6592" y="-1811.6032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-1796.2032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return phrase</text>
<text text-anchor="middle" x="817.6592" y="-1780.8031" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="817.6592" y="-1733.4031" font-family="Inconsolata" font-size="14.00" fill="#000000">local function ast_pr(ast)</text>
<text text-anchor="middle" x="817.6592" y="-1718.0031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;io.write(ast_tostring(ast))</text>
<text text-anchor="middle" x="817.6592" y="-1702.603" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="817.6592" y="-1671.203" font-family="Inconsolata" font-size="14.00" fill="#000000">local function deepcopy(orig) &#45;&#45; from luafun</text>
<text text-anchor="middle" x="817.6592" y="-1655.803" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local orig_type = type(orig)</text>
<text text-anchor="middle" x="817.6592" y="-1640.4029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local copy</text>
<text text-anchor="middle" x="817.6592" y="-1625.0029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if orig_type == &#39;table&#39; and orig.isnode then</text>
<text text-anchor="middle" x="817.6592" y="-1609.6029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;copy = setmetatable({},getmetatable(orig))</text>
<text text-anchor="middle" x="817.6592" y="-1594.2028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for orig_key, orig_value in next, orig, nil do</text>
<text text-anchor="middle" x="817.6592" y="-1578.8028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;copy[deepcopy(orig_key)] = deepcopy(orig_value)</text>
<text text-anchor="middle" x="817.6592" y="-1563.4028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-1548.0027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif orig_type ~= &quot;function&quot; then</text>
<text text-anchor="middle" x="817.6592" y="-1532.6027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;copy = orig</text>
<text text-anchor="middle" x="817.6592" y="-1517.2027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-1501.8027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return copy</text>
<text text-anchor="middle" x="817.6592" y="-1486.4026" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="817.6592" y="-1455.0026" font-family="Inconsolata" font-size="14.00" fill="#000000">local function ast_copy(ast)</text>
<text text-anchor="middle" x="817.6592" y="-1439.6026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local clone = deepcopy(ast)</text>
<text text-anchor="middle" x="817.6592" y="-1424.2025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return walker.walk_ast(clone)</text>
<text text-anchor="middle" x="817.6592" y="-1408.8025" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="817.6592" y="-1377.4025" font-family="Inconsolata" font-size="14.00" fill="#000000">local forest = {}</text>
<text text-anchor="middle" x="817.6592" y="-1346.0024" font-family="Inconsolata" font-size="14.00" fill="#000000">local function select_node (ast, pred, catcher)</text>
<text text-anchor="middle" x="817.6592" y="-1330.6024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = catcher or {}</text>
<text text-anchor="middle" x="817.6592" y="-1315.2024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;catch = setmetatable(catch,Forest)</text>
<text text-anchor="middle" x="817.6592" y="-1299.8023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if type(pred) == &quot;string&quot; then</text>
<text text-anchor="middle" x="817.6592" y="-1284.4023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if ast.id == pred then </text>
<text text-anchor="middle" x="817.6592" y="-1269.0023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch[#catch+1] = ast</text>
<text text-anchor="middle" x="817.6592" y="-1253.6022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-1238.2022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for _,v in ipairs(ast) do</text>
<text text-anchor="middle" x="817.6592" y="-1222.8022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch = select_node(v, pred, catch)</text>
<text text-anchor="middle" x="817.6592" y="-1207.4022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-1192.0021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;elseif type(pred) == &quot;function&quot; then</text>
<text text-anchor="middle" x="817.6592" y="-1176.6021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if pred(ast) then</text>
<text text-anchor="middle" x="817.6592" y="-1161.2021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch[#catch+1] = ast</text>
<text text-anchor="middle" x="817.6592" y="-1145.802" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-1130.402" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for _,v in ipairse(ast) do</text>
<text text-anchor="middle" x="817.6592" y="-1115.002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch = select_node(v, pred, catch)</text>
<text text-anchor="middle" x="817.6592" y="-1099.6019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-1084.2019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-1068.8019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch &#160;&#160;</text>
<text text-anchor="middle" x="817.6592" y="-1053.4018" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="817.6592" y="-1022.0018" font-family="Inconsolata" font-size="14.00" fill="#000000">function forest.select(grove,id)</text>
<text text-anchor="middle" x="817.6592" y="-1006.6018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = setmetatable({},Forest)</text>
<text text-anchor="middle" x="817.6592" y="-991.2017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i = 1, #grove do</text>
<text text-anchor="middle" x="817.6592" y="-975.8017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local nursery = select_node(grove[i],id)</text>
<text text-anchor="middle" x="817.6592" y="-960.4017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for j = 1, #nursery do</text>
<text text-anchor="middle" x="817.6592" y="-945.0017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch[#catch+1] = nursery[1]</text>
<text text-anchor="middle" x="817.6592" y="-929.6016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-914.2016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-898.8016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch </text>
<text text-anchor="middle" x="817.6592" y="-883.4015" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="817.6592" y="-852.0015" font-family="Inconsolata" font-size="14.00" fill="#000000">local function select_rule(ast,id)</text>
<text text-anchor="middle" x="817.6592" y="-836.6015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = {}</text>
<text text-anchor="middle" x="817.6592" y="-821.2014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if type(ast) == &quot;table&quot; and ast.isnode then</text>
<text text-anchor="middle" x="817.6592" y="-805.8014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;catch = select_node(ast,id)</text>
<text text-anchor="middle" x="817.6592" y="-790.4014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;elseif type(ast) == &quot;table&quot; and ast.isforest then</text>
<text text-anchor="middle" x="817.6592" y="-775.0013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;catch = forest.select(ast,id)</text>
<text text-anchor="middle" x="817.6592" y="-759.6013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;else error &quot;select: First argument must be of type Node or Forest&quot; end</text>
<text text-anchor="middle" x="817.6592" y="-744.2013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch</text>
<text text-anchor="middle" x="817.6592" y="-728.8012" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="817.6592" y="-697.4012" font-family="Inconsolata" font-size="14.00" fill="#000000">local function select_with_node(ast,pred)</text>
<text text-anchor="middle" x="817.6592" y="-682.0012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = setmetatable({},Forest)</text>
<text text-anchor="middle" x="817.6592" y="-666.6012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local ndx, first, last = ast:range()</text>
<text text-anchor="middle" x="817.6592" y="-651.2011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if type(pred) == &quot;string&quot; then</text>
<text text-anchor="middle" x="817.6592" y="-635.8011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for i = first, last do</text>
<text text-anchor="middle" x="817.6592" y="-620.4011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ndx[i].id == pred then</text>
<text text-anchor="middle" x="817.6592" y="-605.001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch[#catch+1] = ndx[first]</text>
<text text-anchor="middle" x="817.6592" y="-589.601" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-574.201" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-558.8009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;elseif type(pred) == &quot;function&quot; then</text>
<text text-anchor="middle" x="817.6592" y="-543.4009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for i = first, last do</text>
<text text-anchor="middle" x="817.6592" y="-528.0009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if pred(ndx[i]) then</text>
<text text-anchor="middle" x="817.6592" y="-512.6008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch[#catch+1] = ndx[first]</text>
<text text-anchor="middle" x="817.6592" y="-497.2008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-481.8008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-466.4007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-451.0007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch</text>
<text text-anchor="middle" x="817.6592" y="-435.6007" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="817.6592" y="-404.2007" font-family="Inconsolata" font-size="14.00" fill="#000000">function forest.select_with (ast,id)</text>
<text text-anchor="middle" x="817.6592" y="-388.8006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = setmetatable({},Forest)</text>
<text text-anchor="middle" x="817.6592" y="-373.4006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i = 1, #ast do</text>
<text text-anchor="middle" x="817.6592" y="-358.0006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local nursery = select_with_node(ast[i],id)</text>
<text text-anchor="middle" x="817.6592" y="-342.6005" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for j = 1, #nursery do</text>
<text text-anchor="middle" x="817.6592" y="-327.2005" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch[#catch+1] = nursery[1]</text>
<text text-anchor="middle" x="817.6592" y="-311.8005" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-296.4004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-281.0004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch</text>
<text text-anchor="middle" x="817.6592" y="-265.6004" font-family="Inconsolata" font-size="14.00" fill="#000000">end </text>
<text text-anchor="middle" x="817.6592" y="-234.2003" font-family="Inconsolata" font-size="14.00" fill="#000000">local function select_with(ast,id)</text>
<text text-anchor="middle" x="817.6592" y="-218.8003" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = {}</text>
<text text-anchor="middle" x="817.6592" y="-203.4003" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if type(ast) == &quot;table&quot; and ast.isnode then</text>
<text text-anchor="middle" x="817.6592" y="-188.0002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;catch = select_with_node(ast,id)</text>
<text text-anchor="middle" x="817.6592" y="-172.6002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;elseif type(ast) == &quot;table&quot; and ast.isforest then</text>
<text text-anchor="middle" x="817.6592" y="-157.2002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;catch = forest.select_with(ast,id)</text>
<text text-anchor="middle" x="817.6592" y="-141.8002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;else</text>
<text text-anchor="middle" x="817.6592" y="-126.4001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;error &quot;with: First argument must be of type Node or Forest&quot; </text>
<text text-anchor="middle" x="817.6592" y="-111.0001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="817.6592" y="-95.6001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch</text>
<text text-anchor="middle" x="817.6592" y="-80.2" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
</g>
<!-- codeblock_4&#45;&gt;leaf_10 -->
<g id="edge4" class="edge">
<title>codeblock_4&#45;&gt;leaf_10</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M817.6592,-2542.3414C817.6592,-2535.5725 817.6592,-2527.0414 817.6592,-2516.9133"/>
<polygon fill="#000000" stroke="#000000" points="821.1593,-2516.7189 817.6592,-2506.7189 814.1593,-2516.7189 821.1593,-2516.7189"/>
</g>
<!-- codeblock_5 -->
<g id="node8" class="node">
<title>codeblock_5</title>
<ellipse fill="none" stroke="#000000" cx="1327.6592" cy="-2560.8044" rx="59.5308" ry="18"/>
<text text-anchor="middle" x="1327.6592" y="-2556.6044" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">codeblock_5</text>
</g>
<!-- leaf_11 -->
<g id="node9" class="node">
<title>leaf_11</title>
<polygon fill="none" stroke="#c0c0c0" points="1556.1592,-1733.6039 1099.1592,-1733.6039 1099.1592,-845.2005 1556.1592,-845.2005 1556.1592,-1733.6039"/>
<text text-anchor="middle" x="1327.6592" y="-1718.303" font-family="Inconsolata" font-size="14.00" fill="#000000">local function pick_tostring(table)</text>
<text text-anchor="middle" x="1327.6592" y="-1702.903" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local phrase = &quot;&quot;</text>
<text text-anchor="middle" x="1327.6592" y="-1687.503" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i,v in ipairs(table) do </text>
<text text-anchor="middle" x="1327.6592" y="-1672.1029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;phrase = phrase..tostring(v)</text>
<text text-anchor="middle" x="1327.6592" y="-1656.7029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="1327.6592" y="-1641.3029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return phrase </text>
<text text-anchor="middle" x="1327.6592" y="-1625.9029" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1327.6592" y="-1594.5028" font-family="Inconsolata" font-size="14.00" fill="#000000">local function toks_tostring(table)</text>
<text text-anchor="middle" x="1327.6592" y="-1579.1028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local phrase = &quot;[&quot;</text>
<text text-anchor="middle" x="1327.6592" y="-1563.7028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i,v in ipairs(table) do</text>
<text text-anchor="middle" x="1327.6592" y="-1548.3027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;phrase = phrase..</text>
<text text-anchor="middle" x="1327.6592" y="-1532.9027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;grey..&quot;&#39;&quot;..clear..</text>
<text text-anchor="middle" x="1327.6592" y="-1517.5027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tostring(v):gsub(&quot;\n&quot;,blue..&quot;\\n&quot;..clear)..</text>
<text text-anchor="middle" x="1327.6592" y="-1502.1026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;grey..&quot;&#39;&quot;..red..&quot;,&quot;..clear</text>
<text text-anchor="middle" x="1327.6592" y="-1486.7026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="1327.6592" y="-1471.3026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return phrase..&quot;]&quot;..&quot;\n&quot;</text>
<text text-anchor="middle" x="1327.6592" y="-1455.9025" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1327.6592" y="-1424.5025" font-family="Inconsolata" font-size="14.00" fill="#000000">local function tokenize(ast)</text>
<text text-anchor="middle" x="1327.6592" y="-1409.1025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if ast.tok then return ast.tok end</text>
<text text-anchor="middle" x="1327.6592" y="-1393.7024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local ndx, first, last = ast:range()</text>
<text text-anchor="middle" x="1327.6592" y="-1378.3024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local tokens = setmetatable({},{__tostring = toks_tostring})</text>
<text text-anchor="middle" x="1327.6592" y="-1362.9024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i = first, last do &#160;&#160;&#160;&#45;&#45; reap leaves</text>
<text text-anchor="middle" x="1327.6592" y="-1347.5024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if ndx[i].val then</text>
<text text-anchor="middle" x="1327.6592" y="-1332.1023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tokens[#tokens+1] = ndx[i].val</text>
<text text-anchor="middle" x="1327.6592" y="-1316.7023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ndx[i].val = nil</text>
<text text-anchor="middle" x="1327.6592" y="-1301.3023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;elseif ndx[i].tok then</text>
<text text-anchor="middle" x="1327.6592" y="-1285.9022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j = 1, #ndx[i].tok do</text>
<text text-anchor="middle" x="1327.6592" y="-1270.5022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tokens[#tokens+1] = ndx[i].tok[j]</text>
<text text-anchor="middle" x="1327.6592" y="-1255.1022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1327.6592" y="-1239.7021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ndx[i].tok = nil</text>
<text text-anchor="middle" x="1327.6592" y="-1224.3021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1327.6592" y="-1208.9021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="1327.6592" y="-1193.502" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i,v in ipairs(ast) do &#45;&#45; destroy children</text>
<text text-anchor="middle" x="1327.6592" y="-1178.102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;ast[i] = nil </text>
<text text-anchor="middle" x="1327.6592" y="-1162.702" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="1327.6592" y="-1147.302" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;ast.tok = tokens</text>
<text text-anchor="middle" x="1327.6592" y="-1131.9019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;walker.walk_ast(ast:root()) &#45;&#45; this should be triggered by </text>
<text text-anchor="middle" x="1327.6592" y="-1116.5019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; next index operation</text>
<text text-anchor="middle" x="1327.6592" y="-1101.1019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return tokens</text>
<text text-anchor="middle" x="1327.6592" y="-1085.7018" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1327.6592" y="-1054.3018" font-family="Inconsolata" font-size="14.00" fill="#000000">local function flatten(ast)</text>
<text text-anchor="middle" x="1327.6592" y="-1038.9018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local phrase = &quot;&quot;</text>
<text text-anchor="middle" x="1327.6592" y="-1023.5017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;ast:tokens()</text>
<text text-anchor="middle" x="1327.6592" y="-1008.1017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if ast.tok then</text>
<text text-anchor="middle" x="1327.6592" y="-992.7017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for i = 1, #ast.tok do</text>
<text text-anchor="middle" x="1327.6592" y="-977.3016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;phrase = phrase..ast.tok[i]</text>
<text text-anchor="middle" x="1327.6592" y="-961.9016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1327.6592" y="-946.5016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;else error &quot;auto&#45;tokenizing has failed&quot;</text>
<text text-anchor="middle" x="1327.6592" y="-931.1015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="1327.6592" y="-915.7015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;ast.flat = phrase</text>
<text text-anchor="middle" x="1327.6592" y="-900.3015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return phrase</text>
<text text-anchor="middle" x="1327.6592" y="-884.9015" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1327.6592" y="-853.5014" font-family="Inconsolata" font-size="14.00" fill="#000000">function forest.pick(ast,id)</text>
</g>
<!-- codeblock_5&#45;&gt;leaf_11 -->
<g id="edge5" class="edge">
<title>codeblock_5&#45;&gt;leaf_11</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1327.6592,-2542.3414C1327.6592,-2453.98 1327.6592,-2065.3089 1327.6592,-1743.9918"/>
<polygon fill="#000000" stroke="#000000" points="1331.1593,-1743.5487 1327.6592,-1733.5487 1324.1593,-1743.5488 1331.1593,-1743.5487"/>
</g>
<!-- codeblock_6 -->
<g id="node10" class="node">
<title>codeblock_6</title>
<ellipse fill="none" stroke="#000000" cx="1813.6592" cy="-2560.8044" rx="59.5308" ry="18"/>
<text text-anchor="middle" x="1813.6592" y="-2556.6044" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">codeblock_6</text>
</g>
<!-- leaf_12 -->
<g id="node11" class="node">
<title>leaf_12</title>
<polygon fill="none" stroke="#c0c0c0" points="2052.6592,-1409.7027 1574.6592,-1409.7027 1574.6592,-1169.1018 2052.6592,-1169.1018 2052.6592,-1409.7027"/>
<text text-anchor="middle" x="1813.6592" y="-1394.6024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = setmetatable({},{[&quot;__tostring&quot;] = pick_tostring})</text>
<text text-anchor="middle" x="1813.6592" y="-1379.2024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i = 1, #ast do</text>
<text text-anchor="middle" x="1813.6592" y="-1363.8023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;catch[#catch+1] = select_node(ast[i],id)</text>
<text text-anchor="middle" x="1813.6592" y="-1348.4023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="1813.6592" y="-1333.0023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch </text>
<text text-anchor="middle" x="1813.6592" y="-1317.6022" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1813.6592" y="-1286.2022" font-family="Inconsolata" font-size="14.00" fill="#000000">local function walk(ast)</text>
<text text-anchor="middle" x="1813.6592" y="-1270.8022" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1813.6592" y="-1239.4022" font-family="Inconsolata" font-size="14.00" fill="#000000">Forest[&quot;select&quot;] = select_rule</text>
<text text-anchor="middle" x="1813.6592" y="-1224.0021" font-family="Inconsolata" font-size="14.00" fill="#000000">Forest[&quot;with&quot;] &#160;&#160;= forest.select_with</text>
<text text-anchor="middle" x="1813.6592" y="-1208.6021" font-family="Inconsolata" font-size="14.00" fill="#000000">Forest[&quot;pick&quot;] &#160;&#160;= forest.pick</text>
<text text-anchor="middle" x="1813.6592" y="-1177.2021" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Parses a string with a given grammar,</text>
</g>
<!-- codeblock_6&#45;&gt;leaf_12 -->
<g id="edge6" class="edge">
<title>codeblock_6&#45;&gt;leaf_12</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1813.6592,-2542.3414C1813.6592,-2419.4744 1813.6592,-1715.9561 1813.6592,-1420.2707"/>
<polygon fill="#000000" stroke="#000000" points="1817.1593,-1419.9259 1813.6592,-1409.926 1810.1593,-1419.926 1817.1593,-1419.9259"/>
</g>
<!-- codeblock_7 -->
<g id="node12" class="node">
<title>codeblock_7</title>
<ellipse fill="none" stroke="#000000" cx="2337.6592" cy="-2560.8044" rx="59.5308" ry="18"/>
<text text-anchor="middle" x="2337.6592" y="-2556.6044" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">codeblock_7</text>
</g>
<!-- leaf_13 -->
<g id="node13" class="node">
<title>leaf_13</title>
<polygon fill="none" stroke="#c0c0c0" points="2604.6592,-1470.603 2070.6592,-1470.603 2070.6592,-1108.2014 2604.6592,-1108.2014 2604.6592,-1470.603"/>
<text text-anchor="middle" x="2337.6592" y="-1455.3026" font-family="Inconsolata" font-size="14.00" fill="#000000">local function parse(grammar, str)</text>
<text text-anchor="middle" x="2337.6592" y="-1439.9025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if grammar == nil then</text>
<text text-anchor="middle" x="2337.6592" y="-1424.5025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;error &quot;grammar failed to generate&quot;</text>
<text text-anchor="middle" x="2337.6592" y="-1409.1025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="2337.6592" y="-1393.7024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#45;&#45; grammar, input, starting point, input for Carg(1), root node Carg(2)</text>
<text text-anchor="middle" x="2337.6592" y="-1378.3024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local root = {} &#45;&#45; closed under parse</text>
<text text-anchor="middle" x="2337.6592" y="-1362.9024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local root_fn = function()</text>
<text text-anchor="middle" x="2337.6592" y="-1347.5024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local root_node = root &#45;&#45; closed under root fn </text>
<text text-anchor="middle" x="2337.6592" y="-1332.1023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return root_node</text>
<text text-anchor="middle" x="2337.6592" y="-1316.7023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2337.6592" y="-1301.3023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local ast = lpeg.match(grammar, str, 1, str, root_fn)</text>
<text text-anchor="middle" x="2337.6592" y="-1285.9022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if type(ast) == &quot;table&quot; then</text>
<text text-anchor="middle" x="2337.6592" y="-1270.5022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for k, v in pairs(ast) do</text>
<text text-anchor="middle" x="2337.6592" y="-1255.1022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root[k] = v</text>
<text text-anchor="middle" x="2337.6592" y="-1239.7021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end &#160;&#160;</text>
<text text-anchor="middle" x="2337.6592" y="-1224.3021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;root.str = str</text>
<text text-anchor="middle" x="2337.6592" y="-1208.9021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;root.grammar = grammar</text>
<text text-anchor="middle" x="2337.6592" y="-1193.502" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;setmetatable(root,getmetatable(ast))</text>
<text text-anchor="middle" x="2337.6592" y="-1178.102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return walker.walk_ast(root)</text>
<text text-anchor="middle" x="2337.6592" y="-1162.702" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;else</text>
<text text-anchor="middle" x="2337.6592" y="-1147.302" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;error &quot;lpeg did not match grammar&quot;</text>
<text text-anchor="middle" x="2337.6592" y="-1131.9019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="2337.6592" y="-1116.5019" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
</g>
<!-- codeblock_7&#45;&gt;leaf_13 -->
<g id="edge7" class="edge">
<title>codeblock_7&#45;&gt;leaf_13</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2337.6592,-2542.3414C2337.6592,-2427.2451 2337.6592,-1802.6212 2337.6592,-1481.0162"/>
<polygon fill="#000000" stroke="#000000" points="2341.1593,-1480.6476 2337.6592,-1470.6476 2334.1593,-1480.6477 2341.1593,-1480.6476"/>
</g>
<!-- codeblock_8 -->
<g id="node14" class="node">
<title>codeblock_8</title>
<ellipse fill="none" stroke="#000000" cx="2805.6592" cy="-2560.8044" rx="59.5308" ry="18"/>
<text text-anchor="middle" x="2805.6592" y="-2556.6044" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">codeblock_8</text>
</g>
<!-- leaf_14 -->
<g id="node15" class="node">
<title>leaf_14</title>
<polygon fill="none" stroke="#c0c0c0" points="2988.6592,-1494.0032 2622.6592,-1494.0032 2622.6592,-1084.8013 2988.6592,-1084.8013 2988.6592,-1494.0032"/>
<text text-anchor="middle" x="2805.6592" y="-1479.0026" font-family="Inconsolata" font-size="14.00" fill="#000000">local function dotLabel(ast)</text>
<text text-anchor="middle" x="2805.6592" y="-1463.6026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return ast.id</text>
<text text-anchor="middle" x="2805.6592" y="-1448.2025" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2805.6592" y="-1416.8025" font-family="Inconsolata" font-size="14.00" fill="#000000">local function toMarkdown(ast)</text>
<text text-anchor="middle" x="2805.6592" y="-1401.4025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;u.freeze(&quot;No toMarkdown method for &quot; .. ast.id)</text>
<text text-anchor="middle" x="2805.6592" y="-1386.0024" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2805.6592" y="-1354.6024" font-family="Inconsolata" font-size="14.00" fill="#000000">return {</text>
<text text-anchor="middle" x="2805.6592" y="-1339.2024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;select = select_rule,</text>
<text text-anchor="middle" x="2805.6592" y="-1323.8023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;__select_with_node = select_with_node,</text>
<text text-anchor="middle" x="2805.6592" y="-1308.4023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;__select_node = select_node, </text>
<text text-anchor="middle" x="2805.6592" y="-1293.0023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;with = select_with ,</text>
<text text-anchor="middle" x="2805.6592" y="-1277.6022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;tostring = ast_tostring,</text>
<text text-anchor="middle" x="2805.6592" y="-1262.2022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;pr = ast_pr,</text>
<text text-anchor="middle" x="2805.6592" y="-1246.8022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;lift = walker.lift,</text>
<text text-anchor="middle" x="2805.6592" y="-1231.4022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#45;&#45;root = root,</text>
<text text-anchor="middle" x="2805.6592" y="-1216.0021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;tokenize = tokenize,</text>
<text text-anchor="middle" x="2805.6592" y="-1200.6021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;flatten = flatten,</text>
<text text-anchor="middle" x="2805.6592" y="-1185.2021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;range= ast_range,</text>
<text text-anchor="middle" x="2805.6592" y="-1169.802" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;copy = ast_copy,</text>
<text text-anchor="middle" x="2805.6592" y="-1154.402" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;walk = walker.walk_ast,</text>
<text text-anchor="middle" x="2805.6592" y="-1139.002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;dotLabel = dotLabel,</text>
<text text-anchor="middle" x="2805.6592" y="-1123.6019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;toMarkdown = toMarkdown,</text>
<text text-anchor="middle" x="2805.6592" y="-1108.2019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;parse = parse</text>
<text text-anchor="middle" x="2805.6592" y="-1092.8019" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
</g>
<!-- codeblock_8&#45;&gt;leaf_14 -->
<g id="edge8" class="edge">
<title>codeblock_8&#45;&gt;leaf_14</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2805.6592,-2542.3414C2805.6592,-2429.9462 2805.6592,-1831.6584 2805.6592,-1504.149"/>
<polygon fill="#000000" stroke="#000000" points="2809.1593,-1504.0579 2805.6592,-1494.0579 2802.1593,-1504.0579 2809.1593,-1504.0579"/>
</g>
</g>
</svg>