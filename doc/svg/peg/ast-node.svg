<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: hierarchy Pages: 1 -->
<svg width="3582pt" height="7921pt"
 viewBox="0.00 0.00 3581.50 7920.61" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 7916.6137)">
<title>hierarchy</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-7916.6137 3577.5,-7916.6137 3577.5,4 -4,4"/>
<!-- doc_0 -->
<g id="node1" class="node">
<title>doc_0</title>
<ellipse fill="none" stroke="#000000" cx="1493.5" cy="-7894.6137" rx="46.9581" ry="18"/>
<text text-anchor="middle" x="1493.5" y="-7890.4137" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">doc &#45; 336</text>
</g>
<!-- section_1 -->
<g id="node2" class="node">
<title>section_1</title>
<ellipse fill="none" stroke="#000000" cx="1493.5" cy="-7822.6137" rx="65.8187" ry="18"/>
<text text-anchor="middle" x="1493.5" y="-7818.4137" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 1&#45;336</text>
</g>
<!-- doc_0&#45;&gt;section_1 -->
<g id="edge1" class="edge">
<title>doc_0&#45;&gt;section_1</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1493.5,-7876.4451C1493.5,-7868.7447 1493.5,-7859.588 1493.5,-7851.0303"/>
<polygon fill="#000000" stroke="#000000" points="1497.0001,-7851.0269 1493.5,-7841.027 1490.0001,-7851.027 1497.0001,-7851.0269"/>
</g>
<!-- header_2 -->
<g id="node3" class="node">
<title>header_2</title>
<ellipse fill="none" stroke="#000000" cx="373.5" cy="-5172.8091" rx="27" ry="18"/>
<text text-anchor="middle" x="373.5" y="-5168.6091" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">0 : </text>
</g>
<!-- section_1&#45;&gt;header_2 -->
<g id="edge2" class="edge">
<title>section_1&#45;&gt;header_2</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1427.7655,-7821.7914C1198.3205,-7818.6062 444.9659,-7805.3765 409.5,-7768.6137 -333.6145,-6998.3256 270.9741,-5423.415 362.3646,-5199.5191"/>
<polygon fill="#000000" stroke="#000000" points="365.6465,-5200.7408 366.208,-5190.1609 359.1713,-5198.0815 365.6465,-5200.7408"/>
</g>
<!-- block_3 -->
<g id="node4" class="node">
<title>block_3</title>
<ellipse fill="none" stroke="#000000" cx="464.5" cy="-5172.8091" rx="45.9804" ry="18"/>
<text text-anchor="middle" x="464.5" y="-5168.6091" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">block 1&#45;1</text>
</g>
<!-- section_1&#45;&gt;block_3 -->
<g id="edge3" class="edge">
<title>section_1&#45;&gt;block_3</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1427.8716,-7821.3983C1214.3102,-7817.1302 551.0735,-7801.286 519.5,-7768.6137 331.905,-7574.4907 447.2371,-5470.6669 462.8292,-5201.1668"/>
<polygon fill="#000000" stroke="#000000" points="466.3323,-5201.2136 463.4191,-5191.0272 459.3442,-5200.807 466.3323,-5201.2136"/>
</g>
<!-- block_4 -->
<g id="node5" class="node">
<title>block_4</title>
<ellipse fill="none" stroke="#000000" cx="579.5" cy="-5172.8091" rx="50.8172" ry="18"/>
<text text-anchor="middle" x="579.5" y="-5168.6091" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">block 2&#45;31</text>
</g>
<!-- section_1&#45;&gt;block_4 -->
<g id="edge4" class="edge">
<title>section_1&#45;&gt;block_4</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1428.1496,-7820.3476C1246.9834,-7813.7597 750.0328,-7793.4926 725.5,-7768.6137 535.6981,-7576.1335 573.2698,-5470.878 578.8803,-5201.1871"/>
<polygon fill="#000000" stroke="#000000" points="582.3826,-5201.112 579.0945,-5191.0403 575.3841,-5200.9642 582.3826,-5201.112"/>
</g>
<!-- block_5 -->
<g id="node6" class="node">
<title>block_5</title>
<ellipse fill="none" stroke="#000000" cx="795.5" cy="-5172.8091" rx="60.9913" ry="18"/>
<text text-anchor="middle" x="795.5" y="-5168.6091" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">block 32&#45;191</text>
</g>
<!-- section_1&#45;&gt;block_5 -->
<g id="edge5" class="edge">
<title>section_1&#45;&gt;block_5</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1428.0482,-7820.9545C1288.3394,-7816.7535 970.89,-7803.4423 937.5,-7768.6137 564.5328,-7379.5774 763.8598,-5457.3129 792.2935,-5201.0566"/>
<polygon fill="#000000" stroke="#000000" points="795.7788,-5201.3818 793.4107,-5191.055 788.8221,-5200.6046 795.7788,-5201.3818"/>
</g>
<!-- block_6 -->
<g id="node7" class="node">
<title>block_6</title>
<ellipse fill="none" stroke="#000000" cx="1012.5" cy="-5172.8091" rx="65.8274" ry="18"/>
<text text-anchor="middle" x="1012.5" y="-5168.6091" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">block 192&#45;193</text>
</g>
<!-- section_1&#45;&gt;block_6 -->
<g id="edge6" class="edge">
<title>section_1&#45;&gt;block_6</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1431.3403,-7816.7908C1339.5305,-7807.573 1176.5203,-7788.6055 1158.5,-7768.6137 797.6322,-7368.2667 983.0027,-5455.7948 1009.5086,-5200.9038"/>
<polygon fill="#000000" stroke="#000000" points="1012.9897,-5201.2659 1010.5503,-5190.9557 1006.0278,-5200.5368 1012.9897,-5201.2659"/>
</g>
<!-- block_7 -->
<g id="node8" class="node">
<title>block_7</title>
<ellipse fill="none" stroke="#000000" cx="1233.5" cy="-5172.8091" rx="65.8274" ry="18"/>
<text text-anchor="middle" x="1233.5" y="-5168.6091" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">block 194&#45;253</text>
</g>
<!-- section_1&#45;&gt;block_7 -->
<g id="edge7" class="edge">
<title>section_1&#45;&gt;block_7</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1460.0448,-7807.0959C1444.6637,-7798.1275 1427.8035,-7785.2869 1418.5,-7768.6137 898.9107,-6837.4422 1180.1339,-5416.886 1227.207,-5200.7721"/>
<polygon fill="#000000" stroke="#000000" points="1230.6562,-5201.3832 1229.3859,-5190.8648 1223.8196,-5199.8796 1230.6562,-5201.3832"/>
</g>
<!-- block_8 -->
<g id="node9" class="node">
<title>block_8</title>
<ellipse fill="none" stroke="#000000" cx="1493.5" cy="-5172.8091" rx="65.8274" ry="18"/>
<text text-anchor="middle" x="1493.5" y="-5168.6091" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">block 254&#45;256</text>
</g>
<!-- section_1&#45;&gt;block_8 -->
<g id="edge8" class="edge">
<title>section_1&#45;&gt;block_8</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1493.5,-7804.2778C1493.5,-7585.2011 1493.5,-5471.8958 1493.5,-5201.2805"/>
<polygon fill="#000000" stroke="#000000" points="1497.0001,-5201.0993 1493.5,-5191.0993 1490.0001,-5201.0993 1497.0001,-5201.0993"/>
</g>
<!-- block_9 -->
<g id="node10" class="node">
<title>block_9</title>
<ellipse fill="none" stroke="#000000" cx="1813.5" cy="-5172.8091" rx="65.8274" ry="18"/>
<text text-anchor="middle" x="1813.5" y="-5168.6091" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">block 257&#45;274</text>
</g>
<!-- section_1&#45;&gt;block_9 -->
<g id="edge9" class="edge">
<title>section_1&#45;&gt;block_9</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1526.7913,-7807.0032C1542.1321,-7798.012 1559.0057,-7785.179 1568.5,-7768.6137 2099.7518,-6841.7067 1859.6849,-5417.5518 1818.9663,-5200.8501"/>
<polygon fill="#000000" stroke="#000000" points="1822.384,-5200.0868 1817.0792,-5190.9157 1815.507,-5201.3932 1822.384,-5200.0868"/>
</g>
<!-- block_10 -->
<g id="node11" class="node">
<title>block_10</title>
<ellipse fill="none" stroke="#000000" cx="2061.5" cy="-5172.8091" rx="65.8274" ry="18"/>
<text text-anchor="middle" x="2061.5" y="-5168.6091" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">block 275&#45;277</text>
</g>
<!-- section_1&#45;&gt;block_10 -->
<g id="edge10" class="edge">
<title>section_1&#45;&gt;block_10</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1557.6064,-7818.2424C1663.6845,-7810.3726 1866.3082,-7792.3997 1888.5,-7768.6137 2618.6921,-6985.9663 2145.2133,-5427.7992 2070.8608,-5200.6826"/>
<polygon fill="#000000" stroke="#000000" points="2074.0846,-5199.2825 2067.6283,-5190.882 2067.4368,-5201.4751 2074.0846,-5199.2825"/>
</g>
<!-- block_11 -->
<g id="node12" class="node">
<title>block_11</title>
<ellipse fill="none" stroke="#000000" cx="2433.5" cy="-5172.8091" rx="65.8274" ry="18"/>
<text text-anchor="middle" x="2433.5" y="-5168.6091" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">block 278&#45;303</text>
</g>
<!-- section_1&#45;&gt;block_11 -->
<g id="edge11" class="edge">
<title>section_1&#45;&gt;block_11</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1559.235,-7821.7243C1714.8188,-7818.9751 2095.6728,-7808.2287 2136.5,-7768.6137 2908.3932,-7019.6382 2505.1958,-5431.2098 2441.4946,-5200.8865"/>
<polygon fill="#000000" stroke="#000000" points="2444.7823,-5199.6458 2438.7239,-5190.954 2438.0397,-5201.5267 2444.7823,-5199.6458"/>
</g>
<!-- block_12 -->
<g id="node13" class="node">
<title>block_12</title>
<ellipse fill="none" stroke="#000000" cx="2686.5" cy="-5172.8091" rx="65.8274" ry="18"/>
<text text-anchor="middle" x="2686.5" y="-5168.6091" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">block 304&#45;308</text>
</g>
<!-- section_1&#45;&gt;block_12 -->
<g id="edge12" class="edge">
<title>section_1&#45;&gt;block_12</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1559.1301,-7821.4911C1778.5324,-7817.4327 2474.6312,-7801.9678 2508.5,-7768.6137 2893.0185,-7389.9388 2714.8105,-5456.7362 2689.3558,-5200.8019"/>
<polygon fill="#000000" stroke="#000000" points="2692.8354,-5200.4224 2688.3556,-5190.8213 2685.8703,-5201.1205 2692.8354,-5200.4224"/>
</g>
<!-- block_13 -->
<g id="node14" class="node">
<title>block_13</title>
<ellipse fill="none" stroke="#000000" cx="2955.5" cy="-5172.8091" rx="65.8274" ry="18"/>
<text text-anchor="middle" x="2955.5" y="-5168.6091" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">block 309&#45;336</text>
</g>
<!-- section_1&#45;&gt;block_13 -->
<g id="edge13" class="edge">
<title>section_1&#45;&gt;block_13</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1559.524,-7822.2081C1813.8363,-7820.339 2717.9982,-7810.7437 2761.5,-7768.6137 3149.3417,-7393.0021 2982.1923,-5457.1444 2958.1964,-5200.8427"/>
<polygon fill="#000000" stroke="#000000" points="2961.6773,-5200.4745 2957.2531,-5190.8477 2954.7083,-5201.1323 2961.6773,-5200.4745"/>
</g>
<!-- leaf_37 -->
<g id="node38" class="node">
<title>leaf_37</title>
<polygon fill="none" stroke="#c0c0c0" points="3573.5,-7768.4183 3039.5,-7768.4183 3039.5,-2577.1999 3573.5,-2577.1999 3573.5,-7768.4183"/>
<text text-anchor="middle" x="3306.5" y="-7753.4137" font-family="Inconsolata" font-size="14.00" fill="#000000">#!lua</text>
<text text-anchor="middle" x="3306.5" y="-7738.0137" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;AST tools</text>
<text text-anchor="middle" x="3306.5" y="-7722.6136" font-family="Inconsolata" font-size="14.00" fill="#000000">local lpeg = require &quot;lpeg&quot;</text>
<text text-anchor="middle" x="3306.5" y="-7707.2136" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;local clu = require &quot;clu/prelude&quot;</text>
<text text-anchor="middle" x="3306.5" y="-7675.8136" font-family="Inconsolata" font-size="14.00" fill="#000000">local u = require &quot;lib/util&quot;</text>
<text text-anchor="middle" x="3306.5" y="-7644.4135" font-family="Inconsolata" font-size="14.00" fill="#000000">local ansi = require &quot;ansi&quot;</text>
<text text-anchor="middle" x="3306.5" y="-7629.0135" font-family="Inconsolata" font-size="14.00" fill="#000000">local walker = require &quot;peg/walker&quot;</text>
<text text-anchor="middle" x="3306.5" y="-7613.6135" font-family="Inconsolata" font-size="14.00" fill="#000000">local Forest = require &quot;peg/forest&quot;</text>
<text text-anchor="middle" x="3306.5" y="-7598.2135" font-family="Inconsolata" font-size="14.00" fill="#000000">local cyan = tostring(ansi.cyan)</text>
<text text-anchor="middle" x="3306.5" y="-7582.8134" font-family="Inconsolata" font-size="14.00" fill="#000000">local blue = tostring(ansi.blue)</text>
<text text-anchor="middle" x="3306.5" y="-7567.4134" font-family="Inconsolata" font-size="14.00" fill="#000000">local magenta = tostring(ansi.magenta)</text>
<text text-anchor="middle" x="3306.5" y="-7552.0134" font-family="Inconsolata" font-size="14.00" fill="#000000">local clear = tostring(ansi.clear)</text>
<text text-anchor="middle" x="3306.5" y="-7536.6133" font-family="Inconsolata" font-size="14.00" fill="#000000">local green = tostring(ansi.green)</text>
<text text-anchor="middle" x="3306.5" y="-7521.2133" font-family="Inconsolata" font-size="14.00" fill="#000000">local red = tostring(ansi.red)</text>
<text text-anchor="middle" x="3306.5" y="-7505.8133" font-family="Inconsolata" font-size="14.00" fill="#000000">local grey = tostring(ansi.dim)..tostring(ansi.white)</text>
<text text-anchor="middle" x="3306.5" y="-7426.4132" font-family="Inconsolata" font-size="14.00" fill="#000000">local function ast_range(node)</text>
<text text-anchor="middle" x="3306.5" y="-7411.0132" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local root = node:root()</text>
<text text-anchor="middle" x="3306.5" y="-7395.6132" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local first, last, _ = &#160;root.index(node)</text>
<text text-anchor="middle" x="3306.5" y="-7380.2131" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return root.index, first, last</text>
<text text-anchor="middle" x="3306.5" y="-7364.8131" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-7349.4131" font-family="Inconsolata" font-size="14.00" fill="#000000">#/lua</text>
<text text-anchor="middle" x="3306.5" y="-7318.013" font-family="Inconsolata" font-size="14.00" fill="#000000"> not functional yet</text>
<text text-anchor="middle" x="3306.5" y="-7286.613" font-family="Inconsolata" font-size="14.00" fill="#000000">#!lua</text>
<text text-anchor="middle" x="3306.5" y="-7271.213" font-family="Inconsolata" font-size="14.00" fill="#000000">local function _ast_range(node)</text>
<text text-anchor="middle" x="3306.5" y="-7255.813" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local root = node:root()</text>
<text text-anchor="middle" x="3306.5" y="-7240.4129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return root.index, node.first, node.last</text>
<text text-anchor="middle" x="3306.5" y="-7225.0129" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-7193.6129" font-family="Inconsolata" font-size="14.00" fill="#000000">local c = { id = magenta,</text>
<text text-anchor="middle" x="3306.5" y="-7178.2128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;range = grey,</text>
<text text-anchor="middle" x="3306.5" y="-7162.8128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;str = red,</text>
<text text-anchor="middle" x="3306.5" y="-7147.4128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;num = blue,</text>
<text text-anchor="middle" x="3306.5" y="-7132.0127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;span = clear,</text>
<text text-anchor="middle" x="3306.5" y="-7116.6127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;val = green,}</text>
<text text-anchor="middle" x="3306.5" y="-7085.2127" font-family="Inconsolata" font-size="14.00" fill="#000000">local function node_pr(node, depth, str)</text>
<text text-anchor="middle" x="3306.5" y="-7069.8126" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if node.isnode then</text>
<text text-anchor="middle" x="3306.5" y="-7054.4126" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local phrase = &quot;&quot;</text>
<text text-anchor="middle" x="3306.5" y="-7039.0126" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local prefix = (&quot; &#160;&quot;):rep(depth)</text>
<text text-anchor="middle" x="3306.5" y="-7023.6125" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if node.isrecursive then </text>
<text text-anchor="middle" x="3306.5" y="-7008.2125" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;phrase = red..&quot;*&quot;..prefix:sub(1,&#45;2)..clear</text>
<text text-anchor="middle" x="3306.5" y="-6992.8125" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;else </text>
<text text-anchor="middle" x="3306.5" y="-6977.4125" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;phrase = prefix</text>
<text text-anchor="middle" x="3306.5" y="-6962.0124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-6946.6124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if node.last then </text>
<text text-anchor="middle" x="3306.5" y="-6931.2124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;phrase = phrase..</text>
<text text-anchor="middle" x="3306.5" y="-6915.8123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.id..node.id..&quot; &quot;..</text>
<text text-anchor="middle" x="3306.5" y="-6900.4123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.range..node.first..</text>
<text text-anchor="middle" x="3306.5" y="-6885.0123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;&#45;&quot;..c.range..node.last..clear..&quot;\n&quot;</text>
<text text-anchor="middle" x="3306.5" y="-6869.6122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-6854.2122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if node.val then</text>
<text text-anchor="middle" x="3306.5" y="-6838.8122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;phrase = phrase..prefix..&#39;&quot;&#39;..c.val..node.val..clear..&#39;&quot;&#39;..&quot;\n&quot;</text>
<text text-anchor="middle" x="3306.5" y="-6823.4121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end </text>
<text text-anchor="middle" x="3306.5" y="-6808.0121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return phrase</text>
<text text-anchor="middle" x="3306.5" y="-6792.6121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-6777.212" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-6729.812" font-family="Inconsolata" font-size="14.00" fill="#000000">local function ast_tostring(ast, depth, og, phrase)</text>
<text text-anchor="middle" x="3306.5" y="-6714.412" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local depth = depth or 0</text>
<text text-anchor="middle" x="3306.5" y="-6699.012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local og = og or ast.str</text>
<text text-anchor="middle" x="3306.5" y="-6683.6119" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local phrase = phrase or &quot;&quot;</text>
<text text-anchor="middle" x="3306.5" y="-6668.2119" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if ast.isnode then</text>
<text text-anchor="middle" x="3306.5" y="-6652.8119" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;phrase = phrase..node_pr(ast,depth,og)</text>
<text text-anchor="middle" x="3306.5" y="-6637.4118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-6622.0118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i,v in ipairs(ast) do</text>
<text text-anchor="middle" x="3306.5" y="-6606.6118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;phrase = ast_tostring(v,depth+1,og,phrase)</text>
<text text-anchor="middle" x="3306.5" y="-6591.2117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-6575.8117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return phrase</text>
<text text-anchor="middle" x="3306.5" y="-6560.4117" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-6513.0116" font-family="Inconsolata" font-size="14.00" fill="#000000">local function ast_pr(ast)</text>
<text text-anchor="middle" x="3306.5" y="-6497.6116" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;io.write(ast_tostring(ast))</text>
<text text-anchor="middle" x="3306.5" y="-6482.2116" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-6450.8115" font-family="Inconsolata" font-size="14.00" fill="#000000">local function deepcopy(orig) &#45;&#45; from luafun</text>
<text text-anchor="middle" x="3306.5" y="-6435.4115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local orig_type = type(orig)</text>
<text text-anchor="middle" x="3306.5" y="-6420.0115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local copy</text>
<text text-anchor="middle" x="3306.5" y="-6404.6115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if orig_type == &#39;table&#39; and orig.isnode then</text>
<text text-anchor="middle" x="3306.5" y="-6389.2114" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;copy = setmetatable({},getmetatable(orig))</text>
<text text-anchor="middle" x="3306.5" y="-6373.8114" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for orig_key, orig_value in next, orig, nil do</text>
<text text-anchor="middle" x="3306.5" y="-6358.4114" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;copy[deepcopy(orig_key)] = deepcopy(orig_value)</text>
<text text-anchor="middle" x="3306.5" y="-6343.0113" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-6327.6113" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif orig_type ~= &quot;function&quot; then</text>
<text text-anchor="middle" x="3306.5" y="-6312.2113" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;copy = orig</text>
<text text-anchor="middle" x="3306.5" y="-6296.8112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-6281.4112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return copy</text>
<text text-anchor="middle" x="3306.5" y="-6266.0112" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-6234.6111" font-family="Inconsolata" font-size="14.00" fill="#000000">local function ast_copy(ast)</text>
<text text-anchor="middle" x="3306.5" y="-6219.2111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local clone = deepcopy(ast)</text>
<text text-anchor="middle" x="3306.5" y="-6203.8111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return walker.walk_ast(clone)</text>
<text text-anchor="middle" x="3306.5" y="-6188.411" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-6157.011" font-family="Inconsolata" font-size="14.00" fill="#000000">local forest = {}</text>
<text text-anchor="middle" x="3306.5" y="-6125.611" font-family="Inconsolata" font-size="14.00" fill="#000000">local function select_node (ast, pred, catcher)</text>
<text text-anchor="middle" x="3306.5" y="-6110.211" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = catcher or {}</text>
<text text-anchor="middle" x="3306.5" y="-6094.8109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;catch = setmetatable(catch,Forest)</text>
<text text-anchor="middle" x="3306.5" y="-6079.4109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if type(pred) == &quot;string&quot; then</text>
<text text-anchor="middle" x="3306.5" y="-6064.0109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if ast.id == pred then </text>
<text text-anchor="middle" x="3306.5" y="-6048.6108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch[#catch+1] = ast</text>
<text text-anchor="middle" x="3306.5" y="-6033.2108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-6017.8108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for _,v in ipairs(ast) do</text>
<text text-anchor="middle" x="3306.5" y="-6002.4107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch = select_node(v, pred, catch)</text>
<text text-anchor="middle" x="3306.5" y="-5987.0107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-5971.6107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;elseif type(pred) == &quot;function&quot; then</text>
<text text-anchor="middle" x="3306.5" y="-5956.2106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if pred(ast) then</text>
<text text-anchor="middle" x="3306.5" y="-5940.8106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch[#catch+1] = ast</text>
<text text-anchor="middle" x="3306.5" y="-5925.4106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-5910.0105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for _,v in ipairse(ast) do</text>
<text text-anchor="middle" x="3306.5" y="-5894.6105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch = select_node(v, pred, catch)</text>
<text text-anchor="middle" x="3306.5" y="-5879.2105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-5863.8105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-5848.4104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch &#160;&#160;</text>
<text text-anchor="middle" x="3306.5" y="-5833.0104" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-5801.6104" font-family="Inconsolata" font-size="14.00" fill="#000000">function forest.select(grove,id)</text>
<text text-anchor="middle" x="3306.5" y="-5786.2103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = setmetatable({},Forest)</text>
<text text-anchor="middle" x="3306.5" y="-5770.8103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i = 1, #grove do</text>
<text text-anchor="middle" x="3306.5" y="-5755.4103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local nursery = select_node(grove[i],id)</text>
<text text-anchor="middle" x="3306.5" y="-5740.0102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for j = 1, #nursery do</text>
<text text-anchor="middle" x="3306.5" y="-5724.6102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch[#catch+1] = nursery[1]</text>
<text text-anchor="middle" x="3306.5" y="-5709.2102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-5693.8101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-5678.4101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch </text>
<text text-anchor="middle" x="3306.5" y="-5663.0101" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-5631.61" font-family="Inconsolata" font-size="14.00" fill="#000000">local function select_rule(ast,id)</text>
<text text-anchor="middle" x="3306.5" y="-5616.21" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = {}</text>
<text text-anchor="middle" x="3306.5" y="-5600.81" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if type(ast) == &quot;table&quot; and ast.isnode then</text>
<text text-anchor="middle" x="3306.5" y="-5585.41" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;catch = select_node(ast,id)</text>
<text text-anchor="middle" x="3306.5" y="-5570.0099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;elseif type(ast) == &quot;table&quot; and ast.isforest then</text>
<text text-anchor="middle" x="3306.5" y="-5554.6099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;catch = forest.select(ast,id)</text>
<text text-anchor="middle" x="3306.5" y="-5539.2099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;else error &quot;select: First argument must be of type Node or Forest&quot; end</text>
<text text-anchor="middle" x="3306.5" y="-5523.8098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch</text>
<text text-anchor="middle" x="3306.5" y="-5508.4098" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-5477.0098" font-family="Inconsolata" font-size="14.00" fill="#000000">local function select_with_node(ast,pred)</text>
<text text-anchor="middle" x="3306.5" y="-5461.6097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = setmetatable({},Forest)</text>
<text text-anchor="middle" x="3306.5" y="-5446.2097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local ndx, first, last = ast:range()</text>
<text text-anchor="middle" x="3306.5" y="-5430.8097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if type(pred) == &quot;string&quot; then</text>
<text text-anchor="middle" x="3306.5" y="-5415.4096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for i = first, last do</text>
<text text-anchor="middle" x="3306.5" y="-5400.0096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ndx[i].id == pred then</text>
<text text-anchor="middle" x="3306.5" y="-5384.6096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch[#catch+1] = ndx[first]</text>
<text text-anchor="middle" x="3306.5" y="-5369.2095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-5353.8095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-5338.4095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;elseif type(pred) == &quot;function&quot; then</text>
<text text-anchor="middle" x="3306.5" y="-5323.0095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for i = first, last do</text>
<text text-anchor="middle" x="3306.5" y="-5307.6094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if pred(ndx[i]) then</text>
<text text-anchor="middle" x="3306.5" y="-5292.2094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch[#catch+1] = ndx[first]</text>
<text text-anchor="middle" x="3306.5" y="-5276.8094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-5261.4093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-5246.0093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-5230.6093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch</text>
<text text-anchor="middle" x="3306.5" y="-5215.2092" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-5183.8092" font-family="Inconsolata" font-size="14.00" fill="#000000">function forest.select_with (ast,id)</text>
<text text-anchor="middle" x="3306.5" y="-5168.4092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = setmetatable({},Forest)</text>
<text text-anchor="middle" x="3306.5" y="-5153.0091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i = 1, #ast do</text>
<text text-anchor="middle" x="3306.5" y="-5137.6091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local nursery = select_with_node(ast[i],id)</text>
<text text-anchor="middle" x="3306.5" y="-5122.2091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for j = 1, #nursery do</text>
<text text-anchor="middle" x="3306.5" y="-5106.8091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch[#catch+1] = nursery[1]</text>
<text text-anchor="middle" x="3306.5" y="-5091.409" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-5076.009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-5060.609" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch</text>
<text text-anchor="middle" x="3306.5" y="-5045.2089" font-family="Inconsolata" font-size="14.00" fill="#000000">end </text>
<text text-anchor="middle" x="3306.5" y="-5013.8089" font-family="Inconsolata" font-size="14.00" fill="#000000">local function select_with(ast,id)</text>
<text text-anchor="middle" x="3306.5" y="-4998.4089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = {}</text>
<text text-anchor="middle" x="3306.5" y="-4983.0088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if type(ast) == &quot;table&quot; and ast.isnode then</text>
<text text-anchor="middle" x="3306.5" y="-4967.6088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;catch = select_with_node(ast,id)</text>
<text text-anchor="middle" x="3306.5" y="-4952.2088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;elseif type(ast) == &quot;table&quot; and ast.isforest then</text>
<text text-anchor="middle" x="3306.5" y="-4936.8087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;catch = forest.select_with(ast,id)</text>
<text text-anchor="middle" x="3306.5" y="-4921.4087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;else</text>
<text text-anchor="middle" x="3306.5" y="-4906.0087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;error &quot;with: First argument must be of type Node or Forest&quot; </text>
<text text-anchor="middle" x="3306.5" y="-4890.6086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-4875.2086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch</text>
<text text-anchor="middle" x="3306.5" y="-4859.8086" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-4844.4086" font-family="Inconsolata" font-size="14.00" fill="#000000">#/lua</text>
<text text-anchor="middle" x="3306.5" y="-4813.0085" font-family="Inconsolata" font-size="14.00" fill="#000000"> add: select_without</text>
<text text-anchor="middle" x="3306.5" y="-4781.6085" font-family="Inconsolata" font-size="14.00" fill="#000000">#!lua</text>
<text text-anchor="middle" x="3306.5" y="-4766.2085" font-family="Inconsolata" font-size="14.00" fill="#000000">local function pick_tostring(table)</text>
<text text-anchor="middle" x="3306.5" y="-4750.8084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local phrase = &quot;&quot;</text>
<text text-anchor="middle" x="3306.5" y="-4735.4084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i,v in ipairs(table) do </text>
<text text-anchor="middle" x="3306.5" y="-4720.0084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;phrase = phrase..tostring(v)</text>
<text text-anchor="middle" x="3306.5" y="-4704.6083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-4689.2083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return phrase </text>
<text text-anchor="middle" x="3306.5" y="-4673.8083" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-4642.4082" font-family="Inconsolata" font-size="14.00" fill="#000000">local function toks_tostring(table)</text>
<text text-anchor="middle" x="3306.5" y="-4627.0082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local phrase = &quot;[&quot;</text>
<text text-anchor="middle" x="3306.5" y="-4611.6082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i,v in ipairs(table) do</text>
<text text-anchor="middle" x="3306.5" y="-4596.2081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;phrase = phrase..</text>
<text text-anchor="middle" x="3306.5" y="-4580.8081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;grey..&quot;&#39;&quot;..clear..</text>
<text text-anchor="middle" x="3306.5" y="-4565.4081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tostring(v):gsub(&quot;\n&quot;,blue..&quot;\\n&quot;..clear)..</text>
<text text-anchor="middle" x="3306.5" y="-4550.0081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;grey..&quot;&#39;&quot;..red..&quot;,&quot;..clear</text>
<text text-anchor="middle" x="3306.5" y="-4534.608" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-4519.208" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return phrase..&quot;]&quot;..&quot;\n&quot;</text>
<text text-anchor="middle" x="3306.5" y="-4503.808" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-4472.4079" font-family="Inconsolata" font-size="14.00" fill="#000000">local function tokenize(ast)</text>
<text text-anchor="middle" x="3306.5" y="-4457.0079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if ast.tok then return ast.tok end</text>
<text text-anchor="middle" x="3306.5" y="-4441.6079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local ndx, first, last = ast:range()</text>
<text text-anchor="middle" x="3306.5" y="-4426.2078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local tokens = setmetatable({},{__tostring = toks_tostring})</text>
<text text-anchor="middle" x="3306.5" y="-4410.8078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i = first, last do &#160;&#160;&#160;&#45;&#45; reap leaves</text>
<text text-anchor="middle" x="3306.5" y="-4395.4078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if ndx[i].val then</text>
<text text-anchor="middle" x="3306.5" y="-4380.0077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tokens[#tokens+1] = ndx[i].val</text>
<text text-anchor="middle" x="3306.5" y="-4364.6077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ndx[i].val = nil</text>
<text text-anchor="middle" x="3306.5" y="-4349.2077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;elseif ndx[i].tok then</text>
<text text-anchor="middle" x="3306.5" y="-4333.8076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j = 1, #ndx[i].tok do</text>
<text text-anchor="middle" x="3306.5" y="-4318.4076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tokens[#tokens+1] = ndx[i].tok[j]</text>
<text text-anchor="middle" x="3306.5" y="-4303.0076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-4287.6076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ndx[i].tok = nil</text>
<text text-anchor="middle" x="3306.5" y="-4272.2075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-4256.8075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-4241.4075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i,v in ipairs(ast) do &#45;&#45; destroy children</text>
<text text-anchor="middle" x="3306.5" y="-4226.0074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;ast[i] = nil </text>
<text text-anchor="middle" x="3306.5" y="-4210.6074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-4195.2074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;ast.tok = tokens</text>
<text text-anchor="middle" x="3306.5" y="-4179.8073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;walker.walk_ast(ast:root()) &#45;&#45; this should be triggered by </text>
<text text-anchor="middle" x="3306.5" y="-4164.4073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; next index operation</text>
<text text-anchor="middle" x="3306.5" y="-4149.0073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return tokens</text>
<text text-anchor="middle" x="3306.5" y="-4133.6072" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-4102.2072" font-family="Inconsolata" font-size="14.00" fill="#000000">local function flatten(ast)</text>
<text text-anchor="middle" x="3306.5" y="-4086.8072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local phrase = &quot;&quot;</text>
<text text-anchor="middle" x="3306.5" y="-4071.4071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;ast:tokens()</text>
<text text-anchor="middle" x="3306.5" y="-4056.0071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if ast.tok then</text>
<text text-anchor="middle" x="3306.5" y="-4040.6071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for i = 1, #ast.tok do</text>
<text text-anchor="middle" x="3306.5" y="-4025.2071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;phrase = phrase..ast.tok[i]</text>
<text text-anchor="middle" x="3306.5" y="-4009.807" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-3994.407" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;else error &quot;auto&#45;tokenizing has failed&quot;</text>
<text text-anchor="middle" x="3306.5" y="-3979.007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-3963.6069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;ast.flat = phrase</text>
<text text-anchor="middle" x="3306.5" y="-3948.2069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return phrase</text>
<text text-anchor="middle" x="3306.5" y="-3932.8069" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-3901.4068" font-family="Inconsolata" font-size="14.00" fill="#000000">function forest.pick(ast,id)</text>
<text text-anchor="middle" x="3306.5" y="-3886.0068" font-family="Inconsolata" font-size="14.00" fill="#000000">#/lua</text>
<text text-anchor="middle" x="3306.5" y="-3854.6068" font-family="Inconsolata" font-size="14.00" fill="#000000"> similar to select, :pick returns a bare vector of Forests,</text>
<text text-anchor="middle" x="3306.5" y="-3839.2067" font-family="Inconsolata" font-size="14.00" fill="#000000"> rather than a flattened Forest. </text>
<text text-anchor="middle" x="3306.5" y="-3807.8067" font-family="Inconsolata" font-size="14.00" fill="#000000">#!lua</text>
<text text-anchor="middle" x="3306.5" y="-3792.4067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = setmetatable({},{[&quot;__tostring&quot;] = pick_tostring})</text>
<text text-anchor="middle" x="3306.5" y="-3777.0066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i = 1, #ast do</text>
<text text-anchor="middle" x="3306.5" y="-3761.6066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;catch[#catch+1] = select_node(ast[i],id)</text>
<text text-anchor="middle" x="3306.5" y="-3746.2066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-3730.8066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch </text>
<text text-anchor="middle" x="3306.5" y="-3715.4065" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-3684.0065" font-family="Inconsolata" font-size="14.00" fill="#000000">local function walk(ast)</text>
<text text-anchor="middle" x="3306.5" y="-3668.6065" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-3637.2064" font-family="Inconsolata" font-size="14.00" fill="#000000">Forest[&quot;select&quot;] = select_rule</text>
<text text-anchor="middle" x="3306.5" y="-3621.8064" font-family="Inconsolata" font-size="14.00" fill="#000000">Forest[&quot;with&quot;] &#160;&#160;= forest.select_with</text>
<text text-anchor="middle" x="3306.5" y="-3606.4064" font-family="Inconsolata" font-size="14.00" fill="#000000">Forest[&quot;pick&quot;] &#160;&#160;= forest.pick</text>
<text text-anchor="middle" x="3306.5" y="-3575.0063" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Parses a string with a given grammar,</text>
<text text-anchor="middle" x="3306.5" y="-3559.6063" font-family="Inconsolata" font-size="14.00" fill="#000000">#/lua</text>
<text text-anchor="middle" x="3306.5" y="-3528.2063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;returning a Node decorated with the original</text>
<text text-anchor="middle" x="3306.5" y="-3512.8062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;grammar and string.</text>
<text text-anchor="middle" x="3306.5" y="-3481.4062" font-family="Inconsolata" font-size="14.00" fill="#000000">#!lua</text>
<text text-anchor="middle" x="3306.5" y="-3466.0062" font-family="Inconsolata" font-size="14.00" fill="#000000">local function parse(grammar, str)</text>
<text text-anchor="middle" x="3306.5" y="-3450.6061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if grammar == nil then</text>
<text text-anchor="middle" x="3306.5" y="-3435.2061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;error &quot;grammar failed to generate&quot;</text>
<text text-anchor="middle" x="3306.5" y="-3419.8061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-3404.4061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#45;&#45; grammar, input, starting point, input for Carg(1), root node Carg(2)</text>
<text text-anchor="middle" x="3306.5" y="-3389.006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local root = {} &#45;&#45; closed under parse</text>
<text text-anchor="middle" x="3306.5" y="-3373.606" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local root_fn = function()</text>
<text text-anchor="middle" x="3306.5" y="-3358.206" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local root_node = root &#45;&#45; closed under root fn </text>
<text text-anchor="middle" x="3306.5" y="-3342.8059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return root_node</text>
<text text-anchor="middle" x="3306.5" y="-3327.4059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-3312.0059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local ast = lpeg.match(grammar, str, 1, str, root_fn)</text>
<text text-anchor="middle" x="3306.5" y="-3296.6058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if type(ast) == &quot;table&quot; then</text>
<text text-anchor="middle" x="3306.5" y="-3281.2058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for k, v in pairs(ast) do</text>
<text text-anchor="middle" x="3306.5" y="-3265.8058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root[k] = v</text>
<text text-anchor="middle" x="3306.5" y="-3250.4057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end &#160;&#160;</text>
<text text-anchor="middle" x="3306.5" y="-3235.0057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;root.str = str</text>
<text text-anchor="middle" x="3306.5" y="-3219.6057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;root.grammar = grammar</text>
<text text-anchor="middle" x="3306.5" y="-3204.2056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;setmetatable(root,getmetatable(ast))</text>
<text text-anchor="middle" x="3306.5" y="-3188.8056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return walker.walk_ast(root)</text>
<text text-anchor="middle" x="3306.5" y="-3173.4056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;else</text>
<text text-anchor="middle" x="3306.5" y="-3158.0056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;error &quot;lpeg did not match grammar&quot;</text>
<text text-anchor="middle" x="3306.5" y="-3142.6055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="3306.5" y="-3127.2055" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-3111.8055" font-family="Inconsolata" font-size="14.00" fill="#000000">#/lua</text>
<text text-anchor="middle" x="3306.5" y="-3080.4054" font-family="Inconsolata" font-size="14.00" fill="#000000"> Generate a label for .dot diagrams.</text>
<text text-anchor="middle" x="3306.5" y="-3065.0054" font-family="Inconsolata" font-size="14.00" fill="#000000"> </text>
<text text-anchor="middle" x="3306.5" y="-3049.6054" font-family="Inconsolata" font-size="14.00" fill="#000000"> Defaults to returning the .id field of the Node.</text>
<text text-anchor="middle" x="3306.5" y="-3002.2053" font-family="Inconsolata" font-size="14.00" fill="#000000">#!lua</text>
<text text-anchor="middle" x="3306.5" y="-2986.8053" font-family="Inconsolata" font-size="14.00" fill="#000000">local function dotLabel(ast)</text>
<text text-anchor="middle" x="3306.5" y="-2971.4053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return ast.id</text>
<text text-anchor="middle" x="3306.5" y="-2956.0052" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-2924.6052" font-family="Inconsolata" font-size="14.00" fill="#000000">local function toMarkdown(ast)</text>
<text text-anchor="middle" x="3306.5" y="-2909.2052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;u.freeze(&quot;No toMarkdown method for &quot; .. ast.id)</text>
<text text-anchor="middle" x="3306.5" y="-2893.8051" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3306.5" y="-2862.4051" font-family="Inconsolata" font-size="14.00" fill="#000000">return {</text>
<text text-anchor="middle" x="3306.5" y="-2847.0051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;select = select_rule,</text>
<text text-anchor="middle" x="3306.5" y="-2831.6051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;__select_with_node = select_with_node,</text>
<text text-anchor="middle" x="3306.5" y="-2816.205" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;__select_node = select_node, </text>
<text text-anchor="middle" x="3306.5" y="-2800.805" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;with = select_with ,</text>
<text text-anchor="middle" x="3306.5" y="-2785.405" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;tostring = ast_tostring,</text>
<text text-anchor="middle" x="3306.5" y="-2770.0049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;pr = ast_pr,</text>
<text text-anchor="middle" x="3306.5" y="-2754.6049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;lift = walker.lift,</text>
<text text-anchor="middle" x="3306.5" y="-2739.2049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#45;&#45;root = root,</text>
<text text-anchor="middle" x="3306.5" y="-2723.8048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;tokenize = tokenize,</text>
<text text-anchor="middle" x="3306.5" y="-2708.4048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;flatten = flatten,</text>
<text text-anchor="middle" x="3306.5" y="-2693.0048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;range= ast_range,</text>
<text text-anchor="middle" x="3306.5" y="-2677.6047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;copy = ast_copy,</text>
<text text-anchor="middle" x="3306.5" y="-2662.2047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;walk = walker.walk_ast,</text>
<text text-anchor="middle" x="3306.5" y="-2646.8047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;dotLabel = dotLabel,</text>
<text text-anchor="middle" x="3306.5" y="-2631.4047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;toMarkdown = toMarkdown,</text>
<text text-anchor="middle" x="3306.5" y="-2616.0046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;parse = parse</text>
<text text-anchor="middle" x="3306.5" y="-2600.6046" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
<text text-anchor="middle" x="3306.5" y="-2585.2046" font-family="Inconsolata" font-size="14.00" fill="#000000">#/lua</text>
</g>
<!-- section_1&#45;&gt;leaf_37 -->
<g id="edge37" class="edge">
<title>section_1&#45;&gt;leaf_37</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1559.2305,-7821.4704C1849.4761,-7816.2778 3003.1793,-7794.0652 3030.5,-7768.6137 3030.9696,-7768.1763 3031.4387,-7767.7385 3031.9074,-7767.3005"/>
<polygon fill="#000000" stroke="#000000" points="3034.5875,-7769.5839 3039.4621,-7760.177 3029.7853,-7764.4909 3034.5875,-7769.5839"/>
</g>
<!-- leaf_14 -->
<g id="node15" class="node">
<title>leaf_14</title>
<polygon fill="none" stroke="#c0c0c0" points="237.5,-2523.9045 183.5,-2523.9045 183.5,-2487.9045 237.5,-2487.9045 237.5,-2523.9045"/>
</g>
<!-- block_3&#45;&gt;leaf_14 -->
<g id="edge14" class="edge">
<title>block_3&#45;&gt;leaf_14</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M465.4505,-5154.7073C476.8107,-4935.1538 583.1489,-2788.5607 409.5,-2577.0045 362.4295,-2519.6585 311.7832,-2576.2509 246.5,-2541.0045 241.6033,-2538.3608 236.913,-2534.8571 232.6298,-2531.0858"/>
<polygon fill="#000000" stroke="#000000" points="235.0372,-2528.5451 225.4034,-2524.1361 230.185,-2533.5905 235.0372,-2528.5451"/>
</g>
<!-- codeblock_15 -->
<g id="node16" class="node">
<title>codeblock_15</title>
<ellipse fill="none" stroke="#000000" cx="328.5" cy="-2505.9045" rx="72.5844" ry="18"/>
<text text-anchor="middle" x="328.5" y="-2501.7045" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 2&#45;28</text>
</g>
<!-- block_4&#45;&gt;codeblock_15 -->
<g id="edge15" class="edge">
<title>block_4&#45;&gt;codeblock_15</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M581.8578,-5154.6207C608.4435,-4946.544 844.8844,-3015.117 519.5,-2577.0045 488.8291,-2535.7078 457.5958,-2559.2507 409.5,-2541.0045 397.4016,-2536.4148 384.473,-2531.0346 372.5778,-2525.8846"/>
<polygon fill="#000000" stroke="#000000" points="373.8596,-2522.6251 363.2951,-2521.8233 371.0537,-2529.0382 373.8596,-2522.6251"/>
</g>
<!-- leaf_17 -->
<g id="node18" class="node">
<title>leaf_17</title>
<polygon fill="none" stroke="#c0c0c0" points="568,-2525.8066 419,-2525.8066 419,-2486.0024 568,-2486.0024 568,-2525.8066"/>
<text text-anchor="middle" x="493.5" y="-2494.4045" font-family="Inconsolata" font-size="14.00" fill="#000000"> not functional yet</text>
</g>
<!-- block_4&#45;&gt;leaf_17 -->
<g id="edge17" class="edge">
<title>block_4&#45;&gt;leaf_17</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M581.3098,-5154.8033C597.9942,-4984.3179 719.9435,-3637.2809 519.5,-2577.0045 516.8222,-2562.84 511.6665,-2547.7617 506.6476,-2535.1526"/>
<polygon fill="#000000" stroke="#000000" points="509.7645,-2533.5318 502.7018,-2525.6344 503.2981,-2536.2125 509.7645,-2533.5318"/>
</g>
<!-- codeblock_18 -->
<g id="node19" class="node">
<title>codeblock_18</title>
<ellipse fill="none" stroke="#000000" cx="668.5" cy="-2505.9045" rx="82.2579" ry="18"/>
<text text-anchor="middle" x="668.5" y="-2501.7045" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 32&#45;190</text>
</g>
<!-- block_5&#45;&gt;codeblock_18 -->
<g id="edge18" class="edge">
<title>block_5&#45;&gt;codeblock_18</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M794.6384,-5154.716C784.2274,-4936.0938 682.7445,-2805.0287 669.846,-2534.1689"/>
<polygon fill="#000000" stroke="#000000" points="673.3329,-2533.8099 669.3611,-2523.9877 666.3409,-2534.1429 673.3329,-2533.8099"/>
</g>
<!-- leaf_20 -->
<g id="node21" class="node">
<title>leaf_20</title>
<polygon fill="none" stroke="#c0c0c0" points="822.5,-2523.9045 768.5,-2523.9045 768.5,-2487.9045 822.5,-2487.9045 822.5,-2523.9045"/>
</g>
<!-- block_5&#45;&gt;leaf_20 -->
<g id="edge20" class="edge">
<title>block_5&#45;&gt;leaf_20</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M795.5,-5154.716C795.5,-4936.0938 795.5,-2805.0287 795.5,-2534.1689"/>
<polygon fill="#000000" stroke="#000000" points="799.0001,-2533.9877 795.5,-2523.9877 792.0001,-2533.9878 799.0001,-2533.9877"/>
</g>
<!-- leaf_21 -->
<g id="node22" class="node">
<title>leaf_21</title>
<polygon fill="none" stroke="#c0c0c0" points="996.5,-2523.9045 840.5,-2523.9045 840.5,-2487.9045 996.5,-2487.9045 996.5,-2523.9045"/>
<text text-anchor="middle" x="918.5" y="-2502.4045" font-family="Inconsolata" font-size="14.00" fill="#000000"> add: select_without</text>
</g>
<!-- block_6&#45;&gt;leaf_21 -->
<g id="edge21" class="edge">
<title>block_6&#45;&gt;leaf_21</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1011.8623,-5154.716C1004.1565,-4936.0938 929.0432,-2805.0287 919.4962,-2534.1689"/>
<polygon fill="#000000" stroke="#000000" points="922.9876,-2533.8582 919.1374,-2523.9877 915.9919,-2534.1049 922.9876,-2533.8582"/>
</g>
<!-- codeblock_22 -->
<g id="node23" class="node">
<title>codeblock_22</title>
<ellipse fill="none" stroke="#000000" cx="1101.5" cy="-2505.9045" rx="87.0948" ry="18"/>
<text text-anchor="middle" x="1101.5" y="-2501.7045" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 194&#45;252</text>
</g>
<!-- block_7&#45;&gt;codeblock_22 -->
<g id="edge22" class="edge">
<title>block_7&#45;&gt;codeblock_22</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1232.6045,-5154.716C1221.7836,-4936.0938 1116.3053,-2805.0287 1102.899,-2534.1689"/>
<polygon fill="#000000" stroke="#000000" points="1106.3852,-2533.8025 1102.395,-2523.9877 1099.3938,-2534.1486 1106.3852,-2533.8025"/>
</g>
<!-- leaf_24 -->
<g id="node25" class="node">
<title>leaf_24</title>
<polygon fill="none" stroke="#c0c0c0" points="1260.5,-2523.9045 1206.5,-2523.9045 1206.5,-2487.9045 1260.5,-2487.9045 1260.5,-2523.9045"/>
</g>
<!-- block_7&#45;&gt;leaf_24 -->
<g id="edge24" class="edge">
<title>block_7&#45;&gt;leaf_24</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1233.5,-5154.716C1233.5,-4936.0938 1233.5,-2805.0287 1233.5,-2534.1689"/>
<polygon fill="#000000" stroke="#000000" points="1237.0001,-2533.9877 1233.5,-2523.9877 1230.0001,-2533.9878 1237.0001,-2533.9877"/>
</g>
<!-- leaf_25 -->
<g id="node26" class="node">
<title>leaf_25</title>
<polygon fill="none" stroke="#c0c0c0" points="1708,-2525.2051 1279,-2525.2051 1279,-2486.6039 1708,-2486.6039 1708,-2525.2051"/>
<text text-anchor="middle" x="1493.5" y="-2510.1045" font-family="Inconsolata" font-size="14.00" fill="#000000"> similar to select, :pick returns a bare vector of Forests,</text>
<text text-anchor="middle" x="1493.5" y="-2494.7045" font-family="Inconsolata" font-size="14.00" fill="#000000"> rather than a flattened Forest. </text>
</g>
<!-- block_8&#45;&gt;leaf_25 -->
<g id="edge25" class="edge">
<title>block_8&#45;&gt;leaf_25</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1493.5,-5154.716C1493.5,-4936.4357 1493.5,-2811.6882 1493.5,-2535.4531"/>
<polygon fill="#000000" stroke="#000000" points="1497.0001,-2535.3805 1493.5,-2525.3806 1490.0001,-2535.3806 1497.0001,-2535.3805"/>
</g>
<!-- codeblock_26 -->
<g id="node27" class="node">
<title>codeblock_26</title>
<ellipse fill="none" stroke="#000000" cx="1813.5" cy="-2505.9045" rx="87.0948" ry="18"/>
<text text-anchor="middle" x="1813.5" y="-2501.7045" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 257&#45;273</text>
</g>
<!-- block_9&#45;&gt;codeblock_26 -->
<g id="edge26" class="edge">
<title>block_9&#45;&gt;codeblock_26</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1813.5,-5154.716C1813.5,-4936.0938 1813.5,-2805.0287 1813.5,-2534.1689"/>
<polygon fill="#000000" stroke="#000000" points="1817.0001,-2533.9877 1813.5,-2523.9877 1810.0001,-2533.9878 1817.0001,-2533.9877"/>
</g>
<!-- leaf_28 -->
<g id="node29" class="node">
<title>leaf_28</title>
<polygon fill="none" stroke="#c0c0c0" points="1972.5,-2523.9045 1918.5,-2523.9045 1918.5,-2487.9045 1972.5,-2487.9045 1972.5,-2523.9045"/>
</g>
<!-- block_9&#45;&gt;leaf_28 -->
<g id="edge28" class="edge">
<title>block_9&#45;&gt;leaf_28</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1814.3955,-5154.716C1825.2164,-4936.0938 1930.6947,-2805.0287 1944.101,-2534.1689"/>
<polygon fill="#000000" stroke="#000000" points="1947.6062,-2534.1486 1944.605,-2523.9877 1940.6148,-2533.8025 1947.6062,-2534.1486"/>
</g>
<!-- leaf_29 -->
<g id="node30" class="node">
<title>leaf_29</title>
<polygon fill="none" stroke="#c0c0c0" points="2328.5,-2525.2051 1990.5,-2525.2051 1990.5,-2486.6039 2328.5,-2486.6039 2328.5,-2525.2051"/>
<text text-anchor="middle" x="2159.5" y="-2510.1045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;returning a Node decorated with the original</text>
<text text-anchor="middle" x="2159.5" y="-2494.7045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;grammar and string.</text>
</g>
<!-- block_10&#45;&gt;leaf_29 -->
<g id="edge29" class="edge">
<title>block_10&#45;&gt;leaf_29</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2062.1649,-5154.716C2070.1859,-4936.4357 2148.2634,-2811.6882 2158.4142,-2535.4531"/>
<polygon fill="#000000" stroke="#000000" points="2161.9146,-2535.5024 2158.7843,-2525.3806 2154.9194,-2535.2452 2161.9146,-2535.5024"/>
</g>
<!-- codeblock_30 -->
<g id="node31" class="node">
<title>codeblock_30</title>
<ellipse fill="none" stroke="#000000" cx="2433.5" cy="-2505.9045" rx="87.0948" ry="18"/>
<text text-anchor="middle" x="2433.5" y="-2501.7045" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 278&#45;302</text>
</g>
<!-- block_11&#45;&gt;codeblock_30 -->
<g id="edge30" class="edge">
<title>block_11&#45;&gt;codeblock_30</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2433.5,-5154.716C2433.5,-4936.0938 2433.5,-2805.0287 2433.5,-2534.1689"/>
<polygon fill="#000000" stroke="#000000" points="2437.0001,-2533.9877 2433.5,-2523.9877 2430.0001,-2533.9878 2437.0001,-2533.9877"/>
</g>
<!-- leaf_32 -->
<g id="node33" class="node">
<title>leaf_32</title>
<polygon fill="none" stroke="#c0c0c0" points="2592.5,-2523.9045 2538.5,-2523.9045 2538.5,-2487.9045 2592.5,-2487.9045 2592.5,-2523.9045"/>
</g>
<!-- block_11&#45;&gt;leaf_32 -->
<g id="edge32" class="edge">
<title>block_11&#45;&gt;leaf_32</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2434.3955,-5154.716C2445.2164,-4936.0938 2550.6947,-2805.0287 2564.101,-2534.1689"/>
<polygon fill="#000000" stroke="#000000" points="2567.6062,-2534.1486 2564.605,-2523.9877 2560.6148,-2533.8025 2567.6062,-2534.1486"/>
</g>
<!-- leaf_33 -->
<g id="node34" class="node">
<title>leaf_33</title>
<polygon fill="none" stroke="#c0c0c0" points="2970,-2541.1049 2611,-2541.1049 2611,-2470.7041 2970,-2470.7041 2970,-2541.1049"/>
<text text-anchor="middle" x="2790.5" y="-2525.8045" font-family="Inconsolata" font-size="14.00" fill="#000000"> Generate a label for .dot diagrams.</text>
<text text-anchor="middle" x="2790.5" y="-2510.4045" font-family="Inconsolata" font-size="14.00" fill="#000000"> </text>
<text text-anchor="middle" x="2790.5" y="-2495.0045" font-family="Inconsolata" font-size="14.00" fill="#000000"> Defaults to returning the .id field of the Node.</text>
</g>
<!-- block_12&#45;&gt;leaf_33 -->
<g id="edge33" class="edge">
<title>block_12&#45;&gt;leaf_33</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2687.2056,-5154.716C2695.5717,-4940.1818 2775.7534,-2884.0568 2788.7301,-2551.2898"/>
<polygon fill="#000000" stroke="#000000" points="2792.2365,-2551.1924 2789.1289,-2541.0636 2785.2418,-2550.9196 2792.2365,-2551.1924"/>
</g>
<!-- codeblock_34 -->
<g id="node35" class="node">
<title>codeblock_34</title>
<ellipse fill="none" stroke="#000000" cx="3075.5" cy="-2505.9045" rx="87.0948" ry="18"/>
<text text-anchor="middle" x="3075.5" y="-2501.7045" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 309&#45;336</text>
</g>
<!-- block_13&#45;&gt;codeblock_34 -->
<g id="edge34" class="edge">
<title>block_13&#45;&gt;codeblock_34</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2952.4618,-5154.7181C2924.1782,-4982.0912 2714.9361,-3609.6465 3030.5,-2577.0045 3035.4257,-2560.886 3045.0517,-2544.8546 3054.1409,-2532.1058"/>
<polygon fill="#000000" stroke="#000000" points="3057.126,-2533.9569 3060.2832,-2523.8434 3051.5082,-2529.7806 3057.126,-2533.9569"/>
</g>
<!-- leaf_36 -->
<g id="node37" class="node">
<title>leaf_36</title>
<polygon fill="none" stroke="#c0c0c0" points="3234.5,-2523.9045 3180.5,-2523.9045 3180.5,-2487.9045 3234.5,-2487.9045 3234.5,-2523.9045"/>
</g>
<!-- block_13&#45;&gt;leaf_36 -->
<g id="edge36" class="edge">
<title>block_13&#45;&gt;leaf_36</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2953.1319,-5154.5154C2926.4445,-4945.2491 2689.4891,-3003.1718 3030.5,-2577.0045 3070.909,-2526.5047 3115.0965,-2572.6551 3171.5,-2541.0045 3176.3529,-2538.2813 3181.0213,-2534.7378 3185.2962,-2530.9513"/>
<polygon fill="#000000" stroke="#000000" points="3187.7427,-2533.4543 3192.5206,-2523.998 3182.8885,-2528.4108 3187.7427,-2533.4543"/>
</g>
<!-- leaf_16 -->
<g id="node17" class="node">
<title>leaf_16</title>
<polygon fill="none" stroke="#c0c0c0" points="387,-1415.503 0,-1415.503 0,-1019.3014 387,-1019.3014 387,-1415.503"/>
<text text-anchor="middle" x="193.5" y="-1400.5025" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;AST tools</text>
<text text-anchor="middle" x="193.5" y="-1385.1025" font-family="Inconsolata" font-size="14.00" fill="#000000">local lpeg = require &quot;lpeg&quot;</text>
<text text-anchor="middle" x="193.5" y="-1369.7024" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;local clu = require &quot;clu/prelude&quot;</text>
<text text-anchor="middle" x="193.5" y="-1338.3024" font-family="Inconsolata" font-size="14.00" fill="#000000">local u = require &quot;lib/util&quot;</text>
<text text-anchor="middle" x="193.5" y="-1306.9024" font-family="Inconsolata" font-size="14.00" fill="#000000">local ansi = require &quot;ansi&quot;</text>
<text text-anchor="middle" x="193.5" y="-1291.5024" font-family="Inconsolata" font-size="14.00" fill="#000000">local walker = require &quot;peg/walker&quot;</text>
<text text-anchor="middle" x="193.5" y="-1276.1023" font-family="Inconsolata" font-size="14.00" fill="#000000">local Forest = require &quot;peg/forest&quot;</text>
<text text-anchor="middle" x="193.5" y="-1260.7023" font-family="Inconsolata" font-size="14.00" fill="#000000">local cyan = tostring(ansi.cyan)</text>
<text text-anchor="middle" x="193.5" y="-1245.3023" font-family="Inconsolata" font-size="14.00" fill="#000000">local blue = tostring(ansi.blue)</text>
<text text-anchor="middle" x="193.5" y="-1229.9022" font-family="Inconsolata" font-size="14.00" fill="#000000">local magenta = tostring(ansi.magenta)</text>
<text text-anchor="middle" x="193.5" y="-1214.5022" font-family="Inconsolata" font-size="14.00" fill="#000000">local clear = tostring(ansi.clear)</text>
<text text-anchor="middle" x="193.5" y="-1199.1022" font-family="Inconsolata" font-size="14.00" fill="#000000">local green = tostring(ansi.green)</text>
<text text-anchor="middle" x="193.5" y="-1183.7021" font-family="Inconsolata" font-size="14.00" fill="#000000">local red = tostring(ansi.red)</text>
<text text-anchor="middle" x="193.5" y="-1168.3021" font-family="Inconsolata" font-size="14.00" fill="#000000">local grey = tostring(ansi.dim)..tostring(ansi.white)</text>
<text text-anchor="middle" x="193.5" y="-1088.9021" font-family="Inconsolata" font-size="14.00" fill="#000000">local function ast_range(node)</text>
<text text-anchor="middle" x="193.5" y="-1073.502" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local root = node:root()</text>
<text text-anchor="middle" x="193.5" y="-1058.102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local first, last, _ = &#160;root.index(node)</text>
<text text-anchor="middle" x="193.5" y="-1042.702" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return root.index, first, last</text>
<text text-anchor="middle" x="193.5" y="-1027.302" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
</g>
<!-- codeblock_15&#45;&gt;leaf_16 -->
<g id="edge16" class="edge">
<title>codeblock_15&#45;&gt;leaf_16</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M326.5916,-2487.6898C314.681,-2374.0094 249.9358,-1756.0517 215.3347,-1425.8027"/>
<polygon fill="#000000" stroke="#000000" points="218.7921,-1425.2128 214.2691,-1415.6319 211.8303,-1425.9422 218.7921,-1425.2128"/>
</g>
<!-- leaf_19 -->
<g id="node20" class="node">
<title>leaf_19</title>
<polygon fill="none" stroke="#c0c0c0" points="932,-2434.7067 405,-2434.7067 405,-.0978 932,-.0978 932,-2434.7067"/>
<text text-anchor="middle" x="668.5" y="-2419.6044" font-family="Inconsolata" font-size="14.00" fill="#000000">local function _ast_range(node)</text>
<text text-anchor="middle" x="668.5" y="-2404.2044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local root = node:root()</text>
<text text-anchor="middle" x="668.5" y="-2388.8044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return root.index, node.first, node.last</text>
<text text-anchor="middle" x="668.5" y="-2373.4043" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="668.5" y="-2342.0043" font-family="Inconsolata" font-size="14.00" fill="#000000">local c = { id = magenta,</text>
<text text-anchor="middle" x="668.5" y="-2326.6043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;range = grey,</text>
<text text-anchor="middle" x="668.5" y="-2311.2042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;str = red,</text>
<text text-anchor="middle" x="668.5" y="-2295.8042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;num = blue,</text>
<text text-anchor="middle" x="668.5" y="-2280.4042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;span = clear,</text>
<text text-anchor="middle" x="668.5" y="-2265.0042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;val = green,}</text>
<text text-anchor="middle" x="668.5" y="-2233.6041" font-family="Inconsolata" font-size="14.00" fill="#000000">local function node_pr(node, depth, str)</text>
<text text-anchor="middle" x="668.5" y="-2218.2041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if node.isnode then</text>
<text text-anchor="middle" x="668.5" y="-2202.8041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local phrase = &quot;&quot;</text>
<text text-anchor="middle" x="668.5" y="-2187.404" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local prefix = (&quot; &#160;&quot;):rep(depth)</text>
<text text-anchor="middle" x="668.5" y="-2172.004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if node.isrecursive then </text>
<text text-anchor="middle" x="668.5" y="-2156.604" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;phrase = red..&quot;*&quot;..prefix:sub(1,&#45;2)..clear</text>
<text text-anchor="middle" x="668.5" y="-2141.2039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;else </text>
<text text-anchor="middle" x="668.5" y="-2125.8039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;phrase = prefix</text>
<text text-anchor="middle" x="668.5" y="-2110.4039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-2095.0038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if node.last then </text>
<text text-anchor="middle" x="668.5" y="-2079.6038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;phrase = phrase..</text>
<text text-anchor="middle" x="668.5" y="-2064.2038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.id..node.id..&quot; &quot;..</text>
<text text-anchor="middle" x="668.5" y="-2048.8037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c.range..node.first..</text>
<text text-anchor="middle" x="668.5" y="-2033.4037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;&#45;&quot;..c.range..node.last..clear..&quot;\n&quot;</text>
<text text-anchor="middle" x="668.5" y="-2018.0037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-2002.6037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if node.val then</text>
<text text-anchor="middle" x="668.5" y="-1987.2036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;phrase = phrase..prefix..&#39;&quot;&#39;..c.val..node.val..clear..&#39;&quot;&#39;..&quot;\n&quot;</text>
<text text-anchor="middle" x="668.5" y="-1971.8036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end </text>
<text text-anchor="middle" x="668.5" y="-1956.4036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return phrase</text>
<text text-anchor="middle" x="668.5" y="-1941.0035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-1925.6035" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="668.5" y="-1878.2035" font-family="Inconsolata" font-size="14.00" fill="#000000">local function ast_tostring(ast, depth, og, phrase)</text>
<text text-anchor="middle" x="668.5" y="-1862.8034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local depth = depth or 0</text>
<text text-anchor="middle" x="668.5" y="-1847.4034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local og = og or ast.str</text>
<text text-anchor="middle" x="668.5" y="-1832.0034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local phrase = phrase or &quot;&quot;</text>
<text text-anchor="middle" x="668.5" y="-1816.6033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if ast.isnode then</text>
<text text-anchor="middle" x="668.5" y="-1801.2033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;phrase = phrase..node_pr(ast,depth,og)</text>
<text text-anchor="middle" x="668.5" y="-1785.8033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-1770.4032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i,v in ipairs(ast) do</text>
<text text-anchor="middle" x="668.5" y="-1755.0032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;phrase = ast_tostring(v,depth+1,og,phrase)</text>
<text text-anchor="middle" x="668.5" y="-1739.6032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-1724.2032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return phrase</text>
<text text-anchor="middle" x="668.5" y="-1708.8031" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="668.5" y="-1661.4031" font-family="Inconsolata" font-size="14.00" fill="#000000">local function ast_pr(ast)</text>
<text text-anchor="middle" x="668.5" y="-1646.0031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;io.write(ast_tostring(ast))</text>
<text text-anchor="middle" x="668.5" y="-1630.603" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="668.5" y="-1599.203" font-family="Inconsolata" font-size="14.00" fill="#000000">local function deepcopy(orig) &#45;&#45; from luafun</text>
<text text-anchor="middle" x="668.5" y="-1583.803" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local orig_type = type(orig)</text>
<text text-anchor="middle" x="668.5" y="-1568.4029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local copy</text>
<text text-anchor="middle" x="668.5" y="-1553.0029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if orig_type == &#39;table&#39; and orig.isnode then</text>
<text text-anchor="middle" x="668.5" y="-1537.6029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;copy = setmetatable({},getmetatable(orig))</text>
<text text-anchor="middle" x="668.5" y="-1522.2028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for orig_key, orig_value in next, orig, nil do</text>
<text text-anchor="middle" x="668.5" y="-1506.8028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;copy[deepcopy(orig_key)] = deepcopy(orig_value)</text>
<text text-anchor="middle" x="668.5" y="-1491.4028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-1476.0027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif orig_type ~= &quot;function&quot; then</text>
<text text-anchor="middle" x="668.5" y="-1460.6027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;copy = orig</text>
<text text-anchor="middle" x="668.5" y="-1445.2027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-1429.8027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return copy</text>
<text text-anchor="middle" x="668.5" y="-1414.4026" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="668.5" y="-1383.0026" font-family="Inconsolata" font-size="14.00" fill="#000000">local function ast_copy(ast)</text>
<text text-anchor="middle" x="668.5" y="-1367.6026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local clone = deepcopy(ast)</text>
<text text-anchor="middle" x="668.5" y="-1352.2025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return walker.walk_ast(clone)</text>
<text text-anchor="middle" x="668.5" y="-1336.8025" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="668.5" y="-1305.4025" font-family="Inconsolata" font-size="14.00" fill="#000000">local forest = {}</text>
<text text-anchor="middle" x="668.5" y="-1274.0024" font-family="Inconsolata" font-size="14.00" fill="#000000">local function select_node (ast, pred, catcher)</text>
<text text-anchor="middle" x="668.5" y="-1258.6024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = catcher or {}</text>
<text text-anchor="middle" x="668.5" y="-1243.2024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;catch = setmetatable(catch,Forest)</text>
<text text-anchor="middle" x="668.5" y="-1227.8023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if type(pred) == &quot;string&quot; then</text>
<text text-anchor="middle" x="668.5" y="-1212.4023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if ast.id == pred then </text>
<text text-anchor="middle" x="668.5" y="-1197.0023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch[#catch+1] = ast</text>
<text text-anchor="middle" x="668.5" y="-1181.6022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-1166.2022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for _,v in ipairs(ast) do</text>
<text text-anchor="middle" x="668.5" y="-1150.8022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch = select_node(v, pred, catch)</text>
<text text-anchor="middle" x="668.5" y="-1135.4022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-1120.0021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;elseif type(pred) == &quot;function&quot; then</text>
<text text-anchor="middle" x="668.5" y="-1104.6021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if pred(ast) then</text>
<text text-anchor="middle" x="668.5" y="-1089.2021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch[#catch+1] = ast</text>
<text text-anchor="middle" x="668.5" y="-1073.802" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-1058.402" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for _,v in ipairse(ast) do</text>
<text text-anchor="middle" x="668.5" y="-1043.002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch = select_node(v, pred, catch)</text>
<text text-anchor="middle" x="668.5" y="-1027.6019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-1012.2019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-996.8019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch &#160;&#160;</text>
<text text-anchor="middle" x="668.5" y="-981.4018" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="668.5" y="-950.0018" font-family="Inconsolata" font-size="14.00" fill="#000000">function forest.select(grove,id)</text>
<text text-anchor="middle" x="668.5" y="-934.6018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = setmetatable({},Forest)</text>
<text text-anchor="middle" x="668.5" y="-919.2017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i = 1, #grove do</text>
<text text-anchor="middle" x="668.5" y="-903.8017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local nursery = select_node(grove[i],id)</text>
<text text-anchor="middle" x="668.5" y="-888.4017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for j = 1, #nursery do</text>
<text text-anchor="middle" x="668.5" y="-873.0017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch[#catch+1] = nursery[1]</text>
<text text-anchor="middle" x="668.5" y="-857.6016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-842.2016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-826.8016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch </text>
<text text-anchor="middle" x="668.5" y="-811.4015" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="668.5" y="-780.0015" font-family="Inconsolata" font-size="14.00" fill="#000000">local function select_rule(ast,id)</text>
<text text-anchor="middle" x="668.5" y="-764.6015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = {}</text>
<text text-anchor="middle" x="668.5" y="-749.2014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if type(ast) == &quot;table&quot; and ast.isnode then</text>
<text text-anchor="middle" x="668.5" y="-733.8014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;catch = select_node(ast,id)</text>
<text text-anchor="middle" x="668.5" y="-718.4014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;elseif type(ast) == &quot;table&quot; and ast.isforest then</text>
<text text-anchor="middle" x="668.5" y="-703.0013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;catch = forest.select(ast,id)</text>
<text text-anchor="middle" x="668.5" y="-687.6013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;else error &quot;select: First argument must be of type Node or Forest&quot; end</text>
<text text-anchor="middle" x="668.5" y="-672.2013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch</text>
<text text-anchor="middle" x="668.5" y="-656.8012" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="668.5" y="-625.4012" font-family="Inconsolata" font-size="14.00" fill="#000000">local function select_with_node(ast,pred)</text>
<text text-anchor="middle" x="668.5" y="-610.0012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = setmetatable({},Forest)</text>
<text text-anchor="middle" x="668.5" y="-594.6012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local ndx, first, last = ast:range()</text>
<text text-anchor="middle" x="668.5" y="-579.2011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if type(pred) == &quot;string&quot; then</text>
<text text-anchor="middle" x="668.5" y="-563.8011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for i = first, last do</text>
<text text-anchor="middle" x="668.5" y="-548.4011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ndx[i].id == pred then</text>
<text text-anchor="middle" x="668.5" y="-533.001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch[#catch+1] = ndx[first]</text>
<text text-anchor="middle" x="668.5" y="-517.601" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-502.201" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-486.8009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;elseif type(pred) == &quot;function&quot; then</text>
<text text-anchor="middle" x="668.5" y="-471.4009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for i = first, last do</text>
<text text-anchor="middle" x="668.5" y="-456.0009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if pred(ndx[i]) then</text>
<text text-anchor="middle" x="668.5" y="-440.6008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch[#catch+1] = ndx[first]</text>
<text text-anchor="middle" x="668.5" y="-425.2008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-409.8008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-394.4007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-379.0007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch</text>
<text text-anchor="middle" x="668.5" y="-363.6007" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="668.5" y="-332.2007" font-family="Inconsolata" font-size="14.00" fill="#000000">function forest.select_with (ast,id)</text>
<text text-anchor="middle" x="668.5" y="-316.8006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = setmetatable({},Forest)</text>
<text text-anchor="middle" x="668.5" y="-301.4006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i = 1, #ast do</text>
<text text-anchor="middle" x="668.5" y="-286.0006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local nursery = select_with_node(ast[i],id)</text>
<text text-anchor="middle" x="668.5" y="-270.6005" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for j = 1, #nursery do</text>
<text text-anchor="middle" x="668.5" y="-255.2005" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;catch[#catch+1] = nursery[1]</text>
<text text-anchor="middle" x="668.5" y="-239.8005" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-224.4004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-209.0004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch</text>
<text text-anchor="middle" x="668.5" y="-193.6004" font-family="Inconsolata" font-size="14.00" fill="#000000">end </text>
<text text-anchor="middle" x="668.5" y="-162.2003" font-family="Inconsolata" font-size="14.00" fill="#000000">local function select_with(ast,id)</text>
<text text-anchor="middle" x="668.5" y="-146.8003" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = {}</text>
<text text-anchor="middle" x="668.5" y="-131.4003" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if type(ast) == &quot;table&quot; and ast.isnode then</text>
<text text-anchor="middle" x="668.5" y="-116.0002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;catch = select_with_node(ast,id)</text>
<text text-anchor="middle" x="668.5" y="-100.6002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;elseif type(ast) == &quot;table&quot; and ast.isforest then</text>
<text text-anchor="middle" x="668.5" y="-85.2002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;catch = forest.select_with(ast,id)</text>
<text text-anchor="middle" x="668.5" y="-69.8002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;else</text>
<text text-anchor="middle" x="668.5" y="-54.4001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;error &quot;with: First argument must be of type Node or Forest&quot; </text>
<text text-anchor="middle" x="668.5" y="-39.0001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="668.5" y="-23.6001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch</text>
<text text-anchor="middle" x="668.5" y="-8.2" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
</g>
<!-- codeblock_18&#45;&gt;leaf_19 -->
<g id="edge19" class="edge">
<title>codeblock_18&#45;&gt;leaf_19</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M668.5,-2487.6898C668.5,-2477.4309 668.5,-2463.0651 668.5,-2445.1746"/>
<polygon fill="#000000" stroke="#000000" points="672.0001,-2444.8765 668.5,-2434.8765 665.0001,-2444.8766 672.0001,-2444.8765"/>
</g>
<!-- leaf_23 -->
<g id="node24" class="node">
<title>leaf_23</title>
<polygon fill="none" stroke="#c0c0c0" points="1407,-1661.6039 950,-1661.6039 950,-773.2005 1407,-773.2005 1407,-1661.6039"/>
<text text-anchor="middle" x="1178.5" y="-1646.303" font-family="Inconsolata" font-size="14.00" fill="#000000">local function pick_tostring(table)</text>
<text text-anchor="middle" x="1178.5" y="-1630.903" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local phrase = &quot;&quot;</text>
<text text-anchor="middle" x="1178.5" y="-1615.503" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i,v in ipairs(table) do </text>
<text text-anchor="middle" x="1178.5" y="-1600.1029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;phrase = phrase..tostring(v)</text>
<text text-anchor="middle" x="1178.5" y="-1584.7029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="1178.5" y="-1569.3029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return phrase </text>
<text text-anchor="middle" x="1178.5" y="-1553.9029" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1178.5" y="-1522.5028" font-family="Inconsolata" font-size="14.00" fill="#000000">local function toks_tostring(table)</text>
<text text-anchor="middle" x="1178.5" y="-1507.1028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local phrase = &quot;[&quot;</text>
<text text-anchor="middle" x="1178.5" y="-1491.7028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i,v in ipairs(table) do</text>
<text text-anchor="middle" x="1178.5" y="-1476.3027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;phrase = phrase..</text>
<text text-anchor="middle" x="1178.5" y="-1460.9027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;grey..&quot;&#39;&quot;..clear..</text>
<text text-anchor="middle" x="1178.5" y="-1445.5027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tostring(v):gsub(&quot;\n&quot;,blue..&quot;\\n&quot;..clear)..</text>
<text text-anchor="middle" x="1178.5" y="-1430.1026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;grey..&quot;&#39;&quot;..red..&quot;,&quot;..clear</text>
<text text-anchor="middle" x="1178.5" y="-1414.7026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="1178.5" y="-1399.3026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return phrase..&quot;]&quot;..&quot;\n&quot;</text>
<text text-anchor="middle" x="1178.5" y="-1383.9025" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1178.5" y="-1352.5025" font-family="Inconsolata" font-size="14.00" fill="#000000">local function tokenize(ast)</text>
<text text-anchor="middle" x="1178.5" y="-1337.1025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if ast.tok then return ast.tok end</text>
<text text-anchor="middle" x="1178.5" y="-1321.7024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local ndx, first, last = ast:range()</text>
<text text-anchor="middle" x="1178.5" y="-1306.3024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local tokens = setmetatable({},{__tostring = toks_tostring})</text>
<text text-anchor="middle" x="1178.5" y="-1290.9024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i = first, last do &#160;&#160;&#160;&#45;&#45; reap leaves</text>
<text text-anchor="middle" x="1178.5" y="-1275.5024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if ndx[i].val then</text>
<text text-anchor="middle" x="1178.5" y="-1260.1023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tokens[#tokens+1] = ndx[i].val</text>
<text text-anchor="middle" x="1178.5" y="-1244.7023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ndx[i].val = nil</text>
<text text-anchor="middle" x="1178.5" y="-1229.3023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;elseif ndx[i].tok then</text>
<text text-anchor="middle" x="1178.5" y="-1213.9022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j = 1, #ndx[i].tok do</text>
<text text-anchor="middle" x="1178.5" y="-1198.5022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tokens[#tokens+1] = ndx[i].tok[j]</text>
<text text-anchor="middle" x="1178.5" y="-1183.1022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1178.5" y="-1167.7021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ndx[i].tok = nil</text>
<text text-anchor="middle" x="1178.5" y="-1152.3021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1178.5" y="-1136.9021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="1178.5" y="-1121.502" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i,v in ipairs(ast) do &#45;&#45; destroy children</text>
<text text-anchor="middle" x="1178.5" y="-1106.102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;ast[i] = nil </text>
<text text-anchor="middle" x="1178.5" y="-1090.702" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="1178.5" y="-1075.302" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;ast.tok = tokens</text>
<text text-anchor="middle" x="1178.5" y="-1059.9019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;walker.walk_ast(ast:root()) &#45;&#45; this should be triggered by </text>
<text text-anchor="middle" x="1178.5" y="-1044.5019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; next index operation</text>
<text text-anchor="middle" x="1178.5" y="-1029.1019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return tokens</text>
<text text-anchor="middle" x="1178.5" y="-1013.7018" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1178.5" y="-982.3018" font-family="Inconsolata" font-size="14.00" fill="#000000">local function flatten(ast)</text>
<text text-anchor="middle" x="1178.5" y="-966.9018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local phrase = &quot;&quot;</text>
<text text-anchor="middle" x="1178.5" y="-951.5017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;ast:tokens()</text>
<text text-anchor="middle" x="1178.5" y="-936.1017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if ast.tok then</text>
<text text-anchor="middle" x="1178.5" y="-920.7017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for i = 1, #ast.tok do</text>
<text text-anchor="middle" x="1178.5" y="-905.3016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;phrase = phrase..ast.tok[i]</text>
<text text-anchor="middle" x="1178.5" y="-889.9016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1178.5" y="-874.5016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;else error &quot;auto&#45;tokenizing has failed&quot;</text>
<text text-anchor="middle" x="1178.5" y="-859.1015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="1178.5" y="-843.7015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;ast.flat = phrase</text>
<text text-anchor="middle" x="1178.5" y="-828.3015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return phrase</text>
<text text-anchor="middle" x="1178.5" y="-812.9015" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1178.5" y="-781.5014" font-family="Inconsolata" font-size="14.00" fill="#000000">function forest.pick(ast,id)</text>
</g>
<!-- codeblock_22&#45;&gt;leaf_23 -->
<g id="edge23" class="edge">
<title>codeblock_22&#45;&gt;leaf_23</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1102.5885,-2487.6898C1107.9165,-2398.5317 1131.781,-1999.189 1151.3495,-1671.7324"/>
<polygon fill="#000000" stroke="#000000" points="1154.8535,-1671.7695 1151.9563,-1661.5785 1147.8659,-1671.3519 1154.8535,-1671.7695"/>
</g>
<!-- leaf_27 -->
<g id="node28" class="node">
<title>leaf_27</title>
<polygon fill="none" stroke="#c0c0c0" points="2052.5,-1337.7027 1574.5,-1337.7027 1574.5,-1097.1018 2052.5,-1097.1018 2052.5,-1337.7027"/>
<text text-anchor="middle" x="1813.5" y="-1322.6024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = setmetatable({},{[&quot;__tostring&quot;] = pick_tostring})</text>
<text text-anchor="middle" x="1813.5" y="-1307.2024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i = 1, #ast do</text>
<text text-anchor="middle" x="1813.5" y="-1291.8023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;catch[#catch+1] = select_node(ast[i],id)</text>
<text text-anchor="middle" x="1813.5" y="-1276.4023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="1813.5" y="-1261.0023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return catch </text>
<text text-anchor="middle" x="1813.5" y="-1245.6022" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1813.5" y="-1214.2022" font-family="Inconsolata" font-size="14.00" fill="#000000">local function walk(ast)</text>
<text text-anchor="middle" x="1813.5" y="-1198.8022" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1813.5" y="-1167.4022" font-family="Inconsolata" font-size="14.00" fill="#000000">Forest[&quot;select&quot;] = select_rule</text>
<text text-anchor="middle" x="1813.5" y="-1152.0021" font-family="Inconsolata" font-size="14.00" fill="#000000">Forest[&quot;with&quot;] &#160;&#160;= forest.select_with</text>
<text text-anchor="middle" x="1813.5" y="-1136.6021" font-family="Inconsolata" font-size="14.00" fill="#000000">Forest[&quot;pick&quot;] &#160;&#160;= forest.pick</text>
<text text-anchor="middle" x="1813.5" y="-1105.2021" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Parses a string with a given grammar,</text>
</g>
<!-- codeblock_26&#45;&gt;leaf_27 -->
<g id="edge27" class="edge">
<title>codeblock_26&#45;&gt;leaf_27</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1813.5,-2487.6898C1813.5,-2364.2921 1813.5,-1646.7221 1813.5,-1347.9157"/>
<polygon fill="#000000" stroke="#000000" points="1817.0001,-1347.8976 1813.5,-1337.8977 1810.0001,-1347.8977 1817.0001,-1347.8976"/>
</g>
<!-- leaf_31 -->
<g id="node32" class="node">
<title>leaf_31</title>
<polygon fill="none" stroke="#c0c0c0" points="2700.5,-1398.603 2166.5,-1398.603 2166.5,-1036.2014 2700.5,-1036.2014 2700.5,-1398.603"/>
<text text-anchor="middle" x="2433.5" y="-1383.3026" font-family="Inconsolata" font-size="14.00" fill="#000000">local function parse(grammar, str)</text>
<text text-anchor="middle" x="2433.5" y="-1367.9025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if grammar == nil then</text>
<text text-anchor="middle" x="2433.5" y="-1352.5025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;error &quot;grammar failed to generate&quot;</text>
<text text-anchor="middle" x="2433.5" y="-1337.1025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-1321.7024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#45;&#45; grammar, input, starting point, input for Carg(1), root node Carg(2)</text>
<text text-anchor="middle" x="2433.5" y="-1306.3024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local root = {} &#45;&#45; closed under parse</text>
<text text-anchor="middle" x="2433.5" y="-1290.9024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local root_fn = function()</text>
<text text-anchor="middle" x="2433.5" y="-1275.5024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local root_node = root &#45;&#45; closed under root fn </text>
<text text-anchor="middle" x="2433.5" y="-1260.1023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return root_node</text>
<text text-anchor="middle" x="2433.5" y="-1244.7023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-1229.3023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local ast = lpeg.match(grammar, str, 1, str, root_fn)</text>
<text text-anchor="middle" x="2433.5" y="-1213.9022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if type(ast) == &quot;table&quot; then</text>
<text text-anchor="middle" x="2433.5" y="-1198.5022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for k, v in pairs(ast) do</text>
<text text-anchor="middle" x="2433.5" y="-1183.1022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root[k] = v</text>
<text text-anchor="middle" x="2433.5" y="-1167.7021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end &#160;&#160;</text>
<text text-anchor="middle" x="2433.5" y="-1152.3021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;root.str = str</text>
<text text-anchor="middle" x="2433.5" y="-1136.9021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;root.grammar = grammar</text>
<text text-anchor="middle" x="2433.5" y="-1121.502" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;setmetatable(root,getmetatable(ast))</text>
<text text-anchor="middle" x="2433.5" y="-1106.102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return walker.walk_ast(root)</text>
<text text-anchor="middle" x="2433.5" y="-1090.702" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;else</text>
<text text-anchor="middle" x="2433.5" y="-1075.302" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;error &quot;lpeg did not match grammar&quot;</text>
<text text-anchor="middle" x="2433.5" y="-1059.9019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-1044.5019" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
</g>
<!-- codeblock_30&#45;&gt;leaf_31 -->
<g id="edge31" class="edge">
<title>codeblock_30&#45;&gt;leaf_31</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2433.5,-2487.6898C2433.5,-2372.0038 2433.5,-1734.0893 2433.5,-1408.5958"/>
<polygon fill="#000000" stroke="#000000" points="2437.0001,-1408.5808 2433.5,-1398.5809 2430.0001,-1408.5809 2437.0001,-1408.5808"/>
</g>
<!-- leaf_35 -->
<g id="node36" class="node">
<title>leaf_35</title>
<polygon fill="none" stroke="#c0c0c0" points="3258.5,-1422.0032 2892.5,-1422.0032 2892.5,-1012.8013 3258.5,-1012.8013 3258.5,-1422.0032"/>
<text text-anchor="middle" x="3075.5" y="-1407.0026" font-family="Inconsolata" font-size="14.00" fill="#000000">local function dotLabel(ast)</text>
<text text-anchor="middle" x="3075.5" y="-1391.6026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return ast.id</text>
<text text-anchor="middle" x="3075.5" y="-1376.2025" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3075.5" y="-1344.8025" font-family="Inconsolata" font-size="14.00" fill="#000000">local function toMarkdown(ast)</text>
<text text-anchor="middle" x="3075.5" y="-1329.4025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;u.freeze(&quot;No toMarkdown method for &quot; .. ast.id)</text>
<text text-anchor="middle" x="3075.5" y="-1314.0024" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3075.5" y="-1282.6024" font-family="Inconsolata" font-size="14.00" fill="#000000">return {</text>
<text text-anchor="middle" x="3075.5" y="-1267.2024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;select = select_rule,</text>
<text text-anchor="middle" x="3075.5" y="-1251.8023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;__select_with_node = select_with_node,</text>
<text text-anchor="middle" x="3075.5" y="-1236.4023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;__select_node = select_node, </text>
<text text-anchor="middle" x="3075.5" y="-1221.0023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;with = select_with ,</text>
<text text-anchor="middle" x="3075.5" y="-1205.6022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;tostring = ast_tostring,</text>
<text text-anchor="middle" x="3075.5" y="-1190.2022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;pr = ast_pr,</text>
<text text-anchor="middle" x="3075.5" y="-1174.8022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;lift = walker.lift,</text>
<text text-anchor="middle" x="3075.5" y="-1159.4022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#45;&#45;root = root,</text>
<text text-anchor="middle" x="3075.5" y="-1144.0021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;tokenize = tokenize,</text>
<text text-anchor="middle" x="3075.5" y="-1128.6021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;flatten = flatten,</text>
<text text-anchor="middle" x="3075.5" y="-1113.2021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;range= ast_range,</text>
<text text-anchor="middle" x="3075.5" y="-1097.802" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;copy = ast_copy,</text>
<text text-anchor="middle" x="3075.5" y="-1082.402" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;walk = walker.walk_ast,</text>
<text text-anchor="middle" x="3075.5" y="-1067.002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;dotLabel = dotLabel,</text>
<text text-anchor="middle" x="3075.5" y="-1051.6019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;toMarkdown = toMarkdown,</text>
<text text-anchor="middle" x="3075.5" y="-1036.2019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;parse = parse</text>
<text text-anchor="middle" x="3075.5" y="-1020.8019" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
</g>
<!-- codeblock_34&#45;&gt;leaf_35 -->
<g id="edge35" class="edge">
<title>codeblock_34&#45;&gt;leaf_35</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3075.5,-2487.6898C3075.5,-2374.7663 3075.5,-1764.2579 3075.5,-1432.4369"/>
<polygon fill="#000000" stroke="#000000" points="3079.0001,-1432.2143 3075.5,-1422.2144 3072.0001,-1432.2144 3079.0001,-1432.2143"/>
</g>
</g>
</svg>