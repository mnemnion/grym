<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: hierarchy Pages: 1 -->
<svg width="621pt" height="2526pt"
 viewBox="0.00 0.00 621.00 2525.60" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 2521.6039)">
<title>hierarchy</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-2521.6039 617,-2521.6039 617,4 -4,4"/>
<!-- doc_0 -->
<g id="node1" class="node">
<title>doc_0</title>
<ellipse fill="none" stroke="#000000" cx="104" cy="-2499.6039" rx="46.9581" ry="18"/>
<text text-anchor="middle" x="104" y="-2495.4039" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">doc &#45; 150</text>
</g>
<!-- section_1 -->
<g id="node2" class="node">
<title>section_1</title>
<ellipse fill="none" stroke="#000000" cx="104" cy="-2427.6039" rx="65.8187" ry="18"/>
<text text-anchor="middle" x="104" y="-2423.4039" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 1&#45;150</text>
</g>
<!-- doc_0&#45;&gt;section_1 -->
<g id="edge1" class="edge">
<title>doc_0&#45;&gt;section_1</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M104,-2481.4352C104,-2473.7348 104,-2464.5782 104,-2456.0205"/>
<polygon fill="#000000" stroke="#000000" points="107.5001,-2456.0171 104,-2446.0171 100.5001,-2456.0172 107.5001,-2456.0171"/>
</g>
<!-- header_2 -->
<g id="node3" class="node">
<title>header_2</title>
<ellipse fill="none" stroke="#000000" cx="27" cy="-2355.6039" rx="27" ry="18"/>
<text text-anchor="middle" x="27" y="-2351.4039" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">0 : </text>
</g>
<!-- section_1&#45;&gt;header_2 -->
<g id="edge2" class="edge">
<title>section_1&#45;&gt;header_2</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M85.3604,-2410.1747C74.8008,-2400.3007 61.4962,-2387.8601 50.258,-2377.3516"/>
<polygon fill="#000000" stroke="#000000" points="52.5617,-2374.7139 42.8669,-2370.4405 47.7807,-2379.8269 52.5617,-2374.7139"/>
</g>
<!-- prose_3 -->
<g id="node4" class="node">
<title>prose_3</title>
<ellipse fill="none" stroke="#000000" cx="104" cy="-2355.6039" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="104" y="-2351.4039" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_1&#45;&gt;prose_3 -->
<g id="edge3" class="edge">
<title>section_1&#45;&gt;prose_3</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M104,-2409.4352C104,-2401.7348 104,-2392.5782 104,-2384.0205"/>
<polygon fill="#000000" stroke="#000000" points="107.5001,-2384.0171 104,-2374.0171 100.5001,-2384.0172 107.5001,-2384.0171"/>
</g>
<!-- codeblock_4 -->
<g id="node5" class="node">
<title>codeblock_4</title>
<ellipse fill="none" stroke="#000000" cx="317" cy="-2355.6039" rx="77.4211" ry="18"/>
<text text-anchor="middle" x="317" y="-2351.4039" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 2&#45;151</text>
</g>
<!-- section_1&#45;&gt;codeblock_4 -->
<g id="edge4" class="edge">
<title>section_1&#45;&gt;codeblock_4</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M145.5742,-2413.5506C179.2486,-2402.1677 226.9272,-2386.051 263.4563,-2373.7031"/>
<polygon fill="#000000" stroke="#000000" points="264.6116,-2377.0073 272.9642,-2370.4892 262.3699,-2370.3759 264.6116,-2377.0073"/>
</g>
<!-- leaf_5 -->
<g id="node6" class="node">
<title>leaf_5</title>
<polygon fill="none" stroke="#c0c0c0" points="89,-1168.8019 35,-1168.8019 35,-1132.8019 89,-1132.8019 89,-1168.8019"/>
</g>
<!-- prose_3&#45;&gt;leaf_5 -->
<g id="edge5" class="edge">
<title>prose_3&#45;&gt;leaf_5</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M101.6421,-2337.6365C100.3561,-2327.1473 98.8561,-2313.6473 98,-2301.6039 66.2559,-1855.0333 62.5014,-1309.0003 62.0589,-1179.3632"/>
<polygon fill="#000000" stroke="#000000" points="65.5581,-1179.0914 62.028,-1169.102 58.5582,-1179.1125 65.5581,-1179.0914"/>
</g>
<!-- leaf_6 -->
<g id="node7" class="node">
<title>leaf_6</title>
<polygon fill="none" stroke="#c0c0c0" points="613,-2301.4058 107,-2301.4058 107,-.198 613,-.198 613,-2301.4058"/>
<text text-anchor="middle" x="360" y="-2286.4039" font-family="Inconsolata" font-size="14.00" fill="#000000">local L = require( &quot;lpeg&quot; )</text>
<text text-anchor="middle" x="360" y="-2255.0038" font-family="Inconsolata" font-size="14.00" fill="#000000">local assert = assert</text>
<text text-anchor="middle" x="360" y="-2239.6038" font-family="Inconsolata" font-size="14.00" fill="#000000">local string, io = assert( string ), assert( io )</text>
<text text-anchor="middle" x="360" y="-2224.2038" font-family="Inconsolata" font-size="14.00" fill="#000000">local V = string.sub( assert( _VERSION ), &#45;4 )</text>
<text text-anchor="middle" x="360" y="-2208.8037" font-family="Inconsolata" font-size="14.00" fill="#000000">local _G = assert( _G )</text>
<text text-anchor="middle" x="360" y="-2193.4037" font-family="Inconsolata" font-size="14.00" fill="#000000">local error = assert( error )</text>
<text text-anchor="middle" x="360" y="-2178.0037" font-family="Inconsolata" font-size="14.00" fill="#000000">local pairs = assert( pairs )</text>
<text text-anchor="middle" x="360" y="-2162.6037" font-family="Inconsolata" font-size="14.00" fill="#000000">local next = assert( next )</text>
<text text-anchor="middle" x="360" y="-2147.2036" font-family="Inconsolata" font-size="14.00" fill="#000000">local type = assert( type )</text>
<text text-anchor="middle" x="360" y="-2131.8036" font-family="Inconsolata" font-size="14.00" fill="#000000">local tostring = assert( tostring )</text>
<text text-anchor="middle" x="360" y="-2116.4036" font-family="Inconsolata" font-size="14.00" fill="#000000">local setmetatable = assert( setmetatable )</text>
<text text-anchor="middle" x="360" y="-2101.0035" font-family="Inconsolata" font-size="14.00" fill="#000000">local setfenv = setfenv</text>
<text text-anchor="middle" x="360" y="-2085.6035" font-family="Inconsolata" font-size="14.00" fill="#000000">local getfenv = getfenv</text>
<text text-anchor="middle" x="360" y="-2070.2035" font-family="Inconsolata" font-size="14.00" fill="#000000">if V == &quot; 5.1&quot; then</text>
<text text-anchor="middle" x="360" y="-2054.8034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;assert( setfenv )</text>
<text text-anchor="middle" x="360" y="-2039.4034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;assert( getfenv )</text>
<text text-anchor="middle" x="360" y="-2024.0034" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="360" y="-1976.6033" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; module table</text>
<text text-anchor="middle" x="360" y="-1961.2033" font-family="Inconsolata" font-size="14.00" fill="#000000">local epnf = {}</text>
<text text-anchor="middle" x="360" y="-1913.8033" font-family="Inconsolata" font-size="14.00" fill="#000000">local function make_ast_node( id, pos, t, pos_b, str )</text>
<text text-anchor="middle" x="360" y="-1898.4032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;t.id = id</text>
<text text-anchor="middle" x="360" y="-1883.0032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;t.pos = pos</text>
<text text-anchor="middle" x="360" y="-1867.6032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;t.pos_b = pos_b</text>
<text text-anchor="middle" x="360" y="-1852.2032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;t.str = string.sub(str,pos, pos_b &#45; &#160;&#160;1)</text>
<text text-anchor="middle" x="360" y="-1820.8031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;return t</text>
<text text-anchor="middle" x="360" y="-1805.4031" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="360" y="-1758.0031" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; some useful/common lpeg patterns</text>
<text text-anchor="middle" x="360" y="-1742.603" font-family="Inconsolata" font-size="14.00" fill="#000000">local Cp = L.Cp</text>
<text text-anchor="middle" x="360" y="-1727.203" font-family="Inconsolata" font-size="14.00" fill="#000000">local Cc = L.Cc</text>
<text text-anchor="middle" x="360" y="-1711.803" font-family="Inconsolata" font-size="14.00" fill="#000000">local Ct = L.Ct</text>
<text text-anchor="middle" x="360" y="-1696.4029" font-family="Inconsolata" font-size="14.00" fill="#000000">local L_Carg_1 = L.Carg( 1 )</text>
<text text-anchor="middle" x="360" y="-1649.0029" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; setup an environment where you can easily define lpeg grammars</text>
<text text-anchor="middle" x="360" y="-1633.6029" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; with lots of syntax sugar</text>
<text text-anchor="middle" x="360" y="-1618.2028" font-family="Inconsolata" font-size="14.00" fill="#000000">function epnf.define( func, g, e )</text>
<text text-anchor="middle" x="360" y="-1602.8028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;g = g or {}</text>
<text text-anchor="middle" x="360" y="-1587.4028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;if e == nil then</text>
<text text-anchor="middle" x="360" y="-1572.0027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;e = V == &quot; 5.1&quot; and getfenv( func ) or _G</text>
<text text-anchor="middle" x="360" y="-1556.6027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;end</text>
<text text-anchor="middle" x="360" y="-1541.2027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;local suppressed = {}</text>
<text text-anchor="middle" x="360" y="-1525.8027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;local env = {}</text>
<text text-anchor="middle" x="360" y="-1510.4026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;local env_index = {</text>
<text text-anchor="middle" x="360" y="-1495.0026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;START = function( name ) g[ 1 ] = name end,</text>
<text text-anchor="middle" x="360" y="-1479.6026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;SUPPRESS = function( ... )</text>
<text text-anchor="middle" x="360" y="-1464.2025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;suppressed = {}</text>
<text text-anchor="middle" x="360" y="-1448.8025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for i = 1, select( &#39;#&#39;, ... ) do</text>
<text text-anchor="middle" x="360" y="-1433.4025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;suppressed[ select( i, ... ) ] = true</text>
<text text-anchor="middle" x="360" y="-1418.0024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="360" y="-1402.6024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end,</text>
<text text-anchor="middle" x="360" y="-1387.2024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="360" y="-1355.8023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;setmetatable( env_index, { __index = e } )</text>
<text text-anchor="middle" x="360" y="-1340.4023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;setmetatable( env, {</text>
<text text-anchor="middle" x="360" y="-1325.0023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;__index = env_index,</text>
<text text-anchor="middle" x="360" y="-1309.6022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;__newindex = function( _, name, val )</text>
<text text-anchor="middle" x="360" y="-1294.2022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if suppressed[ name ] then</text>
<text text-anchor="middle" x="360" y="-1278.8022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;g[ name ] = val</text>
<text text-anchor="middle" x="360" y="-1263.4022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="360" y="-1248.0021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;g[ name ] = (Cc( name ) </text>
<text text-anchor="middle" x="360" y="-1232.6021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* Cp() </text>
<text text-anchor="middle" x="360" y="-1217.2021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* Ct( val )</text>
<text text-anchor="middle" x="360" y="-1201.802" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* Cp()</text>
<text text-anchor="middle" x="360" y="-1186.402" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* L_Carg_1) / make_ast_node</text>
<text text-anchor="middle" x="360" y="-1171.002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="360" y="-1155.6019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="360" y="-1140.2019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;} )</text>
<text text-anchor="middle" x="360" y="-1124.8019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#45;&#45; call passed function with custom environment (5.1&#45; and 5.2&#45;style)</text>
<text text-anchor="middle" x="360" y="-1109.4018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;if V == &quot; 5.1&quot; then</text>
<text text-anchor="middle" x="360" y="-1094.0018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;setfenv( func, env )</text>
<text text-anchor="middle" x="360" y="-1078.6018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;end</text>
<text text-anchor="middle" x="360" y="-1063.2017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;func( env )</text>
<text text-anchor="middle" x="360" y="-1047.8017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;assert( g[ 1 ] and g[ g[ 1 ] ], &quot;no start rule defined&quot; )</text>
<text text-anchor="middle" x="360" y="-1032.4017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;return g</text>
<text text-anchor="middle" x="360" y="-1017.0017" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="360" y="-969.6016" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; apply a given grammar to a string and return the ast. also allows</text>
<text text-anchor="middle" x="360" y="-954.2016" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; to set the name of the string for error messages</text>
<text text-anchor="middle" x="360" y="-938.8016" font-family="Inconsolata" font-size="14.00" fill="#000000">function epnf.parse( g, name, input, ... )</text>
<text text-anchor="middle" x="360" y="-923.4015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;return L.match( L.P( g ), input, 1, name, ... ), name, input</text>
<text text-anchor="middle" x="360" y="-908.0015" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="360" y="-860.6015" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; apply a given grammar to the contents of a file and return the ast</text>
<text text-anchor="middle" x="360" y="-845.2014" font-family="Inconsolata" font-size="14.00" fill="#000000">function epnf.parsefile( g, fname, ... )</text>
<text text-anchor="middle" x="360" y="-829.8014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;local f = assert( io.open( fname, &quot;r&quot; ) )</text>
<text text-anchor="middle" x="360" y="-814.4014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;local a,n,i = epnf.parse( g, fname, assert( f:read&quot;*a&quot; ), ... )</text>
<text text-anchor="middle" x="360" y="-799.0013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;f:close()</text>
<text text-anchor="middle" x="360" y="-783.6013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;return a,n,i</text>
<text text-anchor="middle" x="360" y="-768.2013" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="360" y="-720.8012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; apply a given grammar to a string and return the ast. automatically</text>
<text text-anchor="middle" x="360" y="-705.4012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; picks a sensible name for error messages</text>
<text text-anchor="middle" x="360" y="-690.0012" font-family="Inconsolata" font-size="14.00" fill="#000000">function epnf.parsestring( g, str, ... )</text>
<text text-anchor="middle" x="360" y="-674.6012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;local s = string.sub( str, 1, 20 )</text>
<text text-anchor="middle" x="360" y="-659.2011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;if #s &lt; #str then s = s .. &quot;...&quot; end</text>
<text text-anchor="middle" x="360" y="-643.8011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;local name = &quot;[\&quot;&quot; .. string.gsub( s, &quot;\n&quot;, &quot;\\n&quot; ) .. &quot;\&quot;]&quot;</text>
<text text-anchor="middle" x="360" y="-628.4011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;return epnf.parse( g, name, str, ... )</text>
<text text-anchor="middle" x="360" y="-613.001" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="360" y="-565.601" font-family="Inconsolata" font-size="14.00" fill="#000000">local function write( ... ) return io.stderr:write( ... ) end</text>
<text text-anchor="middle" x="360" y="-550.201" font-family="Inconsolata" font-size="14.00" fill="#000000">local function dump_ast( node, prefix )</text>
<text text-anchor="middle" x="360" y="-534.8009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;if type( node ) == &quot;table&quot; then</text>
<text text-anchor="middle" x="360" y="-519.4009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;write( &quot;{&quot; )</text>
<text text-anchor="middle" x="360" y="-504.0009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if next( node ) ~= nil then</text>
<text text-anchor="middle" x="360" y="-488.6008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;write( &quot;\n&quot; )</text>
<text text-anchor="middle" x="360" y="-473.2008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if type( node.id ) == &quot;string&quot; and</text>
<text text-anchor="middle" x="360" y="-457.8008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;type( node.pos ) == &quot;number&quot; then</text>
<text text-anchor="middle" x="360" y="-442.4007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;write( prefix, &quot; &#160;id = &quot;, node.id,</text>
<text text-anchor="middle" x="360" y="-427.0007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;, &#160;pos = &quot;, tostring( node.pos ), &quot;\n&quot; )</text>
<text text-anchor="middle" x="360" y="-411.6007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="360" y="-396.2007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for k,v in pairs( node ) do</text>
<text text-anchor="middle" x="360" y="-380.8006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if k ~= &quot;id&quot; and k ~= &quot;pos&quot; then</text>
<text text-anchor="middle" x="360" y="-365.4006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write( prefix, &quot; &#160;&quot;, tostring( k ), &quot; = &quot; )</text>
<text text-anchor="middle" x="360" y="-350.0006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dump_ast( v, prefix..&quot; &#160;&quot; )</text>
<text text-anchor="middle" x="360" y="-334.6005" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="360" y="-319.2005" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="360" y="-303.8005" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="360" y="-288.4004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;write( prefix, &quot;}\n&quot; )</text>
<text text-anchor="middle" x="360" y="-273.0004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;else</text>
<text text-anchor="middle" x="360" y="-257.6004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;write( tostring( node ), &quot;\n&quot; )</text>
<text text-anchor="middle" x="360" y="-242.2003" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;end</text>
<text text-anchor="middle" x="360" y="-226.8003" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="360" y="-195.4003" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; write a string representation of the given ast to stderr for</text>
<text text-anchor="middle" x="360" y="-180.0002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; debugging</text>
<text text-anchor="middle" x="360" y="-164.6002" font-family="Inconsolata" font-size="14.00" fill="#000000">function epnf.dumpast( node )</text>
<text text-anchor="middle" x="360" y="-149.2002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;return dump_ast( node, &quot;&quot; )</text>
<text text-anchor="middle" x="360" y="-133.8002" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="360" y="-86.4001" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; export a function for reporting errors during ast validation</text>
<text text-anchor="middle" x="360" y="-71.0001" font-family="Inconsolata" font-size="14.00" fill="#000000">epnf.raise = raise_error</text>
<text text-anchor="middle" x="360" y="-23.6001" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; return module table</text>
<text text-anchor="middle" x="360" y="-8.2" font-family="Inconsolata" font-size="14.00" fill="#000000">return epnf</text>
</g>
<!-- codeblock_4&#45;&gt;leaf_6 -->
<g id="edge6" class="edge">
<title>codeblock_4&#45;&gt;leaf_6</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M317.6582,-2337.1614C317.9004,-2330.3748 318.2058,-2321.8176 318.5683,-2311.6621"/>
<polygon fill="#000000" stroke="#000000" points="322.0741,-2311.5597 318.9331,-2301.4412 315.0785,-2311.31 322.0741,-2311.5597"/>
</g>
</g>
</svg>