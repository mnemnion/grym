<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: hierarchy Pages: 1 -->
<svg width="1578pt" height="1272pt"
 viewBox="0.00 0.00 1577.51 1272.40" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1268.4021)">
<title>hierarchy</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-1268.4021 1573.5071,-1268.4021 1573.5071,4 -4,4"/>
<!-- doc_0 -->
<g id="node1" class="node">
<title>doc_0</title>
<ellipse fill="none" stroke="#000000" cx="65.0071" cy="-1246.4021" rx="46.1547" ry="18"/>
<text text-anchor="middle" x="65.0071" y="-1242.2021" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">doc &#45; 118</text>
</g>
<!-- section_1 -->
<g id="node2" class="node">
<title>section_1</title>
<ellipse fill="none" stroke="#000000" cx="65.0071" cy="-632.201" rx="65.0143" ry="18"/>
<text text-anchor="middle" x="65.0071" y="-628.001" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 1&#45;118</text>
</g>
<!-- doc_0&#45;&gt;section_1 -->
<g id="edge1" class="edge">
<title>doc_0&#45;&gt;section_1</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M65.0071,-1228.3528C65.0071,-1141.5638 65.0071,-766.9863 65.0071,-660.5223"/>
<polygon fill="#000000" stroke="#000000" points="68.5072,-660.2512 65.0071,-650.2512 61.5072,-660.2513 68.5072,-660.2512"/>
</g>
<!-- header_2 -->
<g id="node3" class="node">
<title>header_2</title>
<ellipse fill="none" stroke="#000000" cx="65.0071" cy="-18" rx="27" ry="18"/>
<text text-anchor="middle" x="65.0071" y="-13.8" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">0 : </text>
</g>
<!-- section_1&#45;&gt;header_2 -->
<g id="edge2" class="edge">
<title>section_1&#45;&gt;header_2</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M65.0071,-614.1518C65.0071,-527.3628 65.0071,-152.7853 65.0071,-46.3213"/>
<polygon fill="#000000" stroke="#000000" points="68.5072,-46.0502 65.0071,-36.0502 61.5072,-46.0502 68.5072,-46.0502"/>
</g>
<!-- codeblock_3 -->
<g id="node4" class="node">
<title>codeblock_3</title>
<ellipse fill="none" stroke="#000000" cx="422.0071" cy="-1246.4021" rx="59.5308" ry="18"/>
<text text-anchor="middle" x="422.0071" y="-1242.2021" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">codeblock_3</text>
</g>
<!-- leaf_6 -->
<g id="node5" class="node">
<title>leaf_6</title>
<polygon fill="none" stroke="#c0c0c0" points="696.0071,-1192.6032 148.0071,-1192.6032 148.0071,-71.7989 696.0071,-71.7989 696.0071,-1192.6032"/>
<text text-anchor="middle" x="422.0071" y="-1177.2021" font-family="Inconsolata" font-size="14.00" fill="#000000">local lpeg = require &quot;lpeg&quot;</text>
<text text-anchor="middle" x="422.0071" y="-1161.802" font-family="Inconsolata" font-size="14.00" fill="#000000">local Node = require &quot;peg/node&quot;</text>
<text text-anchor="middle" x="422.0071" y="-1130.402" font-family="Inconsolata" font-size="14.00" fill="#000000">local function makerange(first, second)</text>
<text text-anchor="middle" x="422.0071" y="-1115.002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local patts = {}</text>
<text text-anchor="middle" x="422.0071" y="-1099.6019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local patt &#160;= {}</text>
<text text-anchor="middle" x="422.0071" y="-1084.2019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if (second) then</text>
<text text-anchor="middle" x="422.0071" y="-1068.8019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if (string.len(first) == string.len(second)) then</text>
<text text-anchor="middle" x="422.0071" y="-1053.4018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i = 1, string.len(first) do</text>
<text text-anchor="middle" x="422.0071" y="-1038.0018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;patts[i] = lpeg.R(string.sub(first,i,i)..string.sub(second,i,i))</text>
<text text-anchor="middle" x="422.0071" y="-1022.6018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="422.0071" y="-1007.2017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;patt = patts[1]</text>
<text text-anchor="middle" x="422.0071" y="-991.8017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i = 2, string.len(first) do</text>
<text text-anchor="middle" x="422.0071" y="-976.4017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;patt = patt + patts[i]</text>
<text text-anchor="middle" x="422.0071" y="-961.0017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="422.0071" y="-945.6016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return patt</text>
<text text-anchor="middle" x="422.0071" y="-930.2016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="422.0071" y="-914.8016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;error(&quot;Ranges must be of equal byte width&quot;)</text>
<text text-anchor="middle" x="422.0071" y="-899.4015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return {}</text>
<text text-anchor="middle" x="422.0071" y="-884.0015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="422.0071" y="-868.6015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;else </text>
<text text-anchor="middle" x="422.0071" y="-853.2014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return lpeg.R(first)</text>
<text text-anchor="middle" x="422.0071" y="-837.8014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="422.0071" y="-822.4014" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="422.0071" y="-775.0013" font-family="Inconsolata" font-size="14.00" fill="#000000">local function num_bytes(str)</text>
<text text-anchor="middle" x="422.0071" y="-759.6013" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;returns the number of bytes in the next character in str</text>
<text text-anchor="middle" x="422.0071" y="-744.2013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local c = str:byte(1)</text>
<text text-anchor="middle" x="422.0071" y="-728.8012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if c &gt;= 0x00 and c &lt;= 0x7F then</text>
<text text-anchor="middle" x="422.0071" y="-713.4012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return 1</text>
<text text-anchor="middle" x="422.0071" y="-698.0012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;elseif c &gt;= 0xC2 and c &lt;= 0xDF then</text>
<text text-anchor="middle" x="422.0071" y="-682.6012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return 2</text>
<text text-anchor="middle" x="422.0071" y="-667.2011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;elseif c &gt;= 0xE0 and c &lt;= 0xEF then</text>
<text text-anchor="middle" x="422.0071" y="-651.8011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return 3</text>
<text text-anchor="middle" x="422.0071" y="-636.4011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;elseif c &gt;= 0xF0 and c &lt;= 0xF4 then</text>
<text text-anchor="middle" x="422.0071" y="-621.001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return 4</text>
<text text-anchor="middle" x="422.0071" y="-605.601" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="422.0071" y="-590.201" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="422.0071" y="-558.8009" font-family="Inconsolata" font-size="14.00" fill="#000000">local function Su (str)</text>
<text text-anchor="middle" x="422.0071" y="-543.4009" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;[[</text>
<text text-anchor="middle" x="422.0071" y="-528.0009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#45;&#45;convert a &#39;set&#39; pattern to uniquely match the characters </text>
<text text-anchor="middle" x="422.0071" y="-512.6008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#45;&#45;in the range.</text>
<text text-anchor="middle" x="422.0071" y="-497.2008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local catch = {}</text>
<text text-anchor="middle" x="422.0071" y="-481.8008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local i = 0</text>
<text text-anchor="middle" x="422.0071" y="-466.4007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for i = 1, #str do</text>
<text text-anchor="middle" x="422.0071" y="-451.0007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;catch[i]</text>
<text text-anchor="middle" x="422.0071" y="-435.6007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="422.0071" y="-420.2007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#45;&#45;]]</text>
<text text-anchor="middle" x="422.0071" y="-404.8006" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="422.0071" y="-373.4006" font-family="Inconsolata" font-size="14.00" fill="#000000">local function spanner(first, last, str, root)</text>
<text text-anchor="middle" x="422.0071" y="-358.0006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local vals = {}</text>
<text text-anchor="middle" x="422.0071" y="-342.6005" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;vals.span = true</text>
<text text-anchor="middle" x="422.0071" y="-327.2005" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;vals.val = string.sub(str, first, last &#45; 1)</text>
<text text-anchor="middle" x="422.0071" y="-311.8005" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;vals.first = first</text>
<text text-anchor="middle" x="422.0071" y="-296.4004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;vals.last = last &#45; 1</text>
<text text-anchor="middle" x="422.0071" y="-281.0004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if vals.last &gt;= vals.first then</text>
<text text-anchor="middle" x="422.0071" y="-265.6004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return vals</text>
<text text-anchor="middle" x="422.0071" y="-250.2003" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="422.0071" y="-234.8003" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#45;&#45; If a capture contains nothing, we don&#39;t want a node for it</text>
<text text-anchor="middle" x="422.0071" y="-219.4003" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return nil</text>
<text text-anchor="middle" x="422.0071" y="-204.0002" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="422.0071" y="-172.6002" font-family="Inconsolata" font-size="14.00" fill="#000000">local function Csp (patt)</text>
<text text-anchor="middle" x="422.0071" y="-157.2002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return lpeg.Cp() </text>
<text text-anchor="middle" x="422.0071" y="-141.8002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;* lpeg.Cmt(patt, function() return true end) </text>
<text text-anchor="middle" x="422.0071" y="-126.4001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;* lpeg.Cp() </text>
<text text-anchor="middle" x="422.0071" y="-111.0001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;* lpeg.Carg(1) </text>
<text text-anchor="middle" x="422.0071" y="-95.6001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;* lpeg.Carg(2) / spanner</text>
<text text-anchor="middle" x="422.0071" y="-80.2" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
</g>
<!-- codeblock_3&#45;&gt;leaf_6 -->
<g id="edge3" class="edge">
<title>codeblock_3&#45;&gt;leaf_6</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M422.0071,-1228.3528C422.0071,-1221.5206 422.0071,-1212.9048 422.0071,-1202.7768"/>
<polygon fill="#000000" stroke="#000000" points="425.5072,-1202.6118 422.0071,-1192.6118 418.5072,-1202.6119 425.5072,-1202.6118"/>
</g>
<!-- codeblock_4 -->
<g id="node6" class="node">
<title>codeblock_4</title>
<ellipse fill="none" stroke="#000000" cx="960.0071" cy="-1246.4021" rx="59.5308" ry="18"/>
<text text-anchor="middle" x="960.0071" y="-1242.2021" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">codeblock_4</text>
</g>
<!-- leaf_7 -->
<g id="node7" class="node">
<title>leaf_7</title>
<polygon fill="none" stroke="#c0c0c0" points="1206.0071,-682.602 714.0071,-682.602 714.0071,-581.8 1206.0071,-581.8 1206.0071,-682.602"/>
<text text-anchor="middle" x="960.0071" y="-667.2011" font-family="Inconsolata" font-size="14.00" fill="#000000">local function split (s, sep)</text>
<text text-anchor="middle" x="960.0071" y="-651.8011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;sep = lpeg.P(sep)</text>
<text text-anchor="middle" x="960.0071" y="-636.4011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;local elem = lpeg.C((1 &#45; sep)^0)</text>
<text text-anchor="middle" x="960.0071" y="-621.001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;local p = lpeg.Ct(elem * (sep * elem)^0) &#160;&#160;&#45;&#45; make a table capture</text>
<text text-anchor="middle" x="960.0071" y="-605.601" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;return lpeg.match(p, s)</text>
<text text-anchor="middle" x="960.0071" y="-590.201" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
</g>
<!-- codeblock_4&#45;&gt;leaf_7 -->
<g id="edge4" class="edge">
<title>codeblock_4&#45;&gt;leaf_7</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M960.0071,-1228.3528C960.0071,-1148.885 960.0071,-828.134 960.0071,-692.8547"/>
<polygon fill="#000000" stroke="#000000" points="963.5072,-692.667 960.0071,-682.667 956.5072,-692.6671 963.5072,-692.667"/>
</g>
<!-- codeblock_5 -->
<g id="node8" class="node">
<title>codeblock_5</title>
<ellipse fill="none" stroke="#000000" cx="1397.0071" cy="-1246.4021" rx="59.5308" ry="18"/>
<text text-anchor="middle" x="1397.0071" y="-1242.2021" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">codeblock_5</text>
</g>
<!-- leaf_8 -->
<g id="node9" class="node">
<title>leaf_8</title>
<polygon fill="none" stroke="#c0c0c0" points="1569.5071,-769.1017 1224.5071,-769.1017 1224.5071,-495.3004 1569.5071,-495.3004 1569.5071,-769.1017"/>
<text text-anchor="middle" x="1397.0071" y="-753.7012" font-family="Inconsolata" font-size="14.00" fill="#000000">local I = lpeg.Cp()</text>
<text text-anchor="middle" x="1397.0071" y="-722.3012" font-family="Inconsolata" font-size="14.00" fill="#000000">local function &#160;anyP(p)</text>
<text text-anchor="middle" x="1397.0071" y="-706.9011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;return lpeg.P{ I * p * I + 1 * lpeg.V(1) }</text>
<text text-anchor="middle" x="1397.0071" y="-691.5011" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1397.0071" y="-628.1011" font-family="Inconsolata" font-size="14.00" fill="#000000">local Ru = makerange</text>
<text text-anchor="middle" x="1397.0071" y="-580.701" font-family="Inconsolata" font-size="14.00" fill="#000000">return { R = Ru,</text>
<text text-anchor="middle" x="1397.0071" y="-565.301" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;Csp = Csp,</text>
<text text-anchor="middle" x="1397.0071" y="-549.901" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;anyP = anyP,</text>
<text text-anchor="middle" x="1397.0071" y="-534.501" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;match = lpeg.match,</text>
<text text-anchor="middle" x="1397.0071" y="-519.1009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;split = split,</text>
<text text-anchor="middle" x="1397.0071" y="-503.7009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;spanner = spanner }</text>
</g>
<!-- codeblock_5&#45;&gt;leaf_8 -->
<g id="edge5" class="edge">
<title>codeblock_5&#45;&gt;leaf_8</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1397.0071,-1228.3528C1397.0071,-1162.866 1397.0071,-933.5269 1397.0071,-779.1533"/>
<polygon fill="#000000" stroke="#000000" points="1400.5072,-779.0959 1397.0071,-769.0959 1393.5072,-779.0959 1400.5072,-779.0959"/>
</g>
</g>
</svg>