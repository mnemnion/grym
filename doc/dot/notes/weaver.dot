digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 25"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-25"]


section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 prose_8}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 prose_8}

header_2 [label="1 : Weaver"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

prose_8 [label="prose"]


header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Weaver"]
prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Our weaver is responsible for creating presentation views from a document.
This is in keeping with Dr. Knuth's original method of literate programming,
where the weave was properly typeset code printed on paper. 
"]
prose_4 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire intends to support (La)TeX output, and thereby physical printing.
We don't consider it especially important.  Grimoire offers few advantages
over Markdown for those exclusively concerned with prosaic contents, and 
authors who work only with prose have no special motive to adopt it. 
"]
prose_5 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The core use case for our weave is producing views of the Orb files of a 
full ingenium.  Thus our weaves are themselves software, and this may in
turn interact with the original document if desired.
"]
prose_6 -> { raw_16}
{rank=same; raw_16}

raw_16 [label="raw"]


raw_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We start by supporting a simple, static view of the original Grimoire
documents.  Thus the very first output we intend to support is just good ol'
Git-Flavored Markdown. 
"]
prose_7 -> { raw_18 literal_19 raw_20}
{rank=same; raw_18 literal_19 raw_20}

raw_18 [label="raw"]

literal_19 [label="literal"]

raw_20 [label="raw"]


raw_18 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
With this written we actually have a fairly capable system. It can invert a
source tree into the "]
literal_19 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb"]
raw_20 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" directory, knit a sorcery directory from that,
and produce documentation which GitHub can display natively. 
"]
prose_8 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Add a little shim to Sublime to display Grimoire documents and I'm ready to
start working on the editor and the quipu, and then Lun and Clu. "]

}
