digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 25"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-25"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 prose_8}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 prose_8}

header_2 [label="1 : Weaver"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

prose_8 [label="prose"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Weaver"]
// END RANK header_2

prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Our weaver is responsible for creating presentation views from a document.
This is in keeping with Dr. Knuth's original method of literate programming,
where the weave was properly typeset code printed on paper. 
"]
// END RANK raw_10

prose_4 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_4

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire intends to support (La)TeX output, and thereby physical printing.
We don't consider it especially important.  Grimoire offers few advantages
over Markdown for those exclusively concerned with prosaic contents, and 
authors who work only with prose have no special motive to adopt it. 
"]
// END RANK raw_12

prose_5 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


// END RANK prose_5

raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The core use case for our weave is producing views of the Orb files of a 
full ingenium.  Thus our weaves are themselves software, and this may in
turn interact with the original document if desired.
"]
// END RANK raw_14

prose_6 -> { raw_16}
{rank=same; raw_16}

raw_16 [label="raw"]


// END RANK prose_6

raw_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We start by supporting a simple, static view of the original Grimoire
documents.  Thus the very first output we intend to support is just good ol'
Git-Flavored Markdown. 
"]
// END RANK raw_16

prose_7 -> { raw_18 prespace_19 literal_20 raw_21}
{rank=same; raw_18 prespace_19 literal_20 raw_21}

raw_18 [label="raw"]

prespace_19 [label="prespace"]

literal_20 [label="literal"]

raw_21 [label="raw"]


// END RANK prose_7

raw_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
With this written we actually have a fairly capable system. It can invert a
source tree into the"]
// END RANK raw_18

prespace_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_19

literal_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb"]
// END RANK literal_20

raw_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" directory, knit a sorcery directory from that,
and produce documentation which GitHub can display natively. 
"]
// END RANK raw_21

prose_8 -> { raw_26}
{rank=same; raw_26}

raw_26 [label="raw"]


// END RANK prose_8

raw_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Add a little shim to Sublime to display Grimoire documents and I'm ready to
start working on the editor and the quipu, and then Lun and Clu. "]
// END RANK raw_26


}
