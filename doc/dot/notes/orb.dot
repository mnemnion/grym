digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 508"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-224"]


section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7 section_8 section_9}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7 section_8 section_9}

header_2 [label="1 : Orb format"]

prose_3 [label="prose"]

section_4 [label="section: 7-21"]

section_5 [label="section: 22-43"]

section_6 [label="section: 44-92"]

section_7 [label="section: 106-142"]

section_8 [label="section: 143-150"]

section_9 [label="section: 225-457"]


header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Orb format"]
prose_3 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The grimoire tools work with a structured text format which we call Orb.
This is an introduction to that format.

"]
section_4 -> { header_13 prose_14 prose_15 prose_16}
{rank=same; header_13 prose_14 prose_15 prose_16}

header_13 [label="2 : Metalanguage"]

prose_14 [label="prose"]

prose_15 [label="prose"]

prose_16 [label="prose"]


header_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Metalanguage"]
prose_14 -> { raw_18}
{rank=same; raw_18}

raw_18 [label="raw"]


raw_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  I call Orb a metalanguage, because it can by design include any other
structured text format within it.  Provided it may be represented in utf-8!
This is no stricture in practice. 
"]
prose_15 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The Orb format aims to be equally useful for markup, literate programming,
configuration, data exchange, and the sort of interactive notebook which 
Jupyter and org-babel can produce.
"]
prose_16 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The first parser and tool is Grimoire, which, as a bootstrap, is focused on
literate programming.  This will in turn be the format for the tools in the
bettertools suite. 

"]
section_5 -> { header_24 prose_25 prose_26 prose_27}
{rank=same; header_24 prose_25 prose_26 prose_27}

header_24 [label="2 : Goals"]

prose_25 [label="prose"]

prose_26 [label="prose"]

prose_27 [label="prose"]


header_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Goals"]
prose_25 -> { raw_29}
{rank=same; raw_29}

raw_29 [label="raw"]


raw_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Orb is:
"]
prose_26 -> { raw_31}
{rank=same; raw_31}

raw_31 [label="raw"]


raw_31 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - Error free:  An Orb document is never in a state of error.  Any valid
                 utf-8 string is an Orb document.
  - Line based:  Orb files may be rapidly separated into their elements
                 by splitting into lines and examining the first few
                 characters.
  - Humane:      Orb is carefully designed to be readable, as is, by
                 ordinary humans.
  - General:     There are no characters such as <>& in HTML which must be
                 escaped.  Orb codeblocks can enclose any other format,
                 including Orb format.  Orb strings are «brace balanced»
                 and can enclose any utf-8 string as a consequence. 
"]
prose_27 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
While it is possible to do some fancy things with Orb, it is also a
comfortable format to write a blog post, or put a few key-value pairs into
a config file.  If you were to send an email in Orb format, the recipient
might not even notice. 

"]
section_6 -> { header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 section_47}
{rank=same; header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 section_47}

header_35 [label="2 : Encoding"]

prose_36 [label="prose"]

prose_37 [label="prose"]

prose_38 [label="prose"]

prose_39 [label="prose"]

prose_40 [label="prose"]

prose_41 [label="prose"]

prose_42 [label="prose"]

prose_43 [label="prose"]

prose_44 [label="prose"]

prose_45 [label="prose"]

prose_46 [label="prose"]

section_47 [label="section: 93-105"]


header_35 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Encoding"]
prose_36 -> { raw_49}
{rank=same; raw_49}

raw_49 [label="raw"]


raw_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Orb documents are encoded in utf-8.  
"]
prose_37 -> { raw_51}
{rank=same; raw_51}

raw_51 [label="raw"]


raw_51 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The core syntax is defined in terms of the reachable keys on a US keyboard.
This tradition is firmly entrenched in the mid teens, and I have no
designs on budging that at present.  The miser in me likes that they're
a byte each.  The lawyer in me insists that this isn't ASCII, which is a
seven-bit legacy encoding.
"]
prose_38 -> { raw_53}
{rank=same; raw_53}

raw_53 [label="raw"]


raw_53 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We aren't at all reluctant to use Unicode characters as part of the format. 
Grimoire «strings» are the most visible example of this, along with drawer
and fold icons, which are actual parts of an Orb document. 
"]
prose_39 -> { raw_55}
{rank=same; raw_55}

raw_55 [label="raw"]


raw_55 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is case sensitive and uses lower-snake-case for built-in English
phrases. There is a convention (see classes) that uses capitalization of
user words to affect semantics.  
"]
prose_40 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[tk] is there though
"]
prose_41 -> { raw_59}
{rank=same; raw_59}

raw_59 [label="raw"]


raw_59 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Orb is a format for text.  There are many ways of writing text, but only one
way of encoding it that matters.  There is a long tail of Unicode complexity,
and there are traces of Committee spattered all over it; nonetheless we 
should be grateful that utf-8 won, in a world in which we still drive cars on
both possible sides of the road. 
"]
prose_42 -> { raw_61 link_62 raw_63}
{rank=same; raw_61 link_62 raw_63}

raw_61 [label="raw"]

link_62 [label="link"]

raw_63 [label="raw"]


raw_61 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that while we have our "]
link_62 -> { anchortext_65 url_66}
{rank=same; anchortext_65 url_66}

anchortext_65 [label="anchortext"]

url_66 [label="url"]


anchortext_65 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="own opinions about utf-8"]
url_66 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_63 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" our vision of
heaven is backward-compatible with the inferior version foisted upon us by a 
jealous software monopoly.
"]
prose_43 -> { raw_70 link_71 raw_72}
{rank=same; raw_70 link_71 raw_72}

raw_70 [label="raw"]

link_71 [label="link"]

raw_72 [label="raw"]


raw_70 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Bidirectional handling in a context that's indentation sensitive is an 
example of something subtle. Orb format uses indentation in a few key places,
and a compliant parser will need to detect and respect RTL [tk?] markers.
Exactly how is spelled out under "]
link_71 -> { anchortext_74 url_75}
{rank=same; anchortext_74 url_75}

anchortext_74 [label="anchortext"]

url_75 [label="url"]


anchortext_74 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="indentation"]
url_75 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_72 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
prose_44 -> { raw_79}
{rank=same; raw_79}

raw_79 [label="raw"]


raw_79 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'd love to get a Hebrew and/or Arabic fluent hacker on the project
early, to make sure this works correctly.  I'll settle for Aramaic.
"]
prose_45 -> { raw_81}
{rank=same; raw_81}

raw_81 [label="raw"]


raw_81 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Another thing I want to get right is equivalence. If you have a
variable called \"Glück\" the compiler shouldn't complain if it's
rendered in either of the valid ways. For some sequences that's
\"any of the valid ways\". If we normalized your prose, you might
have problems later, so we don't want to solve it that way.
"]
prose_46 -> { raw_83 link_84 raw_85 link_86 raw_87}
{rank=same; raw_83 link_84 raw_85 link_86 raw_87}

raw_83 [label="raw"]

link_84 [label="link"]

raw_85 [label="raw"]

link_86 [label="link"]

raw_87 [label="raw"]


raw_83 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This consideration mostly applys to "]
link_84 -> { anchortext_89 url_90}
{rank=same; anchortext_89 url_90}

anchortext_89 [label="anchortext"]

url_90 [label="url"]


anchortext_89 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hashtags"]
url_90 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_85 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
link_86 -> { anchortext_94 url_95}
{rank=same; anchortext_94 url_95}

anchortext_94 [label="anchortext"]

url_95 [label="url"]


anchortext_94 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="handles"]
url_95 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_87 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The idea is that Orb files will respect all the 
wacky typographic equivalences that Unicode has gifted us with.

"]
section_47 -> { header_99 prose_100 prose_101 prose_102}
{rank=same; header_99 prose_100 prose_101 prose_102}

header_99 [label="4 : Tabs"]

prose_100 [label="prose"]

prose_101 [label="prose"]

prose_102 [label="prose"]


header_99 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Tabs"]
prose_100 -> { raw_104}
{rank=same; raw_104}

raw_104 [label="raw"]


raw_104 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The vexacious ASCII character 8 will never be found in an Orb document.  If
encountered, it will be reduced to two spaces.  Grimoire will complain.
"]
prose_101 -> { raw_106}
{rank=same; raw_106}

raw_106 [label="raw"]


raw_106 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not an /error/ mind you, it's a well-defined input that will become 
two spaces.  If encountered by one of my tools, the tabs will be permanently
gone. 
"]
prose_102 -> { raw_108}
{rank=same; raw_108}

raw_108 [label="raw"]


raw_108 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Yes. This applies to your source code blocks as well.  It is time we put 
away childish things.  

"]
section_7 -> { header_110 prose_111 prose_112 prose_113 prose_114 prose_115 prose_116 prose_117 prose_118}
{rank=same; header_110 prose_111 prose_112 prose_113 prose_114 prose_115 prose_116 prose_117 prose_118}

header_110 [label="2 : Prose and Structure"]

prose_111 [label="prose"]

prose_112 [label="prose"]

prose_113 [label="prose"]

prose_114 [label="prose"]

prose_115 [label="prose"]

prose_116 [label="prose"]

prose_117 [label="prose"]

prose_118 [label="prose"]


header_110 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Prose and Structure"]
prose_111 -> { raw_120}
{rank=same; raw_120}

raw_120 [label="raw"]


raw_120 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The major distinction in Orb is between prose and structure.
"]
prose_112 -> { raw_122}
{rank=same; raw_122}

raw_122 [label="raw"]


raw_122 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose is the default parsing state. It is far from unstructured from the
runtime perspective. Although this needn't be embedded in the parse
tree, Grimoire understands concepts such as paragraphs, words, punctuation,
capital letters, languages, and anything else proper to prose.
"]
prose_113 -> { raw_124}
{rank=same; raw_124}

raw_124 [label="raw"]


raw_124 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I refer to human languages, but Grimoire understands programming languages
also. In principle, all of them, it shouldn't be harder to add them than
it is to call them from shell, though getting a runtime rigged up to
another runtime always calls for some finesse to derive a good experience.
"]
prose_114 -> { raw_126}
{rank=same; raw_126}

raw_126 [label="raw"]


raw_126 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
\"Programming languages\" is overly specific.  Grimoire draws a distinction
between prose and structure. Blocks may contain either, or both.
"]
prose_115 -> { raw_128}
{rank=same; raw_128}

raw_128 [label="raw"]


raw_128 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something that's nice about a language build on a prose/structure
relationship is that it can be error free.  Anything *grym* can't build into
a structure is just prose.
"]
prose_116 -> { raw_130}
{rank=same; raw_130}

raw_130 [label="raw"]


raw_130 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Markdown has this property.  Sometimes you run into parsers which
build errors into Markdown, which is itself erroneous.  If you [[RTFM]
[http://daringfireball.net/projects/markdown/syntax]],
you'll find the word \"error\" once.  Helpfully explaining how Markdown
keeps you from making one.
"]
prose_117 -> { raw_132}
{rank=same; raw_132}

raw_132 [label="raw"]


raw_132 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do what we can to make the document look the same as it is
in fact structured.  The intention with Orb files is that we work with them
aided by a linter, which lets us be lazy and still get consistent results.
"]
prose_118 -> { raw_134}
{rank=same; raw_134}

raw_134 [label="raw"]


raw_134 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The most important point in this section is that Orb documents do not have
errors and never fail to parse.  You should be able to literally plug any 
Orb parser into a source of entropy and end up with a document, since a
proper utf-8 decoder will drop any invalid bytes it sees. 

"]
section_8 -> { header_136 prose_137 section_138}
{rank=same; header_136 prose_137 section_138}

header_136 [label="2 : Ownership"]

prose_137 [label="prose"]

section_138 [label="section: 151-166"]


header_136 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Ownership"]
prose_137 -> { raw_140}
{rank=same; raw_140}

raw_140 [label="raw"]


raw_140 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The root concept of Orb is a document, which divides into one or more 
sections.  A section owns all structure or prose within it.  This 
paragraph is owned by «** Ownership» above, as are all the rest of the
blocks until the next section header. 

"]
section_138 -> { header_142 prose_143 prose_144 prose_145 section_146}
{rank=same; header_142 prose_143 prose_144 prose_145 section_146}

header_142 [label="3 : Blocking"]

prose_143 [label="prose"]

prose_144 [label="prose"]

prose_145 [label="prose"]

section_146 [label="section: 167-224"]


header_142 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Blocking"]
prose_143 -> { raw_148}
{rank=same; raw_148}

raw_148 [label="raw"]


raw_148 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Orb documents are chunked into sections entirely by their heading lines.
Within a section, prose and structure alike are organized into blocks.  
The defining marker of blocks is blank lines.
"]
prose_144 -> { raw_150}
{rank=same; raw_150}

raw_150 [label="raw"]


raw_150 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This second paragraph is the second block of the «*** Blocking» section.
Taking a look at the source document, you'll see that I put (single)
newlines between lines, with an 78 column margin.  That should be considered
good style.  If you prefer to have each paragraph be its own line, have at.
"]
prose_145 -> { raw_152}
{rank=same; raw_152}

raw_152 [label="raw"]


raw_152 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A line is considered blank if it contains only Unicode spacemarks.  Grimoire
will smoothly remove any such cruft and replace it with «\\n\\n».  We also
trim trailing whitespace. 

"]
section_146 -> { header_154 prose_155 prose_156 prose_157 prose_158 prose_159 codeblock_160 prose_161 codeblock_162 prose_163 prose_164 codeblock_165 prose_166}
{rank=same; header_154 prose_155 prose_156 prose_157 prose_158 prose_159 codeblock_160 prose_161 codeblock_162 prose_163 prose_164 codeblock_165 prose_166}

header_154 [label="4 : The Cling Rule"]

prose_155 [label="prose"]

prose_156 [label="prose"]

prose_157 [label="prose"]

prose_158 [label="prose"]

prose_159 [label="prose"]

codeblock_160 [label="code block 187-194"]

prose_161 [label="prose"]

codeblock_162 [label="code block 199-206"]

prose_163 [label="prose"]

prose_164 [label="prose"]

codeblock_165 [label="code block 213-219"]

prose_166 [label="prose"]


header_154 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** The Cling Rule"]
prose_155 -> { raw_168 link_169 raw_170}
{rank=same; raw_168 link_169 raw_170}

raw_168 [label="raw"]

link_169 [label="link"]

raw_170 [label="raw"]


raw_168 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  "]
link_169 -> { anchortext_172 url_173}
{rank=same; anchortext_172 url_173}

anchortext_172 [label="anchortext"]

url_173 [label="url"]


anchortext_172 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Tags"]
url_173 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_170 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are used both to provide names to blocks in Orb format
and to specify various actions in knitting and weaving.  They may be placed
above or below the block which they affect.
"]
prose_156 -> { raw_177}
{rank=same; raw_177}

raw_177 [label="raw"]


raw_177 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The cling rule specifies that a group 'clings' to another group when
it is closer to that group than the other group. Ties resolve down.
"]
prose_157 -> { raw_179}
{rank=same; raw_179}

raw_179 [label="raw"]


raw_179 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This should make it intuitive to group elements that aren't grouping the
way you expect: put in whitespace until the block is visually distinguished
from the surroundings.
"]
prose_158 -> { raw_181}
{rank=same; raw_181}

raw_181 [label="raw"]


raw_181 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cling applies between blocks which are at the same level of ownership.
Ownership has precedence over cling: all blocks underneath e.g. a header
line are owned by that line, newlines notwithstanding.
"]
prose_159 -> { raw_183}
{rank=same; raw_183}

raw_183 [label="raw"]


raw_183 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that indentation of e.g. lists invokes the cling rule within the
indentation level.
"]
codeblock_160 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |

#tag


someprose on a block"]
prose_161 -> { raw_186}
{rank=same; raw_186}

raw_186 [label="raw"]


raw_186 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the table, but
"]
codeblock_162 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |


#tag

someprose on a block"]
prose_163 -> { raw_189}
{rank=same; raw_189}

raw_189 [label="raw"]


raw_189 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the block.
"]
prose_164 -> { raw_191}
{rank=same; raw_191}

raw_191 [label="raw"]


raw_191 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Even clings are resolved forwards:
"]
codeblock_165 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |

#tag

someprose on a block"]
prose_166 -> { raw_194}
{rank=same; raw_194}

raw_194 [label="raw"]


raw_194 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the prose block.

"]
section_9 -> { header_196 prose_197 prose_198 section_199 section_200 section_201 section_202 section_203 section_204 section_205}
{rank=same; header_196 prose_197 prose_198 section_199 section_200 section_201 section_202 section_203 section_204 section_205}

header_196 [label="2 : Structural elements"]

prose_197 [label="prose"]

prose_198 [label="prose"]

section_199 [label="section: 237-255"]

section_200 [label="section: 256-286"]

section_201 [label="section: 287-361"]

section_202 [label="section: 377-410"]

section_203 [label="section: 411-445"]

section_204 [label="section: 446-457"]

section_205 [label="section: 458-508"]


header_196 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Structural elements"]
prose_197 -> { raw_207}
{rank=same; raw_207}

raw_207 [label="raw"]


raw_207 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Structure and prose are the figure and ground of Orb format.  We speak of
structure and prose on a block-by-block basis, and within some structure
blocks there are regions of prose.  Prose in turn routinely contains
structural regions.
"]
prose_198 -> { raw_209}
{rank=same; raw_209}

raw_209 [label="raw"]


raw_209 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This section will discuss under what circumstances an Orb parser will create
structure, with some discursions into the semantics these distinctions
represent. 

"]
section_199 -> { header_211 prose_212 codeblock_213 prose_214 prose_215}
{rank=same; header_211 prose_212 codeblock_213 prose_214 prose_215}

header_211 [label="3 : Headlines"]

prose_212 [label="prose"]

codeblock_213 [label="code block 242-244"]

prose_214 [label="prose"]

prose_215 [label="prose"]


header_211 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Headlines"]
prose_212 -> { raw_217}
{rank=same; raw_217}

raw_217 [label="raw"]


raw_217 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Headlines divide a document into sections.  The grammar for recognizing
a headline is as follows:
"]
codeblock_213 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    headline = WS?  '*'+  ' '  prose  NL"]
prose_214 -> { raw_220 literal_221 raw_222}
{rank=same; raw_220 literal_221 raw_222}

raw_220 [label="raw"]

literal_221 [label="literal"]

raw_222 [label="raw"]


raw_220 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The number of "]
literal_221 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_222 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" determine the level of ownership.  This is a declarative
relationship, though I lack a clean syntax to express it other than
functionally at present. 
"]
prose_215 -> { raw_226 literal_227 raw_228}
{rank=same; raw_226 literal_227 raw_228}

raw_226 [label="raw"]

literal_227 [label="literal"]

raw_228 [label="raw"]


raw_226 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The content within "]
literal_227 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="prose"]
raw_228 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" has the luxury of being context-sensitive.  In
particular we treat tags on a headline as though they're on a tagline below
they headline. 


"]
section_200 -> { header_232 prose_233 prose_234 prose_235 codeblock_236 prose_237 prose_238 codeblock_239 prose_240}
{rank=same; header_232 prose_233 prose_234 prose_235 codeblock_236 prose_237 prose_238 codeblock_239 prose_240}

header_232 [label="3 : Tags and Taglines"]

prose_233 [label="prose"]

prose_234 [label="prose"]

prose_235 [label="prose"]

codeblock_236 [label="code block 266-268"]

prose_237 [label="prose"]

prose_238 [label="prose"]

codeblock_239 [label="code block 278-281"]

prose_240 [label="prose"]


header_232 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Tags and Taglines"]
prose_233 -> { raw_242 literal_243 raw_244 literal_245 raw_246}
{rank=same; raw_242 literal_243 raw_244 literal_245 raw_246}

raw_242 [label="raw"]

literal_243 [label="literal"]

raw_244 [label="raw"]

literal_245 [label="literal"]

raw_246 [label="raw"]


raw_242 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Tags are the control structures for Orb.  There are "]
literal_243 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#hashtags"]
raw_244 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which
loosely correspond to functions or messages, and "]
literal_245 -> leaf_250
leaf_250  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@handles"]
raw_246 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which more
directly correspond to symbols.  
"]
prose_234 -> { raw_252 link_253 raw_254}
{rank=same; raw_252 link_253 raw_254}

raw_252 [label="raw"]

link_253 [label="link"]

raw_254 [label="raw"]


raw_252 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The semantics of tags belong in the "]
link_253 -> { anchortext_256 url_257}
{rank=same; anchortext_256 url_257}

anchortext_256 [label="anchortext"]

url_257 [label="url"]


anchortext_256 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label="runtime"]
url_257 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_254 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label="]] section.
"]
prose_235 -> { raw_261}
{rank=same; raw_261}

raw_261 [label="raw"]


raw_261 -> leaf_262
leaf_262  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For now let us note that the rule
"]
codeblock_236 -> leaf_263
leaf_263  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  hashtag = WS+  '#'  symbol"]
prose_237 -> { raw_264 literal_265 raw_266}
{rank=same; raw_264 literal_265 raw_266}

raw_264 [label="raw"]

literal_265 [label="literal"]

raw_266 [label="raw"]


raw_264 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  
*may* not appear in (all) prose contexts, this is still undecided.  This is 
true of handles as well given the state of "]
literal_265 -> leaf_268
leaf_268  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym"]
raw_266 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at the present time, 
but I am more firmly convinced of the value of @handle as a short in-place
expansion of a handleline. I don't think trying to parse a mid-block #export
as meaning something is as valuable. 
"]
prose_238 -> { raw_270}
{rank=same; raw_270}

raw_270 [label="raw"]


raw_270 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These two rules are currently in use:
"]
codeblock_239 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  hashline = WS?  '#'  symbol  ' '  prose  NL
  handleline = WS?  '@'  symbol  ' '  prose  NL"]
prose_240 -> { raw_273 literal_274 raw_275 literal_276 raw_277}
{rank=same; raw_273 literal_274 raw_275 literal_276 raw_277}

raw_273 [label="raw"]

literal_274 [label="literal"]

raw_275 [label="raw"]

literal_276 [label="literal"]

raw_277 [label="raw"]


raw_273 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Structure is designed to work on a line-by-line basis,
any "]
literal_274 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="line"]
raw_275 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" rule has an implied "]
literal_276 -> leaf_281
leaf_281  [color=Gray,shape=rectangle,fontname=Inconsolata,label="^"]
raw_277 -> leaf_282
leaf_282  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". 

"]
section_201 -> { header_283 prose_284 prose_285 codeblock_286 prose_287 codeblock_288 prose_289 codeblock_290 prose_291 codeblock_292 prose_293 section_294 section_295}
{rank=same; header_283 prose_284 prose_285 codeblock_286 prose_287 codeblock_288 prose_289 codeblock_290 prose_291 codeblock_292 prose_293 section_294 section_295}

header_283 [label="3 : List "]

prose_284 [label="prose"]

prose_285 [label="prose"]

codeblock_286 [label="code block 295-297"]

prose_287 [label="prose"]

codeblock_288 [label="code block 301-303"]

prose_289 [label="prose"]

codeblock_290 [label="code block 309-312"]

prose_291 [label="prose"]

codeblock_292 [label="code block 316-319"]

prose_293 [label="prose"]

section_294 [label="section: 328-361"]

section_295 [label="section: 362-376"]


header_283 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** List "]
prose_284 -> { raw_297}
{rank=same; raw_297}

raw_297 [label="raw"]


raw_297 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Lists are both a markup format and a flexible data container.  In the emacs
org-mode, headline-type structures do the heavy lifting for TODO lists and
the like.  This was org's original purpose, with document markup coming later.
"]
prose_285 -> { raw_299}
{rank=same; raw_299}

raw_299 [label="raw"]


raw_299 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Orb lists come in unnumbered and numbered.  Unnumbered lists follow this rule:
"]
codeblock_286 -> leaf_301
leaf_301  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  listline-un = WS? '- ' prose NL"]
prose_287 -> { raw_302}
{rank=same; raw_302}

raw_302 [label="raw"]


raw_302 -> leaf_303
leaf_303  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
While numbered lists match this:
"]
codeblock_288 -> leaf_304
leaf_304  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  listline-li = WS? digits '. ' prose NL"]
prose_289 -> { raw_305}
{rank=same; raw_305}

raw_305 [label="raw"]


raw_305 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For lists, as with any structure group, the semantics of the prose section are
somewhat flexible.  The cling rule for lists parses indentation so that
multi-line entries are possible:
"]
codeblock_290 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - list entry 
   prose directly under, bad style"]
prose_291 -> { raw_308}
{rank=same; raw_308}

raw_308 [label="raw"]


raw_308 -> leaf_309
leaf_309  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
vs.
"]
codeblock_292 -> leaf_310
leaf_310  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - list entry 
    continues list entry"]
prose_293 -> { raw_311}
{rank=same; raw_311}

raw_311 [label="raw"]


raw_311 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
As in Markdown, the parser will accept any numbers as a numbered list without
checking their order.  The linter will increment by one starting from the
number of the first index, so if you start with \"1. \" or \"0. \" or \"10. \" you
get the subsequent.  This behavior can be suppressed with a hashtag directive
yet to be added.  

"]
section_294 -> { header_313 prose_314 codeblock_315 prose_316 prose_317 prose_318 prose_319}
{rank=same; header_313 prose_314 codeblock_315 prose_316 prose_317 prose_318 prose_319}

header_313 [label="4 : List Boxes"]

prose_314 [label="prose"]

codeblock_315 [label="code block 335-346"]

prose_316 [label="prose"]

prose_317 [label="prose"]

prose_318 [label="prose"]

prose_319 [label="prose"]


header_313 -> leaf_320
leaf_320  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** List Boxes

 "]
prose_314 -> { raw_321 literal_322 raw_323 literal_324 raw_325 link_326 raw_327}
{rank=same; raw_321 literal_322 raw_323 literal_324 raw_325 link_326 raw_327}

raw_321 [label="raw"]

literal_322 [label="literal"]

raw_323 [label="raw"]

literal_324 [label="literal"]

raw_325 [label="raw"]

link_326 [label="link"]

raw_327 [label="raw"]


raw_321 -> leaf_328
leaf_328  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Lists can have, as a first element, a box, either a checkbox "]
literal_322 -> leaf_329
leaf_329  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[ ]"]
raw_323 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or a 
radio box "]
literal_324 -> leaf_331
leaf_331  [color=Gray,shape=rectangle,fontname=Inconsolata,label="( )"]
raw_325 -> leaf_332
leaf_332  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  These are either empty with whitespace or have contents
from a limited pallete of symbols.  Their function is described in the "]
link_326 -> { anchortext_333 url_334}
{rank=same; anchortext_333 url_334}

anchortext_333 [label="anchortext"]

url_334 [label="url"]


anchortext_333 -> leaf_335
leaf_335  [color=Gray,shape=rectangle,fontname=Inconsolata,label="runtime"]
url_334 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_327 -> leaf_337
leaf_337  [color=Gray,shape=rectangle,fontname=Inconsolata,label="]] section. 
"]
codeblock_315 -> leaf_338
leaf_338  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - [ ] #todo finish orb.orb
    - [X] Metalanguage
    - [X] Prose and Structure
    - [REVISE] Link
    - [ ] Code Block

  - Fruits
    - ( ) Bananas
    - (*) Coconuts
    - ( ) Grapes"]
prose_316 -> { raw_339}
{rank=same; raw_339}

raw_339 [label="raw"]


raw_339 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These two types can't meaningfully mix on the same level of a list.  The one
the parser sees first will be applied.
"]
prose_317 -> { raw_341}
{rank=same; raw_341}

raw_341 [label="raw"]


raw_341 -> leaf_342
leaf_342  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The radio button is contagious, if the parser encounters one all lines on
that level get one. 
"]
prose_318 -> { raw_343}
{rank=same; raw_343}

raw_343 [label="raw"]


raw_343 -> leaf_344
leaf_344  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The check box is not, it's ok to include it on some lines but not others.  If
the parser sees a check box and then a radio button, it will turn the radio
button into a check box.
"]
prose_319 -> { raw_345 literal_346 raw_347}
{rank=same; raw_345 literal_346 raw_347}

raw_345 [label="raw"]

literal_346 [label="literal"]

raw_347 [label="raw"]


raw_345 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The radio button can only have one "]
literal_346 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_347 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label="; the parser will ignore, and the
linter remove, any others. 

"]
section_295 -> { header_351 prose_352 codeblock_353 prose_354}
{rank=same; header_351 prose_352 codeblock_353 prose_354}

header_351 [label="4 : Key/value pairs"]

prose_352 [label="prose"]

codeblock_353 [label="code block 366-370"]

prose_354 [label="prose"]


header_351 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Key/value pairs

 "]
prose_352 -> { raw_356 literal_357 raw_358}
{rank=same; raw_356 literal_357 raw_358}

raw_356 [label="raw"]

literal_357 [label="literal"]

raw_358 [label="raw"]


raw_356 -> leaf_359
leaf_359  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A list element can consist of key/value pairs, separated with a "]
literal_357 -> leaf_360
leaf_360  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":"]
raw_358 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
codeblock_353 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" - first key:
   - value : another value
   - 42 : the answer"]
prose_354 -> { raw_363}
{rank=same; raw_363}

raw_363 [label="raw"]


raw_363 -> leaf_364
leaf_364  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
From the runtime perspective the left and right sides are basically strings,
as we build out the Clu runtime we'll have better expectations for what
keys and values would look like as data. 

"]
section_202 -> { header_365 prose_366 prose_367 codeblock_368 prose_369 prose_370 prose_371 codeblock_372 prose_373 prose_374}
{rank=same; header_365 prose_366 prose_367 codeblock_368 prose_369 prose_370 prose_371 codeblock_372 prose_373 prose_374}

header_365 [label="3 : Code Block"]

prose_366 [label="prose"]

prose_367 [label="prose"]

codeblock_368 [label="code block 384-388"]

prose_369 [label="prose"]

prose_370 [label="prose"]

prose_371 [label="prose"]

codeblock_372 [label="code block 399-403"]

prose_373 [label="prose"]

prose_374 [label="prose"]


header_365 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Code Block

 "]
prose_366 -> { raw_376}
{rank=same; raw_376}

raw_376 [label="raw"]


raw_376 -> leaf_377
leaf_377  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The reason Orb exists is so that Grimoire can exist.  We do codeblocks
carefully. 
"]
prose_367 -> { raw_378}
{rank=same; raw_378}

raw_378 [label="raw"]


raw_378 -> leaf_379
leaf_379  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A codeblock looks like so:
"]
codeblock_368 -> leaf_380
leaf_380  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!orb
*** Some Orb content
#/orb"]
prose_369 -> { raw_381}
{rank=same; raw_381}

raw_381 [label="raw"]


raw_381 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Try that trick in Git-Flavored Markdown...
"]
prose_370 -> { raw_383 literal_384 raw_385 literal_386 raw_387}
{rank=same; raw_383 literal_384 raw_385 literal_386 raw_387}

raw_383 [label="raw"]

literal_384 [label="literal"]

raw_385 [label="raw"]

literal_386 [label="literal"]

raw_387 [label="raw"]


raw_383 -> leaf_388
leaf_388  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The number of initial "]
literal_384 -> leaf_389
leaf_389  [color=Gray,shape=rectangle,fontname=Inconsolata,label="!!"]
raw_385 -> leaf_390
leaf_390  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" needs to match the closing "]
literal_386 -> leaf_391
leaf_391  [color=Gray,shape=rectangle,fontname=Inconsolata,label="//"]
raw_387 -> leaf_392
leaf_392  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", allowing any 
utf-8 string at all to be enclosed with this method.  We consider this an
important property to have in an enclosure encoding. 
"]
prose_371 -> { raw_393}
{rank=same; raw_393}

raw_393 [label="raw"]


raw_393 -> leaf_394
leaf_394  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code blocks must be opened, but needn't be closed, as a parser will recognize
EOF as a code block closure.  This has a fortunate side effect, as this:
"]
codeblock_372 -> leaf_395
leaf_395  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!/usr/bin/python

from future import bettertools"]
prose_373 -> { raw_396}
{rank=same; raw_396}

raw_396 [label="raw"]


raw_396 -> leaf_397
leaf_397  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Is a valid Orb document containing a python script.
"]
prose_374 -> { raw_398}
{rank=same; raw_398}

raw_398 [label="raw"]


raw_398 -> leaf_399
leaf_399  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Codeblock headers and footers, unlike most structure lines, cannot begin
with whitespace. 

"]
section_203 -> { header_400 prose_401 prose_402 codeblock_403 prose_404 codeblock_405 prose_406 codeblock_407 prose_408}
{rank=same; header_400 prose_401 prose_402 codeblock_403 prose_404 codeblock_405 prose_406 codeblock_407 prose_408}

header_400 [label="3 : Table"]

prose_401 [label="prose"]

prose_402 [label="prose"]

codeblock_403 [label="code block 421-424"]

prose_404 [label="prose"]

codeblock_405 [label="code block 429-433"]

prose_406 [label="prose"]

codeblock_407 [label="code block 437-440"]

prose_408 [label="prose"]


header_400 -> leaf_409
leaf_409  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Table

 "]
prose_401 -> { raw_410}
{rank=same; raw_410}

raw_410 [label="raw"]


raw_410 -> leaf_411
leaf_411  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Tables are our matrix data structure.  I have no immediate use for 
spreadsheets that I can't meet with other software, but admire their
inclusion in Org and do use tables in markup from time to time.
"]
prose_402 -> { raw_412 literal_413 raw_414}
{rank=same; raw_412 literal_413 raw_414}

raw_412 [label="raw"]

literal_413 [label="literal"]

raw_414 [label="raw"]


raw_412 -> leaf_415
leaf_415  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't intend to do much more than recognize them in the near future,
but a glance at what Org offers with tables should give a sense of how
we want to use them within "]
literal_413 -> leaf_416
leaf_416  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
raw_414 -> leaf_417
leaf_417  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". 
"]
codeblock_403 -> leaf_418
leaf_418  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| 2  | 4  | 6  | 8  |
| 10 | 12 | 14 | 16 |"]
prose_404 -> { raw_419}
{rank=same; raw_419}

raw_419 [label="raw"]


raw_419 -> leaf_420
leaf_420  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
With a couple small refinements, this one should render with a line
between the header and therows:
"]
codeblock_405 -> leaf_421
leaf_421  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| a  | b  | c  | d  |
~ 3  | 6  | 9  | 12 |
| 18 | 21 | 24 | 27 |"]
prose_406 -> { raw_422}
{rank=same; raw_422}

raw_422 [label="raw"]


raw_422 -> leaf_423
leaf_423  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To extend a row virtually over two or more text lines
"]
codeblock_407 -> leaf_424
leaf_424  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| cat, | chien,  | gato,    \\
| hat  | chapeau | sombrero |"]
prose_408 -> { raw_425 literal_426 raw_427}
{rank=same; raw_425 literal_426 raw_427}

raw_425 [label="raw"]

literal_426 [label="literal"]

raw_427 [label="raw"]


raw_425 -> leaf_428
leaf_428  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The only way to slip a "]
literal_426 -> leaf_429
leaf_429  [color=Gray,shape=rectangle,fontname=Inconsolata,label="|"]
raw_427 -> leaf_430
leaf_430  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into a table cell is to put it inside a 
«string». Other than that it's prose country. 

"]
section_204 -> { header_431 prose_432 prose_433 prose_434}
{rank=same; header_431 prose_432 prose_433 prose_434}

header_431 [label="3 : Link  "]

prose_432 [label="prose"]

prose_433 [label="prose"]

prose_434 [label="prose"]


header_431 -> leaf_435
leaf_435  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Link	

  "]
prose_432 -> { raw_436 link_437 raw_438}
{rank=same; raw_436 link_437 raw_438}

raw_436 [label="raw"]

link_437 [label="link"]

raw_438 [label="raw"]


raw_436 -> leaf_439
leaf_439  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The most "]
link_437 -> { anchortext_440 url_441}
{rank=same; anchortext_440 url_441}

anchortext_440 [label="anchortext"]

url_441 [label="url"]


anchortext_440 -> leaf_442
leaf_442  [color=Gray,shape=rectangle,fontname=Inconsolata,label="basic link"]
url_441 -> leaf_443
leaf_443  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_438 -> leaf_444
leaf_444  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" follows a simple «[[description]
[url]]» pattern.  Markdown gets this right.  In HTML you'll see the 
href before the link text, but looking at HTML is a mistake.
"]
prose_433 -> { raw_445}
{rank=same; raw_445}

raw_445 [label="raw"]


raw_445 -> leaf_446
leaf_446  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Org-mode follows the opposite convention.  This breaks the flow of text for
the reader and Orb format must be legible in raw form.
"]
prose_434 -> { raw_447}
{rank=same; raw_447}

raw_447 [label="raw"]


raw_447 -> leaf_448
leaf_448  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
tk other Org-iastic link types.

"]
section_205 -> { header_449 prose_450 codeblock_451 prose_452 prose_453 prose_454 prose_455}
{rank=same; header_449 prose_450 codeblock_451 prose_452 prose_453 prose_454 prose_455}

header_449 [label="3 : Drawer"]

prose_450 [label="prose"]

codeblock_451 [label="code block 463-467"]

prose_452 [label="prose"]

prose_453 [label="prose"]

prose_454 [label="prose"]

prose_455 [label="prose"]


header_449 -> leaf_456
leaf_456  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Drawer

  "]
prose_450 -> { raw_457}
{rank=same; raw_457}

raw_457 [label="raw"]


raw_457 -> leaf_458
leaf_458  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A drawer is a block that's hidden by default. The computer sees it,
the user sees ⦿, or a similar rune.
"]
codeblock_451 -> leaf_459
leaf_459  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[a-drawer]:
contents
:[a-drawer]:"]
prose_452 -> { raw_460}
{rank=same; raw_460}

raw_460 [label="raw"]


raw_460 -> leaf_461
leaf_461  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This closes to a single Unicode character, such as ⦿, which can't be deleted
without opening it. Deleting into an ordinary fold marker opens the fold,
deleting towards a drawer marker skips past it.
"]
prose_453 -> { raw_462 literal_463 raw_464 literal_465 raw_466}
{rank=same; raw_462 literal_463 raw_464 literal_465 raw_466}

raw_462 [label="raw"]

literal_463 [label="literal"]

raw_464 [label="raw"]

literal_465 [label="literal"]

raw_466 [label="raw"]


raw_462 -> leaf_467
leaf_467  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
literal_463 -> leaf_468
leaf_468  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a-drawer"]
raw_464 -> leaf_469
leaf_469  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is a handle, the @ isn't needed here but you could include it.
It's ok to just leave it blank: "]
literal_465 -> leaf_470
leaf_470  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[ ]:"]
raw_466 -> leaf_471
leaf_471  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_454 -> { raw_472}
{rank=same; raw_472}

raw_472 [label="raw"]


raw_472 -> leaf_473
leaf_473  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The only purpose of a drawer is to draw a folding layer around some text
that's normally kept closed.  If you're doing something fancy you might
have a long header of imports and configs that you don't want to look at
all the time. 
"]
prose_455 -> { raw_474}
{rank=same; raw_474}

raw_474 [label="raw"]


raw_474 -> leaf_475
leaf_475  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Honestly not sure I'm going to bother implementing this part. Late in the 
game if ever. 

























"]

}
