digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 508"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-224"]


section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7 section_8 section_9}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7 section_8 section_9}

header_2 [label="1 : Orb format"]

prose_3 [label="prose"]

section_4 [label="section: 7-21"]

section_5 [label="section: 22-43"]

section_6 [label="section: 44-92"]

section_7 [label="section: 106-142"]

section_8 [label="section: 143-150"]

section_9 [label="section: 225-457"]


header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Orb format"]
prose_3 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The grimoire tools work with a structured text format which we call Orb.
This is an introduction to that format.

"]
section_4 -> { header_13 prose_14 prose_15 prose_16}
{rank=same; header_13 prose_14 prose_15 prose_16}

header_13 [label="2 : Metalanguage"]

prose_14 [label="prose"]

prose_15 [label="prose"]

prose_16 [label="prose"]


header_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Metalanguage"]
prose_14 -> { raw_18}
{rank=same; raw_18}

raw_18 [label="raw"]


raw_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  I call Orb a metalanguage, because it can by design include any other
structured text format within it.  Provided it may be represented in utf-8!
This is no stricture in practice. 
"]
prose_15 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The Orb format aims to be equally useful for markup, literate programming,
configuration, data exchange, and the sort of interactive notebook which 
Jupyter and org-babel can produce.
"]
prose_16 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The first parser and tool is Grimoire, which, as a bootstrap, is focused on
literate programming.  This will in turn be the format for the tools in the
bettertools suite. 

"]
section_5 -> { header_24 prose_25 prose_26 prose_27}
{rank=same; header_24 prose_25 prose_26 prose_27}

header_24 [label="2 : Goals"]

prose_25 [label="prose"]

prose_26 [label="prose"]

prose_27 [label="prose"]


header_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Goals"]
prose_25 -> { raw_29}
{rank=same; raw_29}

raw_29 [label="raw"]


raw_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Orb is:
"]
prose_26 -> { raw_31}
{rank=same; raw_31}

raw_31 [label="raw"]


raw_31 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - Error free:  An Orb document is never in a state of error.  Any valid
                 utf-8 string is an Orb document.
  - Line based:  Orb files may be rapidly separated into their elements
                 by splitting into lines and examining the first few
                 characters.
  - Humane:      Orb is carefully designed to be readable, as is, by
                 ordinary humans.
  - General:     There are no characters such as <>& in HTML which must be
                 escaped.  Orb codeblocks can enclose any other format,
                 including Orb format.  Orb strings are «brace balanced»
                 and can enclose any utf-8 string as a consequence. 
"]
prose_27 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
While it is possible to do some fancy things with Orb, it is also a
comfortable format to write a blog post, or put a few key-value pairs into
a config file.  If you were to send an email in Orb format, the recipient
might not even notice. 

"]
section_6 -> { header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 section_47}
{rank=same; header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 section_47}

header_35 [label="2 : Encoding"]

prose_36 [label="prose"]

prose_37 [label="prose"]

prose_38 [label="prose"]

prose_39 [label="prose"]

prose_40 [label="prose"]

prose_41 [label="prose"]

prose_42 [label="prose"]

prose_43 [label="prose"]

prose_44 [label="prose"]

prose_45 [label="prose"]

prose_46 [label="prose"]

section_47 [label="section: 93-105"]


header_35 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Encoding"]
prose_36 -> { raw_49}
{rank=same; raw_49}

raw_49 [label="raw"]


raw_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Orb documents are encoded in utf-8.  
"]
prose_37 -> { raw_51}
{rank=same; raw_51}

raw_51 [label="raw"]


raw_51 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The core syntax is defined in terms of the reachable keys on a US keyboard.
This tradition is firmly entrenched in the mid teens, and I have no
designs on budging that at present.  The miser in me likes that they're
a byte each.  The lawyer in me insists that this isn't ASCII, which is a
seven-bit legacy encoding.
"]
prose_38 -> { raw_53}
{rank=same; raw_53}

raw_53 [label="raw"]


raw_53 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We aren't at all reluctant to use Unicode characters as part of the format. 
Grimoire «strings» are the most visible example of this, along with drawer
and fold icons, which are actual parts of an Orb document. 
"]
prose_39 -> { raw_55}
{rank=same; raw_55}

raw_55 [label="raw"]


raw_55 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is case sensitive and uses lower-snake-case for built-in English
phrases. There is a convention (see classes) that uses capitalization of
user words to affect semantics.  
"]
prose_40 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[tk] is there though
"]
prose_41 -> { raw_59}
{rank=same; raw_59}

raw_59 [label="raw"]


raw_59 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Orb is a format for text.  There are many ways of writing text, but only one
way of encoding it that matters.  There is a long tail of Unicode complexity,
and there are traces of Committee spattered all over it; nonetheless we 
should be grateful that utf-8 won, in a world in which we still drive cars on
both possible sides of the road. 
"]
prose_42 -> { raw_61 link_62 raw_63}
{rank=same; raw_61 link_62 raw_63}

raw_61 [label="raw"]

link_62 [label="link"]

raw_63 [label="raw"]


raw_61 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that while we have our "]
link_62 -> { anchortext_65 url_66}
{rank=same; anchortext_65 url_66}

anchortext_65 [label="anchortext"]

url_66 [label="url"]


anchortext_65 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="own opinions about utf-8"]
url_66 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_63 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" our vision of
heaven is backward-compatible with the inferior version foisted upon us by a 
jealous software monopoly.
"]
prose_43 -> { raw_70 link_71 raw_72}
{rank=same; raw_70 link_71 raw_72}

raw_70 [label="raw"]

link_71 [label="link"]

raw_72 [label="raw"]


raw_70 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Bidirectional handling in a context that's indentation sensitive is an 
example of something subtle. Orb format uses indentation in a few key places,
and a compliant parser will need to detect and respect RTL [tk?] markers.
Exactly how is spelled out under "]
link_71 -> { anchortext_74 url_75}
{rank=same; anchortext_74 url_75}

anchortext_74 [label="anchortext"]

url_75 [label="url"]


anchortext_74 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="indentation"]
url_75 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_72 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
prose_44 -> { raw_79}
{rank=same; raw_79}

raw_79 [label="raw"]


raw_79 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'd love to get a Hebrew and/or Arabic fluent hacker on the project
early, to make sure this works correctly.  I'll settle for Aramaic.
"]
prose_45 -> { raw_81}
{rank=same; raw_81}

raw_81 [label="raw"]


raw_81 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Another thing I want to get right is equivalence. If you have a
variable called \"Glück\" the compiler shouldn't complain if it's
rendered in either of the valid ways. For some sequences that's
\"any of the valid ways\". If we normalized your prose, you might
have problems later, so we don't want to solve it that way.
"]
prose_46 -> { raw_83 link_84 raw_85 link_86 raw_87}
{rank=same; raw_83 link_84 raw_85 link_86 raw_87}

raw_83 [label="raw"]

link_84 [label="link"]

raw_85 [label="raw"]

link_86 [label="link"]

raw_87 [label="raw"]


raw_83 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This consideration mostly applys to "]
link_84 -> { anchortext_89 url_90}
{rank=same; anchortext_89 url_90}

anchortext_89 [label="anchortext"]

url_90 [label="url"]


anchortext_89 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hashtags"]
url_90 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_85 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
link_86 -> { anchortext_94 url_95}
{rank=same; anchortext_94 url_95}

anchortext_94 [label="anchortext"]

url_95 [label="url"]


anchortext_94 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="handles"]
url_95 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_87 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The idea is that Orb files will respect all the 
wacky typographic equivalences that Unicode has gifted us with.

"]
section_47 -> { header_99 prose_100 prose_101 prose_102}
{rank=same; header_99 prose_100 prose_101 prose_102}

header_99 [label="4 : Tabs"]

prose_100 [label="prose"]

prose_101 [label="prose"]

prose_102 [label="prose"]


header_99 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Tabs"]
prose_100 -> { raw_104}
{rank=same; raw_104}

raw_104 [label="raw"]


raw_104 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The vexacious ASCII character 8 will never be found in an Orb document.  If
encountered, it will be reduced to two spaces.  Grimoire will complain.
"]
prose_101 -> { raw_106}
{rank=same; raw_106}

raw_106 [label="raw"]


raw_106 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not an /error/ mind you, it's a well-defined input that will become 
two spaces.  If encountered by one of my tools, the tabs will be permanently
gone. 
"]
prose_102 -> { raw_108}
{rank=same; raw_108}

raw_108 [label="raw"]


raw_108 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Yes. This applies to your source code blocks as well.  It is time we put 
away childish things.  

"]
section_7 -> { header_110 prose_111 prose_112 prose_113 prose_114 prose_115 prose_116 prose_117 prose_118}
{rank=same; header_110 prose_111 prose_112 prose_113 prose_114 prose_115 prose_116 prose_117 prose_118}

header_110 [label="2 : Prose and Structure"]

prose_111 [label="prose"]

prose_112 [label="prose"]

prose_113 [label="prose"]

prose_114 [label="prose"]

prose_115 [label="prose"]

prose_116 [label="prose"]

prose_117 [label="prose"]

prose_118 [label="prose"]


header_110 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Prose and Structure"]
prose_111 -> { raw_120}
{rank=same; raw_120}

raw_120 [label="raw"]


raw_120 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The major distinction in Orb is between prose and structure.
"]
prose_112 -> { raw_122}
{rank=same; raw_122}

raw_122 [label="raw"]


raw_122 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose is the default parsing state. It is far from unstructured from the
runtime perspective. Although this needn't be embedded in the parse
tree, Grimoire understands concepts such as paragraphs, words, punctuation,
capital letters, languages, and anything else proper to prose.
"]
prose_113 -> { raw_124}
{rank=same; raw_124}

raw_124 [label="raw"]


raw_124 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I refer to human languages, but Grimoire understands programming languages
also. In principle, all of them, it shouldn't be harder to add them than
it is to call them from shell, though getting a runtime rigged up to
another runtime always calls for some finesse to derive a good experience.
"]
prose_114 -> { raw_126}
{rank=same; raw_126}

raw_126 [label="raw"]


raw_126 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
\"Programming languages\" is overly specific.  Grimoire draws a distinction
between prose and structure. Blocks may contain either, or both.
"]
prose_115 -> { raw_128 bold_129 raw_130}
{rank=same; raw_128 bold_129 raw_130}

raw_128 [label="raw"]

bold_129 [label="bold"]

raw_130 [label="raw"]


raw_128 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something that's nice about a language build on a prose/structure
relationship is that it can be error free.  Anything "]
bold_129 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym"]
raw_130 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" can't build into
a structure is just prose.
"]
prose_116 -> { raw_134}
{rank=same; raw_134}

raw_134 [label="raw"]


raw_134 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Markdown has this property.  Sometimes you run into parsers which
build errors into Markdown, which is itself erroneous.  If you [[RTFM]
[http://daringfireball.net/projects/markdown/syntax]],
you'll find the word \"error\" once.  Helpfully explaining how Markdown
keeps you from making one.
"]
prose_117 -> { raw_136}
{rank=same; raw_136}

raw_136 [label="raw"]


raw_136 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do what we can to make the document look the same as it is
in fact structured.  The intention with Orb files is that we work with them
aided by a linter, which lets us be lazy and still get consistent results.
"]
prose_118 -> { raw_138}
{rank=same; raw_138}

raw_138 [label="raw"]


raw_138 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The most important point in this section is that Orb documents do not have
errors and never fail to parse.  You should be able to literally plug any 
Orb parser into a source of entropy and end up with a document, since a
proper utf-8 decoder will drop any invalid bytes it sees. 

"]
section_8 -> { header_140 prose_141 section_142}
{rank=same; header_140 prose_141 section_142}

header_140 [label="2 : Ownership"]

prose_141 [label="prose"]

section_142 [label="section: 151-166"]


header_140 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Ownership"]
prose_141 -> { raw_144}
{rank=same; raw_144}

raw_144 [label="raw"]


raw_144 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The root concept of Orb is a document, which divides into one or more 
sections.  A section owns all structure or prose within it.  This 
paragraph is owned by «** Ownership» above, as are all the rest of the
blocks until the next section header. 

"]
section_142 -> { header_146 prose_147 prose_148 prose_149 section_150}
{rank=same; header_146 prose_147 prose_148 prose_149 section_150}

header_146 [label="3 : Blocking"]

prose_147 [label="prose"]

prose_148 [label="prose"]

prose_149 [label="prose"]

section_150 [label="section: 167-224"]


header_146 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Blocking"]
prose_147 -> { raw_152}
{rank=same; raw_152}

raw_152 [label="raw"]


raw_152 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Orb documents are chunked into sections entirely by their heading lines.
Within a section, prose and structure alike are organized into blocks.  
The defining marker of blocks is blank lines.
"]
prose_148 -> { raw_154}
{rank=same; raw_154}

raw_154 [label="raw"]


raw_154 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This second paragraph is the second block of the «*** Blocking» section.
Taking a look at the source document, you'll see that I put (single)
newlines between lines, with an 78 column margin.  That should be considered
good style.  If you prefer to have each paragraph be its own line, have at.
"]
prose_149 -> { raw_156}
{rank=same; raw_156}

raw_156 [label="raw"]


raw_156 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A line is considered blank if it contains only Unicode spacemarks.  Grimoire
will smoothly remove any such cruft and replace it with «\\n\\n».  We also
trim trailing whitespace. 

"]
section_150 -> { header_158 prose_159 prose_160 prose_161 prose_162 prose_163 codeblock_164 prose_165 codeblock_166 prose_167 prose_168 codeblock_169 prose_170}
{rank=same; header_158 prose_159 prose_160 prose_161 prose_162 prose_163 codeblock_164 prose_165 codeblock_166 prose_167 prose_168 codeblock_169 prose_170}

header_158 [label="4 : The Cling Rule"]

prose_159 [label="prose"]

prose_160 [label="prose"]

prose_161 [label="prose"]

prose_162 [label="prose"]

prose_163 [label="prose"]

codeblock_164 [label="code block 187-194"]

prose_165 [label="prose"]

codeblock_166 [label="code block 199-206"]

prose_167 [label="prose"]

prose_168 [label="prose"]

codeblock_169 [label="code block 213-219"]

prose_170 [label="prose"]


header_158 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** The Cling Rule"]
prose_159 -> { raw_172 link_173 raw_174}
{rank=same; raw_172 link_173 raw_174}

raw_172 [label="raw"]

link_173 [label="link"]

raw_174 [label="raw"]


raw_172 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  "]
link_173 -> { anchortext_176 url_177}
{rank=same; anchortext_176 url_177}

anchortext_176 [label="anchortext"]

url_177 [label="url"]


anchortext_176 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Tags"]
url_177 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_174 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are used both to provide names to blocks in Orb format
and to specify various actions in knitting and weaving.  They may be placed
above or below the block which they affect.
"]
prose_160 -> { raw_181}
{rank=same; raw_181}

raw_181 [label="raw"]


raw_181 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The cling rule specifies that a group 'clings' to another group when
it is closer to that group than the other group. Ties resolve down.
"]
prose_161 -> { raw_183}
{rank=same; raw_183}

raw_183 [label="raw"]


raw_183 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This should make it intuitive to group elements that aren't grouping the
way you expect: put in whitespace until the block is visually distinguished
from the surroundings.
"]
prose_162 -> { raw_185}
{rank=same; raw_185}

raw_185 [label="raw"]


raw_185 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cling applies between blocks which are at the same level of ownership.
Ownership has precedence over cling: all blocks underneath e.g. a header
line are owned by that line, newlines notwithstanding.
"]
prose_163 -> { raw_187}
{rank=same; raw_187}

raw_187 [label="raw"]


raw_187 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that indentation of e.g. lists invokes the cling rule within the
indentation level.
"]
codeblock_164 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |

#tag


someprose on a block"]
prose_165 -> { raw_190}
{rank=same; raw_190}

raw_190 [label="raw"]


raw_190 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the table, but
"]
codeblock_166 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |


#tag

someprose on a block"]
prose_167 -> { raw_193}
{rank=same; raw_193}

raw_193 [label="raw"]


raw_193 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the block.
"]
prose_168 -> { raw_195}
{rank=same; raw_195}

raw_195 [label="raw"]


raw_195 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Even clings are resolved forwards:
"]
codeblock_169 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |

#tag

someprose on a block"]
prose_170 -> { raw_198}
{rank=same; raw_198}

raw_198 [label="raw"]


raw_198 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the prose block.

"]
section_9 -> { header_200 prose_201 prose_202 section_203 section_204 section_205 section_206 section_207 section_208 section_209}
{rank=same; header_200 prose_201 prose_202 section_203 section_204 section_205 section_206 section_207 section_208 section_209}

header_200 [label="2 : Structural elements"]

prose_201 [label="prose"]

prose_202 [label="prose"]

section_203 [label="section: 237-255"]

section_204 [label="section: 256-286"]

section_205 [label="section: 287-361"]

section_206 [label="section: 377-410"]

section_207 [label="section: 411-445"]

section_208 [label="section: 446-457"]

section_209 [label="section: 458-508"]


header_200 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Structural elements"]
prose_201 -> { raw_211}
{rank=same; raw_211}

raw_211 [label="raw"]


raw_211 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Structure and prose are the figure and ground of Orb format.  We speak of
structure and prose on a block-by-block basis, and within some structure
blocks there are regions of prose.  Prose in turn routinely contains
structural regions.
"]
prose_202 -> { raw_213}
{rank=same; raw_213}

raw_213 [label="raw"]


raw_213 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This section will discuss under what circumstances an Orb parser will create
structure, with some discursions into the semantics these distinctions
represent. 

"]
section_203 -> { header_215 prose_216 codeblock_217 prose_218 prose_219}
{rank=same; header_215 prose_216 codeblock_217 prose_218 prose_219}

header_215 [label="3 : Headlines"]

prose_216 [label="prose"]

codeblock_217 [label="code block 242-244"]

prose_218 [label="prose"]

prose_219 [label="prose"]


header_215 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Headlines"]
prose_216 -> { raw_221}
{rank=same; raw_221}

raw_221 [label="raw"]


raw_221 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Headlines divide a document into sections.  The grammar for recognizing
a headline is as follows:
"]
codeblock_217 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    headline = WS?  '*'+  ' '  prose  NL"]
prose_218 -> { raw_224 literal_225 raw_226}
{rank=same; raw_224 literal_225 raw_226}

raw_224 [label="raw"]

literal_225 [label="literal"]

raw_226 [label="raw"]


raw_224 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The number of "]
literal_225 -> leaf_228
leaf_228  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_226 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" determine the level of ownership.  This is a declarative
relationship, though I lack a clean syntax to express it other than
functionally at present. 
"]
prose_219 -> { raw_230 literal_231 raw_232}
{rank=same; raw_230 literal_231 raw_232}

raw_230 [label="raw"]

literal_231 [label="literal"]

raw_232 [label="raw"]


raw_230 -> leaf_233
leaf_233  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The content within "]
literal_231 -> leaf_234
leaf_234  [color=Gray,shape=rectangle,fontname=Inconsolata,label="prose"]
raw_232 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" has the luxury of being context-sensitive.  In
particular we treat tags on a headline as though they're on a tagline below
they headline. 


"]
section_204 -> { header_236 prose_237 prose_238 prose_239 codeblock_240 prose_241 prose_242 codeblock_243 prose_244}
{rank=same; header_236 prose_237 prose_238 prose_239 codeblock_240 prose_241 prose_242 codeblock_243 prose_244}

header_236 [label="3 : Tags and Taglines"]

prose_237 [label="prose"]

prose_238 [label="prose"]

prose_239 [label="prose"]

codeblock_240 [label="code block 266-268"]

prose_241 [label="prose"]

prose_242 [label="prose"]

codeblock_243 [label="code block 278-281"]

prose_244 [label="prose"]


header_236 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Tags and Taglines"]
prose_237 -> { raw_246 literal_247 raw_248 literal_249 raw_250}
{rank=same; raw_246 literal_247 raw_248 literal_249 raw_250}

raw_246 [label="raw"]

literal_247 [label="literal"]

raw_248 [label="raw"]

literal_249 [label="literal"]

raw_250 [label="raw"]


raw_246 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Tags are the control structures for Orb.  There are "]
literal_247 -> leaf_252
leaf_252  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#hashtags"]
raw_248 -> leaf_253
leaf_253  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which
loosely correspond to functions or messages, and "]
literal_249 -> leaf_254
leaf_254  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@handles"]
raw_250 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which more
directly correspond to symbols.  
"]
prose_238 -> { raw_256 link_257 raw_258}
{rank=same; raw_256 link_257 raw_258}

raw_256 [label="raw"]

link_257 [label="link"]

raw_258 [label="raw"]


raw_256 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The semantics of tags belong in the "]
link_257 -> { anchortext_260 url_261}
{rank=same; anchortext_260 url_261}

anchortext_260 [label="anchortext"]

url_261 [label="url"]


anchortext_260 -> leaf_262
leaf_262  [color=Gray,shape=rectangle,fontname=Inconsolata,label="runtime"]
url_261 -> leaf_263
leaf_263  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_258 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label="]] section.
"]
prose_239 -> { raw_265}
{rank=same; raw_265}

raw_265 [label="raw"]


raw_265 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For now let us note that the rule
"]
codeblock_240 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  hashtag = WS+  '#'  symbol"]
prose_241 -> { raw_268 bold_269 raw_270 literal_271 raw_272}
{rank=same; raw_268 bold_269 raw_270 literal_271 raw_272}

raw_268 [label="raw"]

bold_269 [label="bold"]

raw_270 [label="raw"]

literal_271 [label="literal"]

raw_272 [label="raw"]


raw_268 -> leaf_273
leaf_273  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  "]
bold_269 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label="may"]
raw_270 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" not appear in (all) prose contexts, this is still undecided.  This is 
true of handles as well given the state of "]
literal_271 -> leaf_276
leaf_276  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym"]
raw_272 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at the present time, 
but I am more firmly convinced of the value of @handle as a short in-place
expansion of a handleline. I don't think trying to parse a mid-block #export
as meaning something is as valuable. 
"]
prose_242 -> { raw_278}
{rank=same; raw_278}

raw_278 [label="raw"]


raw_278 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These two rules are currently in use:
"]
codeblock_243 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  hashline = WS?  '#'  symbol  ' '  prose  NL
  handleline = WS?  '@'  symbol  ' '  prose  NL"]
prose_244 -> { raw_281 literal_282 raw_283 literal_284 raw_285}
{rank=same; raw_281 literal_282 raw_283 literal_284 raw_285}

raw_281 [label="raw"]

literal_282 [label="literal"]

raw_283 [label="raw"]

literal_284 [label="literal"]

raw_285 [label="raw"]


raw_281 -> leaf_286
leaf_286  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Structure is designed to work on a line-by-line basis,
any "]
literal_282 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label="line"]
raw_283 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" rule has an implied "]
literal_284 -> leaf_289
leaf_289  [color=Gray,shape=rectangle,fontname=Inconsolata,label="^"]
raw_285 -> leaf_290
leaf_290  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". 

"]
section_205 -> { header_291 prose_292 prose_293 codeblock_294 prose_295 codeblock_296 prose_297 codeblock_298 prose_299 codeblock_300 prose_301 section_302 section_303}
{rank=same; header_291 prose_292 prose_293 codeblock_294 prose_295 codeblock_296 prose_297 codeblock_298 prose_299 codeblock_300 prose_301 section_302 section_303}

header_291 [label="3 : List "]

prose_292 [label="prose"]

prose_293 [label="prose"]

codeblock_294 [label="code block 295-297"]

prose_295 [label="prose"]

codeblock_296 [label="code block 301-303"]

prose_297 [label="prose"]

codeblock_298 [label="code block 309-312"]

prose_299 [label="prose"]

codeblock_300 [label="code block 316-319"]

prose_301 [label="prose"]

section_302 [label="section: 328-361"]

section_303 [label="section: 362-376"]


header_291 -> leaf_304
leaf_304  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** List "]
prose_292 -> { raw_305}
{rank=same; raw_305}

raw_305 [label="raw"]


raw_305 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Lists are both a markup format and a flexible data container.  In the emacs
org-mode, headline-type structures do the heavy lifting for TODO lists and
the like.  This was org's original purpose, with document markup coming later.
"]
prose_293 -> { raw_307}
{rank=same; raw_307}

raw_307 [label="raw"]


raw_307 -> leaf_308
leaf_308  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Orb lists come in unnumbered and numbered.  Unnumbered lists follow this rule:
"]
codeblock_294 -> leaf_309
leaf_309  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  listline-un = WS? '- ' prose NL"]
prose_295 -> { raw_310}
{rank=same; raw_310}

raw_310 [label="raw"]


raw_310 -> leaf_311
leaf_311  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
While numbered lists match this:
"]
codeblock_296 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  listline-li = WS? digits '. ' prose NL"]
prose_297 -> { raw_313}
{rank=same; raw_313}

raw_313 [label="raw"]


raw_313 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For lists, as with any structure group, the semantics of the prose section are
somewhat flexible.  The cling rule for lists parses indentation so that
multi-line entries are possible:
"]
codeblock_298 -> leaf_315
leaf_315  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - list entry 
   prose directly under, bad style"]
prose_299 -> { raw_316}
{rank=same; raw_316}

raw_316 [label="raw"]


raw_316 -> leaf_317
leaf_317  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
vs.
"]
codeblock_300 -> leaf_318
leaf_318  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - list entry 
    continues list entry"]
prose_301 -> { raw_319}
{rank=same; raw_319}

raw_319 [label="raw"]


raw_319 -> leaf_320
leaf_320  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
As in Markdown, the parser will accept any numbers as a numbered list without
checking their order.  The linter will increment by one starting from the
number of the first index, so if you start with \"1. \" or \"0. \" or \"10. \" you
get the subsequent.  This behavior can be suppressed with a hashtag directive
yet to be added.  

"]
section_302 -> { header_321 prose_322 codeblock_323 prose_324 prose_325 prose_326 prose_327}
{rank=same; header_321 prose_322 codeblock_323 prose_324 prose_325 prose_326 prose_327}

header_321 [label="4 : List Boxes"]

prose_322 [label="prose"]

codeblock_323 [label="code block 335-346"]

prose_324 [label="prose"]

prose_325 [label="prose"]

prose_326 [label="prose"]

prose_327 [label="prose"]


header_321 -> leaf_328
leaf_328  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** List Boxes

 "]
prose_322 -> { raw_329 literal_330 raw_331 literal_332 raw_333 link_334 raw_335}
{rank=same; raw_329 literal_330 raw_331 literal_332 raw_333 link_334 raw_335}

raw_329 [label="raw"]

literal_330 [label="literal"]

raw_331 [label="raw"]

literal_332 [label="literal"]

raw_333 [label="raw"]

link_334 [label="link"]

raw_335 [label="raw"]


raw_329 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Lists can have, as a first element, a box, either a checkbox "]
literal_330 -> leaf_337
leaf_337  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[ ]"]
raw_331 -> leaf_338
leaf_338  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or a 
radio box "]
literal_332 -> leaf_339
leaf_339  [color=Gray,shape=rectangle,fontname=Inconsolata,label="( )"]
raw_333 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  These are either empty with whitespace or have contents
from a limited pallete of symbols.  Their function is described in the "]
link_334 -> { anchortext_341 url_342}
{rank=same; anchortext_341 url_342}

anchortext_341 [label="anchortext"]

url_342 [label="url"]


anchortext_341 -> leaf_343
leaf_343  [color=Gray,shape=rectangle,fontname=Inconsolata,label="runtime"]
url_342 -> leaf_344
leaf_344  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_335 -> leaf_345
leaf_345  [color=Gray,shape=rectangle,fontname=Inconsolata,label="]] section. 
"]
codeblock_323 -> leaf_346
leaf_346  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - [ ] #todo finish orb.orb
    - [X] Metalanguage
    - [X] Prose and Structure
    - [REVISE] Link
    - [ ] Code Block

  - Fruits
    - ( ) Bananas
    - (*) Coconuts
    - ( ) Grapes"]
prose_324 -> { raw_347}
{rank=same; raw_347}

raw_347 [label="raw"]


raw_347 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These two types can't meaningfully mix on the same level of a list.  The one
the parser sees first will be applied.
"]
prose_325 -> { raw_349}
{rank=same; raw_349}

raw_349 [label="raw"]


raw_349 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The radio button is contagious, if the parser encounters one all lines on
that level get one. 
"]
prose_326 -> { raw_351}
{rank=same; raw_351}

raw_351 [label="raw"]


raw_351 -> leaf_352
leaf_352  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The check box is not, it's ok to include it on some lines but not others.  If
the parser sees a check box and then a radio button, it will turn the radio
button into a check box.
"]
prose_327 -> { raw_353 literal_354 raw_355}
{rank=same; raw_353 literal_354 raw_355}

raw_353 [label="raw"]

literal_354 [label="literal"]

raw_355 [label="raw"]


raw_353 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The radio button can only have one "]
literal_354 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_355 -> leaf_358
leaf_358  [color=Gray,shape=rectangle,fontname=Inconsolata,label="; the parser will ignore, and the
linter remove, any others. 

"]
section_303 -> { header_359 prose_360 codeblock_361 prose_362}
{rank=same; header_359 prose_360 codeblock_361 prose_362}

header_359 [label="4 : Key/value pairs"]

prose_360 [label="prose"]

codeblock_361 [label="code block 366-370"]

prose_362 [label="prose"]


header_359 -> leaf_363
leaf_363  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Key/value pairs

 "]
prose_360 -> { raw_364 literal_365 raw_366}
{rank=same; raw_364 literal_365 raw_366}

raw_364 [label="raw"]

literal_365 [label="literal"]

raw_366 [label="raw"]


raw_364 -> leaf_367
leaf_367  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A list element can consist of key/value pairs, separated with a "]
literal_365 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":"]
raw_366 -> leaf_369
leaf_369  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
codeblock_361 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" - first key:
   - value : another value
   - 42 : the answer"]
prose_362 -> { raw_371}
{rank=same; raw_371}

raw_371 [label="raw"]


raw_371 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
From the runtime perspective the left and right sides are basically strings,
as we build out the Clu runtime we'll have better expectations for what
keys and values would look like as data. 

"]
section_206 -> { header_373 prose_374 prose_375 codeblock_376 prose_377 prose_378 prose_379 codeblock_380 prose_381 prose_382}
{rank=same; header_373 prose_374 prose_375 codeblock_376 prose_377 prose_378 prose_379 codeblock_380 prose_381 prose_382}

header_373 [label="3 : Code Block"]

prose_374 [label="prose"]

prose_375 [label="prose"]

codeblock_376 [label="code block 384-388"]

prose_377 [label="prose"]

prose_378 [label="prose"]

prose_379 [label="prose"]

codeblock_380 [label="code block 399-403"]

prose_381 [label="prose"]

prose_382 [label="prose"]


header_373 -> leaf_383
leaf_383  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Code Block

 "]
prose_374 -> { raw_384}
{rank=same; raw_384}

raw_384 [label="raw"]


raw_384 -> leaf_385
leaf_385  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The reason Orb exists is so that Grimoire can exist.  We do codeblocks
carefully. 
"]
prose_375 -> { raw_386}
{rank=same; raw_386}

raw_386 [label="raw"]


raw_386 -> leaf_387
leaf_387  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A codeblock looks like so:
"]
codeblock_376 -> leaf_388
leaf_388  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!orb
*** Some Orb content
#/orb"]
prose_377 -> { raw_389}
{rank=same; raw_389}

raw_389 [label="raw"]


raw_389 -> leaf_390
leaf_390  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Try that trick in Git-Flavored Markdown...
"]
prose_378 -> { raw_391 literal_392 raw_393 literal_394 raw_395}
{rank=same; raw_391 literal_392 raw_393 literal_394 raw_395}

raw_391 [label="raw"]

literal_392 [label="literal"]

raw_393 [label="raw"]

literal_394 [label="literal"]

raw_395 [label="raw"]


raw_391 -> leaf_396
leaf_396  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The number of initial "]
literal_392 -> leaf_397
leaf_397  [color=Gray,shape=rectangle,fontname=Inconsolata,label="!!"]
raw_393 -> leaf_398
leaf_398  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" needs to match the closing "]
literal_394 -> leaf_399
leaf_399  [color=Gray,shape=rectangle,fontname=Inconsolata,label="//"]
raw_395 -> leaf_400
leaf_400  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", allowing any 
utf-8 string at all to be enclosed with this method.  We consider this an
important property to have in an enclosure encoding. 
"]
prose_379 -> { raw_401}
{rank=same; raw_401}

raw_401 [label="raw"]


raw_401 -> leaf_402
leaf_402  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code blocks must be opened, but needn't be closed, as a parser will recognize
EOF as a code block closure.  This has a fortunate side effect, as this:
"]
codeblock_380 -> leaf_403
leaf_403  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!/usr/bin/python

from future import bettertools"]
prose_381 -> { raw_404}
{rank=same; raw_404}

raw_404 [label="raw"]


raw_404 -> leaf_405
leaf_405  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Is a valid Orb document containing a python script.
"]
prose_382 -> { raw_406}
{rank=same; raw_406}

raw_406 [label="raw"]


raw_406 -> leaf_407
leaf_407  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Codeblock headers and footers, unlike most structure lines, cannot begin
with whitespace. 

"]
section_207 -> { header_408 prose_409 prose_410 codeblock_411 prose_412 codeblock_413 prose_414 codeblock_415 prose_416}
{rank=same; header_408 prose_409 prose_410 codeblock_411 prose_412 codeblock_413 prose_414 codeblock_415 prose_416}

header_408 [label="3 : Table"]

prose_409 [label="prose"]

prose_410 [label="prose"]

codeblock_411 [label="code block 421-424"]

prose_412 [label="prose"]

codeblock_413 [label="code block 429-433"]

prose_414 [label="prose"]

codeblock_415 [label="code block 437-440"]

prose_416 [label="prose"]


header_408 -> leaf_417
leaf_417  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Table

 "]
prose_409 -> { raw_418}
{rank=same; raw_418}

raw_418 [label="raw"]


raw_418 -> leaf_419
leaf_419  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Tables are our matrix data structure.  I have no immediate use for 
spreadsheets that I can't meet with other software, but admire their
inclusion in Org and do use tables in markup from time to time.
"]
prose_410 -> { raw_420 literal_421 raw_422}
{rank=same; raw_420 literal_421 raw_422}

raw_420 [label="raw"]

literal_421 [label="literal"]

raw_422 [label="raw"]


raw_420 -> leaf_423
leaf_423  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't intend to do much more than recognize them in the near future,
but a glance at what Org offers with tables should give a sense of how
we want to use them within "]
literal_421 -> leaf_424
leaf_424  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
raw_422 -> leaf_425
leaf_425  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". 
"]
codeblock_411 -> leaf_426
leaf_426  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| 2  | 4  | 6  | 8  |
| 10 | 12 | 14 | 16 |"]
prose_412 -> { raw_427}
{rank=same; raw_427}

raw_427 [label="raw"]


raw_427 -> leaf_428
leaf_428  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
With a couple small refinements, this one should render with a line
between the header and therows:
"]
codeblock_413 -> leaf_429
leaf_429  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| a  | b  | c  | d  |
~ 3  | 6  | 9  | 12 |
| 18 | 21 | 24 | 27 |"]
prose_414 -> { raw_430}
{rank=same; raw_430}

raw_430 [label="raw"]


raw_430 -> leaf_431
leaf_431  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To extend a row virtually over two or more text lines
"]
codeblock_415 -> leaf_432
leaf_432  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| cat, | chien,  | gato,    \\
| hat  | chapeau | sombrero |"]
prose_416 -> { raw_433 literal_434 raw_435}
{rank=same; raw_433 literal_434 raw_435}

raw_433 [label="raw"]

literal_434 [label="literal"]

raw_435 [label="raw"]


raw_433 -> leaf_436
leaf_436  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The only way to slip a "]
literal_434 -> leaf_437
leaf_437  [color=Gray,shape=rectangle,fontname=Inconsolata,label="|"]
raw_435 -> leaf_438
leaf_438  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into a table cell is to put it inside a 
«string». Other than that it's prose country. 

"]
section_208 -> { header_439 prose_440 prose_441 prose_442}
{rank=same; header_439 prose_440 prose_441 prose_442}

header_439 [label="3 : Link  "]

prose_440 [label="prose"]

prose_441 [label="prose"]

prose_442 [label="prose"]


header_439 -> leaf_443
leaf_443  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Link	

  "]
prose_440 -> { raw_444 link_445 raw_446}
{rank=same; raw_444 link_445 raw_446}

raw_444 [label="raw"]

link_445 [label="link"]

raw_446 [label="raw"]


raw_444 -> leaf_447
leaf_447  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The most "]
link_445 -> { anchortext_448 url_449}
{rank=same; anchortext_448 url_449}

anchortext_448 [label="anchortext"]

url_449 [label="url"]


anchortext_448 -> leaf_450
leaf_450  [color=Gray,shape=rectangle,fontname=Inconsolata,label="basic link"]
url_449 -> leaf_451
leaf_451  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_446 -> leaf_452
leaf_452  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" follows a simple «[[description]
[url]]» pattern.  Markdown gets this right.  In HTML you'll see the 
href before the link text, but looking at HTML is a mistake.
"]
prose_441 -> { raw_453}
{rank=same; raw_453}

raw_453 [label="raw"]


raw_453 -> leaf_454
leaf_454  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Org-mode follows the opposite convention.  This breaks the flow of text for
the reader and Orb format must be legible in raw form.
"]
prose_442 -> { raw_455}
{rank=same; raw_455}

raw_455 [label="raw"]


raw_455 -> leaf_456
leaf_456  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
tk other Org-iastic link types.

"]
section_209 -> { header_457 prose_458 codeblock_459 prose_460 prose_461 prose_462 prose_463}
{rank=same; header_457 prose_458 codeblock_459 prose_460 prose_461 prose_462 prose_463}

header_457 [label="3 : Drawer"]

prose_458 [label="prose"]

codeblock_459 [label="code block 463-467"]

prose_460 [label="prose"]

prose_461 [label="prose"]

prose_462 [label="prose"]

prose_463 [label="prose"]


header_457 -> leaf_464
leaf_464  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Drawer

  "]
prose_458 -> { raw_465}
{rank=same; raw_465}

raw_465 [label="raw"]


raw_465 -> leaf_466
leaf_466  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A drawer is a block that's hidden by default. The computer sees it,
the user sees ⦿, or a similar rune.
"]
codeblock_459 -> leaf_467
leaf_467  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[a-drawer]:
contents
:[a-drawer]:"]
prose_460 -> { raw_468}
{rank=same; raw_468}

raw_468 [label="raw"]


raw_468 -> leaf_469
leaf_469  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This closes to a single Unicode character, such as ⦿, which can't be deleted
without opening it. Deleting into an ordinary fold marker opens the fold,
deleting towards a drawer marker skips past it.
"]
prose_461 -> { raw_470 literal_471 raw_472 literal_473 raw_474}
{rank=same; raw_470 literal_471 raw_472 literal_473 raw_474}

raw_470 [label="raw"]

literal_471 [label="literal"]

raw_472 [label="raw"]

literal_473 [label="literal"]

raw_474 [label="raw"]


raw_470 -> leaf_475
leaf_475  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
literal_471 -> leaf_476
leaf_476  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a-drawer"]
raw_472 -> leaf_477
leaf_477  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is a handle, the @ isn't needed here but you could include it.
It's ok to just leave it blank: "]
literal_473 -> leaf_478
leaf_478  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[ ]:"]
raw_474 -> leaf_479
leaf_479  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_462 -> { raw_480}
{rank=same; raw_480}

raw_480 [label="raw"]


raw_480 -> leaf_481
leaf_481  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The only purpose of a drawer is to draw a folding layer around some text
that's normally kept closed.  If you're doing something fancy you might
have a long header of imports and configs that you don't want to look at
all the time. 
"]
prose_463 -> { raw_482}
{rank=same; raw_482}

raw_482 [label="raw"]


raw_482 -> leaf_483
leaf_483  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Honestly not sure I'm going to bother implementing this part. Late in the 
game if ever. 

























"]

}
