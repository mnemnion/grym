digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 519"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-219"]


// END RANK doc_0

section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7 section_8 section_9}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7 section_8 section_9}

header_2 [label="1 : Orb format"]

prose_3 [label="prose"]

section_4 [label="section: 7-21"]

section_5 [label="section: 22-43"]

section_6 [label="section: 44-90"]

section_7 [label="section: 100-136"]

section_8 [label="section: 137-144"]

section_9 [label="section: 220-471"]


// END RANK section_1

header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Orb format"]
// END RANK header_2

prose_3 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


// END RANK prose_3

raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The bridge tools work with a structured text format which we call Orb.
This is an introduction to that format.

"]
// END RANK raw_11

section_4 -> { header_13 prose_14 prose_15 prose_16}
{rank=same; header_13 prose_14 prose_15 prose_16}

header_13 [label="2 : Metalanguage"]

prose_14 [label="prose"]

prose_15 [label="prose"]

prose_16 [label="prose"]


// END RANK section_4

header_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Metalanguage"]
// END RANK header_13

prose_14 -> { raw_18}
{rank=same; raw_18}

raw_18 [label="raw"]


// END RANK prose_14

raw_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  I call Orb a metalanguage, because it can by design include any other
structured text format within it.  Provided it may be represented in utf-8!
This is no stricture in practice.
"]
// END RANK raw_18

prose_15 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


// END RANK prose_15

raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The Orb format aims to be equally useful for markup, literate programming,
configuration, data exchange, and the sort of interactive notebook which
Jupyter and org-babel can produce.
"]
// END RANK raw_20

prose_16 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


// END RANK prose_16

raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The first tool to make use of this format, also called orb, is focused on
literate programming.  This will in turn be the format for the tools in the
bettertools suite.

"]
// END RANK raw_22

section_5 -> { header_24 prose_25 prose_26 prose_27}
{rank=same; header_24 prose_25 prose_26 prose_27}

header_24 [label="2 : Goals"]

prose_25 [label="prose"]

prose_26 [label="prose"]

prose_27 [label="prose"]


// END RANK section_5

header_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Goals"]
// END RANK header_24

prose_25 -> { raw_29}
{rank=same; raw_29}

raw_29 [label="raw"]


// END RANK prose_25

raw_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Orb is:
"]
// END RANK raw_29

prose_26 -> { raw_31}
{rank=same; raw_31}

raw_31 [label="raw"]


// END RANK prose_26

raw_31 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - Error free:  An Orb document is never in a state of error.  Any valid
                 utf-8 string is an Orb document.
  - Line based:  Orb files may be rapidly separated into their elements
                 by splitting into lines and examining the first few
                 characters.
  - Humane:      Orb is carefully designed to be readable, as is, by
                 ordinary humans.
  - General:     There are no characters such as <>& in HTML which must be
                 escaped.  Orb codeblocks can enclose any other format,
                 including Orb format.  Orb strings are «brace balanced»
                 and can enclose any utf-8 string as a consequence.
"]
// END RANK raw_31

prose_27 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


// END RANK prose_27

raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
While it is possible to do some fancy things with Orb, it is also a
comfortable format to write a blog post, or put a few key-value pairs into
a config file.  If you were to send an email in Orb format, the recipient
might not even notice.

"]
// END RANK raw_33

section_6 -> { header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 section_46}
{rank=same; header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 section_46}

header_35 [label="2 : Encoding"]

prose_36 [label="prose"]

prose_37 [label="prose"]

prose_38 [label="prose"]

prose_39 [label="prose"]

prose_40 [label="prose"]

prose_41 [label="prose"]

prose_42 [label="prose"]

prose_43 [label="prose"]

prose_44 [label="prose"]

prose_45 [label="prose"]

section_46 [label="section: 91-99"]


// END RANK section_6

header_35 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Encoding"]
// END RANK header_35

prose_36 -> { raw_48}
{rank=same; raw_48}

raw_48 [label="raw"]


// END RANK prose_36

raw_48 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Orb documents are encoded in utf-8.
"]
// END RANK raw_48

prose_37 -> { raw_50}
{rank=same; raw_50}

raw_50 [label="raw"]


// END RANK prose_37

raw_50 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The core syntax is defined in terms of the reachable keys on a US keyboard.
This tradition is firmly entrenched in the mid teens, and I have no
designs on budging that at present.  The miser in me likes that they're
a byte each.  The lawyer in me insists that this isn't ASCII, which is a
seven-bit legacy encoding.
"]
// END RANK raw_50

prose_38 -> { raw_52}
{rank=same; raw_52}

raw_52 [label="raw"]


// END RANK prose_38

raw_52 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We aren't at all reluctant to use Unicode characters as part of the format.
Orb «strings» are the most visible example of this, along with drawer
and fold icons, which are actual parts of an Orb document.
"]
// END RANK raw_52

prose_39 -> { raw_54}
{rank=same; raw_54}

raw_54 [label="raw"]


// END RANK prose_39

raw_54 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Orb is case sensitive and uses lower-snake-case for built-in English
phrases. There is a convention (see classes) that uses capitalization of
user words to affect semantics.
"]
// END RANK raw_54

prose_40 -> { raw_56}
{rank=same; raw_56}

raw_56 [label="raw"]


// END RANK prose_40

raw_56 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Orb is a format for text.  There are many ways of writing text, but only one
way of encoding it that matters.  There is a long tail of Unicode complexity,
and there are traces of Committee spattered all over it; nonetheless we
should be grateful that utf-8 won, in a world in which we still drive cars on
both possible sides of the road.
"]
// END RANK raw_56

prose_41 -> { raw_58 link_59 raw_60}
{rank=same; raw_58 link_59 raw_60}

raw_58 [label="raw"]

link_59 [label="link"]

raw_60 [label="raw"]


// END RANK prose_41

raw_58 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that while we have our "]
// END RANK raw_58

link_59 -> { anchortext_62 url_63}
{rank=same; anchortext_62 url_63}

anchortext_62 [label="anchortext"]

url_63 [label="url"]


// END RANK link_59

anchortext_62 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="own opinions about utf-8"]
// END RANK anchortext_62

url_63 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_63

raw_60 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" our vision of
heaven is backward-compatible with the inferior version foisted upon us by a
jealous software monopoly.
"]
// END RANK raw_60

prose_42 -> { raw_67 link_68 raw_69}
{rank=same; raw_67 link_68 raw_69}

raw_67 [label="raw"]

link_68 [label="link"]

raw_69 [label="raw"]


// END RANK prose_42

raw_67 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Bidirectional handling in a context that's indentation sensitive is an
example of something subtle. Orb format uses indentation in a few key places,
and a compliant parser will need to detect and respect RTL [tk?] markers.
Exactly how is spelled out under "]
// END RANK raw_67

link_68 -> { anchortext_71 url_72}
{rank=same; anchortext_71 url_72}

anchortext_71 [label="anchortext"]

url_72 [label="url"]


// END RANK link_68

anchortext_71 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="indentation"]
// END RANK anchortext_71

url_72 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_72

raw_69 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_69

prose_43 -> { raw_76}
{rank=same; raw_76}

raw_76 [label="raw"]


// END RANK prose_43

raw_76 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'd love to get a Hebrew and/or Arabic fluent hacker on the project
early, to make sure this works correctly.  I'll settle for Aramaic.
"]
// END RANK raw_76

prose_44 -> { raw_78}
{rank=same; raw_78}

raw_78 [label="raw"]


// END RANK prose_44

raw_78 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Another thing I want to get right is equivalence. If you have a
variable called \"Glück\" the compiler shouldn't complain if it's
rendered in either of the valid ways. For some sequences that's
\"any of the valid ways\". If we normalized your prose, you might
have problems later, so we don't want to solve it that way.
"]
// END RANK raw_78

prose_45 -> { raw_80 link_81 raw_82 link_83 raw_84}
{rank=same; raw_80 link_81 raw_82 link_83 raw_84}

raw_80 [label="raw"]

link_81 [label="link"]

raw_82 [label="raw"]

link_83 [label="link"]

raw_84 [label="raw"]


// END RANK prose_45

raw_80 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This consideration mostly applys to "]
// END RANK raw_80

link_81 -> { anchortext_86 url_87}
{rank=same; anchortext_86 url_87}

anchortext_86 [label="anchortext"]

url_87 [label="url"]


// END RANK link_81

anchortext_86 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hashtags"]
// END RANK anchortext_86

url_87 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_87

raw_82 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_82

link_83 -> { anchortext_91 url_92}
{rank=same; anchortext_91 url_92}

anchortext_91 [label="anchortext"]

url_92 [label="url"]


// END RANK link_83

anchortext_91 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="handles"]
// END RANK anchortext_91

url_92 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_92

raw_84 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The idea is that Orb files will respect all the
wacky typographic equivalences that Unicode has gifted us with.

"]
// END RANK raw_84

section_46 -> { header_96 prose_97 prose_98}
{rank=same; header_96 prose_97 prose_98}

header_96 [label="4 : Tabs"]

prose_97 [label="prose"]

prose_98 [label="prose"]


// END RANK section_46

header_96 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Tabs"]
// END RANK header_96

prose_97 -> { raw_100}
{rank=same; raw_100}

raw_100 [label="raw"]


// END RANK prose_97

raw_100 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The vexacious ASCII character 8 will never be found in an Orb document.  If
encountered, it will be reduced to two spaces.
"]
// END RANK raw_100

prose_98 -> { raw_102 prespace_103 italic_104 raw_105}
{rank=same; raw_102 prespace_103 italic_104 raw_105}

raw_102 [label="raw"]

prespace_103 [label="prespace"]

italic_104 [label="italic"]

raw_105 [label="raw"]


// END RANK prose_98

raw_102 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not an"]
// END RANK raw_102

prespace_103 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_103

italic_104 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="error"]
// END RANK italic_104

raw_105 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" mind you, it's a well-defined input that will become
two spaces, as part of general housecleaning.

"]
// END RANK raw_105

section_7 -> { header_110 prose_111 prose_112 prose_113 prose_114 prose_115 prose_116 prose_117 prose_118}
{rank=same; header_110 prose_111 prose_112 prose_113 prose_114 prose_115 prose_116 prose_117 prose_118}

header_110 [label="2 : Prose and Structure"]

prose_111 [label="prose"]

prose_112 [label="prose"]

prose_113 [label="prose"]

prose_114 [label="prose"]

prose_115 [label="prose"]

prose_116 [label="prose"]

prose_117 [label="prose"]

prose_118 [label="prose"]


// END RANK section_7

header_110 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Prose and Structure"]
// END RANK header_110

prose_111 -> { raw_120}
{rank=same; raw_120}

raw_120 [label="raw"]


// END RANK prose_111

raw_120 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The major distinction in Orb is between prose and structure.
"]
// END RANK raw_120

prose_112 -> { raw_122}
{rank=same; raw_122}

raw_122 [label="raw"]


// END RANK prose_112

raw_122 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose is the default parsing state. It is far from unstructured from the
runtime perspective. Although this needn't be embedded in the parse
tree, Orb understands concepts such as paragraphs, words, punctuation,
capital letters, languages, and anything else proper to prose.
"]
// END RANK raw_122

prose_113 -> { raw_124}
{rank=same; raw_124}

raw_124 [label="raw"]


// END RANK prose_113

raw_124 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I refer to human languages, but Orb understands programming languages
also. In principle, all of them, it shouldn't be harder to add them than
it is to call them from shell, though getting a runtime rigged up to
another runtime always calls for some finesse to derive a good experience.
"]
// END RANK raw_124

prose_114 -> { raw_126}
{rank=same; raw_126}

raw_126 [label="raw"]


// END RANK prose_114

raw_126 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
\"Programming languages\" is overly specific.  Orb draws a distinction
between prose and structure. Blocks may contain either, or both.
"]
// END RANK raw_126

prose_115 -> { raw_128 prespace_129 bold_130 raw_131}
{rank=same; raw_128 prespace_129 bold_130 raw_131}

raw_128 [label="raw"]

prespace_129 [label="prespace"]

bold_130 [label="bold"]

raw_131 [label="raw"]


// END RANK prose_115

raw_128 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something that's nice about a language build on a prose/structure
relationship is that it can be error free.  Anything"]
// END RANK raw_128

prespace_129 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_129

bold_130 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym"]
// END RANK bold_130

raw_131 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" can't build into
a structure is just prose.
"]
// END RANK raw_131

prose_116 -> { raw_136 link_137 raw_138}
{rank=same; raw_136 link_137 raw_138}

raw_136 [label="raw"]

link_137 [label="link"]

raw_138 [label="raw"]


// END RANK prose_116

raw_136 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Markdown has this property.  Sometimes you run into parsers which
build errors into Markdown, which is itself erroneous.  If you "]
// END RANK raw_136

link_137 -> { anchortext_140 url_141}
{rank=same; anchortext_140 url_141}

anchortext_140 [label="anchortext"]

url_141 [label="url"]


// END RANK link_137

anchortext_140 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="RTFM"]
// END RANK anchortext_140

url_141 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="http://daringfireball.net/projects/markdown/syntax"]
// END RANK url_141

raw_138 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
you'll find the word \"error\" once.  Helpfully explaining how Markdown
keeps you from making one.
"]
// END RANK raw_138

prose_117 -> { raw_145}
{rank=same; raw_145}

raw_145 [label="raw"]


// END RANK prose_117

raw_145 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do what we can to make the document look the same as it is
in fact structured.  The intention with Orb files is that we work with them
aided by a linter, which lets us be lazy and still get consistent results.
"]
// END RANK raw_145

prose_118 -> { raw_147}
{rank=same; raw_147}

raw_147 [label="raw"]


// END RANK prose_118

raw_147 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The most important point in this section is that Orb documents do not have
errors and never fail to parse.  You should be able to literally plug any
Orb parser into a source of entropy and end up with a document, since a
proper utf-8 decoder will drop any invalid bytes it sees.

"]
// END RANK raw_147

section_8 -> { header_149 prose_150 section_151}
{rank=same; header_149 prose_150 section_151}

header_149 [label="2 : Ownership"]

prose_150 [label="prose"]

section_151 [label="section: 145-160"]


// END RANK section_8

header_149 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Ownership"]
// END RANK header_149

prose_150 -> { raw_153}
{rank=same; raw_153}

raw_153 [label="raw"]


// END RANK prose_150

raw_153 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The root concept of Orb is a document, which divides into one or more
sections.  A section owns all structure or prose within it.  This
paragraph is owned by «** Ownership» above, as are all the rest of the
blocks until the next section header.

"]
// END RANK raw_153

section_151 -> { header_155 prose_156 prose_157 prose_158 section_159}
{rank=same; header_155 prose_156 prose_157 prose_158 section_159}

header_155 [label="3 : Blocking"]

prose_156 [label="prose"]

prose_157 [label="prose"]

prose_158 [label="prose"]

section_159 [label="section: 161-219"]


// END RANK section_151

header_155 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Blocking"]
// END RANK header_155

prose_156 -> { raw_161}
{rank=same; raw_161}

raw_161 [label="raw"]


// END RANK prose_156

raw_161 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Orb documents are chunked into sections entirely by their heading lines.
Within a section, prose and structure alike are organized into blocks.
The defining marker of blocks is blank lines.
"]
// END RANK raw_161

prose_157 -> { raw_163}
{rank=same; raw_163}

raw_163 [label="raw"]


// END RANK prose_157

raw_163 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This second paragraph is the second block of the «*** Blocking» section.
Taking a look at the source document, you'll see that I put (single)
newlines between lines, with an 78 column margin.  That should be considered
good style.  If you prefer to have each paragraph be its own line, have at.
"]
// END RANK raw_163

prose_158 -> { raw_165}
{rank=same; raw_165}

raw_165 [label="raw"]


// END RANK prose_158

raw_165 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A line is considered blank if it contains only Unicode spacemarks.  Orb
will smoothly remove any such cruft and replace it with «\\n\\n».  We also
trim trailing whitespace.

"]
// END RANK raw_165

section_159 -> { header_167 prose_168 prose_169 prose_170 prose_171 prose_172 codeblock_173 prose_174 codeblock_175 prose_176 prose_177 codeblock_178 prose_179}
{rank=same; header_167 prose_168 prose_169 prose_170 prose_171 prose_172 codeblock_173 prose_174 codeblock_175 prose_176 prose_177 codeblock_178 prose_179}

header_167 [label="4 : The Cling Rule"]

prose_168 [label="prose"]

prose_169 [label="prose"]

prose_170 [label="prose"]

prose_171 [label="prose"]

prose_172 [label="prose"]

codeblock_173 [label="code block 182-189"]

prose_174 [label="prose"]

codeblock_175 [label="code block 194-201"]

prose_176 [label="prose"]

prose_177 [label="prose"]

codeblock_178 [label="code block 208-214"]

prose_179 [label="prose"]


// END RANK section_159

header_167 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** The Cling Rule"]
// END RANK header_167

prose_168 -> { raw_181 link_182 raw_183}
{rank=same; raw_181 link_182 raw_183}

raw_181 [label="raw"]

link_182 [label="link"]

raw_183 [label="raw"]


// END RANK prose_168

raw_181 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  "]
// END RANK raw_181

link_182 -> { anchortext_185 url_186}
{rank=same; anchortext_185 url_186}

anchortext_185 [label="anchortext"]

url_186 [label="url"]


// END RANK link_182

anchortext_185 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Tags"]
// END RANK anchortext_185

url_186 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_186

raw_183 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are used both to provide names to blocks in Orb format
and to specify various actions in knitting and weaving.  They may be placed
above or below the block which they affect, with the exception of sections,
where tags must be placed on or below the header line.
"]
// END RANK raw_183

prose_169 -> { raw_190}
{rank=same; raw_190}

raw_190 [label="raw"]


// END RANK prose_169

raw_190 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The cling rule specifies that a group 'clings' to another group when
it is closer to that group than the other group. Ties resolve down.
"]
// END RANK raw_190

prose_170 -> { raw_192}
{rank=same; raw_192}

raw_192 [label="raw"]


// END RANK prose_170

raw_192 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This should make it intuitive to group elements that aren't grouping the
way you expect: put in whitespace until the block is visually distinguished
from the surroundings.
"]
// END RANK raw_192

prose_171 -> { raw_194}
{rank=same; raw_194}

raw_194 [label="raw"]


// END RANK prose_171

raw_194 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cling applies between blocks which are at the same level of ownership.
Ownership has precedence over cling: all blocks underneath e.g. a header
line are owned by that line, newlines notwithstanding.
"]
// END RANK raw_194

prose_172 -> { raw_196}
{rank=same; raw_196}

raw_196 [label="raw"]


// END RANK prose_172

raw_196 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that indentation of e.g. lists invokes the cling rule within the
indentation level.
"]
// END RANK raw_196

codeblock_173 -> leaf_198
leaf_198  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |

#tag


someprose on a block"]
// END RANK codeblock_173

prose_174 -> { raw_199}
{rank=same; raw_199}

raw_199 [label="raw"]


// END RANK prose_174

raw_199 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the table, but
"]
// END RANK raw_199

codeblock_175 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |


#tag

someprose on a block"]
// END RANK codeblock_175

prose_176 -> { raw_202}
{rank=same; raw_202}

raw_202 [label="raw"]


// END RANK prose_176

raw_202 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the block.
"]
// END RANK raw_202

prose_177 -> { raw_204}
{rank=same; raw_204}

raw_204 [label="raw"]


// END RANK prose_177

raw_204 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Even clings are resolved forwards:
"]
// END RANK raw_204

codeblock_178 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |

#tag

someprose on a block"]
// END RANK codeblock_178

prose_179 -> { raw_207}
{rank=same; raw_207}

raw_207 [label="raw"]


// END RANK prose_179

raw_207 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the prose block.

"]
// END RANK raw_207

section_9 -> { header_209 prose_210 prose_211 section_212 section_213 section_214 section_215 section_216 section_217 section_218 section_219}
{rank=same; header_209 prose_210 prose_211 section_212 section_213 section_214 section_215 section_216 section_217 section_218 section_219}

header_209 [label="2 : Structural elements"]

prose_210 [label="prose"]

prose_211 [label="prose"]

section_212 [label="section: 232-250"]

section_213 [label="section: 251-281"]

section_214 [label="section: 282-353"]

section_215 [label="section: 369-402"]

section_216 [label="section: 403-437"]

section_217 [label="section: 438-449"]

section_218 [label="section: 450-471"]

section_219 [label="section: 472-519"]


// END RANK section_9

header_209 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Structural elements"]
// END RANK header_209

prose_210 -> { raw_221}
{rank=same; raw_221}

raw_221 [label="raw"]


// END RANK prose_210

raw_221 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Structure and prose are the figure and ground of Orb format.  We speak of
structure and prose on a block-by-block basis, and within some structure
blocks there are regions of prose.  Prose in turn routinely contains
structural regions.
"]
// END RANK raw_221

prose_211 -> { raw_223}
{rank=same; raw_223}

raw_223 [label="raw"]


// END RANK prose_211

raw_223 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This section will discuss under what circumstances an Orb parser will create
structure, with some discursions into the semantics these distinctions
represent.

"]
// END RANK raw_223

section_212 -> { header_225 prose_226 codeblock_227 prose_228 prose_229}
{rank=same; header_225 prose_226 codeblock_227 prose_228 prose_229}

header_225 [label="3 : Headlines"]

prose_226 [label="prose"]

codeblock_227 [label="code block 237-239"]

prose_228 [label="prose"]

prose_229 [label="prose"]


// END RANK section_212

header_225 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Headlines"]
// END RANK header_225

prose_226 -> { raw_231}
{rank=same; raw_231}

raw_231 [label="raw"]


// END RANK prose_226

raw_231 -> leaf_232
leaf_232  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Headlines divide a document into sections.  The grammar for recognizing
a headline is as follows:
"]
// END RANK raw_231

codeblock_227 -> leaf_233
leaf_233  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    headline = WS?  '*'+  ' '  prose  NL"]
// END RANK codeblock_227

prose_228 -> { raw_234 prespace_235 literal_236 raw_237}
{rank=same; raw_234 prespace_235 literal_236 raw_237}

raw_234 [label="raw"]

prespace_235 [label="prespace"]

literal_236 [label="literal"]

raw_237 [label="raw"]


// END RANK prose_228

raw_234 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The number of"]
// END RANK raw_234

prespace_235 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_235

literal_236 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
// END RANK literal_236

raw_237 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" determine the level of ownership.  This is a declarative
relationship, though I lack a clean syntax to express it other than
functionally at present.
"]
// END RANK raw_237

prose_229 -> { raw_242 prespace_243 literal_244 raw_245}
{rank=same; raw_242 prespace_243 literal_244 raw_245}

raw_242 [label="raw"]

prespace_243 [label="prespace"]

literal_244 [label="literal"]

raw_245 [label="raw"]


// END RANK prose_229

raw_242 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The content within"]
// END RANK raw_242

prespace_243 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_243

literal_244 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label="prose"]
// END RANK literal_244

raw_245 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" has the luxury of being context-sensitive.  In
particular we treat tags on a headline as though they're on a tagline below
they headline.


"]
// END RANK raw_245

section_213 -> { header_250 prose_251 prose_252 prose_253 codeblock_254 prose_255 prose_256 codeblock_257 prose_258}
{rank=same; header_250 prose_251 prose_252 prose_253 codeblock_254 prose_255 prose_256 codeblock_257 prose_258}

header_250 [label="3 : Tags and Taglines"]

prose_251 [label="prose"]

prose_252 [label="prose"]

prose_253 [label="prose"]

codeblock_254 [label="code block 261-263"]

prose_255 [label="prose"]

prose_256 [label="prose"]

codeblock_257 [label="code block 273-276"]

prose_258 [label="prose"]


// END RANK section_213

header_250 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Tags and Taglines"]
// END RANK header_250

prose_251 -> { raw_260 prespace_261 literal_262 raw_263 prespace_264 literal_265 raw_266}
{rank=same; raw_260 prespace_261 literal_262 raw_263 prespace_264 literal_265 raw_266}

raw_260 [label="raw"]

prespace_261 [label="prespace"]

literal_262 [label="literal"]

raw_263 [label="raw"]

prespace_264 [label="prespace"]

literal_265 [label="literal"]

raw_266 [label="raw"]


// END RANK prose_251

raw_260 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Tags are the control structures for Orb.  There are"]
// END RANK raw_260

prespace_261 -> leaf_268
leaf_268  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_261

literal_262 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#hashtags"]
// END RANK literal_262

raw_263 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which
loosely correspond to functions or messages, and"]
// END RANK raw_263

prespace_264 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_264

literal_265 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@handles"]
// END RANK literal_265

raw_266 -> leaf_273
leaf_273  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which more
directly correspond to symbols.
"]
// END RANK raw_266

prose_252 -> { raw_274 link_275 raw_276}
{rank=same; raw_274 link_275 raw_276}

raw_274 [label="raw"]

link_275 [label="link"]

raw_276 [label="raw"]


// END RANK prose_252

raw_274 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The semantics of tags belong in the "]
// END RANK raw_274

link_275 -> { anchortext_278 url_279}
{rank=same; anchortext_278 url_279}

anchortext_278 [label="anchortext"]

url_279 [label="url"]


// END RANK link_275

anchortext_278 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label="runtime"]
// END RANK anchortext_278

url_279 -> leaf_281
leaf_281  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_279

raw_276 -> leaf_282
leaf_282  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" section.
"]
// END RANK raw_276

prose_253 -> { raw_283}
{rank=same; raw_283}

raw_283 [label="raw"]


// END RANK prose_253

raw_283 -> leaf_284
leaf_284  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For now let us note that the rule
"]
// END RANK raw_283

codeblock_254 -> leaf_285
leaf_285  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  hashtag = WS+  '#'  symbol"]
// END RANK codeblock_254

prose_255 -> { prespace_286 bold_287 raw_288 prespace_289 literal_290 raw_291}
{rank=same; prespace_286 bold_287 raw_288 prespace_289 literal_290 raw_291}

prespace_286 [label="prespace"]

bold_287 [label="bold"]

raw_288 [label="raw"]

prespace_289 [label="prespace"]

literal_290 [label="literal"]

raw_291 [label="raw"]


// END RANK prose_255

prespace_286 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_286

bold_287 -> leaf_293
leaf_293  [color=Gray,shape=rectangle,fontname=Inconsolata,label="may"]
// END RANK bold_287

raw_288 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" not appear in (all) prose contexts, this is still undecided.  This is
true of handles as well given the state of"]
// END RANK raw_288

prespace_289 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_289

literal_290 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym"]
// END RANK literal_290

raw_291 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at the present time,
but I am more firmly convinced of the value of @handle as a short in-place
expansion of a handleline. I don't think trying to parse a mid-block #export
as meaning something is as valuable.
"]
// END RANK raw_291

prose_256 -> { raw_298}
{rank=same; raw_298}

raw_298 [label="raw"]


// END RANK prose_256

raw_298 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These two rules are currently in use:
"]
// END RANK raw_298

codeblock_257 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  hashline = WS?  '#'  symbol  ' '  prose  NL
  handleline = WS?  '@'  symbol  ' '  prose  NL"]
// END RANK codeblock_257

prose_258 -> { raw_301 prespace_302 literal_303 raw_304 prespace_305 literal_306 raw_307}
{rank=same; raw_301 prespace_302 literal_303 raw_304 prespace_305 literal_306 raw_307}

raw_301 [label="raw"]

prespace_302 [label="prespace"]

literal_303 [label="literal"]

raw_304 [label="raw"]

prespace_305 [label="prespace"]

literal_306 [label="literal"]

raw_307 [label="raw"]


// END RANK prose_258

raw_301 -> leaf_308
leaf_308  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Structure is designed to work on a line-by-line basis,
any"]
// END RANK raw_301

prespace_302 -> leaf_309
leaf_309  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_302

literal_303 -> leaf_310
leaf_310  [color=Gray,shape=rectangle,fontname=Inconsolata,label="line"]
// END RANK literal_303

raw_304 -> leaf_311
leaf_311  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" rule has an implied"]
// END RANK raw_304

prespace_305 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_305

literal_306 -> leaf_313
leaf_313  [color=Gray,shape=rectangle,fontname=Inconsolata,label="^"]
// END RANK literal_306

raw_307 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

"]
// END RANK raw_307

section_214 -> { header_315 prose_316 prose_317 codeblock_318 prose_319 codeblock_320 prose_321 codeblock_322 prose_323 codeblock_324 prose_325 section_326 section_327}
{rank=same; header_315 prose_316 prose_317 codeblock_318 prose_319 codeblock_320 prose_321 codeblock_322 prose_323 codeblock_324 prose_325 section_326 section_327}

header_315 [label="3 : List"]

prose_316 [label="prose"]

prose_317 [label="prose"]

codeblock_318 [label="code block 290-292"]

prose_319 [label="prose"]

codeblock_320 [label="code block 296-298"]

prose_321 [label="prose"]

codeblock_322 [label="code block 304-307"]

prose_323 [label="prose"]

codeblock_324 [label="code block 311-314"]

prose_325 [label="prose"]

section_326 [label="section: 320-353"]

section_327 [label="section: 354-368"]


// END RANK section_214

header_315 -> leaf_328
leaf_328  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** List"]
// END RANK header_315

prose_316 -> { raw_329}
{rank=same; raw_329}

raw_329 [label="raw"]


// END RANK prose_316

raw_329 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Lists are both a markup format and a flexible data container.  In the emacs
org-mode, headline-type structures do the heavy lifting for TODO lists and
the like.  This was org's original purpose, with document markup coming later.
"]
// END RANK raw_329

prose_317 -> { raw_331}
{rank=same; raw_331}

raw_331 [label="raw"]


// END RANK prose_317

raw_331 -> leaf_332
leaf_332  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Orb lists come in unnumbered and numbered.  Unnumbered lists follow this rule:
"]
// END RANK raw_331

codeblock_318 -> leaf_333
leaf_333  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  listline-un = WS? '- ' prose NL"]
// END RANK codeblock_318

prose_319 -> { raw_334}
{rank=same; raw_334}

raw_334 [label="raw"]


// END RANK prose_319

raw_334 -> leaf_335
leaf_335  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
While numbered lists match this:
"]
// END RANK raw_334

codeblock_320 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  listline-li = WS? digits '. ' prose NL"]
// END RANK codeblock_320

prose_321 -> { raw_337}
{rank=same; raw_337}

raw_337 [label="raw"]


// END RANK prose_321

raw_337 -> leaf_338
leaf_338  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For lists, as with any structure group, the semantics of the prose section are
somewhat flexible.  The cling rule for lists parses indentation so that
multi-line entries are possible:
"]
// END RANK raw_337

codeblock_322 -> leaf_339
leaf_339  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - list entry
   prose directly under, bad style"]
// END RANK codeblock_322

prose_323 -> { raw_340}
{rank=same; raw_340}

raw_340 [label="raw"]


// END RANK prose_323

raw_340 -> leaf_341
leaf_341  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
vs.
"]
// END RANK raw_340

codeblock_324 -> leaf_342
leaf_342  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - list entry
    continues list entry"]
// END RANK codeblock_324

prose_325 -> { raw_343}
{rank=same; raw_343}

raw_343 [label="raw"]


// END RANK prose_325

raw_343 -> leaf_344
leaf_344  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
As in Markdown, the parser will accept any numbers as a numbered list without
checking their order.

"]
// END RANK raw_343

section_326 -> { header_345 prose_346 codeblock_347 prose_348 prose_349 prose_350 prose_351}
{rank=same; header_345 prose_346 codeblock_347 prose_348 prose_349 prose_350 prose_351}

header_345 [label="4 : List Boxes"]

prose_346 [label="prose"]

codeblock_347 [label="code block 327-338"]

prose_348 [label="prose"]

prose_349 [label="prose"]

prose_350 [label="prose"]

prose_351 [label="prose"]


// END RANK section_326

header_345 -> leaf_352
leaf_352  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** List Boxes

 "]
// END RANK header_345

prose_346 -> { raw_353 prespace_354 literal_355 raw_356 prespace_357 literal_358 raw_359 link_360 raw_361}
{rank=same; raw_353 prespace_354 literal_355 raw_356 prespace_357 literal_358 raw_359 link_360 raw_361}

raw_353 [label="raw"]

prespace_354 [label="prespace"]

literal_355 [label="literal"]

raw_356 [label="raw"]

prespace_357 [label="prespace"]

literal_358 [label="literal"]

raw_359 [label="raw"]

link_360 [label="link"]

raw_361 [label="raw"]


// END RANK prose_346

raw_353 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Lists can have, as a first element, a box, either a checkbox"]
// END RANK raw_353

prespace_354 -> leaf_363
leaf_363  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_354

literal_355 -> leaf_364
leaf_364  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[ ]"]
// END RANK literal_355

raw_356 -> leaf_365
leaf_365  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or a
radio box"]
// END RANK raw_356

prespace_357 -> leaf_366
leaf_366  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_357

literal_358 -> leaf_367
leaf_367  [color=Gray,shape=rectangle,fontname=Inconsolata,label="( )"]
// END RANK literal_358

raw_359 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  These are either empty with whitespace or have contents
from a limited pallete of symbols.  Their function is described in the"]
// END RANK raw_359

link_360 -> { anchortext_369 url_370}
{rank=same; anchortext_369 url_370}

anchortext_369 [label="anchortext"]

url_370 [label="url"]


// END RANK link_360

anchortext_369 -> leaf_371
leaf_371  [color=Gray,shape=rectangle,fontname=Inconsolata,label="runtime"]
// END RANK anchortext_369

url_370 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_370

raw_361 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" section.
"]
// END RANK raw_361

codeblock_347 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - [ ] #todo finish orb.orb
    - [X] Metalanguage
    - [X] Prose and Structure
    - [REVISE] Link
    - [ ] Code Block

  - Fruits
    - ( ) Bananas
    - (*) Coconuts
    - ( ) Grapes"]
// END RANK codeblock_347

prose_348 -> { raw_375}
{rank=same; raw_375}

raw_375 [label="raw"]


// END RANK prose_348

raw_375 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These two types can't meaningfully mix on the same level of a list.  The one
the parser sees first will be applied.
"]
// END RANK raw_375

prose_349 -> { raw_377}
{rank=same; raw_377}

raw_377 [label="raw"]


// END RANK prose_349

raw_377 -> leaf_378
leaf_378  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The radio button is contagious, if the parser encounters one all lines on
that level get one.
"]
// END RANK raw_377

prose_350 -> { raw_379}
{rank=same; raw_379}

raw_379 [label="raw"]


// END RANK prose_350

raw_379 -> leaf_380
leaf_380  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The check box is not, it's ok to include it on some lines but not others.  If
the parser sees a check box and then a radio button, it will turn the radio
button into a check box.
"]
// END RANK raw_379

prose_351 -> { raw_381 prespace_382 literal_383 raw_384}
{rank=same; raw_381 prespace_382 literal_383 raw_384}

raw_381 [label="raw"]

prespace_382 [label="prespace"]

literal_383 [label="literal"]

raw_384 [label="raw"]


// END RANK prose_351

raw_381 -> leaf_385
leaf_385  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The radio button can only have one"]
// END RANK raw_381

prespace_382 -> leaf_386
leaf_386  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_382

literal_383 -> leaf_387
leaf_387  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
// END RANK literal_383

raw_384 -> leaf_388
leaf_388  [color=Gray,shape=rectangle,fontname=Inconsolata,label="; the parser will ignore, and the
linter remove, any others.

"]
// END RANK raw_384

section_327 -> { header_389 prose_390 codeblock_391 prose_392}
{rank=same; header_389 prose_390 codeblock_391 prose_392}

header_389 [label="4 : Key/value pairs"]

prose_390 [label="prose"]

codeblock_391 [label="code block 358-362"]

prose_392 [label="prose"]


// END RANK section_327

header_389 -> leaf_393
leaf_393  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Key/value pairs

 "]
// END RANK header_389

prose_390 -> { raw_394 prespace_395 literal_396 raw_397}
{rank=same; raw_394 prespace_395 literal_396 raw_397}

raw_394 [label="raw"]

prespace_395 [label="prespace"]

literal_396 [label="literal"]

raw_397 [label="raw"]


// END RANK prose_390

raw_394 -> leaf_398
leaf_398  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A list element can consist of key/value pairs, separated with a"]
// END RANK raw_394

prespace_395 -> leaf_399
leaf_399  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_395

literal_396 -> leaf_400
leaf_400  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":"]
// END RANK literal_396

raw_397 -> leaf_401
leaf_401  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_397

codeblock_391 -> leaf_402
leaf_402  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" - first key:
   - value : another value
   - 42 : the answer"]
// END RANK codeblock_391

prose_392 -> { raw_403}
{rank=same; raw_403}

raw_403 [label="raw"]


// END RANK prose_392

raw_403 -> leaf_404
leaf_404  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
From the runtime perspective the left and right sides are basically strings,
as we build out the Clu runtime we'll have better expectations for what
keys and values would look like as data.

"]
// END RANK raw_403

section_215 -> { header_405 prose_406 prose_407 codeblock_408 prose_409 prose_410 prose_411 codeblock_412 prose_413 prose_414}
{rank=same; header_405 prose_406 prose_407 codeblock_408 prose_409 prose_410 prose_411 codeblock_412 prose_413 prose_414}

header_405 [label="3 : Code Block"]

prose_406 [label="prose"]

prose_407 [label="prose"]

codeblock_408 [label="code block 376-380"]

prose_409 [label="prose"]

prose_410 [label="prose"]

prose_411 [label="prose"]

codeblock_412 [label="code block 391-395"]

prose_413 [label="prose"]

prose_414 [label="prose"]


// END RANK section_215

header_405 -> leaf_415
leaf_415  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Code Block

 "]
// END RANK header_405

prose_406 -> { raw_416}
{rank=same; raw_416}

raw_416 [label="raw"]


// END RANK prose_406

raw_416 -> leaf_417
leaf_417  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The reason Orb exists is literal programming.  We do codeblocks
carefully.
"]
// END RANK raw_416

prose_407 -> { raw_418}
{rank=same; raw_418}

raw_418 [label="raw"]


// END RANK prose_407

raw_418 -> leaf_419
leaf_419  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A codeblock looks like so:
"]
// END RANK raw_418

codeblock_408 -> leaf_420
leaf_420  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!orb
*** Some Orb content
#/orb"]
// END RANK codeblock_408

prose_409 -> { raw_421}
{rank=same; raw_421}

raw_421 [label="raw"]


// END RANK prose_409

raw_421 -> leaf_422
leaf_422  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Try that trick in Git-Flavored Markdown...
"]
// END RANK raw_421

prose_410 -> { raw_423 prespace_424 literal_425 raw_426 prespace_427 literal_428 raw_429}
{rank=same; raw_423 prespace_424 literal_425 raw_426 prespace_427 literal_428 raw_429}

raw_423 [label="raw"]

prespace_424 [label="prespace"]

literal_425 [label="literal"]

raw_426 [label="raw"]

prespace_427 [label="prespace"]

literal_428 [label="literal"]

raw_429 [label="raw"]


// END RANK prose_410

raw_423 -> leaf_430
leaf_430  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The number of initial"]
// END RANK raw_423

prespace_424 -> leaf_431
leaf_431  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_424

literal_425 -> leaf_432
leaf_432  [color=Gray,shape=rectangle,fontname=Inconsolata,label="!!"]
// END RANK literal_425

raw_426 -> leaf_433
leaf_433  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" needs to match the closing"]
// END RANK raw_426

prespace_427 -> leaf_434
leaf_434  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_427

literal_428 -> leaf_435
leaf_435  [color=Gray,shape=rectangle,fontname=Inconsolata,label="//"]
// END RANK literal_428

raw_429 -> leaf_436
leaf_436  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", allowing any
utf-8 string at all to be enclosed with this method.  We consider this an
important property to have in an enclosure encoding.
"]
// END RANK raw_429

prose_411 -> { raw_437}
{rank=same; raw_437}

raw_437 [label="raw"]


// END RANK prose_411

raw_437 -> leaf_438
leaf_438  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code blocks must be opened, but needn't be closed, as a parser will recognize
EOF as a code block closure.  This has a fortunate side effect, as this:
"]
// END RANK raw_437

codeblock_412 -> leaf_439
leaf_439  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!/usr/bin/python

from future import bettertools"]
// END RANK codeblock_412

prose_413 -> { raw_440}
{rank=same; raw_440}

raw_440 [label="raw"]


// END RANK prose_413

raw_440 -> leaf_441
leaf_441  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Is a valid Orb document containing a python script.
"]
// END RANK raw_440

prose_414 -> { raw_442}
{rank=same; raw_442}

raw_442 [label="raw"]


// END RANK prose_414

raw_442 -> leaf_443
leaf_443  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Codeblock headers and footers, unlike most structure lines, cannot begin
with whitespace.

"]
// END RANK raw_442

section_216 -> { header_444 prose_445 prose_446 codeblock_447 prose_448 codeblock_449 prose_450 codeblock_451 prose_452}
{rank=same; header_444 prose_445 prose_446 codeblock_447 prose_448 codeblock_449 prose_450 codeblock_451 prose_452}

header_444 [label="3 : Table"]

prose_445 [label="prose"]

prose_446 [label="prose"]

codeblock_447 [label="code block 413-416"]

prose_448 [label="prose"]

codeblock_449 [label="code block 421-425"]

prose_450 [label="prose"]

codeblock_451 [label="code block 429-432"]

prose_452 [label="prose"]


// END RANK section_216

header_444 -> leaf_453
leaf_453  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Table

 "]
// END RANK header_444

prose_445 -> { raw_454}
{rank=same; raw_454}

raw_454 [label="raw"]


// END RANK prose_445

raw_454 -> leaf_455
leaf_455  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Tables are our matrix data structure.  I have no immediate use for
spreadsheets that I can't meet with other software, but admire their
inclusion in Org and do use tables in markup from time to time.
"]
// END RANK raw_454

prose_446 -> { raw_456 prespace_457 literal_458 raw_459}
{rank=same; raw_456 prespace_457 literal_458 raw_459}

raw_456 [label="raw"]

prespace_457 [label="prespace"]

literal_458 [label="literal"]

raw_459 [label="raw"]


// END RANK prose_446

raw_456 -> leaf_460
leaf_460  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't intend to do much more than recognize them in the near future,
but a glance at what Org offers with tables should give a sense of how
we want to use them within"]
// END RANK raw_456

prespace_457 -> leaf_461
leaf_461  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_457

literal_458 -> leaf_462
leaf_462  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_458

raw_459 -> leaf_463
leaf_463  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_459

codeblock_447 -> leaf_464
leaf_464  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| 2  | 4  | 6  | 8  |
| 10 | 12 | 14 | 16 |"]
// END RANK codeblock_447

prose_448 -> { raw_465}
{rank=same; raw_465}

raw_465 [label="raw"]


// END RANK prose_448

raw_465 -> leaf_466
leaf_466  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
With a couple small refinements, this one should render with a line
between the header and therows:
"]
// END RANK raw_465

codeblock_449 -> leaf_467
leaf_467  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| a  | b  | c  | d  |
~ 3  | 6  | 9  | 12 |
| 18 | 21 | 24 | 27 |"]
// END RANK codeblock_449

prose_450 -> { raw_468}
{rank=same; raw_468}

raw_468 [label="raw"]


// END RANK prose_450

raw_468 -> leaf_469
leaf_469  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To extend a row virtually over two or more text lines
"]
// END RANK raw_468

codeblock_451 -> leaf_470
leaf_470  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| cat, | chien,  | gato,    \\
| hat  | chapeau | sombrero |"]
// END RANK codeblock_451

prose_452 -> { raw_471 prespace_472 literal_473 raw_474}
{rank=same; raw_471 prespace_472 literal_473 raw_474}

raw_471 [label="raw"]

prespace_472 [label="prespace"]

literal_473 [label="literal"]

raw_474 [label="raw"]


// END RANK prose_452

raw_471 -> leaf_475
leaf_475  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The only way to slip a"]
// END RANK raw_471

prespace_472 -> leaf_476
leaf_476  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_472

literal_473 -> leaf_477
leaf_477  [color=Gray,shape=rectangle,fontname=Inconsolata,label="|"]
// END RANK literal_473

raw_474 -> leaf_478
leaf_478  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into a table cell is to put it inside a
«string». Other than that it's prose country.

"]
// END RANK raw_474

section_217 -> { header_479 prose_480 prose_481 prose_482}
{rank=same; header_479 prose_480 prose_481 prose_482}

header_479 [label="3 : Link"]

prose_480 [label="prose"]

prose_481 [label="prose"]

prose_482 [label="prose"]


// END RANK section_217

header_479 -> leaf_483
leaf_483  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Link

 "]
// END RANK header_479

prose_480 -> { raw_484 link_485 raw_486 link_487 raw_488}
{rank=same; raw_484 link_485 raw_486 link_487 raw_488}

raw_484 [label="raw"]

link_485 [label="link"]

raw_486 [label="raw"]

link_487 [label="link"]

raw_488 [label="raw"]


// END RANK prose_480

raw_484 -> leaf_489
leaf_489  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The most "]
// END RANK raw_484

link_485 -> { anchortext_490 url_491}
{rank=same; anchortext_490 url_491}

anchortext_490 [label="anchortext"]

url_491 [label="url"]


// END RANK link_485

anchortext_490 -> leaf_492
leaf_492  [color=Gray,shape=rectangle,fontname=Inconsolata,label="basic link"]
// END RANK anchortext_490

url_491 -> leaf_493
leaf_493  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_491

raw_486 -> leaf_494
leaf_494  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" follows a simple «"]
// END RANK raw_486

link_487 -> { anchortext_495 url_496}
{rank=same; anchortext_495 url_496}

anchortext_495 [label="anchortext"]

url_496 [label="url"]


// END RANK link_487

anchortext_495 -> leaf_497
leaf_497  [color=Gray,shape=rectangle,fontname=Inconsolata,label="description"]
// END RANK anchortext_495

url_496 -> leaf_498
leaf_498  [color=Gray,shape=rectangle,fontname=Inconsolata,label="url"]
// END RANK url_496

raw_488 -> leaf_499
leaf_499  [color=Gray,shape=rectangle,fontname=Inconsolata,label="» pattern.  Markdown gets this right.  In HTML you'll see the
href before the link text, but looking at HTML is a mistake.
"]
// END RANK raw_488

prose_481 -> { raw_500}
{rank=same; raw_500}

raw_500 [label="raw"]


// END RANK prose_481

raw_500 -> leaf_501
leaf_501  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Org-mode follows the opposite convention.  This breaks the flow of text for
the reader and Orb format must be legible in raw form.
"]
// END RANK raw_500

prose_482 -> { raw_502}
{rank=same; raw_502}

raw_502 [label="raw"]


// END RANK prose_482

raw_502 -> leaf_503
leaf_503  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
tk other Org-iastic link types.

"]
// END RANK raw_502

section_218 -> { header_504 prose_505 prose_506 prose_507 prose_508 prose_509}
{rank=same; header_504 prose_505 prose_506 prose_507 prose_508 prose_509}

header_504 [label="3 : Categories"]

prose_505 [label="prose"]

prose_506 [label="prose"]

prose_507 [label="prose"]

prose_508 [label="prose"]

prose_509 [label="prose"]


// END RANK section_218

header_504 -> leaf_510
leaf_510  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Categories

W"]
// END RANK header_504

prose_505 -> { raw_511 link_512 raw_513 link_514 raw_515}
{rank=same; raw_511 link_512 raw_513 link_514 raw_515}

raw_511 [label="raw"]

link_512 [label="link"]

raw_513 [label="raw"]

link_514 [label="link"]

raw_515 [label="raw"]


// END RANK prose_505

raw_511 -> leaf_516
leaf_516  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

While "]
// END RANK raw_511

link_512 -> { anchortext_517 url_518}
{rank=same; anchortext_517 url_518}

anchortext_517 [label="anchortext"]

url_518 [label="url"]


// END RANK link_512

anchortext_517 -> leaf_519
leaf_519  [color=Gray,shape=rectangle,fontname=Inconsolata,label="handles"]
// END RANK anchortext_517

url_518 -> leaf_520
leaf_520  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_518

raw_513 -> leaf_521
leaf_521  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" define a user-level global namespace, and"]
// END RANK raw_513

link_514 -> { anchortext_522 url_523}
{rank=same; anchortext_522 url_523}

anchortext_522 [label="anchortext"]

url_523 [label="url"]


// END RANK link_514

anchortext_522 -> leaf_524
leaf_524  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hashtags"]
// END RANK anchortext_522

url_523 -> leaf_525
leaf_525  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_523

raw_515 -> leaf_526
leaf_526  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" an Orb-wide vocabulary of actions, categories are a
simple tagging system for classification.
"]
// END RANK raw_515

prose_506 -> { raw_527 prespace_528 literal_529 raw_530}
{rank=same; raw_527 prespace_528 literal_529 raw_530}

raw_527 [label="raw"]

prespace_528 [label="prespace"]

literal_529 [label="literal"]

raw_530 [label="raw"]


// END RANK prose_506

raw_527 -> leaf_531
leaf_531  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Categories always refer to themselves, like a lisp"]
// END RANK raw_527

prespace_528 -> leaf_532
leaf_532  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_528

literal_529 -> leaf_533
leaf_533  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":keyword"]
// END RANK literal_529

raw_530 -> leaf_534
leaf_534  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  Handles always
refer to other Orb structures, while hashtags do things.
"]
// END RANK raw_530

prose_507 -> { raw_535 prespace_536 literal_537 raw_538}
{rank=same; raw_535 prespace_536 literal_537 raw_538}

raw_535 [label="raw"]

prespace_536 [label="prespace"]

literal_537 [label="literal"]

raw_538 [label="raw"]


// END RANK prose_507

raw_535 -> leaf_539
leaf_539  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Categories are delineated"]
// END RANK raw_535

prespace_536 -> leaf_540
leaf_540  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_536

literal_537 -> leaf_541
leaf_541  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":Like:so:for:Several:Categories:"]
// END RANK literal_537

raw_538 -> leaf_542
leaf_542  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  They inherit,
like hashtags, on the basis of capitalization.  Like handles, they are parsed
within prose.  This is in contrast to hashtags, which are not.
"]
// END RANK raw_538

prose_508 -> { raw_543}
{rank=same; raw_543}

raw_543 [label="raw"]


// END RANK prose_508

raw_543 -> leaf_544
leaf_544  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The characters allowed in a category are broadly intended to be alphasymbolic,
and exclude markup and links.  Nor may hashtags or handles be used as categories.
"]
// END RANK raw_543

prose_509 -> { raw_545 prespace_546 literal_547 raw_548 prespace_549 literal_550 raw_551}
{rank=same; raw_545 prespace_546 literal_547 raw_548 prespace_549 literal_550 raw_551}

raw_545 [label="raw"]

prespace_546 [label="prespace"]

literal_547 [label="literal"]

raw_548 [label="raw"]

prespace_549 [label="prespace"]

literal_550 [label="literal"]

raw_551 [label="raw"]


// END RANK prose_509

raw_545 -> leaf_552
leaf_552  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I haven't implemented categories in the parser yet, but my intention is that"]
// END RANK raw_545

prespace_546 -> leaf_553
leaf_553  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_546

literal_547 -> leaf_554
leaf_554  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" :Category:anotherCategory:[bad category]:aFourthCategory: "]
// END RANK literal_547

raw_548 -> leaf_555
leaf_555  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" won't break the parse
of"]
// END RANK raw_548

prespace_549 -> leaf_556
leaf_556  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_549

literal_550 -> leaf_557
leaf_557  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":aFourthCategory:"]
// END RANK literal_550

raw_551 -> leaf_558
leaf_558  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and will structurally attach it to the other two good ones,
with the bad one parsed prosaically.

"]
// END RANK raw_551

section_219 -> { header_559 prose_560 codeblock_561 prose_562 prose_563 prose_564}
{rank=same; header_559 prose_560 codeblock_561 prose_562 prose_563 prose_564}

header_559 [label="3 : Drawer"]

prose_560 [label="prose"]

codeblock_561 [label="code block 477-481"]

prose_562 [label="prose"]

prose_563 [label="prose"]

prose_564 [label="prose"]


// END RANK section_219

header_559 -> leaf_565
leaf_565  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Drawer

 "]
// END RANK header_559

prose_560 -> { raw_566}
{rank=same; raw_566}

raw_566 [label="raw"]


// END RANK prose_560

raw_566 -> leaf_567
leaf_567  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A drawer is a block that's hidden by default. The computer sees it,
the user sees ⦿, or a similar rune.
"]
// END RANK raw_566

codeblock_561 -> leaf_568
leaf_568  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[a-drawer]:
contents
:[a-drawer]:"]
// END RANK codeblock_561

prose_562 -> { raw_569}
{rank=same; raw_569}

raw_569 [label="raw"]


// END RANK prose_562

raw_569 -> leaf_570
leaf_570  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This closes to a single Unicode character, such as ⦿, which can't be deleted
without opening it. Deleting into an ordinary fold marker opens the fold,
deleting towards a drawer marker skips past it.
"]
// END RANK raw_569

prose_563 -> { prespace_571 literal_572 raw_573 prespace_574 literal_575 raw_576}
{rank=same; prespace_571 literal_572 raw_573 prespace_574 literal_575 raw_576}

prespace_571 [label="prespace"]

literal_572 [label="literal"]

raw_573 [label="raw"]

prespace_574 [label="prespace"]

literal_575 [label="literal"]

raw_576 [label="raw"]


// END RANK prose_563

prespace_571 -> leaf_577
leaf_577  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_571

literal_572 -> leaf_578
leaf_578  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a-drawer"]
// END RANK literal_572

raw_573 -> leaf_579
leaf_579  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is a handle, the @ isn't needed here but you could include it.
It's ok to just leave it blank:"]
// END RANK raw_573

prespace_574 -> leaf_580
leaf_580  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_574

literal_575 -> leaf_581
leaf_581  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[ ]:"]
// END RANK literal_575

raw_576 -> leaf_582
leaf_582  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_576

prose_564 -> { raw_583}
{rank=same; raw_583}

raw_583 [label="raw"]


// END RANK prose_564

raw_583 -> leaf_584
leaf_584  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The only purpose of a drawer is to draw a folding layer around some text
that's normally kept closed.  If you're doing something fancy you might
have a long header of imports and configs that you don't want to look at
all the time.

























"]
// END RANK raw_583


}
