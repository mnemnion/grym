digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 508"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-224"]


section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7 section_8 section_9}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7 section_8 section_9}

header_2 [label="1 : Orb format"]

prose_3 [label="prose"]

section_4 [label="section: 7-21"]

section_5 [label="section: 22-43"]

section_6 [label="section: 44-92"]

section_7 [label="section: 106-142"]

section_8 [label="section: 143-150"]

section_9 [label="section: 225-457"]


header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Orb format"]
prose_3 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The grimoire tools work with a structured text format which we call Orb.
This is an introduction to that format.

"]
section_4 -> { header_13 prose_14 prose_15 prose_16}
{rank=same; header_13 prose_14 prose_15 prose_16}

header_13 [label="2 : Metalanguage"]

prose_14 [label="prose"]

prose_15 [label="prose"]

prose_16 [label="prose"]


header_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Metalanguage"]
prose_14 -> { raw_18}
{rank=same; raw_18}

raw_18 [label="raw"]


raw_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  I call Orb a metalanguage, because it can by design include any other
structured text format within it.  Provided it may be represented in utf-8!
This is no stricture in practice. 
"]
prose_15 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The Orb format aims to be equally useful for markup, literate programming,
configuration, data exchange, and the sort of interactive notebook which 
Jupyter and org-babel can produce.
"]
prose_16 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The first parser and tool is Grimoire, which, as a bootstrap, is focused on
literate programming.  This will in turn be the format for the tools in the
bettertools suite. 

"]
section_5 -> { header_24 prose_25 prose_26 prose_27}
{rank=same; header_24 prose_25 prose_26 prose_27}

header_24 [label="2 : Goals"]

prose_25 [label="prose"]

prose_26 [label="prose"]

prose_27 [label="prose"]


header_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Goals"]
prose_25 -> { raw_29}
{rank=same; raw_29}

raw_29 [label="raw"]


raw_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Orb is:
"]
prose_26 -> { raw_31}
{rank=same; raw_31}

raw_31 [label="raw"]


raw_31 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - Error free:  An Orb document is never in a state of error.  Any valid
                 utf-8 string is an Orb document.
  - Line based:  Orb files may be rapidly separated into their elements
                 by splitting into lines and examining the first few
                 characters.
  - Humane:      Orb is carefully designed to be readable, as is, by
                 ordinary humans.
  - General:     There are no characters such as <>& in HTML which must be
                 escaped.  Orb codeblocks can enclose any other format,
                 including Orb format.  Orb strings are «brace balanced»
                 and can enclose any utf-8 string as a consequence. 
"]
prose_27 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
While it is possible to do some fancy things with Orb, it is also a
comfortable format to write a blog post, or put a few key-value pairs into
a config file.  If you were to send an email in Orb format, the recipient
might not even notice. 

"]
section_6 -> { header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 section_47}
{rank=same; header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 section_47}

header_35 [label="2 : Encoding"]

prose_36 [label="prose"]

prose_37 [label="prose"]

prose_38 [label="prose"]

prose_39 [label="prose"]

prose_40 [label="prose"]

prose_41 [label="prose"]

prose_42 [label="prose"]

prose_43 [label="prose"]

prose_44 [label="prose"]

prose_45 [label="prose"]

prose_46 [label="prose"]

section_47 [label="section: 93-105"]


header_35 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Encoding"]
prose_36 -> { raw_49}
{rank=same; raw_49}

raw_49 [label="raw"]


raw_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Orb documents are encoded in utf-8.  
"]
prose_37 -> { raw_51}
{rank=same; raw_51}

raw_51 [label="raw"]


raw_51 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The core syntax is defined in terms of the reachable keys on a US keyboard.
This tradition is firmly entrenched in the mid teens, and I have no
designs on budging that at present.  The miser in me likes that they're
a byte each.  The lawyer in me insists that this isn't ASCII, which is a
seven-bit legacy encoding.
"]
prose_38 -> { raw_53}
{rank=same; raw_53}

raw_53 [label="raw"]


raw_53 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We aren't at all reluctant to use Unicode characters as part of the format. 
Grimoire «strings» are the most visible example of this, along with drawer
and fold icons, which are actual parts of an Orb document. 
"]
prose_39 -> { raw_55}
{rank=same; raw_55}

raw_55 [label="raw"]


raw_55 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is case sensitive and uses lower-snake-case for built-in English
phrases. There is a convention (see classes) that uses capitalization of
user words to affect semantics.  
"]
prose_40 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[tk] is there though
"]
prose_41 -> { raw_59}
{rank=same; raw_59}

raw_59 [label="raw"]


raw_59 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Orb is a format for text.  There are many ways of writing text, but only one
way of encoding it that matters.  There is a long tail of Unicode complexity,
and there are traces of Committee spattered all over it; nonetheless we 
should be grateful that utf-8 won, in a world in which we still drive cars on
both possible sides of the road. 
"]
prose_42 -> { raw_61 link_62 raw_63}
{rank=same; raw_61 link_62 raw_63}

raw_61 [label="raw"]

link_62 [label="link"]

raw_63 [label="raw"]


raw_61 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that while we have our "]
link_62 -> { anchortext_65 url_66}
{rank=same; anchortext_65 url_66}

anchortext_65 [label="anchortext"]

url_66 [label="url"]


anchortext_65 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="own opinions about utf-8"]
url_66 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_63 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" our vision of
heaven is backward-compatible with the inferior version foisted upon us by a 
jealous software monopoly.
"]
prose_43 -> { raw_70 link_71 raw_72}
{rank=same; raw_70 link_71 raw_72}

raw_70 [label="raw"]

link_71 [label="link"]

raw_72 [label="raw"]


raw_70 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Bidirectional handling in a context that's indentation sensitive is an 
example of something subtle. Orb format uses indentation in a few key places,
and a compliant parser will need to detect and respect RTL [tk?] markers.
Exactly how is spelled out under "]
link_71 -> { anchortext_74 url_75}
{rank=same; anchortext_74 url_75}

anchortext_74 [label="anchortext"]

url_75 [label="url"]


anchortext_74 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="indentation"]
url_75 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_72 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
prose_44 -> { raw_79}
{rank=same; raw_79}

raw_79 [label="raw"]


raw_79 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'd love to get a Hebrew and/or Arabic fluent hacker on the project
early, to make sure this works correctly.  I'll settle for Aramaic.
"]
prose_45 -> { raw_81}
{rank=same; raw_81}

raw_81 [label="raw"]


raw_81 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Another thing I want to get right is equivalence. If you have a
variable called \"Glück\" the compiler shouldn't complain if it's
rendered in either of the valid ways. For some sequences that's
\"any of the valid ways\". If we normalized your prose, you might
have problems later, so we don't want to solve it that way.
"]
prose_46 -> { raw_83 link_84 raw_85 link_86 raw_87}
{rank=same; raw_83 link_84 raw_85 link_86 raw_87}

raw_83 [label="raw"]

link_84 [label="link"]

raw_85 [label="raw"]

link_86 [label="link"]

raw_87 [label="raw"]


raw_83 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This consideration mostly applys to "]
link_84 -> { anchortext_89 url_90}
{rank=same; anchortext_89 url_90}

anchortext_89 [label="anchortext"]

url_90 [label="url"]


anchortext_89 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hashtags"]
url_90 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_85 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
link_86 -> { anchortext_94 url_95}
{rank=same; anchortext_94 url_95}

anchortext_94 [label="anchortext"]

url_95 [label="url"]


anchortext_94 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="handles"]
url_95 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_87 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The idea is that Orb files will respect all the 
wacky typographic equivalences that Unicode has gifted us with.

"]
section_47 -> { header_99 prose_100 prose_101 prose_102}
{rank=same; header_99 prose_100 prose_101 prose_102}

header_99 [label="4 : Tabs"]

prose_100 [label="prose"]

prose_101 [label="prose"]

prose_102 [label="prose"]


header_99 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Tabs"]
prose_100 -> { raw_104}
{rank=same; raw_104}

raw_104 [label="raw"]


raw_104 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The vexacious ASCII character 8 will never be found in an Orb document.  If
encountered, it will be reduced to two spaces.  Grimoire will complain.
"]
prose_101 -> { raw_106 italic_107 raw_108}
{rank=same; raw_106 italic_107 raw_108}

raw_106 [label="raw"]

italic_107 [label="italic"]

raw_108 [label="raw"]


raw_106 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not an "]
italic_107 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="error"]
raw_108 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" mind you, it's a well-defined input that will become 
two spaces.  If encountered by one of my tools, the tabs will be permanently
gone. 
"]
prose_102 -> { raw_112}
{rank=same; raw_112}

raw_112 [label="raw"]


raw_112 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Yes. This applies to your source code blocks as well.  It is time we put 
away childish things.  

"]
section_7 -> { header_114 prose_115 prose_116 prose_117 prose_118 prose_119 prose_120 prose_121 prose_122}
{rank=same; header_114 prose_115 prose_116 prose_117 prose_118 prose_119 prose_120 prose_121 prose_122}

header_114 [label="2 : Prose and Structure"]

prose_115 [label="prose"]

prose_116 [label="prose"]

prose_117 [label="prose"]

prose_118 [label="prose"]

prose_119 [label="prose"]

prose_120 [label="prose"]

prose_121 [label="prose"]

prose_122 [label="prose"]


header_114 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Prose and Structure"]
prose_115 -> { raw_124}
{rank=same; raw_124}

raw_124 [label="raw"]


raw_124 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The major distinction in Orb is between prose and structure.
"]
prose_116 -> { raw_126}
{rank=same; raw_126}

raw_126 [label="raw"]


raw_126 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose is the default parsing state. It is far from unstructured from the
runtime perspective. Although this needn't be embedded in the parse
tree, Grimoire understands concepts such as paragraphs, words, punctuation,
capital letters, languages, and anything else proper to prose.
"]
prose_117 -> { raw_128}
{rank=same; raw_128}

raw_128 [label="raw"]


raw_128 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I refer to human languages, but Grimoire understands programming languages
also. In principle, all of them, it shouldn't be harder to add them than
it is to call them from shell, though getting a runtime rigged up to
another runtime always calls for some finesse to derive a good experience.
"]
prose_118 -> { raw_130}
{rank=same; raw_130}

raw_130 [label="raw"]


raw_130 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
\"Programming languages\" is overly specific.  Grimoire draws a distinction
between prose and structure. Blocks may contain either, or both.
"]
prose_119 -> { raw_132 bold_133 raw_134}
{rank=same; raw_132 bold_133 raw_134}

raw_132 [label="raw"]

bold_133 [label="bold"]

raw_134 [label="raw"]


raw_132 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something that's nice about a language build on a prose/structure
relationship is that it can be error free.  Anything "]
bold_133 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym"]
raw_134 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" can't build into
a structure is just prose.
"]
prose_120 -> { raw_138 italic_139 raw_140 italic_141 raw_142}
{rank=same; raw_138 italic_139 raw_140 italic_141 raw_142}

raw_138 [label="raw"]

italic_139 [label="italic"]

raw_140 [label="raw"]

italic_141 [label="italic"]

raw_142 [label="raw"]


raw_138 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Markdown has this property.  Sometimes you run into parsers which
build errors into Markdown, which is itself erroneous.  If you [[RTFM]
[http:/"]
italic_139 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="daringfireball.net"]
raw_140 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="projects"]
italic_141 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="markdown"]
raw_142 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="syntax]],
you'll find the word \"error\" once.  Helpfully explaining how Markdown
keeps you from making one.
"]
prose_121 -> { raw_148}
{rank=same; raw_148}

raw_148 [label="raw"]


raw_148 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do what we can to make the document look the same as it is
in fact structured.  The intention with Orb files is that we work with them
aided by a linter, which lets us be lazy and still get consistent results.
"]
prose_122 -> { raw_150}
{rank=same; raw_150}

raw_150 [label="raw"]


raw_150 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The most important point in this section is that Orb documents do not have
errors and never fail to parse.  You should be able to literally plug any 
Orb parser into a source of entropy and end up with a document, since a
proper utf-8 decoder will drop any invalid bytes it sees. 

"]
section_8 -> { header_152 prose_153 section_154}
{rank=same; header_152 prose_153 section_154}

header_152 [label="2 : Ownership"]

prose_153 [label="prose"]

section_154 [label="section: 151-166"]


header_152 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Ownership"]
prose_153 -> { raw_156}
{rank=same; raw_156}

raw_156 [label="raw"]


raw_156 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The root concept of Orb is a document, which divides into one or more 
sections.  A section owns all structure or prose within it.  This 
paragraph is owned by «** Ownership» above, as are all the rest of the
blocks until the next section header. 

"]
section_154 -> { header_158 prose_159 prose_160 prose_161 section_162}
{rank=same; header_158 prose_159 prose_160 prose_161 section_162}

header_158 [label="3 : Blocking"]

prose_159 [label="prose"]

prose_160 [label="prose"]

prose_161 [label="prose"]

section_162 [label="section: 167-224"]


header_158 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Blocking"]
prose_159 -> { raw_164}
{rank=same; raw_164}

raw_164 [label="raw"]


raw_164 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Orb documents are chunked into sections entirely by their heading lines.
Within a section, prose and structure alike are organized into blocks.  
The defining marker of blocks is blank lines.
"]
prose_160 -> { raw_166}
{rank=same; raw_166}

raw_166 [label="raw"]


raw_166 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This second paragraph is the second block of the «*** Blocking» section.
Taking a look at the source document, you'll see that I put (single)
newlines between lines, with an 78 column margin.  That should be considered
good style.  If you prefer to have each paragraph be its own line, have at.
"]
prose_161 -> { raw_168}
{rank=same; raw_168}

raw_168 [label="raw"]


raw_168 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A line is considered blank if it contains only Unicode spacemarks.  Grimoire
will smoothly remove any such cruft and replace it with «\\n\\n».  We also
trim trailing whitespace. 

"]
section_162 -> { header_170 prose_171 prose_172 prose_173 prose_174 prose_175 codeblock_176 prose_177 codeblock_178 prose_179 prose_180 codeblock_181 prose_182}
{rank=same; header_170 prose_171 prose_172 prose_173 prose_174 prose_175 codeblock_176 prose_177 codeblock_178 prose_179 prose_180 codeblock_181 prose_182}

header_170 [label="4 : The Cling Rule"]

prose_171 [label="prose"]

prose_172 [label="prose"]

prose_173 [label="prose"]

prose_174 [label="prose"]

prose_175 [label="prose"]

codeblock_176 [label="code block 187-194"]

prose_177 [label="prose"]

codeblock_178 [label="code block 199-206"]

prose_179 [label="prose"]

prose_180 [label="prose"]

codeblock_181 [label="code block 213-219"]

prose_182 [label="prose"]


header_170 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** The Cling Rule"]
prose_171 -> { raw_184 link_185 raw_186}
{rank=same; raw_184 link_185 raw_186}

raw_184 [label="raw"]

link_185 [label="link"]

raw_186 [label="raw"]


raw_184 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  "]
link_185 -> { anchortext_188 url_189}
{rank=same; anchortext_188 url_189}

anchortext_188 [label="anchortext"]

url_189 [label="url"]


anchortext_188 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Tags"]
url_189 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_186 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are used both to provide names to blocks in Orb format
and to specify various actions in knitting and weaving.  They may be placed
above or below the block which they affect.
"]
prose_172 -> { raw_193}
{rank=same; raw_193}

raw_193 [label="raw"]


raw_193 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The cling rule specifies that a group 'clings' to another group when
it is closer to that group than the other group. Ties resolve down.
"]
prose_173 -> { raw_195}
{rank=same; raw_195}

raw_195 [label="raw"]


raw_195 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This should make it intuitive to group elements that aren't grouping the
way you expect: put in whitespace until the block is visually distinguished
from the surroundings.
"]
prose_174 -> { raw_197}
{rank=same; raw_197}

raw_197 [label="raw"]


raw_197 -> leaf_198
leaf_198  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cling applies between blocks which are at the same level of ownership.
Ownership has precedence over cling: all blocks underneath e.g. a header
line are owned by that line, newlines notwithstanding.
"]
prose_175 -> { raw_199}
{rank=same; raw_199}

raw_199 [label="raw"]


raw_199 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that indentation of e.g. lists invokes the cling rule within the
indentation level.
"]
codeblock_176 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |

#tag


someprose on a block"]
prose_177 -> { raw_202}
{rank=same; raw_202}

raw_202 [label="raw"]


raw_202 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the table, but
"]
codeblock_178 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |


#tag

someprose on a block"]
prose_179 -> { raw_205}
{rank=same; raw_205}

raw_205 [label="raw"]


raw_205 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the block.
"]
prose_180 -> { raw_207}
{rank=same; raw_207}

raw_207 [label="raw"]


raw_207 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Even clings are resolved forwards:
"]
codeblock_181 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |

#tag

someprose on a block"]
prose_182 -> { raw_210}
{rank=same; raw_210}

raw_210 [label="raw"]


raw_210 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the prose block.

"]
section_9 -> { header_212 prose_213 prose_214 section_215 section_216 section_217 section_218 section_219 section_220 section_221}
{rank=same; header_212 prose_213 prose_214 section_215 section_216 section_217 section_218 section_219 section_220 section_221}

header_212 [label="2 : Structural elements"]

prose_213 [label="prose"]

prose_214 [label="prose"]

section_215 [label="section: 237-255"]

section_216 [label="section: 256-286"]

section_217 [label="section: 287-361"]

section_218 [label="section: 377-410"]

section_219 [label="section: 411-445"]

section_220 [label="section: 446-457"]

section_221 [label="section: 458-508"]


header_212 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Structural elements"]
prose_213 -> { raw_223}
{rank=same; raw_223}

raw_223 [label="raw"]


raw_223 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Structure and prose are the figure and ground of Orb format.  We speak of
structure and prose on a block-by-block basis, and within some structure
blocks there are regions of prose.  Prose in turn routinely contains
structural regions.
"]
prose_214 -> { raw_225}
{rank=same; raw_225}

raw_225 [label="raw"]


raw_225 -> leaf_226
leaf_226  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This section will discuss under what circumstances an Orb parser will create
structure, with some discursions into the semantics these distinctions
represent. 

"]
section_215 -> { header_227 prose_228 codeblock_229 prose_230 prose_231}
{rank=same; header_227 prose_228 codeblock_229 prose_230 prose_231}

header_227 [label="3 : Headlines"]

prose_228 [label="prose"]

codeblock_229 [label="code block 242-244"]

prose_230 [label="prose"]

prose_231 [label="prose"]


header_227 -> leaf_232
leaf_232  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Headlines"]
prose_228 -> { raw_233}
{rank=same; raw_233}

raw_233 [label="raw"]


raw_233 -> leaf_234
leaf_234  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Headlines divide a document into sections.  The grammar for recognizing
a headline is as follows:
"]
codeblock_229 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    headline = WS?  '*'+  ' '  prose  NL"]
prose_230 -> { raw_236 literal_237 raw_238}
{rank=same; raw_236 literal_237 raw_238}

raw_236 [label="raw"]

literal_237 [label="literal"]

raw_238 [label="raw"]


raw_236 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The number of "]
literal_237 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_238 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" determine the level of ownership.  This is a declarative
relationship, though I lack a clean syntax to express it other than
functionally at present. 
"]
prose_231 -> { raw_242 literal_243 raw_244}
{rank=same; raw_242 literal_243 raw_244}

raw_242 [label="raw"]

literal_243 [label="literal"]

raw_244 [label="raw"]


raw_242 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The content within "]
literal_243 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label="prose"]
raw_244 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" has the luxury of being context-sensitive.  In
particular we treat tags on a headline as though they're on a tagline below
they headline. 


"]
section_216 -> { header_248 prose_249 prose_250 prose_251 codeblock_252 prose_253 prose_254 codeblock_255 prose_256}
{rank=same; header_248 prose_249 prose_250 prose_251 codeblock_252 prose_253 prose_254 codeblock_255 prose_256}

header_248 [label="3 : Tags and Taglines"]

prose_249 [label="prose"]

prose_250 [label="prose"]

prose_251 [label="prose"]

codeblock_252 [label="code block 266-268"]

prose_253 [label="prose"]

prose_254 [label="prose"]

codeblock_255 [label="code block 278-281"]

prose_256 [label="prose"]


header_248 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Tags and Taglines"]
prose_249 -> { raw_258 literal_259 raw_260 literal_261 raw_262}
{rank=same; raw_258 literal_259 raw_260 literal_261 raw_262}

raw_258 [label="raw"]

literal_259 [label="literal"]

raw_260 [label="raw"]

literal_261 [label="literal"]

raw_262 [label="raw"]


raw_258 -> leaf_263
leaf_263  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Tags are the control structures for Orb.  There are "]
literal_259 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#hashtags"]
raw_260 -> leaf_265
leaf_265  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which
loosely correspond to functions or messages, and "]
literal_261 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@handles"]
raw_262 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which more
directly correspond to symbols.  
"]
prose_250 -> { raw_268 link_269 raw_270}
{rank=same; raw_268 link_269 raw_270}

raw_268 [label="raw"]

link_269 [label="link"]

raw_270 [label="raw"]


raw_268 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The semantics of tags belong in the "]
link_269 -> { anchortext_272 url_273}
{rank=same; anchortext_272 url_273}

anchortext_272 [label="anchortext"]

url_273 [label="url"]


anchortext_272 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label="runtime"]
url_273 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_270 -> leaf_276
leaf_276  [color=Gray,shape=rectangle,fontname=Inconsolata,label="]] section.
"]
prose_251 -> { raw_277}
{rank=same; raw_277}

raw_277 [label="raw"]


raw_277 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For now let us note that the rule
"]
codeblock_252 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  hashtag = WS+  '#'  symbol"]
prose_253 -> { raw_280 bold_281 raw_282 literal_283 raw_284}
{rank=same; raw_280 bold_281 raw_282 literal_283 raw_284}

raw_280 [label="raw"]

bold_281 [label="bold"]

raw_282 [label="raw"]

literal_283 [label="literal"]

raw_284 [label="raw"]


raw_280 -> leaf_285
leaf_285  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  "]
bold_281 -> leaf_286
leaf_286  [color=Gray,shape=rectangle,fontname=Inconsolata,label="may"]
raw_282 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" not appear in (all) prose contexts, this is still undecided.  This is 
true of handles as well given the state of "]
literal_283 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym"]
raw_284 -> leaf_289
leaf_289  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at the present time, 
but I am more firmly convinced of the value of @handle as a short in-place
expansion of a handleline. I don't think trying to parse a mid-block #export
as meaning something is as valuable. 
"]
prose_254 -> { raw_290}
{rank=same; raw_290}

raw_290 [label="raw"]


raw_290 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These two rules are currently in use:
"]
codeblock_255 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  hashline = WS?  '#'  symbol  ' '  prose  NL
  handleline = WS?  '@'  symbol  ' '  prose  NL"]
prose_256 -> { raw_293 literal_294 raw_295 literal_296 raw_297}
{rank=same; raw_293 literal_294 raw_295 literal_296 raw_297}

raw_293 [label="raw"]

literal_294 [label="literal"]

raw_295 [label="raw"]

literal_296 [label="literal"]

raw_297 [label="raw"]


raw_293 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Structure is designed to work on a line-by-line basis,
any "]
literal_294 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label="line"]
raw_295 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" rule has an implied "]
literal_296 -> leaf_301
leaf_301  [color=Gray,shape=rectangle,fontname=Inconsolata,label="^"]
raw_297 -> leaf_302
leaf_302  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". 

"]
section_217 -> { header_303 prose_304 prose_305 codeblock_306 prose_307 codeblock_308 prose_309 codeblock_310 prose_311 codeblock_312 prose_313 section_314 section_315}
{rank=same; header_303 prose_304 prose_305 codeblock_306 prose_307 codeblock_308 prose_309 codeblock_310 prose_311 codeblock_312 prose_313 section_314 section_315}

header_303 [label="3 : List "]

prose_304 [label="prose"]

prose_305 [label="prose"]

codeblock_306 [label="code block 295-297"]

prose_307 [label="prose"]

codeblock_308 [label="code block 301-303"]

prose_309 [label="prose"]

codeblock_310 [label="code block 309-312"]

prose_311 [label="prose"]

codeblock_312 [label="code block 316-319"]

prose_313 [label="prose"]

section_314 [label="section: 328-361"]

section_315 [label="section: 362-376"]


header_303 -> leaf_316
leaf_316  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** List "]
prose_304 -> { raw_317}
{rank=same; raw_317}

raw_317 [label="raw"]


raw_317 -> leaf_318
leaf_318  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Lists are both a markup format and a flexible data container.  In the emacs
org-mode, headline-type structures do the heavy lifting for TODO lists and
the like.  This was org's original purpose, with document markup coming later.
"]
prose_305 -> { raw_319}
{rank=same; raw_319}

raw_319 [label="raw"]


raw_319 -> leaf_320
leaf_320  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Orb lists come in unnumbered and numbered.  Unnumbered lists follow this rule:
"]
codeblock_306 -> leaf_321
leaf_321  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  listline-un = WS? '- ' prose NL"]
prose_307 -> { raw_322}
{rank=same; raw_322}

raw_322 [label="raw"]


raw_322 -> leaf_323
leaf_323  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
While numbered lists match this:
"]
codeblock_308 -> leaf_324
leaf_324  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  listline-li = WS? digits '. ' prose NL"]
prose_309 -> { raw_325}
{rank=same; raw_325}

raw_325 [label="raw"]


raw_325 -> leaf_326
leaf_326  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For lists, as with any structure group, the semantics of the prose section are
somewhat flexible.  The cling rule for lists parses indentation so that
multi-line entries are possible:
"]
codeblock_310 -> leaf_327
leaf_327  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - list entry 
   prose directly under, bad style"]
prose_311 -> { raw_328}
{rank=same; raw_328}

raw_328 [label="raw"]


raw_328 -> leaf_329
leaf_329  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
vs.
"]
codeblock_312 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - list entry 
    continues list entry"]
prose_313 -> { raw_331}
{rank=same; raw_331}

raw_331 [label="raw"]


raw_331 -> leaf_332
leaf_332  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
As in Markdown, the parser will accept any numbers as a numbered list without
checking their order.  The linter will increment by one starting from the
number of the first index, so if you start with \"1. \" or \"0. \" or \"10. \" you
get the subsequent.  This behavior can be suppressed with a hashtag directive
yet to be added.  

"]
section_314 -> { header_333 prose_334 codeblock_335 prose_336 prose_337 prose_338 prose_339}
{rank=same; header_333 prose_334 codeblock_335 prose_336 prose_337 prose_338 prose_339}

header_333 [label="4 : List Boxes"]

prose_334 [label="prose"]

codeblock_335 [label="code block 335-346"]

prose_336 [label="prose"]

prose_337 [label="prose"]

prose_338 [label="prose"]

prose_339 [label="prose"]


header_333 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** List Boxes

 "]
prose_334 -> { raw_341 literal_342 raw_343 literal_344 raw_345 link_346 raw_347}
{rank=same; raw_341 literal_342 raw_343 literal_344 raw_345 link_346 raw_347}

raw_341 [label="raw"]

literal_342 [label="literal"]

raw_343 [label="raw"]

literal_344 [label="literal"]

raw_345 [label="raw"]

link_346 [label="link"]

raw_347 [label="raw"]


raw_341 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Lists can have, as a first element, a box, either a checkbox "]
literal_342 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[ ]"]
raw_343 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or a 
radio box "]
literal_344 -> leaf_351
leaf_351  [color=Gray,shape=rectangle,fontname=Inconsolata,label="( )"]
raw_345 -> leaf_352
leaf_352  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  These are either empty with whitespace or have contents
from a limited pallete of symbols.  Their function is described in the "]
link_346 -> { anchortext_353 url_354}
{rank=same; anchortext_353 url_354}

anchortext_353 [label="anchortext"]

url_354 [label="url"]


anchortext_353 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label="runtime"]
url_354 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_347 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label="]] section. 
"]
codeblock_335 -> leaf_358
leaf_358  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - [ ] #todo finish orb.orb
    - [X] Metalanguage
    - [X] Prose and Structure
    - [REVISE] Link
    - [ ] Code Block

  - Fruits
    - ( ) Bananas
    - (*) Coconuts
    - ( ) Grapes"]
prose_336 -> { raw_359}
{rank=same; raw_359}

raw_359 [label="raw"]


raw_359 -> leaf_360
leaf_360  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These two types can't meaningfully mix on the same level of a list.  The one
the parser sees first will be applied.
"]
prose_337 -> { raw_361}
{rank=same; raw_361}

raw_361 [label="raw"]


raw_361 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The radio button is contagious, if the parser encounters one all lines on
that level get one. 
"]
prose_338 -> { raw_363}
{rank=same; raw_363}

raw_363 [label="raw"]


raw_363 -> leaf_364
leaf_364  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The check box is not, it's ok to include it on some lines but not others.  If
the parser sees a check box and then a radio button, it will turn the radio
button into a check box.
"]
prose_339 -> { raw_365 literal_366 raw_367}
{rank=same; raw_365 literal_366 raw_367}

raw_365 [label="raw"]

literal_366 [label="literal"]

raw_367 [label="raw"]


raw_365 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The radio button can only have one "]
literal_366 -> leaf_369
leaf_369  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_367 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label="; the parser will ignore, and the
linter remove, any others. 

"]
section_315 -> { header_371 prose_372 codeblock_373 prose_374}
{rank=same; header_371 prose_372 codeblock_373 prose_374}

header_371 [label="4 : Key/value pairs"]

prose_372 [label="prose"]

codeblock_373 [label="code block 366-370"]

prose_374 [label="prose"]


header_371 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Key/value pairs

 "]
prose_372 -> { raw_376 literal_377 raw_378}
{rank=same; raw_376 literal_377 raw_378}

raw_376 [label="raw"]

literal_377 [label="literal"]

raw_378 [label="raw"]


raw_376 -> leaf_379
leaf_379  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A list element can consist of key/value pairs, separated with a "]
literal_377 -> leaf_380
leaf_380  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":"]
raw_378 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
codeblock_373 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" - first key:
   - value : another value
   - 42 : the answer"]
prose_374 -> { raw_383}
{rank=same; raw_383}

raw_383 [label="raw"]


raw_383 -> leaf_384
leaf_384  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
From the runtime perspective the left and right sides are basically strings,
as we build out the Clu runtime we'll have better expectations for what
keys and values would look like as data. 

"]
section_218 -> { header_385 prose_386 prose_387 codeblock_388 prose_389 prose_390 prose_391 codeblock_392 prose_393 prose_394}
{rank=same; header_385 prose_386 prose_387 codeblock_388 prose_389 prose_390 prose_391 codeblock_392 prose_393 prose_394}

header_385 [label="3 : Code Block"]

prose_386 [label="prose"]

prose_387 [label="prose"]

codeblock_388 [label="code block 384-388"]

prose_389 [label="prose"]

prose_390 [label="prose"]

prose_391 [label="prose"]

codeblock_392 [label="code block 399-403"]

prose_393 [label="prose"]

prose_394 [label="prose"]


header_385 -> leaf_395
leaf_395  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Code Block

 "]
prose_386 -> { raw_396}
{rank=same; raw_396}

raw_396 [label="raw"]


raw_396 -> leaf_397
leaf_397  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The reason Orb exists is so that Grimoire can exist.  We do codeblocks
carefully. 
"]
prose_387 -> { raw_398}
{rank=same; raw_398}

raw_398 [label="raw"]


raw_398 -> leaf_399
leaf_399  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A codeblock looks like so:
"]
codeblock_388 -> leaf_400
leaf_400  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!orb
*** Some Orb content
#/orb"]
prose_389 -> { raw_401}
{rank=same; raw_401}

raw_401 [label="raw"]


raw_401 -> leaf_402
leaf_402  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Try that trick in Git-Flavored Markdown...
"]
prose_390 -> { raw_403 literal_404 raw_405 literal_406 raw_407}
{rank=same; raw_403 literal_404 raw_405 literal_406 raw_407}

raw_403 [label="raw"]

literal_404 [label="literal"]

raw_405 [label="raw"]

literal_406 [label="literal"]

raw_407 [label="raw"]


raw_403 -> leaf_408
leaf_408  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The number of initial "]
literal_404 -> leaf_409
leaf_409  [color=Gray,shape=rectangle,fontname=Inconsolata,label="!!"]
raw_405 -> leaf_410
leaf_410  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" needs to match the closing "]
literal_406 -> leaf_411
leaf_411  [color=Gray,shape=rectangle,fontname=Inconsolata,label="//"]
raw_407 -> leaf_412
leaf_412  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", allowing any 
utf-8 string at all to be enclosed with this method.  We consider this an
important property to have in an enclosure encoding. 
"]
prose_391 -> { raw_413}
{rank=same; raw_413}

raw_413 [label="raw"]


raw_413 -> leaf_414
leaf_414  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code blocks must be opened, but needn't be closed, as a parser will recognize
EOF as a code block closure.  This has a fortunate side effect, as this:
"]
codeblock_392 -> leaf_415
leaf_415  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!/usr/bin/python

from future import bettertools"]
prose_393 -> { raw_416}
{rank=same; raw_416}

raw_416 [label="raw"]


raw_416 -> leaf_417
leaf_417  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Is a valid Orb document containing a python script.
"]
prose_394 -> { raw_418}
{rank=same; raw_418}

raw_418 [label="raw"]


raw_418 -> leaf_419
leaf_419  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Codeblock headers and footers, unlike most structure lines, cannot begin
with whitespace. 

"]
section_219 -> { header_420 prose_421 prose_422 codeblock_423 prose_424 codeblock_425 prose_426 codeblock_427 prose_428}
{rank=same; header_420 prose_421 prose_422 codeblock_423 prose_424 codeblock_425 prose_426 codeblock_427 prose_428}

header_420 [label="3 : Table"]

prose_421 [label="prose"]

prose_422 [label="prose"]

codeblock_423 [label="code block 421-424"]

prose_424 [label="prose"]

codeblock_425 [label="code block 429-433"]

prose_426 [label="prose"]

codeblock_427 [label="code block 437-440"]

prose_428 [label="prose"]


header_420 -> leaf_429
leaf_429  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Table

 "]
prose_421 -> { raw_430}
{rank=same; raw_430}

raw_430 [label="raw"]


raw_430 -> leaf_431
leaf_431  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Tables are our matrix data structure.  I have no immediate use for 
spreadsheets that I can't meet with other software, but admire their
inclusion in Org and do use tables in markup from time to time.
"]
prose_422 -> { raw_432 literal_433 raw_434}
{rank=same; raw_432 literal_433 raw_434}

raw_432 [label="raw"]

literal_433 [label="literal"]

raw_434 [label="raw"]


raw_432 -> leaf_435
leaf_435  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't intend to do much more than recognize them in the near future,
but a glance at what Org offers with tables should give a sense of how
we want to use them within "]
literal_433 -> leaf_436
leaf_436  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
raw_434 -> leaf_437
leaf_437  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". 
"]
codeblock_423 -> leaf_438
leaf_438  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| 2  | 4  | 6  | 8  |
| 10 | 12 | 14 | 16 |"]
prose_424 -> { raw_439}
{rank=same; raw_439}

raw_439 [label="raw"]


raw_439 -> leaf_440
leaf_440  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
With a couple small refinements, this one should render with a line
between the header and therows:
"]
codeblock_425 -> leaf_441
leaf_441  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| a  | b  | c  | d  |
~ 3  | 6  | 9  | 12 |
| 18 | 21 | 24 | 27 |"]
prose_426 -> { raw_442}
{rank=same; raw_442}

raw_442 [label="raw"]


raw_442 -> leaf_443
leaf_443  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To extend a row virtually over two or more text lines
"]
codeblock_427 -> leaf_444
leaf_444  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| cat, | chien,  | gato,    \\
| hat  | chapeau | sombrero |"]
prose_428 -> { raw_445 literal_446 raw_447}
{rank=same; raw_445 literal_446 raw_447}

raw_445 [label="raw"]

literal_446 [label="literal"]

raw_447 [label="raw"]


raw_445 -> leaf_448
leaf_448  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The only way to slip a "]
literal_446 -> leaf_449
leaf_449  [color=Gray,shape=rectangle,fontname=Inconsolata,label="|"]
raw_447 -> leaf_450
leaf_450  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into a table cell is to put it inside a 
«string». Other than that it's prose country. 

"]
section_220 -> { header_451 prose_452 prose_453 prose_454}
{rank=same; header_451 prose_452 prose_453 prose_454}

header_451 [label="3 : Link  "]

prose_452 [label="prose"]

prose_453 [label="prose"]

prose_454 [label="prose"]


header_451 -> leaf_455
leaf_455  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Link	

  "]
prose_452 -> { raw_456 link_457 raw_458}
{rank=same; raw_456 link_457 raw_458}

raw_456 [label="raw"]

link_457 [label="link"]

raw_458 [label="raw"]


raw_456 -> leaf_459
leaf_459  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The most "]
link_457 -> { anchortext_460 url_461}
{rank=same; anchortext_460 url_461}

anchortext_460 [label="anchortext"]

url_461 [label="url"]


anchortext_460 -> leaf_462
leaf_462  [color=Gray,shape=rectangle,fontname=Inconsolata,label="basic link"]
url_461 -> leaf_463
leaf_463  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_458 -> leaf_464
leaf_464  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" follows a simple «[[description]
[url]]» pattern.  Markdown gets this right.  In HTML you'll see the 
href before the link text, but looking at HTML is a mistake.
"]
prose_453 -> { raw_465}
{rank=same; raw_465}

raw_465 [label="raw"]


raw_465 -> leaf_466
leaf_466  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Org-mode follows the opposite convention.  This breaks the flow of text for
the reader and Orb format must be legible in raw form.
"]
prose_454 -> { raw_467}
{rank=same; raw_467}

raw_467 [label="raw"]


raw_467 -> leaf_468
leaf_468  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
tk other Org-iastic link types.

"]
section_221 -> { header_469 prose_470 codeblock_471 prose_472 prose_473 prose_474 prose_475}
{rank=same; header_469 prose_470 codeblock_471 prose_472 prose_473 prose_474 prose_475}

header_469 [label="3 : Drawer"]

prose_470 [label="prose"]

codeblock_471 [label="code block 463-467"]

prose_472 [label="prose"]

prose_473 [label="prose"]

prose_474 [label="prose"]

prose_475 [label="prose"]


header_469 -> leaf_476
leaf_476  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Drawer

  "]
prose_470 -> { raw_477}
{rank=same; raw_477}

raw_477 [label="raw"]


raw_477 -> leaf_478
leaf_478  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A drawer is a block that's hidden by default. The computer sees it,
the user sees ⦿, or a similar rune.
"]
codeblock_471 -> leaf_479
leaf_479  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[a-drawer]:
contents
:[a-drawer]:"]
prose_472 -> { raw_480}
{rank=same; raw_480}

raw_480 [label="raw"]


raw_480 -> leaf_481
leaf_481  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This closes to a single Unicode character, such as ⦿, which can't be deleted
without opening it. Deleting into an ordinary fold marker opens the fold,
deleting towards a drawer marker skips past it.
"]
prose_473 -> { raw_482 literal_483 raw_484 literal_485 raw_486}
{rank=same; raw_482 literal_483 raw_484 literal_485 raw_486}

raw_482 [label="raw"]

literal_483 [label="literal"]

raw_484 [label="raw"]

literal_485 [label="literal"]

raw_486 [label="raw"]


raw_482 -> leaf_487
leaf_487  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
literal_483 -> leaf_488
leaf_488  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a-drawer"]
raw_484 -> leaf_489
leaf_489  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is a handle, the @ isn't needed here but you could include it.
It's ok to just leave it blank: "]
literal_485 -> leaf_490
leaf_490  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[ ]:"]
raw_486 -> leaf_491
leaf_491  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_474 -> { raw_492}
{rank=same; raw_492}

raw_492 [label="raw"]


raw_492 -> leaf_493
leaf_493  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The only purpose of a drawer is to draw a folding layer around some text
that's normally kept closed.  If you're doing something fancy you might
have a long header of imports and configs that you don't want to look at
all the time. 
"]
prose_475 -> { raw_494}
{rank=same; raw_494}

raw_494 [label="raw"]


raw_494 -> leaf_495
leaf_495  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Honestly not sure I'm going to bother implementing this part. Late in the 
game if ever. 

























"]

}
