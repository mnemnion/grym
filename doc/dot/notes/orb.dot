digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 527"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-224"]


// END RANK doc_0

section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7 section_8 section_9}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7 section_8 section_9}

header_2 [label="1 : Orb format"]

prose_3 [label="prose"]

section_4 [label="section: 7-21"]

section_5 [label="section: 22-43"]

section_6 [label="section: 44-92"]

section_7 [label="section: 106-142"]

section_8 [label="section: 143-150"]

section_9 [label="section: 225-479"]


// END RANK section_1

header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Orb format"]
// END RANK header_2

prose_3 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


// END RANK prose_3

raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The grimoire tools work with a structured text format which we call Orb.
This is an introduction to that format.

"]
// END RANK raw_11

section_4 -> { header_13 prose_14 prose_15 prose_16}
{rank=same; header_13 prose_14 prose_15 prose_16}

header_13 [label="2 : Metalanguage"]

prose_14 [label="prose"]

prose_15 [label="prose"]

prose_16 [label="prose"]


// END RANK section_4

header_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Metalanguage"]
// END RANK header_13

prose_14 -> { raw_18}
{rank=same; raw_18}

raw_18 [label="raw"]


// END RANK prose_14

raw_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  I call Orb a metalanguage, because it can by design include any other
structured text format within it.  Provided it may be represented in utf-8!
This is no stricture in practice. 
"]
// END RANK raw_18

prose_15 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


// END RANK prose_15

raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The Orb format aims to be equally useful for markup, literate programming,
configuration, data exchange, and the sort of interactive notebook which 
Jupyter and org-babel can produce.
"]
// END RANK raw_20

prose_16 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


// END RANK prose_16

raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The first parser and tool is Grimoire, which, as a bootstrap, is focused on
literate programming.  This will in turn be the format for the tools in the
bettertools suite. 

"]
// END RANK raw_22

section_5 -> { header_24 prose_25 prose_26 prose_27}
{rank=same; header_24 prose_25 prose_26 prose_27}

header_24 [label="2 : Goals"]

prose_25 [label="prose"]

prose_26 [label="prose"]

prose_27 [label="prose"]


// END RANK section_5

header_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Goals"]
// END RANK header_24

prose_25 -> { raw_29}
{rank=same; raw_29}

raw_29 [label="raw"]


// END RANK prose_25

raw_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Orb is:
"]
// END RANK raw_29

prose_26 -> { raw_31}
{rank=same; raw_31}

raw_31 [label="raw"]


// END RANK prose_26

raw_31 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - Error free:  An Orb document is never in a state of error.  Any valid
                 utf-8 string is an Orb document.
  - Line based:  Orb files may be rapidly separated into their elements
                 by splitting into lines and examining the first few
                 characters.
  - Humane:      Orb is carefully designed to be readable, as is, by
                 ordinary humans.
  - General:     There are no characters such as <>& in HTML which must be
                 escaped.  Orb codeblocks can enclose any other format,
                 including Orb format.  Orb strings are «brace balanced»
                 and can enclose any utf-8 string as a consequence. 
"]
// END RANK raw_31

prose_27 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


// END RANK prose_27

raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
While it is possible to do some fancy things with Orb, it is also a
comfortable format to write a blog post, or put a few key-value pairs into
a config file.  If you were to send an email in Orb format, the recipient
might not even notice. 

"]
// END RANK raw_33

section_6 -> { header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 section_47}
{rank=same; header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 section_47}

header_35 [label="2 : Encoding"]

prose_36 [label="prose"]

prose_37 [label="prose"]

prose_38 [label="prose"]

prose_39 [label="prose"]

prose_40 [label="prose"]

prose_41 [label="prose"]

prose_42 [label="prose"]

prose_43 [label="prose"]

prose_44 [label="prose"]

prose_45 [label="prose"]

prose_46 [label="prose"]

section_47 [label="section: 93-105"]


// END RANK section_6

header_35 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Encoding"]
// END RANK header_35

prose_36 -> { raw_49}
{rank=same; raw_49}

raw_49 [label="raw"]


// END RANK prose_36

raw_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Orb documents are encoded in utf-8.  
"]
// END RANK raw_49

prose_37 -> { raw_51}
{rank=same; raw_51}

raw_51 [label="raw"]


// END RANK prose_37

raw_51 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The core syntax is defined in terms of the reachable keys on a US keyboard.
This tradition is firmly entrenched in the mid teens, and I have no
designs on budging that at present.  The miser in me likes that they're
a byte each.  The lawyer in me insists that this isn't ASCII, which is a
seven-bit legacy encoding.
"]
// END RANK raw_51

prose_38 -> { raw_53}
{rank=same; raw_53}

raw_53 [label="raw"]


// END RANK prose_38

raw_53 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We aren't at all reluctant to use Unicode characters as part of the format. 
Grimoire «strings» are the most visible example of this, along with drawer
and fold icons, which are actual parts of an Orb document. 
"]
// END RANK raw_53

prose_39 -> { raw_55}
{rank=same; raw_55}

raw_55 [label="raw"]


// END RANK prose_39

raw_55 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is case sensitive and uses lower-snake-case for built-in English
phrases. There is a convention (see classes) that uses capitalization of
user words to affect semantics.  
"]
// END RANK raw_55

prose_40 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


// END RANK prose_40

raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[tk] is there though
"]
// END RANK raw_57

prose_41 -> { raw_59}
{rank=same; raw_59}

raw_59 [label="raw"]


// END RANK prose_41

raw_59 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Orb is a format for text.  There are many ways of writing text, but only one
way of encoding it that matters.  There is a long tail of Unicode complexity,
and there are traces of Committee spattered all over it; nonetheless we 
should be grateful that utf-8 won, in a world in which we still drive cars on
both possible sides of the road. 
"]
// END RANK raw_59

prose_42 -> { raw_61 link_62 raw_63}
{rank=same; raw_61 link_62 raw_63}

raw_61 [label="raw"]

link_62 [label="link"]

raw_63 [label="raw"]


// END RANK prose_42

raw_61 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that while we have our "]
// END RANK raw_61

link_62 -> { anchortext_65 url_66}
{rank=same; anchortext_65 url_66}

anchortext_65 [label="anchortext"]

url_66 [label="url"]


// END RANK link_62

anchortext_65 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="own opinions about utf-8"]
// END RANK anchortext_65

url_66 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_66

raw_63 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" our vision of
heaven is backward-compatible with the inferior version foisted upon us by a 
jealous software monopoly.
"]
// END RANK raw_63

prose_43 -> { raw_70 link_71 raw_72}
{rank=same; raw_70 link_71 raw_72}

raw_70 [label="raw"]

link_71 [label="link"]

raw_72 [label="raw"]


// END RANK prose_43

raw_70 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Bidirectional handling in a context that's indentation sensitive is an 
example of something subtle. Orb format uses indentation in a few key places,
and a compliant parser will need to detect and respect RTL [tk?] markers.
Exactly how is spelled out under "]
// END RANK raw_70

link_71 -> { anchortext_74 url_75}
{rank=same; anchortext_74 url_75}

anchortext_74 [label="anchortext"]

url_75 [label="url"]


// END RANK link_71

anchortext_74 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="indentation"]
// END RANK anchortext_74

url_75 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_75

raw_72 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_72

prose_44 -> { raw_79}
{rank=same; raw_79}

raw_79 [label="raw"]


// END RANK prose_44

raw_79 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'd love to get a Hebrew and/or Arabic fluent hacker on the project
early, to make sure this works correctly.  I'll settle for Aramaic.
"]
// END RANK raw_79

prose_45 -> { raw_81}
{rank=same; raw_81}

raw_81 [label="raw"]


// END RANK prose_45

raw_81 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Another thing I want to get right is equivalence. If you have a
variable called \"Glück\" the compiler shouldn't complain if it's
rendered in either of the valid ways. For some sequences that's
\"any of the valid ways\". If we normalized your prose, you might
have problems later, so we don't want to solve it that way.
"]
// END RANK raw_81

prose_46 -> { raw_83 link_84 raw_85 link_86 raw_87}
{rank=same; raw_83 link_84 raw_85 link_86 raw_87}

raw_83 [label="raw"]

link_84 [label="link"]

raw_85 [label="raw"]

link_86 [label="link"]

raw_87 [label="raw"]


// END RANK prose_46

raw_83 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This consideration mostly applys to "]
// END RANK raw_83

link_84 -> { anchortext_89 url_90}
{rank=same; anchortext_89 url_90}

anchortext_89 [label="anchortext"]

url_90 [label="url"]


// END RANK link_84

anchortext_89 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hashtags"]
// END RANK anchortext_89

url_90 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_90

raw_85 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
// END RANK raw_85

link_86 -> { anchortext_94 url_95}
{rank=same; anchortext_94 url_95}

anchortext_94 [label="anchortext"]

url_95 [label="url"]


// END RANK link_86

anchortext_94 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="handles"]
// END RANK anchortext_94

url_95 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_95

raw_87 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The idea is that Orb files will respect all the 
wacky typographic equivalences that Unicode has gifted us with.

"]
// END RANK raw_87

section_47 -> { header_99 prose_100 prose_101 prose_102}
{rank=same; header_99 prose_100 prose_101 prose_102}

header_99 [label="4 : Tabs"]

prose_100 [label="prose"]

prose_101 [label="prose"]

prose_102 [label="prose"]


// END RANK section_47

header_99 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Tabs"]
// END RANK header_99

prose_100 -> { raw_104}
{rank=same; raw_104}

raw_104 [label="raw"]


// END RANK prose_100

raw_104 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The vexacious ASCII character 8 will never be found in an Orb document.  If
encountered, it will be reduced to two spaces.  Grimoire will complain.
"]
// END RANK raw_104

prose_101 -> { raw_106 prespace_107 italic_108 raw_109}
{rank=same; raw_106 prespace_107 italic_108 raw_109}

raw_106 [label="raw"]

prespace_107 [label="prespace"]

italic_108 [label="italic"]

raw_109 [label="raw"]


// END RANK prose_101

raw_106 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not an"]
// END RANK raw_106

prespace_107 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_107

italic_108 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="error"]
// END RANK italic_108

raw_109 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" mind you, it's a well-defined input that will become 
two spaces.  If encountered by one of my tools, the tabs will be permanently
gone. 
"]
// END RANK raw_109

prose_102 -> { raw_114}
{rank=same; raw_114}

raw_114 [label="raw"]


// END RANK prose_102

raw_114 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Yes. This applies to your source code blocks as well.  It is time we put 
away childish things.  

"]
// END RANK raw_114

section_7 -> { header_116 prose_117 prose_118 prose_119 prose_120 prose_121 prose_122 prose_123 prose_124}
{rank=same; header_116 prose_117 prose_118 prose_119 prose_120 prose_121 prose_122 prose_123 prose_124}

header_116 [label="2 : Prose and Structure"]

prose_117 [label="prose"]

prose_118 [label="prose"]

prose_119 [label="prose"]

prose_120 [label="prose"]

prose_121 [label="prose"]

prose_122 [label="prose"]

prose_123 [label="prose"]

prose_124 [label="prose"]


// END RANK section_7

header_116 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Prose and Structure"]
// END RANK header_116

prose_117 -> { raw_126}
{rank=same; raw_126}

raw_126 [label="raw"]


// END RANK prose_117

raw_126 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The major distinction in Orb is between prose and structure.
"]
// END RANK raw_126

prose_118 -> { raw_128}
{rank=same; raw_128}

raw_128 [label="raw"]


// END RANK prose_118

raw_128 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose is the default parsing state. It is far from unstructured from the
runtime perspective. Although this needn't be embedded in the parse
tree, Grimoire understands concepts such as paragraphs, words, punctuation,
capital letters, languages, and anything else proper to prose.
"]
// END RANK raw_128

prose_119 -> { raw_130}
{rank=same; raw_130}

raw_130 [label="raw"]


// END RANK prose_119

raw_130 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I refer to human languages, but Grimoire understands programming languages
also. In principle, all of them, it shouldn't be harder to add them than
it is to call them from shell, though getting a runtime rigged up to
another runtime always calls for some finesse to derive a good experience.
"]
// END RANK raw_130

prose_120 -> { raw_132}
{rank=same; raw_132}

raw_132 [label="raw"]


// END RANK prose_120

raw_132 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
\"Programming languages\" is overly specific.  Grimoire draws a distinction
between prose and structure. Blocks may contain either, or both.
"]
// END RANK raw_132

prose_121 -> { raw_134 prespace_135 bold_136 raw_137}
{rank=same; raw_134 prespace_135 bold_136 raw_137}

raw_134 [label="raw"]

prespace_135 [label="prespace"]

bold_136 [label="bold"]

raw_137 [label="raw"]


// END RANK prose_121

raw_134 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something that's nice about a language build on a prose/structure
relationship is that it can be error free.  Anything"]
// END RANK raw_134

prespace_135 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_135

bold_136 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym"]
// END RANK bold_136

raw_137 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" can't build into
a structure is just prose.
"]
// END RANK raw_137

prose_122 -> { raw_142 link_143 raw_144}
{rank=same; raw_142 link_143 raw_144}

raw_142 [label="raw"]

link_143 [label="link"]

raw_144 [label="raw"]


// END RANK prose_122

raw_142 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Markdown has this property.  Sometimes you run into parsers which
build errors into Markdown, which is itself erroneous.  If you "]
// END RANK raw_142

link_143 -> { anchortext_146 url_147}
{rank=same; anchortext_146 url_147}

anchortext_146 [label="anchortext"]

url_147 [label="url"]


// END RANK link_143

anchortext_146 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="RTFM"]
// END RANK anchortext_146

url_147 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="http://daringfireball.net/projects/markdown/syntax"]
// END RANK url_147

raw_144 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
you'll find the word \"error\" once.  Helpfully explaining how Markdown
keeps you from making one.
"]
// END RANK raw_144

prose_123 -> { raw_151}
{rank=same; raw_151}

raw_151 [label="raw"]


// END RANK prose_123

raw_151 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do what we can to make the document look the same as it is
in fact structured.  The intention with Orb files is that we work with them
aided by a linter, which lets us be lazy and still get consistent results.
"]
// END RANK raw_151

prose_124 -> { raw_153}
{rank=same; raw_153}

raw_153 [label="raw"]


// END RANK prose_124

raw_153 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The most important point in this section is that Orb documents do not have
errors and never fail to parse.  You should be able to literally plug any 
Orb parser into a source of entropy and end up with a document, since a
proper utf-8 decoder will drop any invalid bytes it sees. 

"]
// END RANK raw_153

section_8 -> { header_155 prose_156 section_157}
{rank=same; header_155 prose_156 section_157}

header_155 [label="2 : Ownership"]

prose_156 [label="prose"]

section_157 [label="section: 151-166"]


// END RANK section_8

header_155 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Ownership"]
// END RANK header_155

prose_156 -> { raw_159}
{rank=same; raw_159}

raw_159 [label="raw"]


// END RANK prose_156

raw_159 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The root concept of Orb is a document, which divides into one or more 
sections.  A section owns all structure or prose within it.  This 
paragraph is owned by «** Ownership» above, as are all the rest of the
blocks until the next section header. 

"]
// END RANK raw_159

section_157 -> { header_161 prose_162 prose_163 prose_164 section_165}
{rank=same; header_161 prose_162 prose_163 prose_164 section_165}

header_161 [label="3 : Blocking"]

prose_162 [label="prose"]

prose_163 [label="prose"]

prose_164 [label="prose"]

section_165 [label="section: 167-224"]


// END RANK section_157

header_161 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Blocking"]
// END RANK header_161

prose_162 -> { raw_167}
{rank=same; raw_167}

raw_167 [label="raw"]


// END RANK prose_162

raw_167 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Orb documents are chunked into sections entirely by their heading lines.
Within a section, prose and structure alike are organized into blocks.  
The defining marker of blocks is blank lines.
"]
// END RANK raw_167

prose_163 -> { raw_169}
{rank=same; raw_169}

raw_169 [label="raw"]


// END RANK prose_163

raw_169 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This second paragraph is the second block of the «*** Blocking» section.
Taking a look at the source document, you'll see that I put (single)
newlines between lines, with an 78 column margin.  That should be considered
good style.  If you prefer to have each paragraph be its own line, have at.
"]
// END RANK raw_169

prose_164 -> { raw_171}
{rank=same; raw_171}

raw_171 [label="raw"]


// END RANK prose_164

raw_171 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A line is considered blank if it contains only Unicode spacemarks.  Grimoire
will smoothly remove any such cruft and replace it with «\\n\\n».  We also
trim trailing whitespace. 

"]
// END RANK raw_171

section_165 -> { header_173 prose_174 prose_175 prose_176 prose_177 prose_178 codeblock_179 prose_180 codeblock_181 prose_182 prose_183 codeblock_184 prose_185}
{rank=same; header_173 prose_174 prose_175 prose_176 prose_177 prose_178 codeblock_179 prose_180 codeblock_181 prose_182 prose_183 codeblock_184 prose_185}

header_173 [label="4 : The Cling Rule"]

prose_174 [label="prose"]

prose_175 [label="prose"]

prose_176 [label="prose"]

prose_177 [label="prose"]

prose_178 [label="prose"]

codeblock_179 [label="code block 187-194"]

prose_180 [label="prose"]

codeblock_181 [label="code block 199-206"]

prose_182 [label="prose"]

prose_183 [label="prose"]

codeblock_184 [label="code block 213-219"]

prose_185 [label="prose"]


// END RANK section_165

header_173 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** The Cling Rule"]
// END RANK header_173

prose_174 -> { raw_187 link_188 raw_189}
{rank=same; raw_187 link_188 raw_189}

raw_187 [label="raw"]

link_188 [label="link"]

raw_189 [label="raw"]


// END RANK prose_174

raw_187 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  "]
// END RANK raw_187

link_188 -> { anchortext_191 url_192}
{rank=same; anchortext_191 url_192}

anchortext_191 [label="anchortext"]

url_192 [label="url"]


// END RANK link_188

anchortext_191 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Tags"]
// END RANK anchortext_191

url_192 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_192

raw_189 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are used both to provide names to blocks in Orb format
and to specify various actions in knitting and weaving.  They may be placed
above or below the block which they affect.
"]
// END RANK raw_189

prose_175 -> { raw_196}
{rank=same; raw_196}

raw_196 [label="raw"]


// END RANK prose_175

raw_196 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The cling rule specifies that a group 'clings' to another group when
it is closer to that group than the other group. Ties resolve down.
"]
// END RANK raw_196

prose_176 -> { raw_198}
{rank=same; raw_198}

raw_198 [label="raw"]


// END RANK prose_176

raw_198 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This should make it intuitive to group elements that aren't grouping the
way you expect: put in whitespace until the block is visually distinguished
from the surroundings.
"]
// END RANK raw_198

prose_177 -> { raw_200}
{rank=same; raw_200}

raw_200 [label="raw"]


// END RANK prose_177

raw_200 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cling applies between blocks which are at the same level of ownership.
Ownership has precedence over cling: all blocks underneath e.g. a header
line are owned by that line, newlines notwithstanding.
"]
// END RANK raw_200

prose_178 -> { raw_202}
{rank=same; raw_202}

raw_202 [label="raw"]


// END RANK prose_178

raw_202 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that indentation of e.g. lists invokes the cling rule within the
indentation level.
"]
// END RANK raw_202

codeblock_179 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |

#tag


someprose on a block"]
// END RANK codeblock_179

prose_180 -> { raw_205}
{rank=same; raw_205}

raw_205 [label="raw"]


// END RANK prose_180

raw_205 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the table, but
"]
// END RANK raw_205

codeblock_181 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |


#tag

someprose on a block"]
// END RANK codeblock_181

prose_182 -> { raw_208}
{rank=same; raw_208}

raw_208 [label="raw"]


// END RANK prose_182

raw_208 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the block.
"]
// END RANK raw_208

prose_183 -> { raw_210}
{rank=same; raw_210}

raw_210 [label="raw"]


// END RANK prose_183

raw_210 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Even clings are resolved forwards:
"]
// END RANK raw_210

codeblock_184 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |

#tag

someprose on a block"]
// END RANK codeblock_184

prose_185 -> { raw_213}
{rank=same; raw_213}

raw_213 [label="raw"]


// END RANK prose_185

raw_213 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the prose block.

"]
// END RANK raw_213

section_9 -> { header_215 prose_216 prose_217 section_218 section_219 section_220 section_221 section_222 section_223 section_224 section_225}
{rank=same; header_215 prose_216 prose_217 section_218 section_219 section_220 section_221 section_222 section_223 section_224 section_225}

header_215 [label="2 : Structural elements"]

prose_216 [label="prose"]

prose_217 [label="prose"]

section_218 [label="section: 237-255"]

section_219 [label="section: 256-286"]

section_220 [label="section: 287-361"]

section_221 [label="section: 377-410"]

section_222 [label="section: 411-445"]

section_223 [label="section: 446-457"]

section_224 [label="section: 458-479"]

section_225 [label="section: 480-527"]


// END RANK section_9

header_215 -> leaf_226
leaf_226  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Structural elements"]
// END RANK header_215

prose_216 -> { raw_227}
{rank=same; raw_227}

raw_227 [label="raw"]


// END RANK prose_216

raw_227 -> leaf_228
leaf_228  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Structure and prose are the figure and ground of Orb format.  We speak of
structure and prose on a block-by-block basis, and within some structure
blocks there are regions of prose.  Prose in turn routinely contains
structural regions.
"]
// END RANK raw_227

prose_217 -> { raw_229}
{rank=same; raw_229}

raw_229 [label="raw"]


// END RANK prose_217

raw_229 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This section will discuss under what circumstances an Orb parser will create
structure, with some discursions into the semantics these distinctions
represent. 

"]
// END RANK raw_229

section_218 -> { header_231 prose_232 codeblock_233 prose_234 prose_235}
{rank=same; header_231 prose_232 codeblock_233 prose_234 prose_235}

header_231 [label="3 : Headlines"]

prose_232 [label="prose"]

codeblock_233 [label="code block 242-244"]

prose_234 [label="prose"]

prose_235 [label="prose"]


// END RANK section_218

header_231 -> leaf_236
leaf_236  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Headlines"]
// END RANK header_231

prose_232 -> { raw_237}
{rank=same; raw_237}

raw_237 [label="raw"]


// END RANK prose_232

raw_237 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Headlines divide a document into sections.  The grammar for recognizing
a headline is as follows:
"]
// END RANK raw_237

codeblock_233 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    headline = WS?  '*'+  ' '  prose  NL"]
// END RANK codeblock_233

prose_234 -> { raw_240 prespace_241 literal_242 raw_243}
{rank=same; raw_240 prespace_241 literal_242 raw_243}

raw_240 [label="raw"]

prespace_241 [label="prespace"]

literal_242 [label="literal"]

raw_243 [label="raw"]


// END RANK prose_234

raw_240 -> leaf_244
leaf_244  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The number of"]
// END RANK raw_240

prespace_241 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_241

literal_242 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
// END RANK literal_242

raw_243 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" determine the level of ownership.  This is a declarative
relationship, though I lack a clean syntax to express it other than
functionally at present. 
"]
// END RANK raw_243

prose_235 -> { raw_248 prespace_249 literal_250 raw_251}
{rank=same; raw_248 prespace_249 literal_250 raw_251}

raw_248 [label="raw"]

prespace_249 [label="prespace"]

literal_250 [label="literal"]

raw_251 [label="raw"]


// END RANK prose_235

raw_248 -> leaf_252
leaf_252  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The content within"]
// END RANK raw_248

prespace_249 -> leaf_253
leaf_253  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_249

literal_250 -> leaf_254
leaf_254  [color=Gray,shape=rectangle,fontname=Inconsolata,label="prose"]
// END RANK literal_250

raw_251 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" has the luxury of being context-sensitive.  In
particular we treat tags on a headline as though they're on a tagline below
they headline. 


"]
// END RANK raw_251

section_219 -> { header_256 prose_257 prose_258 prose_259 codeblock_260 prose_261 prose_262 codeblock_263 prose_264}
{rank=same; header_256 prose_257 prose_258 prose_259 codeblock_260 prose_261 prose_262 codeblock_263 prose_264}

header_256 [label="3 : Tags and Taglines"]

prose_257 [label="prose"]

prose_258 [label="prose"]

prose_259 [label="prose"]

codeblock_260 [label="code block 266-268"]

prose_261 [label="prose"]

prose_262 [label="prose"]

codeblock_263 [label="code block 278-281"]

prose_264 [label="prose"]


// END RANK section_219

header_256 -> leaf_265
leaf_265  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Tags and Taglines"]
// END RANK header_256

prose_257 -> { raw_266 prespace_267 literal_268 raw_269 prespace_270 literal_271 raw_272}
{rank=same; raw_266 prespace_267 literal_268 raw_269 prespace_270 literal_271 raw_272}

raw_266 [label="raw"]

prespace_267 [label="prespace"]

literal_268 [label="literal"]

raw_269 [label="raw"]

prespace_270 [label="prespace"]

literal_271 [label="literal"]

raw_272 [label="raw"]


// END RANK prose_257

raw_266 -> leaf_273
leaf_273  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Tags are the control structures for Orb.  There are"]
// END RANK raw_266

prespace_267 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_267

literal_268 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#hashtags"]
// END RANK literal_268

raw_269 -> leaf_276
leaf_276  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which
loosely correspond to functions or messages, and"]
// END RANK raw_269

prespace_270 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_270

literal_271 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@handles"]
// END RANK literal_271

raw_272 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which more
directly correspond to symbols.  
"]
// END RANK raw_272

prose_258 -> { raw_280 link_281 raw_282}
{rank=same; raw_280 link_281 raw_282}

raw_280 [label="raw"]

link_281 [label="link"]

raw_282 [label="raw"]


// END RANK prose_258

raw_280 -> leaf_283
leaf_283  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The semantics of tags belong in the "]
// END RANK raw_280

link_281 -> { anchortext_284 url_285}
{rank=same; anchortext_284 url_285}

anchortext_284 [label="anchortext"]

url_285 [label="url"]


// END RANK link_281

anchortext_284 -> leaf_286
leaf_286  [color=Gray,shape=rectangle,fontname=Inconsolata,label="runtime"]
// END RANK anchortext_284

url_285 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_285

raw_282 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label="]] section.
"]
// END RANK raw_282

prose_259 -> { raw_289}
{rank=same; raw_289}

raw_289 [label="raw"]


// END RANK prose_259

raw_289 -> leaf_290
leaf_290  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For now let us note that the rule
"]
// END RANK raw_289

codeblock_260 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  hashtag = WS+  '#'  symbol"]
// END RANK codeblock_260

prose_261 -> { raw_292 prespace_293 bold_294 raw_295 prespace_296 literal_297 raw_298}
{rank=same; raw_292 prespace_293 bold_294 raw_295 prespace_296 literal_297 raw_298}

raw_292 [label="raw"]

prespace_293 [label="prespace"]

bold_294 [label="bold"]

raw_295 [label="raw"]

prespace_296 [label="prespace"]

literal_297 [label="literal"]

raw_298 [label="raw"]


// END RANK prose_261

raw_292 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  "]
// END RANK raw_292

prespace_293 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_293

bold_294 -> leaf_301
leaf_301  [color=Gray,shape=rectangle,fontname=Inconsolata,label="may"]
// END RANK bold_294

raw_295 -> leaf_302
leaf_302  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" not appear in (all) prose contexts, this is still undecided.  This is 
true of handles as well given the state of"]
// END RANK raw_295

prespace_296 -> leaf_303
leaf_303  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_296

literal_297 -> leaf_304
leaf_304  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym"]
// END RANK literal_297

raw_298 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at the present time, 
but I am more firmly convinced of the value of @handle as a short in-place
expansion of a handleline. I don't think trying to parse a mid-block #export
as meaning something is as valuable. 
"]
// END RANK raw_298

prose_262 -> { raw_306}
{rank=same; raw_306}

raw_306 [label="raw"]


// END RANK prose_262

raw_306 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These two rules are currently in use:
"]
// END RANK raw_306

codeblock_263 -> leaf_308
leaf_308  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  hashline = WS?  '#'  symbol  ' '  prose  NL
  handleline = WS?  '@'  symbol  ' '  prose  NL"]
// END RANK codeblock_263

prose_264 -> { raw_309 prespace_310 literal_311 raw_312 prespace_313 literal_314 raw_315}
{rank=same; raw_309 prespace_310 literal_311 raw_312 prespace_313 literal_314 raw_315}

raw_309 [label="raw"]

prespace_310 [label="prespace"]

literal_311 [label="literal"]

raw_312 [label="raw"]

prespace_313 [label="prespace"]

literal_314 [label="literal"]

raw_315 [label="raw"]


// END RANK prose_264

raw_309 -> leaf_316
leaf_316  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Structure is designed to work on a line-by-line basis,
any"]
// END RANK raw_309

prespace_310 -> leaf_317
leaf_317  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_310

literal_311 -> leaf_318
leaf_318  [color=Gray,shape=rectangle,fontname=Inconsolata,label="line"]
// END RANK literal_311

raw_312 -> leaf_319
leaf_319  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" rule has an implied"]
// END RANK raw_312

prespace_313 -> leaf_320
leaf_320  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_313

literal_314 -> leaf_321
leaf_321  [color=Gray,shape=rectangle,fontname=Inconsolata,label="^"]
// END RANK literal_314

raw_315 -> leaf_322
leaf_322  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". 

"]
// END RANK raw_315

section_220 -> { header_323 prose_324 prose_325 codeblock_326 prose_327 codeblock_328 prose_329 codeblock_330 prose_331 codeblock_332 prose_333 section_334 section_335}
{rank=same; header_323 prose_324 prose_325 codeblock_326 prose_327 codeblock_328 prose_329 codeblock_330 prose_331 codeblock_332 prose_333 section_334 section_335}

header_323 [label="3 : List "]

prose_324 [label="prose"]

prose_325 [label="prose"]

codeblock_326 [label="code block 295-297"]

prose_327 [label="prose"]

codeblock_328 [label="code block 301-303"]

prose_329 [label="prose"]

codeblock_330 [label="code block 309-312"]

prose_331 [label="prose"]

codeblock_332 [label="code block 316-319"]

prose_333 [label="prose"]

section_334 [label="section: 328-361"]

section_335 [label="section: 362-376"]


// END RANK section_220

header_323 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** List "]
// END RANK header_323

prose_324 -> { raw_337}
{rank=same; raw_337}

raw_337 [label="raw"]


// END RANK prose_324

raw_337 -> leaf_338
leaf_338  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Lists are both a markup format and a flexible data container.  In the emacs
org-mode, headline-type structures do the heavy lifting for TODO lists and
the like.  This was org's original purpose, with document markup coming later.
"]
// END RANK raw_337

prose_325 -> { raw_339}
{rank=same; raw_339}

raw_339 [label="raw"]


// END RANK prose_325

raw_339 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Orb lists come in unnumbered and numbered.  Unnumbered lists follow this rule:
"]
// END RANK raw_339

codeblock_326 -> leaf_341
leaf_341  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  listline-un = WS? '- ' prose NL"]
// END RANK codeblock_326

prose_327 -> { raw_342}
{rank=same; raw_342}

raw_342 [label="raw"]


// END RANK prose_327

raw_342 -> leaf_343
leaf_343  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
While numbered lists match this:
"]
// END RANK raw_342

codeblock_328 -> leaf_344
leaf_344  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  listline-li = WS? digits '. ' prose NL"]
// END RANK codeblock_328

prose_329 -> { raw_345}
{rank=same; raw_345}

raw_345 [label="raw"]


// END RANK prose_329

raw_345 -> leaf_346
leaf_346  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For lists, as with any structure group, the semantics of the prose section are
somewhat flexible.  The cling rule for lists parses indentation so that
multi-line entries are possible:
"]
// END RANK raw_345

codeblock_330 -> leaf_347
leaf_347  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - list entry 
   prose directly under, bad style"]
// END RANK codeblock_330

prose_331 -> { raw_348}
{rank=same; raw_348}

raw_348 [label="raw"]


// END RANK prose_331

raw_348 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
vs.
"]
// END RANK raw_348

codeblock_332 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - list entry 
    continues list entry"]
// END RANK codeblock_332

prose_333 -> { raw_351}
{rank=same; raw_351}

raw_351 [label="raw"]


// END RANK prose_333

raw_351 -> leaf_352
leaf_352  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
As in Markdown, the parser will accept any numbers as a numbered list without
checking their order.  The linter will increment by one starting from the
number of the first index, so if you start with \"1. \" or \"0. \" or \"10. \" you
get the subsequent.  This behavior can be suppressed with a hashtag directive
yet to be added.  

"]
// END RANK raw_351

section_334 -> { header_353 prose_354 codeblock_355 prose_356 prose_357 prose_358 prose_359}
{rank=same; header_353 prose_354 codeblock_355 prose_356 prose_357 prose_358 prose_359}

header_353 [label="4 : List Boxes"]

prose_354 [label="prose"]

codeblock_355 [label="code block 335-346"]

prose_356 [label="prose"]

prose_357 [label="prose"]

prose_358 [label="prose"]

prose_359 [label="prose"]


// END RANK section_334

header_353 -> leaf_360
leaf_360  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** List Boxes

 "]
// END RANK header_353

prose_354 -> { raw_361 prespace_362 literal_363 raw_364 prespace_365 literal_366 raw_367 link_368 raw_369}
{rank=same; raw_361 prespace_362 literal_363 raw_364 prespace_365 literal_366 raw_367 link_368 raw_369}

raw_361 [label="raw"]

prespace_362 [label="prespace"]

literal_363 [label="literal"]

raw_364 [label="raw"]

prespace_365 [label="prespace"]

literal_366 [label="literal"]

raw_367 [label="raw"]

link_368 [label="link"]

raw_369 [label="raw"]


// END RANK prose_354

raw_361 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Lists can have, as a first element, a box, either a checkbox"]
// END RANK raw_361

prespace_362 -> leaf_371
leaf_371  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_362

literal_363 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[ ]"]
// END RANK literal_363

raw_364 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or a 
radio box"]
// END RANK raw_364

prespace_365 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_365

literal_366 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label="( )"]
// END RANK literal_366

raw_367 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  These are either empty with whitespace or have contents
from a limited pallete of symbols.  Their function is described in the "]
// END RANK raw_367

link_368 -> { anchortext_377 url_378}
{rank=same; anchortext_377 url_378}

anchortext_377 [label="anchortext"]

url_378 [label="url"]


// END RANK link_368

anchortext_377 -> leaf_379
leaf_379  [color=Gray,shape=rectangle,fontname=Inconsolata,label="runtime"]
// END RANK anchortext_377

url_378 -> leaf_380
leaf_380  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_378

raw_369 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label="]] section. 
"]
// END RANK raw_369

codeblock_355 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - [ ] #todo finish orb.orb
    - [X] Metalanguage
    - [X] Prose and Structure
    - [REVISE] Link
    - [ ] Code Block

  - Fruits
    - ( ) Bananas
    - (*) Coconuts
    - ( ) Grapes"]
// END RANK codeblock_355

prose_356 -> { raw_383}
{rank=same; raw_383}

raw_383 [label="raw"]


// END RANK prose_356

raw_383 -> leaf_384
leaf_384  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These two types can't meaningfully mix on the same level of a list.  The one
the parser sees first will be applied.
"]
// END RANK raw_383

prose_357 -> { raw_385}
{rank=same; raw_385}

raw_385 [label="raw"]


// END RANK prose_357

raw_385 -> leaf_386
leaf_386  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The radio button is contagious, if the parser encounters one all lines on
that level get one. 
"]
// END RANK raw_385

prose_358 -> { raw_387}
{rank=same; raw_387}

raw_387 [label="raw"]


// END RANK prose_358

raw_387 -> leaf_388
leaf_388  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The check box is not, it's ok to include it on some lines but not others.  If
the parser sees a check box and then a radio button, it will turn the radio
button into a check box.
"]
// END RANK raw_387

prose_359 -> { raw_389 prespace_390 literal_391 raw_392}
{rank=same; raw_389 prespace_390 literal_391 raw_392}

raw_389 [label="raw"]

prespace_390 [label="prespace"]

literal_391 [label="literal"]

raw_392 [label="raw"]


// END RANK prose_359

raw_389 -> leaf_393
leaf_393  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The radio button can only have one"]
// END RANK raw_389

prespace_390 -> leaf_394
leaf_394  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_390

literal_391 -> leaf_395
leaf_395  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
// END RANK literal_391

raw_392 -> leaf_396
leaf_396  [color=Gray,shape=rectangle,fontname=Inconsolata,label="; the parser will ignore, and the
linter remove, any others. 

"]
// END RANK raw_392

section_335 -> { header_397 prose_398 codeblock_399 prose_400}
{rank=same; header_397 prose_398 codeblock_399 prose_400}

header_397 [label="4 : Key/value pairs"]

prose_398 [label="prose"]

codeblock_399 [label="code block 366-370"]

prose_400 [label="prose"]


// END RANK section_335

header_397 -> leaf_401
leaf_401  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Key/value pairs

 "]
// END RANK header_397

prose_398 -> { raw_402 prespace_403 literal_404 raw_405}
{rank=same; raw_402 prespace_403 literal_404 raw_405}

raw_402 [label="raw"]

prespace_403 [label="prespace"]

literal_404 [label="literal"]

raw_405 [label="raw"]


// END RANK prose_398

raw_402 -> leaf_406
leaf_406  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A list element can consist of key/value pairs, separated with a"]
// END RANK raw_402

prespace_403 -> leaf_407
leaf_407  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_403

literal_404 -> leaf_408
leaf_408  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":"]
// END RANK literal_404

raw_405 -> leaf_409
leaf_409  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_405

codeblock_399 -> leaf_410
leaf_410  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" - first key:
   - value : another value
   - 42 : the answer"]
// END RANK codeblock_399

prose_400 -> { raw_411}
{rank=same; raw_411}

raw_411 [label="raw"]


// END RANK prose_400

raw_411 -> leaf_412
leaf_412  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
From the runtime perspective the left and right sides are basically strings,
as we build out the Clu runtime we'll have better expectations for what
keys and values would look like as data. 

"]
// END RANK raw_411

section_221 -> { header_413 prose_414 prose_415 codeblock_416 prose_417 prose_418 prose_419 codeblock_420 prose_421 prose_422}
{rank=same; header_413 prose_414 prose_415 codeblock_416 prose_417 prose_418 prose_419 codeblock_420 prose_421 prose_422}

header_413 [label="3 : Code Block"]

prose_414 [label="prose"]

prose_415 [label="prose"]

codeblock_416 [label="code block 384-388"]

prose_417 [label="prose"]

prose_418 [label="prose"]

prose_419 [label="prose"]

codeblock_420 [label="code block 399-403"]

prose_421 [label="prose"]

prose_422 [label="prose"]


// END RANK section_221

header_413 -> leaf_423
leaf_423  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Code Block

 "]
// END RANK header_413

prose_414 -> { raw_424}
{rank=same; raw_424}

raw_424 [label="raw"]


// END RANK prose_414

raw_424 -> leaf_425
leaf_425  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The reason Orb exists is so that Grimoire can exist.  We do codeblocks
carefully. 
"]
// END RANK raw_424

prose_415 -> { raw_426}
{rank=same; raw_426}

raw_426 [label="raw"]


// END RANK prose_415

raw_426 -> leaf_427
leaf_427  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A codeblock looks like so:
"]
// END RANK raw_426

codeblock_416 -> leaf_428
leaf_428  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!orb
*** Some Orb content
#/orb"]
// END RANK codeblock_416

prose_417 -> { raw_429}
{rank=same; raw_429}

raw_429 [label="raw"]


// END RANK prose_417

raw_429 -> leaf_430
leaf_430  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Try that trick in Git-Flavored Markdown...
"]
// END RANK raw_429

prose_418 -> { raw_431 prespace_432 literal_433 raw_434 prespace_435 literal_436 raw_437}
{rank=same; raw_431 prespace_432 literal_433 raw_434 prespace_435 literal_436 raw_437}

raw_431 [label="raw"]

prespace_432 [label="prespace"]

literal_433 [label="literal"]

raw_434 [label="raw"]

prespace_435 [label="prespace"]

literal_436 [label="literal"]

raw_437 [label="raw"]


// END RANK prose_418

raw_431 -> leaf_438
leaf_438  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The number of initial"]
// END RANK raw_431

prespace_432 -> leaf_439
leaf_439  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_432

literal_433 -> leaf_440
leaf_440  [color=Gray,shape=rectangle,fontname=Inconsolata,label="!!"]
// END RANK literal_433

raw_434 -> leaf_441
leaf_441  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" needs to match the closing"]
// END RANK raw_434

prespace_435 -> leaf_442
leaf_442  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_435

literal_436 -> leaf_443
leaf_443  [color=Gray,shape=rectangle,fontname=Inconsolata,label="//"]
// END RANK literal_436

raw_437 -> leaf_444
leaf_444  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", allowing any 
utf-8 string at all to be enclosed with this method.  We consider this an
important property to have in an enclosure encoding. 
"]
// END RANK raw_437

prose_419 -> { raw_445}
{rank=same; raw_445}

raw_445 [label="raw"]


// END RANK prose_419

raw_445 -> leaf_446
leaf_446  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code blocks must be opened, but needn't be closed, as a parser will recognize
EOF as a code block closure.  This has a fortunate side effect, as this:
"]
// END RANK raw_445

codeblock_420 -> leaf_447
leaf_447  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!/usr/bin/python

from future import bettertools"]
// END RANK codeblock_420

prose_421 -> { raw_448}
{rank=same; raw_448}

raw_448 [label="raw"]


// END RANK prose_421

raw_448 -> leaf_449
leaf_449  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Is a valid Orb document containing a python script.
"]
// END RANK raw_448

prose_422 -> { raw_450}
{rank=same; raw_450}

raw_450 [label="raw"]


// END RANK prose_422

raw_450 -> leaf_451
leaf_451  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Codeblock headers and footers, unlike most structure lines, cannot begin
with whitespace. 

"]
// END RANK raw_450

section_222 -> { header_452 prose_453 prose_454 codeblock_455 prose_456 codeblock_457 prose_458 codeblock_459 prose_460}
{rank=same; header_452 prose_453 prose_454 codeblock_455 prose_456 codeblock_457 prose_458 codeblock_459 prose_460}

header_452 [label="3 : Table"]

prose_453 [label="prose"]

prose_454 [label="prose"]

codeblock_455 [label="code block 421-424"]

prose_456 [label="prose"]

codeblock_457 [label="code block 429-433"]

prose_458 [label="prose"]

codeblock_459 [label="code block 437-440"]

prose_460 [label="prose"]


// END RANK section_222

header_452 -> leaf_461
leaf_461  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Table

 "]
// END RANK header_452

prose_453 -> { raw_462}
{rank=same; raw_462}

raw_462 [label="raw"]


// END RANK prose_453

raw_462 -> leaf_463
leaf_463  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Tables are our matrix data structure.  I have no immediate use for 
spreadsheets that I can't meet with other software, but admire their
inclusion in Org and do use tables in markup from time to time.
"]
// END RANK raw_462

prose_454 -> { raw_464 prespace_465 literal_466 raw_467}
{rank=same; raw_464 prespace_465 literal_466 raw_467}

raw_464 [label="raw"]

prespace_465 [label="prespace"]

literal_466 [label="literal"]

raw_467 [label="raw"]


// END RANK prose_454

raw_464 -> leaf_468
leaf_468  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't intend to do much more than recognize them in the near future,
but a glance at what Org offers with tables should give a sense of how
we want to use them within"]
// END RANK raw_464

prespace_465 -> leaf_469
leaf_469  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_465

literal_466 -> leaf_470
leaf_470  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_466

raw_467 -> leaf_471
leaf_471  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". 
"]
// END RANK raw_467

codeblock_455 -> leaf_472
leaf_472  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| 2  | 4  | 6  | 8  |
| 10 | 12 | 14 | 16 |"]
// END RANK codeblock_455

prose_456 -> { raw_473}
{rank=same; raw_473}

raw_473 [label="raw"]


// END RANK prose_456

raw_473 -> leaf_474
leaf_474  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
With a couple small refinements, this one should render with a line
between the header and therows:
"]
// END RANK raw_473

codeblock_457 -> leaf_475
leaf_475  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| a  | b  | c  | d  |
~ 3  | 6  | 9  | 12 |
| 18 | 21 | 24 | 27 |"]
// END RANK codeblock_457

prose_458 -> { raw_476}
{rank=same; raw_476}

raw_476 [label="raw"]


// END RANK prose_458

raw_476 -> leaf_477
leaf_477  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To extend a row virtually over two or more text lines
"]
// END RANK raw_476

codeblock_459 -> leaf_478
leaf_478  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| cat, | chien,  | gato,    \\
| hat  | chapeau | sombrero |"]
// END RANK codeblock_459

prose_460 -> { raw_479 prespace_480 literal_481 raw_482}
{rank=same; raw_479 prespace_480 literal_481 raw_482}

raw_479 [label="raw"]

prespace_480 [label="prespace"]

literal_481 [label="literal"]

raw_482 [label="raw"]


// END RANK prose_460

raw_479 -> leaf_483
leaf_483  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The only way to slip a"]
// END RANK raw_479

prespace_480 -> leaf_484
leaf_484  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_480

literal_481 -> leaf_485
leaf_485  [color=Gray,shape=rectangle,fontname=Inconsolata,label="|"]
// END RANK literal_481

raw_482 -> leaf_486
leaf_486  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into a table cell is to put it inside a 
«string». Other than that it's prose country. 

"]
// END RANK raw_482

section_223 -> { header_487 prose_488 prose_489 prose_490}
{rank=same; header_487 prose_488 prose_489 prose_490}

header_487 [label="3 : Link  "]

prose_488 [label="prose"]

prose_489 [label="prose"]

prose_490 [label="prose"]


// END RANK section_223

header_487 -> leaf_491
leaf_491  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Link	

  "]
// END RANK header_487

prose_488 -> { raw_492 link_493 raw_494 link_495 raw_496}
{rank=same; raw_492 link_493 raw_494 link_495 raw_496}

raw_492 [label="raw"]

link_493 [label="link"]

raw_494 [label="raw"]

link_495 [label="link"]

raw_496 [label="raw"]


// END RANK prose_488

raw_492 -> leaf_497
leaf_497  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The most "]
// END RANK raw_492

link_493 -> { anchortext_498 url_499}
{rank=same; anchortext_498 url_499}

anchortext_498 [label="anchortext"]

url_499 [label="url"]


// END RANK link_493

anchortext_498 -> leaf_500
leaf_500  [color=Gray,shape=rectangle,fontname=Inconsolata,label="basic link"]
// END RANK anchortext_498

url_499 -> leaf_501
leaf_501  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_499

raw_494 -> leaf_502
leaf_502  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" follows a simple «"]
// END RANK raw_494

link_495 -> { anchortext_503 url_504}
{rank=same; anchortext_503 url_504}

anchortext_503 [label="anchortext"]

url_504 [label="url"]


// END RANK link_495

anchortext_503 -> leaf_505
leaf_505  [color=Gray,shape=rectangle,fontname=Inconsolata,label="description"]
// END RANK anchortext_503

url_504 -> leaf_506
leaf_506  [color=Gray,shape=rectangle,fontname=Inconsolata,label="url"]
// END RANK url_504

raw_496 -> leaf_507
leaf_507  [color=Gray,shape=rectangle,fontname=Inconsolata,label="» pattern.  Markdown gets this right.  In HTML you'll see the 
href before the link text, but looking at HTML is a mistake.
"]
// END RANK raw_496

prose_489 -> { raw_508}
{rank=same; raw_508}

raw_508 [label="raw"]


// END RANK prose_489

raw_508 -> leaf_509
leaf_509  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Org-mode follows the opposite convention.  This breaks the flow of text for
the reader and Orb format must be legible in raw form.
"]
// END RANK raw_508

prose_490 -> { raw_510}
{rank=same; raw_510}

raw_510 [label="raw"]


// END RANK prose_490

raw_510 -> leaf_511
leaf_511  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
tk other Org-iastic link types.

"]
// END RANK raw_510

section_224 -> { header_512 prose_513 prose_514 prose_515 prose_516 prose_517}
{rank=same; header_512 prose_513 prose_514 prose_515 prose_516 prose_517}

header_512 [label="3 : Categories"]

prose_513 [label="prose"]

prose_514 [label="prose"]

prose_515 [label="prose"]

prose_516 [label="prose"]

prose_517 [label="prose"]


// END RANK section_224

header_512 -> leaf_518
leaf_518  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Categories

Wh"]
// END RANK header_512

prose_513 -> { raw_519 link_520 raw_521 link_522 raw_523}
{rank=same; raw_519 link_520 raw_521 link_522 raw_523}

raw_519 [label="raw"]

link_520 [label="link"]

raw_521 [label="raw"]

link_522 [label="link"]

raw_523 [label="raw"]


// END RANK prose_513

raw_519 -> leaf_524
leaf_524  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

While "]
// END RANK raw_519

link_520 -> { anchortext_525 url_526}
{rank=same; anchortext_525 url_526}

anchortext_525 [label="anchortext"]

url_526 [label="url"]


// END RANK link_520

anchortext_525 -> leaf_527
leaf_527  [color=Gray,shape=rectangle,fontname=Inconsolata,label="handles"]
// END RANK anchortext_525

url_526 -> leaf_528
leaf_528  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_526

raw_521 -> leaf_529
leaf_529  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" define a user-level global namespace, and "]
// END RANK raw_521

link_522 -> { anchortext_530 url_531}
{rank=same; anchortext_530 url_531}

anchortext_530 [label="anchortext"]

url_531 [label="url"]


// END RANK link_522

anchortext_530 -> leaf_532
leaf_532  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hashtags"]
// END RANK anchortext_530

url_531 -> leaf_533
leaf_533  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_531

raw_523 -> leaf_534
leaf_534  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" an Orb-wide vocabulary of actions, categories are a
simple tagging system for classification. 
"]
// END RANK raw_523

prose_514 -> { raw_535 prespace_536 literal_537 raw_538}
{rank=same; raw_535 prespace_536 literal_537 raw_538}

raw_535 [label="raw"]

prespace_536 [label="prespace"]

literal_537 [label="literal"]

raw_538 [label="raw"]


// END RANK prose_514

raw_535 -> leaf_539
leaf_539  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Categories always refer to themselves, like a lisp"]
// END RANK raw_535

prespace_536 -> leaf_540
leaf_540  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_536

literal_537 -> leaf_541
leaf_541  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":keyword"]
// END RANK literal_537

raw_538 -> leaf_542
leaf_542  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  Handles always
refer to other Orb structures, while hashtags do things.
"]
// END RANK raw_538

prose_515 -> { raw_543 prespace_544 literal_545 raw_546}
{rank=same; raw_543 prespace_544 literal_545 raw_546}

raw_543 [label="raw"]

prespace_544 [label="prespace"]

literal_545 [label="literal"]

raw_546 [label="raw"]


// END RANK prose_515

raw_543 -> leaf_547
leaf_547  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Categories are delineated"]
// END RANK raw_543

prespace_544 -> leaf_548
leaf_548  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_544

literal_545 -> leaf_549
leaf_549  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":Like:so:for:Several:Categories:"]
// END RANK literal_545

raw_546 -> leaf_550
leaf_550  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  They inherit,
like hashtags, on the basis of capitalization.  Like handles, they are parsed
within prose.  This is in contrast to hashtags, which are not. 
"]
// END RANK raw_546

prose_516 -> { raw_551}
{rank=same; raw_551}

raw_551 [label="raw"]


// END RANK prose_516

raw_551 -> leaf_552
leaf_552  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The characters allowed in a category are broadly intended to be alphasymbolic,
and exclude markup and links.  Nor may hashtags or handles be used as categories.
"]
// END RANK raw_551

prose_517 -> { raw_553 prespace_554 literal_555 raw_556 prespace_557 literal_558 raw_559}
{rank=same; raw_553 prespace_554 literal_555 raw_556 prespace_557 literal_558 raw_559}

raw_553 [label="raw"]

prespace_554 [label="prespace"]

literal_555 [label="literal"]

raw_556 [label="raw"]

prespace_557 [label="prespace"]

literal_558 [label="literal"]

raw_559 [label="raw"]


// END RANK prose_517

raw_553 -> leaf_560
leaf_560  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I haven't implemented categories in the parser yet, but my intention is that"]
// END RANK raw_553

prespace_554 -> leaf_561
leaf_561  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_554

literal_555 -> leaf_562
leaf_562  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" :Category:anotherCategory:[bad category]:aFourthCategory: "]
// END RANK literal_555

raw_556 -> leaf_563
leaf_563  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" won't break the parse
of"]
// END RANK raw_556

prespace_557 -> leaf_564
leaf_564  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_557

literal_558 -> leaf_565
leaf_565  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":aFourthCategory:"]
// END RANK literal_558

raw_559 -> leaf_566
leaf_566  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and will structurally attach it to the other two good ones,
with the bad one parsed prosaically.

"]
// END RANK raw_559

section_225 -> { header_567 prose_568 codeblock_569 prose_570 prose_571 prose_572}
{rank=same; header_567 prose_568 codeblock_569 prose_570 prose_571 prose_572}

header_567 [label="3 : Drawer"]

prose_568 [label="prose"]

codeblock_569 [label="code block 485-489"]

prose_570 [label="prose"]

prose_571 [label="prose"]

prose_572 [label="prose"]


// END RANK section_225

header_567 -> leaf_573
leaf_573  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Drawer

  "]
// END RANK header_567

prose_568 -> { raw_574}
{rank=same; raw_574}

raw_574 [label="raw"]


// END RANK prose_568

raw_574 -> leaf_575
leaf_575  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A drawer is a block that's hidden by default. The computer sees it,
the user sees ⦿, or a similar rune.
"]
// END RANK raw_574

codeblock_569 -> leaf_576
leaf_576  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[a-drawer]:
contents
:[a-drawer]:"]
// END RANK codeblock_569

prose_570 -> { raw_577}
{rank=same; raw_577}

raw_577 [label="raw"]


// END RANK prose_570

raw_577 -> leaf_578
leaf_578  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This closes to a single Unicode character, such as ⦿, which can't be deleted
without opening it. Deleting into an ordinary fold marker opens the fold,
deleting towards a drawer marker skips past it.
"]
// END RANK raw_577

prose_571 -> { prespace_579 literal_580 raw_581 prespace_582 literal_583 raw_584}
{rank=same; prespace_579 literal_580 raw_581 prespace_582 literal_583 raw_584}

prespace_579 [label="prespace"]

literal_580 [label="literal"]

raw_581 [label="raw"]

prespace_582 [label="prespace"]

literal_583 [label="literal"]

raw_584 [label="raw"]


// END RANK prose_571

prespace_579 -> leaf_585
leaf_585  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_579

literal_580 -> leaf_586
leaf_586  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a-drawer"]
// END RANK literal_580

raw_581 -> leaf_587
leaf_587  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is a handle, the @ isn't needed here but you could include it.
It's ok to just leave it blank:"]
// END RANK raw_581

prespace_582 -> leaf_588
leaf_588  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_582

literal_583 -> leaf_589
leaf_589  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[ ]:"]
// END RANK literal_583

raw_584 -> leaf_590
leaf_590  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_584

prose_572 -> { raw_591}
{rank=same; raw_591}

raw_591 [label="raw"]


// END RANK prose_572

raw_591 -> leaf_592
leaf_592  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The only purpose of a drawer is to draw a folding layer around some text
that's normally kept closed.  If you're doing something fancy you might
have a long header of imports and configs that you don't want to look at
all the time. 

























"]
// END RANK raw_591


}
