digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 508"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-224"]


section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7 section_8 section_9}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7 section_8 section_9}

header_2 [label="1 : Orb format"]

prose_3 [label="prose"]

section_4 [label="section: 7-21"]

section_5 [label="section: 22-43"]

section_6 [label="section: 44-92"]

section_7 [label="section: 106-142"]

section_8 [label="section: 143-150"]

section_9 [label="section: 225-457"]


header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Orb format"]
prose_3 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The grimoire tools work with a structured text format which we call Orb.
This is an introduction to that format.

"]
section_4 -> { header_13 prose_14 prose_15 prose_16}
{rank=same; header_13 prose_14 prose_15 prose_16}

header_13 [label="2 : Metalanguage"]

prose_14 [label="prose"]

prose_15 [label="prose"]

prose_16 [label="prose"]


header_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Metalanguage"]
prose_14 -> { raw_18}
{rank=same; raw_18}

raw_18 [label="raw"]


raw_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  I call Orb a metalanguage, because it can by design include any other
structured text format within it.  Provided it may be represented in utf-8!
This is no stricture in practice. 
"]
prose_15 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The Orb format aims to be equally useful for markup, literate programming,
configuration, data exchange, and the sort of interactive notebook which 
Jupyter and org-babel can produce.
"]
prose_16 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The first parser and tool is Grimoire, which, as a bootstrap, is focused on
literate programming.  This will in turn be the format for the tools in the
bettertools suite. 

"]
section_5 -> { header_24 prose_25 prose_26 prose_27}
{rank=same; header_24 prose_25 prose_26 prose_27}

header_24 [label="2 : Goals"]

prose_25 [label="prose"]

prose_26 [label="prose"]

prose_27 [label="prose"]


header_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Goals"]
prose_25 -> { raw_29}
{rank=same; raw_29}

raw_29 [label="raw"]


raw_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Orb is:
"]
prose_26 -> { raw_31}
{rank=same; raw_31}

raw_31 [label="raw"]


raw_31 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - Error free:  An Orb document is never in a state of error.  Any valid
                 utf-8 string is an Orb document.
  - Line based:  Orb files may be rapidly separated into their elements
                 by splitting into lines and examining the first few
                 characters.
  - Humane:      Orb is carefully designed to be readable, as is, by
                 ordinary humans.
  - General:     There are no characters such as <>& in HTML which must be
                 escaped.  Orb codeblocks can enclose any other format,
                 including Orb format.  Orb strings are «brace balanced»
                 and can enclose any utf-8 string as a consequence. 
"]
prose_27 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
While it is possible to do some fancy things with Orb, it is also a
comfortable format to write a blog post, or put a few key-value pairs into
a config file.  If you were to send an email in Orb format, the recipient
might not even notice. 

"]
section_6 -> { header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 section_47}
{rank=same; header_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 prose_43 prose_44 prose_45 prose_46 section_47}

header_35 [label="2 : Encoding"]

prose_36 [label="prose"]

prose_37 [label="prose"]

prose_38 [label="prose"]

prose_39 [label="prose"]

prose_40 [label="prose"]

prose_41 [label="prose"]

prose_42 [label="prose"]

prose_43 [label="prose"]

prose_44 [label="prose"]

prose_45 [label="prose"]

prose_46 [label="prose"]

section_47 [label="section: 93-105"]


header_35 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Encoding"]
prose_36 -> { raw_49}
{rank=same; raw_49}

raw_49 [label="raw"]


raw_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Orb documents are encoded in utf-8.  
"]
prose_37 -> { raw_51}
{rank=same; raw_51}

raw_51 [label="raw"]


raw_51 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The core syntax is defined in terms of the reachable keys on a US keyboard.
This tradition is firmly entrenched in the mid teens, and I have no
designs on budging that at present.  The miser in me likes that they're
a byte each.  The lawyer in me insists that this isn't ASCII, which is a
seven-bit legacy encoding.
"]
prose_38 -> { raw_53}
{rank=same; raw_53}

raw_53 [label="raw"]


raw_53 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We aren't at all reluctant to use Unicode characters as part of the format. 
Grimoire «strings» are the most visible example of this, along with drawer
and fold icons, which are actual parts of an Orb document. 
"]
prose_39 -> { raw_55}
{rank=same; raw_55}

raw_55 [label="raw"]


raw_55 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is case sensitive and uses lower-snake-case for built-in English
phrases. There is a convention (see classes) that uses capitalization of
user words to affect semantics.  
"]
prose_40 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[tk] is there though
"]
prose_41 -> { raw_59}
{rank=same; raw_59}

raw_59 [label="raw"]


raw_59 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Orb is a format for text.  There are many ways of writing text, but only one
way of encoding it that matters.  There is a long tail of Unicode complexity,
and there are traces of Committee spattered all over it; nonetheless we 
should be grateful that utf-8 won, in a world in which we still drive cars on
both possible sides of the road. 
"]
prose_42 -> { raw_61 link_62 raw_63}
{rank=same; raw_61 link_62 raw_63}

raw_61 [label="raw"]

link_62 [label="link"]

raw_63 [label="raw"]


raw_61 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that while we have our "]
link_62 -> { anchortext_65 url_66}
{rank=same; anchortext_65 url_66}

anchortext_65 [label="anchortext"]

url_66 [label="url"]


anchortext_65 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="own opinions about utf-8"]
url_66 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_63 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" our vision of
heaven is backward-compatible with the inferior version foisted upon us by a 
jealous software monopoly.
"]
prose_43 -> { raw_70 link_71 raw_72}
{rank=same; raw_70 link_71 raw_72}

raw_70 [label="raw"]

link_71 [label="link"]

raw_72 [label="raw"]


raw_70 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Bidirectional handling in a context that's indentation sensitive is an 
example of something subtle. Orb format uses indentation in a few key places,
and a compliant parser will need to detect and respect RTL [tk?] markers.
Exactly how is spelled out under "]
link_71 -> { anchortext_74 url_75}
{rank=same; anchortext_74 url_75}

anchortext_74 [label="anchortext"]

url_75 [label="url"]


anchortext_74 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="indentation"]
url_75 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_72 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
prose_44 -> { raw_79}
{rank=same; raw_79}

raw_79 [label="raw"]


raw_79 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'd love to get a Hebrew and/or Arabic fluent hacker on the project
early, to make sure this works correctly.  I'll settle for Aramaic.
"]
prose_45 -> { raw_81}
{rank=same; raw_81}

raw_81 [label="raw"]


raw_81 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Another thing I want to get right is equivalence. If you have a
variable called \"Glück\" the compiler shouldn't complain if it's
rendered in either of the valid ways. For some sequences that's
\"any of the valid ways\". If we normalized your prose, you might
have problems later, so we don't want to solve it that way.
"]
prose_46 -> { raw_83 link_84 raw_85 link_86 raw_87}
{rank=same; raw_83 link_84 raw_85 link_86 raw_87}

raw_83 [label="raw"]

link_84 [label="link"]

raw_85 [label="raw"]

link_86 [label="link"]

raw_87 [label="raw"]


raw_83 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This consideration mostly applys to "]
link_84 -> { anchortext_89 url_90}
{rank=same; anchortext_89 url_90}

anchortext_89 [label="anchortext"]

url_90 [label="url"]


anchortext_89 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hashtags"]
url_90 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_85 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
link_86 -> { anchortext_94 url_95}
{rank=same; anchortext_94 url_95}

anchortext_94 [label="anchortext"]

url_95 [label="url"]


anchortext_94 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="handles"]
url_95 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_87 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The idea is that Orb files will respect all the 
wacky typographic equivalences that Unicode has gifted us with.

"]
section_47 -> { header_99 prose_100 prose_101 prose_102}
{rank=same; header_99 prose_100 prose_101 prose_102}

header_99 [label="4 : Tabs"]

prose_100 [label="prose"]

prose_101 [label="prose"]

prose_102 [label="prose"]


header_99 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Tabs"]
prose_100 -> { raw_104}
{rank=same; raw_104}

raw_104 [label="raw"]


raw_104 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The vexacious ASCII character 8 will never be found in an Orb document.  If
encountered, it will be reduced to two spaces.  Grimoire will complain.
"]
prose_101 -> { raw_106 prespace_107 italic_108 raw_109}
{rank=same; raw_106 prespace_107 italic_108 raw_109}

raw_106 [label="raw"]

prespace_107 [label="prespace"]

italic_108 [label="italic"]

raw_109 [label="raw"]


raw_106 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not an"]
prespace_107 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
italic_108 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="error"]
raw_109 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" mind you, it's a well-defined input that will become 
two spaces.  If encountered by one of my tools, the tabs will be permanently
gone. 
"]
prose_102 -> { raw_114}
{rank=same; raw_114}

raw_114 [label="raw"]


raw_114 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Yes. This applies to your source code blocks as well.  It is time we put 
away childish things.  

"]
section_7 -> { header_116 prose_117 prose_118 prose_119 prose_120 prose_121 prose_122 prose_123 prose_124}
{rank=same; header_116 prose_117 prose_118 prose_119 prose_120 prose_121 prose_122 prose_123 prose_124}

header_116 [label="2 : Prose and Structure"]

prose_117 [label="prose"]

prose_118 [label="prose"]

prose_119 [label="prose"]

prose_120 [label="prose"]

prose_121 [label="prose"]

prose_122 [label="prose"]

prose_123 [label="prose"]

prose_124 [label="prose"]


header_116 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Prose and Structure"]
prose_117 -> { raw_126}
{rank=same; raw_126}

raw_126 [label="raw"]


raw_126 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The major distinction in Orb is between prose and structure.
"]
prose_118 -> { raw_128}
{rank=same; raw_128}

raw_128 [label="raw"]


raw_128 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose is the default parsing state. It is far from unstructured from the
runtime perspective. Although this needn't be embedded in the parse
tree, Grimoire understands concepts such as paragraphs, words, punctuation,
capital letters, languages, and anything else proper to prose.
"]
prose_119 -> { raw_130}
{rank=same; raw_130}

raw_130 [label="raw"]


raw_130 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I refer to human languages, but Grimoire understands programming languages
also. In principle, all of them, it shouldn't be harder to add them than
it is to call them from shell, though getting a runtime rigged up to
another runtime always calls for some finesse to derive a good experience.
"]
prose_120 -> { raw_132}
{rank=same; raw_132}

raw_132 [label="raw"]


raw_132 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
\"Programming languages\" is overly specific.  Grimoire draws a distinction
between prose and structure. Blocks may contain either, or both.
"]
prose_121 -> { raw_134 prespace_135 bold_136 raw_137}
{rank=same; raw_134 prespace_135 bold_136 raw_137}

raw_134 [label="raw"]

prespace_135 [label="prespace"]

bold_136 [label="bold"]

raw_137 [label="raw"]


raw_134 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something that's nice about a language build on a prose/structure
relationship is that it can be error free.  Anything"]
prespace_135 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
bold_136 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym"]
raw_137 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" can't build into
a structure is just prose.
"]
prose_122 -> { raw_142}
{rank=same; raw_142}

raw_142 [label="raw"]


raw_142 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Markdown has this property.  Sometimes you run into parsers which
build errors into Markdown, which is itself erroneous.  If you [[RTFM]
[http://daringfireball.net/projects/markdown/syntax]],
you'll find the word \"error\" once.  Helpfully explaining how Markdown
keeps you from making one.
"]
prose_123 -> { raw_144}
{rank=same; raw_144}

raw_144 [label="raw"]


raw_144 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do what we can to make the document look the same as it is
in fact structured.  The intention with Orb files is that we work with them
aided by a linter, which lets us be lazy and still get consistent results.
"]
prose_124 -> { raw_146}
{rank=same; raw_146}

raw_146 [label="raw"]


raw_146 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The most important point in this section is that Orb documents do not have
errors and never fail to parse.  You should be able to literally plug any 
Orb parser into a source of entropy and end up with a document, since a
proper utf-8 decoder will drop any invalid bytes it sees. 

"]
section_8 -> { header_148 prose_149 section_150}
{rank=same; header_148 prose_149 section_150}

header_148 [label="2 : Ownership"]

prose_149 [label="prose"]

section_150 [label="section: 151-166"]


header_148 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Ownership"]
prose_149 -> { raw_152}
{rank=same; raw_152}

raw_152 [label="raw"]


raw_152 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The root concept of Orb is a document, which divides into one or more 
sections.  A section owns all structure or prose within it.  This 
paragraph is owned by «** Ownership» above, as are all the rest of the
blocks until the next section header. 

"]
section_150 -> { header_154 prose_155 prose_156 prose_157 section_158}
{rank=same; header_154 prose_155 prose_156 prose_157 section_158}

header_154 [label="3 : Blocking"]

prose_155 [label="prose"]

prose_156 [label="prose"]

prose_157 [label="prose"]

section_158 [label="section: 167-224"]


header_154 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Blocking"]
prose_155 -> { raw_160}
{rank=same; raw_160}

raw_160 [label="raw"]


raw_160 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Orb documents are chunked into sections entirely by their heading lines.
Within a section, prose and structure alike are organized into blocks.  
The defining marker of blocks is blank lines.
"]
prose_156 -> { raw_162}
{rank=same; raw_162}

raw_162 [label="raw"]


raw_162 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This second paragraph is the second block of the «*** Blocking» section.
Taking a look at the source document, you'll see that I put (single)
newlines between lines, with an 78 column margin.  That should be considered
good style.  If you prefer to have each paragraph be its own line, have at.
"]
prose_157 -> { raw_164}
{rank=same; raw_164}

raw_164 [label="raw"]


raw_164 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A line is considered blank if it contains only Unicode spacemarks.  Grimoire
will smoothly remove any such cruft and replace it with «\\n\\n».  We also
trim trailing whitespace. 

"]
section_158 -> { header_166 prose_167 prose_168 prose_169 prose_170 prose_171 codeblock_172 prose_173 codeblock_174 prose_175 prose_176 codeblock_177 prose_178}
{rank=same; header_166 prose_167 prose_168 prose_169 prose_170 prose_171 codeblock_172 prose_173 codeblock_174 prose_175 prose_176 codeblock_177 prose_178}

header_166 [label="4 : The Cling Rule"]

prose_167 [label="prose"]

prose_168 [label="prose"]

prose_169 [label="prose"]

prose_170 [label="prose"]

prose_171 [label="prose"]

codeblock_172 [label="code block 187-194"]

prose_173 [label="prose"]

codeblock_174 [label="code block 199-206"]

prose_175 [label="prose"]

prose_176 [label="prose"]

codeblock_177 [label="code block 213-219"]

prose_178 [label="prose"]


header_166 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** The Cling Rule"]
prose_167 -> { raw_180 link_181 raw_182}
{rank=same; raw_180 link_181 raw_182}

raw_180 [label="raw"]

link_181 [label="link"]

raw_182 [label="raw"]


raw_180 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  "]
link_181 -> { anchortext_184 url_185}
{rank=same; anchortext_184 url_185}

anchortext_184 [label="anchortext"]

url_185 [label="url"]


anchortext_184 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Tags"]
url_185 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_182 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are used both to provide names to blocks in Orb format
and to specify various actions in knitting and weaving.  They may be placed
above or below the block which they affect.
"]
prose_168 -> { raw_189}
{rank=same; raw_189}

raw_189 [label="raw"]


raw_189 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The cling rule specifies that a group 'clings' to another group when
it is closer to that group than the other group. Ties resolve down.
"]
prose_169 -> { raw_191}
{rank=same; raw_191}

raw_191 [label="raw"]


raw_191 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This should make it intuitive to group elements that aren't grouping the
way you expect: put in whitespace until the block is visually distinguished
from the surroundings.
"]
prose_170 -> { raw_193}
{rank=same; raw_193}

raw_193 [label="raw"]


raw_193 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cling applies between blocks which are at the same level of ownership.
Ownership has precedence over cling: all blocks underneath e.g. a header
line are owned by that line, newlines notwithstanding.
"]
prose_171 -> { raw_195}
{rank=same; raw_195}

raw_195 [label="raw"]


raw_195 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that indentation of e.g. lists invokes the cling rule within the
indentation level.
"]
codeblock_172 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |

#tag


someprose on a block"]
prose_173 -> { raw_198}
{rank=same; raw_198}

raw_198 [label="raw"]


raw_198 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the table, but
"]
codeblock_174 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |


#tag

someprose on a block"]
prose_175 -> { raw_201}
{rank=same; raw_201}

raw_201 [label="raw"]


raw_201 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the block.
"]
prose_176 -> { raw_203}
{rank=same; raw_203}

raw_203 [label="raw"]


raw_203 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Even clings are resolved forwards:
"]
codeblock_177 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |

#tag

someprose on a block"]
prose_178 -> { raw_206}
{rank=same; raw_206}

raw_206 [label="raw"]


raw_206 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the prose block.

"]
section_9 -> { header_208 prose_209 prose_210 section_211 section_212 section_213 section_214 section_215 section_216 section_217}
{rank=same; header_208 prose_209 prose_210 section_211 section_212 section_213 section_214 section_215 section_216 section_217}

header_208 [label="2 : Structural elements"]

prose_209 [label="prose"]

prose_210 [label="prose"]

section_211 [label="section: 237-255"]

section_212 [label="section: 256-286"]

section_213 [label="section: 287-361"]

section_214 [label="section: 377-410"]

section_215 [label="section: 411-445"]

section_216 [label="section: 446-457"]

section_217 [label="section: 458-508"]


header_208 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Structural elements"]
prose_209 -> { raw_219}
{rank=same; raw_219}

raw_219 [label="raw"]


raw_219 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Structure and prose are the figure and ground of Orb format.  We speak of
structure and prose on a block-by-block basis, and within some structure
blocks there are regions of prose.  Prose in turn routinely contains
structural regions.
"]
prose_210 -> { raw_221}
{rank=same; raw_221}

raw_221 [label="raw"]


raw_221 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This section will discuss under what circumstances an Orb parser will create
structure, with some discursions into the semantics these distinctions
represent. 

"]
section_211 -> { header_223 prose_224 codeblock_225 prose_226 prose_227}
{rank=same; header_223 prose_224 codeblock_225 prose_226 prose_227}

header_223 [label="3 : Headlines"]

prose_224 [label="prose"]

codeblock_225 [label="code block 242-244"]

prose_226 [label="prose"]

prose_227 [label="prose"]


header_223 -> leaf_228
leaf_228  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Headlines"]
prose_224 -> { raw_229}
{rank=same; raw_229}

raw_229 [label="raw"]


raw_229 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Headlines divide a document into sections.  The grammar for recognizing
a headline is as follows:
"]
codeblock_225 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    headline = WS?  '*'+  ' '  prose  NL"]
prose_226 -> { raw_232 prespace_233 literal_234 raw_235}
{rank=same; raw_232 prespace_233 literal_234 raw_235}

raw_232 [label="raw"]

prespace_233 [label="prespace"]

literal_234 [label="literal"]

raw_235 [label="raw"]


raw_232 -> leaf_236
leaf_236  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The number of"]
prespace_233 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_234 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_235 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" determine the level of ownership.  This is a declarative
relationship, though I lack a clean syntax to express it other than
functionally at present. 
"]
prose_227 -> { raw_240 prespace_241 literal_242 raw_243}
{rank=same; raw_240 prespace_241 literal_242 raw_243}

raw_240 [label="raw"]

prespace_241 [label="prespace"]

literal_242 [label="literal"]

raw_243 [label="raw"]


raw_240 -> leaf_244
leaf_244  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The content within"]
prespace_241 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_242 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label="prose"]
raw_243 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" has the luxury of being context-sensitive.  In
particular we treat tags on a headline as though they're on a tagline below
they headline. 


"]
section_212 -> { header_248 prose_249 prose_250 prose_251 codeblock_252 prose_253 prose_254 codeblock_255 prose_256}
{rank=same; header_248 prose_249 prose_250 prose_251 codeblock_252 prose_253 prose_254 codeblock_255 prose_256}

header_248 [label="3 : Tags and Taglines"]

prose_249 [label="prose"]

prose_250 [label="prose"]

prose_251 [label="prose"]

codeblock_252 [label="code block 266-268"]

prose_253 [label="prose"]

prose_254 [label="prose"]

codeblock_255 [label="code block 278-281"]

prose_256 [label="prose"]


header_248 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Tags and Taglines"]
prose_249 -> { raw_258 prespace_259 literal_260 raw_261 prespace_262 literal_263 raw_264}
{rank=same; raw_258 prespace_259 literal_260 raw_261 prespace_262 literal_263 raw_264}

raw_258 [label="raw"]

prespace_259 [label="prespace"]

literal_260 [label="literal"]

raw_261 [label="raw"]

prespace_262 [label="prespace"]

literal_263 [label="literal"]

raw_264 [label="raw"]


raw_258 -> leaf_265
leaf_265  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Tags are the control structures for Orb.  There are"]
prespace_259 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_260 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#hashtags"]
raw_261 -> leaf_268
leaf_268  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which
loosely correspond to functions or messages, and"]
prespace_262 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_263 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@handles"]
raw_264 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which more
directly correspond to symbols.  
"]
prose_250 -> { raw_272 link_273 raw_274}
{rank=same; raw_272 link_273 raw_274}

raw_272 [label="raw"]

link_273 [label="link"]

raw_274 [label="raw"]


raw_272 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The semantics of tags belong in the "]
link_273 -> { anchortext_276 url_277}
{rank=same; anchortext_276 url_277}

anchortext_276 [label="anchortext"]

url_277 [label="url"]


anchortext_276 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label="runtime"]
url_277 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_274 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label="]] section.
"]
prose_251 -> { raw_281}
{rank=same; raw_281}

raw_281 [label="raw"]


raw_281 -> leaf_282
leaf_282  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For now let us note that the rule
"]
codeblock_252 -> leaf_283
leaf_283  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  hashtag = WS+  '#'  symbol"]
prose_253 -> { raw_284 prespace_285 literal_286 raw_287}
{rank=same; raw_284 prespace_285 literal_286 raw_287}

raw_284 [label="raw"]

prespace_285 [label="prespace"]

literal_286 [label="literal"]

raw_287 [label="raw"]


raw_284 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  
*may* not appear in (all) prose contexts, this is still undecided.  This is 
true of handles as well given the state of"]
prespace_285 -> leaf_289
leaf_289  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_286 -> leaf_290
leaf_290  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym"]
raw_287 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at the present time, 
but I am more firmly convinced of the value of @handle as a short in-place
expansion of a handleline. I don't think trying to parse a mid-block #export
as meaning something is as valuable. 
"]
prose_254 -> { raw_292}
{rank=same; raw_292}

raw_292 [label="raw"]


raw_292 -> leaf_293
leaf_293  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These two rules are currently in use:
"]
codeblock_255 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  hashline = WS?  '#'  symbol  ' '  prose  NL
  handleline = WS?  '@'  symbol  ' '  prose  NL"]
prose_256 -> { raw_295 prespace_296 literal_297 raw_298 prespace_299 literal_300 raw_301}
{rank=same; raw_295 prespace_296 literal_297 raw_298 prespace_299 literal_300 raw_301}

raw_295 [label="raw"]

prespace_296 [label="prespace"]

literal_297 [label="literal"]

raw_298 [label="raw"]

prespace_299 [label="prespace"]

literal_300 [label="literal"]

raw_301 [label="raw"]


raw_295 -> leaf_302
leaf_302  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Structure is designed to work on a line-by-line basis,
any"]
prespace_296 -> leaf_303
leaf_303  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_297 -> leaf_304
leaf_304  [color=Gray,shape=rectangle,fontname=Inconsolata,label="line"]
raw_298 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" rule has an implied"]
prespace_299 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_300 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label="^"]
raw_301 -> leaf_308
leaf_308  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". 

"]
section_213 -> { header_309 prose_310 prose_311 codeblock_312 prose_313 codeblock_314 prose_315 codeblock_316 prose_317 codeblock_318 prose_319 section_320 section_321}
{rank=same; header_309 prose_310 prose_311 codeblock_312 prose_313 codeblock_314 prose_315 codeblock_316 prose_317 codeblock_318 prose_319 section_320 section_321}

header_309 [label="3 : List "]

prose_310 [label="prose"]

prose_311 [label="prose"]

codeblock_312 [label="code block 295-297"]

prose_313 [label="prose"]

codeblock_314 [label="code block 301-303"]

prose_315 [label="prose"]

codeblock_316 [label="code block 309-312"]

prose_317 [label="prose"]

codeblock_318 [label="code block 316-319"]

prose_319 [label="prose"]

section_320 [label="section: 328-361"]

section_321 [label="section: 362-376"]


header_309 -> leaf_322
leaf_322  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** List "]
prose_310 -> { raw_323}
{rank=same; raw_323}

raw_323 [label="raw"]


raw_323 -> leaf_324
leaf_324  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Lists are both a markup format and a flexible data container.  In the emacs
org-mode, headline-type structures do the heavy lifting for TODO lists and
the like.  This was org's original purpose, with document markup coming later.
"]
prose_311 -> { raw_325}
{rank=same; raw_325}

raw_325 [label="raw"]


raw_325 -> leaf_326
leaf_326  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Orb lists come in unnumbered and numbered.  Unnumbered lists follow this rule:
"]
codeblock_312 -> leaf_327
leaf_327  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  listline-un = WS? '- ' prose NL"]
prose_313 -> { raw_328}
{rank=same; raw_328}

raw_328 [label="raw"]


raw_328 -> leaf_329
leaf_329  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
While numbered lists match this:
"]
codeblock_314 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  listline-li = WS? digits '. ' prose NL"]
prose_315 -> { raw_331}
{rank=same; raw_331}

raw_331 [label="raw"]


raw_331 -> leaf_332
leaf_332  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For lists, as with any structure group, the semantics of the prose section are
somewhat flexible.  The cling rule for lists parses indentation so that
multi-line entries are possible:
"]
codeblock_316 -> leaf_333
leaf_333  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - list entry 
   prose directly under, bad style"]
prose_317 -> { raw_334}
{rank=same; raw_334}

raw_334 [label="raw"]


raw_334 -> leaf_335
leaf_335  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
vs.
"]
codeblock_318 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - list entry 
    continues list entry"]
prose_319 -> { raw_337}
{rank=same; raw_337}

raw_337 [label="raw"]


raw_337 -> leaf_338
leaf_338  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
As in Markdown, the parser will accept any numbers as a numbered list without
checking their order.  The linter will increment by one starting from the
number of the first index, so if you start with \"1. \" or \"0. \" or \"10. \" you
get the subsequent.  This behavior can be suppressed with a hashtag directive
yet to be added.  

"]
section_320 -> { header_339 prose_340 codeblock_341 prose_342 prose_343 prose_344 prose_345}
{rank=same; header_339 prose_340 codeblock_341 prose_342 prose_343 prose_344 prose_345}

header_339 [label="4 : List Boxes"]

prose_340 [label="prose"]

codeblock_341 [label="code block 335-346"]

prose_342 [label="prose"]

prose_343 [label="prose"]

prose_344 [label="prose"]

prose_345 [label="prose"]


header_339 -> leaf_346
leaf_346  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** List Boxes

 "]
prose_340 -> { raw_347 prespace_348 literal_349 raw_350 prespace_351 literal_352 raw_353 link_354 raw_355}
{rank=same; raw_347 prespace_348 literal_349 raw_350 prespace_351 literal_352 raw_353 link_354 raw_355}

raw_347 [label="raw"]

prespace_348 [label="prespace"]

literal_349 [label="literal"]

raw_350 [label="raw"]

prespace_351 [label="prespace"]

literal_352 [label="literal"]

raw_353 [label="raw"]

link_354 [label="link"]

raw_355 [label="raw"]


raw_347 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Lists can have, as a first element, a box, either a checkbox"]
prespace_348 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_349 -> leaf_358
leaf_358  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[ ]"]
raw_350 -> leaf_359
leaf_359  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or a 
radio box"]
prespace_351 -> leaf_360
leaf_360  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_352 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label="( )"]
raw_353 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  These are either empty with whitespace or have contents
from a limited pallete of symbols.  Their function is described in the "]
link_354 -> { anchortext_363 url_364}
{rank=same; anchortext_363 url_364}

anchortext_363 [label="anchortext"]

url_364 [label="url"]


anchortext_363 -> leaf_365
leaf_365  [color=Gray,shape=rectangle,fontname=Inconsolata,label="runtime"]
url_364 -> leaf_366
leaf_366  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_355 -> leaf_367
leaf_367  [color=Gray,shape=rectangle,fontname=Inconsolata,label="]] section. 
"]
codeblock_341 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - [ ] #todo finish orb.orb
    - [X] Metalanguage
    - [X] Prose and Structure
    - [REVISE] Link
    - [ ] Code Block

  - Fruits
    - ( ) Bananas
    - (*) Coconuts
    - ( ) Grapes"]
prose_342 -> { raw_369}
{rank=same; raw_369}

raw_369 [label="raw"]


raw_369 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These two types can't meaningfully mix on the same level of a list.  The one
the parser sees first will be applied.
"]
prose_343 -> { raw_371}
{rank=same; raw_371}

raw_371 [label="raw"]


raw_371 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The radio button is contagious, if the parser encounters one all lines on
that level get one. 
"]
prose_344 -> { raw_373}
{rank=same; raw_373}

raw_373 [label="raw"]


raw_373 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The check box is not, it's ok to include it on some lines but not others.  If
the parser sees a check box and then a radio button, it will turn the radio
button into a check box.
"]
prose_345 -> { raw_375 prespace_376 literal_377 raw_378}
{rank=same; raw_375 prespace_376 literal_377 raw_378}

raw_375 [label="raw"]

prespace_376 [label="prespace"]

literal_377 [label="literal"]

raw_378 [label="raw"]


raw_375 -> leaf_379
leaf_379  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The radio button can only have one"]
prespace_376 -> leaf_380
leaf_380  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_377 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_378 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label="; the parser will ignore, and the
linter remove, any others. 

"]
section_321 -> { header_383 prose_384 codeblock_385 prose_386}
{rank=same; header_383 prose_384 codeblock_385 prose_386}

header_383 [label="4 : Key/value pairs"]

prose_384 [label="prose"]

codeblock_385 [label="code block 366-370"]

prose_386 [label="prose"]


header_383 -> leaf_387
leaf_387  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Key/value pairs

 "]
prose_384 -> { raw_388 prespace_389 literal_390 raw_391}
{rank=same; raw_388 prespace_389 literal_390 raw_391}

raw_388 [label="raw"]

prespace_389 [label="prespace"]

literal_390 [label="literal"]

raw_391 [label="raw"]


raw_388 -> leaf_392
leaf_392  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A list element can consist of key/value pairs, separated with a"]
prespace_389 -> leaf_393
leaf_393  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_390 -> leaf_394
leaf_394  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":"]
raw_391 -> leaf_395
leaf_395  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
codeblock_385 -> leaf_396
leaf_396  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" - first key:
   - value : another value
   - 42 : the answer"]
prose_386 -> { raw_397}
{rank=same; raw_397}

raw_397 [label="raw"]


raw_397 -> leaf_398
leaf_398  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
From the runtime perspective the left and right sides are basically strings,
as we build out the Clu runtime we'll have better expectations for what
keys and values would look like as data. 

"]
section_214 -> { header_399 prose_400 prose_401 codeblock_402 prose_403 prose_404 prose_405 codeblock_406 prose_407 prose_408}
{rank=same; header_399 prose_400 prose_401 codeblock_402 prose_403 prose_404 prose_405 codeblock_406 prose_407 prose_408}

header_399 [label="3 : Code Block"]

prose_400 [label="prose"]

prose_401 [label="prose"]

codeblock_402 [label="code block 384-388"]

prose_403 [label="prose"]

prose_404 [label="prose"]

prose_405 [label="prose"]

codeblock_406 [label="code block 399-403"]

prose_407 [label="prose"]

prose_408 [label="prose"]


header_399 -> leaf_409
leaf_409  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Code Block

 "]
prose_400 -> { raw_410}
{rank=same; raw_410}

raw_410 [label="raw"]


raw_410 -> leaf_411
leaf_411  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The reason Orb exists is so that Grimoire can exist.  We do codeblocks
carefully. 
"]
prose_401 -> { raw_412}
{rank=same; raw_412}

raw_412 [label="raw"]


raw_412 -> leaf_413
leaf_413  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A codeblock looks like so:
"]
codeblock_402 -> leaf_414
leaf_414  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!orb
*** Some Orb content
#/orb"]
prose_403 -> { raw_415}
{rank=same; raw_415}

raw_415 [label="raw"]


raw_415 -> leaf_416
leaf_416  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Try that trick in Git-Flavored Markdown...
"]
prose_404 -> { raw_417 prespace_418 literal_419 raw_420 prespace_421 literal_422 raw_423}
{rank=same; raw_417 prespace_418 literal_419 raw_420 prespace_421 literal_422 raw_423}

raw_417 [label="raw"]

prespace_418 [label="prespace"]

literal_419 [label="literal"]

raw_420 [label="raw"]

prespace_421 [label="prespace"]

literal_422 [label="literal"]

raw_423 [label="raw"]


raw_417 -> leaf_424
leaf_424  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The number of initial"]
prespace_418 -> leaf_425
leaf_425  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_419 -> leaf_426
leaf_426  [color=Gray,shape=rectangle,fontname=Inconsolata,label="!!"]
raw_420 -> leaf_427
leaf_427  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" needs to match the closing"]
prespace_421 -> leaf_428
leaf_428  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_422 -> leaf_429
leaf_429  [color=Gray,shape=rectangle,fontname=Inconsolata,label="//"]
raw_423 -> leaf_430
leaf_430  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", allowing any 
utf-8 string at all to be enclosed with this method.  We consider this an
important property to have in an enclosure encoding. 
"]
prose_405 -> { raw_431}
{rank=same; raw_431}

raw_431 [label="raw"]


raw_431 -> leaf_432
leaf_432  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code blocks must be opened, but needn't be closed, as a parser will recognize
EOF as a code block closure.  This has a fortunate side effect, as this:
"]
codeblock_406 -> leaf_433
leaf_433  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!/usr/bin/python

from future import bettertools"]
prose_407 -> { raw_434}
{rank=same; raw_434}

raw_434 [label="raw"]


raw_434 -> leaf_435
leaf_435  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Is a valid Orb document containing a python script.
"]
prose_408 -> { raw_436}
{rank=same; raw_436}

raw_436 [label="raw"]


raw_436 -> leaf_437
leaf_437  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Codeblock headers and footers, unlike most structure lines, cannot begin
with whitespace. 

"]
section_215 -> { header_438 prose_439 prose_440 codeblock_441 prose_442 codeblock_443 prose_444 codeblock_445 prose_446}
{rank=same; header_438 prose_439 prose_440 codeblock_441 prose_442 codeblock_443 prose_444 codeblock_445 prose_446}

header_438 [label="3 : Table"]

prose_439 [label="prose"]

prose_440 [label="prose"]

codeblock_441 [label="code block 421-424"]

prose_442 [label="prose"]

codeblock_443 [label="code block 429-433"]

prose_444 [label="prose"]

codeblock_445 [label="code block 437-440"]

prose_446 [label="prose"]


header_438 -> leaf_447
leaf_447  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Table

 "]
prose_439 -> { raw_448}
{rank=same; raw_448}

raw_448 [label="raw"]


raw_448 -> leaf_449
leaf_449  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Tables are our matrix data structure.  I have no immediate use for 
spreadsheets that I can't meet with other software, but admire their
inclusion in Org and do use tables in markup from time to time.
"]
prose_440 -> { raw_450 prespace_451 literal_452 raw_453}
{rank=same; raw_450 prespace_451 literal_452 raw_453}

raw_450 [label="raw"]

prespace_451 [label="prespace"]

literal_452 [label="literal"]

raw_453 [label="raw"]


raw_450 -> leaf_454
leaf_454  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't intend to do much more than recognize them in the near future,
but a glance at what Org offers with tables should give a sense of how
we want to use them within"]
prespace_451 -> leaf_455
leaf_455  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_452 -> leaf_456
leaf_456  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
raw_453 -> leaf_457
leaf_457  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". 
"]
codeblock_441 -> leaf_458
leaf_458  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| 2  | 4  | 6  | 8  |
| 10 | 12 | 14 | 16 |"]
prose_442 -> { raw_459}
{rank=same; raw_459}

raw_459 [label="raw"]


raw_459 -> leaf_460
leaf_460  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
With a couple small refinements, this one should render with a line
between the header and therows:
"]
codeblock_443 -> leaf_461
leaf_461  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| a  | b  | c  | d  |
~ 3  | 6  | 9  | 12 |
| 18 | 21 | 24 | 27 |"]
prose_444 -> { raw_462}
{rank=same; raw_462}

raw_462 [label="raw"]


raw_462 -> leaf_463
leaf_463  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To extend a row virtually over two or more text lines
"]
codeblock_445 -> leaf_464
leaf_464  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| cat, | chien,  | gato,    \\
| hat  | chapeau | sombrero |"]
prose_446 -> { raw_465 prespace_466 literal_467 raw_468}
{rank=same; raw_465 prespace_466 literal_467 raw_468}

raw_465 [label="raw"]

prespace_466 [label="prespace"]

literal_467 [label="literal"]

raw_468 [label="raw"]


raw_465 -> leaf_469
leaf_469  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The only way to slip a"]
prespace_466 -> leaf_470
leaf_470  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_467 -> leaf_471
leaf_471  [color=Gray,shape=rectangle,fontname=Inconsolata,label="|"]
raw_468 -> leaf_472
leaf_472  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into a table cell is to put it inside a 
«string». Other than that it's prose country. 

"]
section_216 -> { header_473 prose_474 prose_475 prose_476}
{rank=same; header_473 prose_474 prose_475 prose_476}

header_473 [label="3 : Link  "]

prose_474 [label="prose"]

prose_475 [label="prose"]

prose_476 [label="prose"]


header_473 -> leaf_477
leaf_477  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Link	

  "]
prose_474 -> { raw_478 link_479 raw_480}
{rank=same; raw_478 link_479 raw_480}

raw_478 [label="raw"]

link_479 [label="link"]

raw_480 [label="raw"]


raw_478 -> leaf_481
leaf_481  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The most "]
link_479 -> { anchortext_482 url_483}
{rank=same; anchortext_482 url_483}

anchortext_482 [label="anchortext"]

url_483 [label="url"]


anchortext_482 -> leaf_484
leaf_484  [color=Gray,shape=rectangle,fontname=Inconsolata,label="basic link"]
url_483 -> leaf_485
leaf_485  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_480 -> leaf_486
leaf_486  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" follows a simple «[[description]
[url]]» pattern.  Markdown gets this right.  In HTML you'll see the 
href before the link text, but looking at HTML is a mistake.
"]
prose_475 -> { raw_487}
{rank=same; raw_487}

raw_487 [label="raw"]


raw_487 -> leaf_488
leaf_488  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Org-mode follows the opposite convention.  This breaks the flow of text for
the reader and Orb format must be legible in raw form.
"]
prose_476 -> { raw_489}
{rank=same; raw_489}

raw_489 [label="raw"]


raw_489 -> leaf_490
leaf_490  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
tk other Org-iastic link types.

"]
section_217 -> { header_491 prose_492 codeblock_493 prose_494 prose_495 prose_496 prose_497}
{rank=same; header_491 prose_492 codeblock_493 prose_494 prose_495 prose_496 prose_497}

header_491 [label="3 : Drawer"]

prose_492 [label="prose"]

codeblock_493 [label="code block 463-467"]

prose_494 [label="prose"]

prose_495 [label="prose"]

prose_496 [label="prose"]

prose_497 [label="prose"]


header_491 -> leaf_498
leaf_498  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Drawer

  "]
prose_492 -> { raw_499}
{rank=same; raw_499}

raw_499 [label="raw"]


raw_499 -> leaf_500
leaf_500  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A drawer is a block that's hidden by default. The computer sees it,
the user sees ⦿, or a similar rune.
"]
codeblock_493 -> leaf_501
leaf_501  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[a-drawer]:
contents
:[a-drawer]:"]
prose_494 -> { raw_502}
{rank=same; raw_502}

raw_502 [label="raw"]


raw_502 -> leaf_503
leaf_503  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This closes to a single Unicode character, such as ⦿, which can't be deleted
without opening it. Deleting into an ordinary fold marker opens the fold,
deleting towards a drawer marker skips past it.
"]
prose_495 -> { raw_504 prespace_505 literal_506 raw_507}
{rank=same; raw_504 prespace_505 literal_506 raw_507}

raw_504 [label="raw"]

prespace_505 [label="prespace"]

literal_506 [label="literal"]

raw_507 [label="raw"]


raw_504 -> leaf_508
leaf_508  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
=a-drawer= is a handle, the @ isn't needed here but you could include it.
It's ok to just leave it blank:"]
prespace_505 -> leaf_509
leaf_509  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_506 -> leaf_510
leaf_510  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[ ]:"]
raw_507 -> leaf_511
leaf_511  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_496 -> { raw_512}
{rank=same; raw_512}

raw_512 [label="raw"]


raw_512 -> leaf_513
leaf_513  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The only purpose of a drawer is to draw a folding layer around some text
that's normally kept closed.  If you're doing something fancy you might
have a long header of imports and configs that you don't want to look at
all the time. 
"]
prose_497 -> { raw_514}
{rank=same; raw_514}

raw_514 [label="raw"]


raw_514 -> leaf_515
leaf_515  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Honestly not sure I'm going to bother implementing this part. Late in the 
game if ever. 

























"]

}
