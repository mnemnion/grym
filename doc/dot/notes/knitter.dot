digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 141"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-125"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8}

header_2 [label="1 : Knitter"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 15-28"]

section_7 [label="section: 29-113"]

section_8 [label="section: 126-141"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Knitter"]
// END RANK header_2

prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  In Dr. Knuth's vision of literate programming, the two paths from source
are called weaving and tangling.  In Grimoire, we weave, but also, knit. 
"]
// END RANK raw_10

prose_4 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_4

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do not practice to deceive, nor tangle when our web we weave.
"]
// END RANK raw_12

prose_5 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


// END RANK prose_5

raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The parser is coming together nicely, and we are actually within a day or 
so of being ready to start knitting.  A knitter which suffices to self-host 
grimoire and pegylator only really needs taglines and code blocks, both of
which we are supporting. Huzzah!

"]
// END RANK raw_14

section_6 -> { header_16 prose_17 prose_18}
{rank=same; header_16 prose_17 prose_18}

header_16 [label="2 : Rationale"]

prose_17 [label="prose"]

prose_18 [label="prose"]


// END RANK section_6

header_16 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Rationale"]
// END RANK header_16

prose_17 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


// END RANK prose_17

raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The change of name goes deeper than aesthetics.  [[https://orgmode.org/worg/org-contrib/babel/][Babel]]
introduces a feedback loop between the enclosing code and the document itself,
a critical development.  We expect to extend this to the weave also, which is 
a browser view into the overall contents of the grimoire.
"]
// END RANK raw_20

prose_18 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


// END RANK prose_18

raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These interactive elements would be frustrating and error-prone to add without
the editing environment, parse engine, and efficient data structure to back
them.  By contrast, the pipelined approach to producing source code for 
subsequent compiliation is straightforward to implement, and provides the
foundation for writing pure C with some prayer of a good outcome. 

"]
// END RANK raw_22

section_7 -> { header_24 prose_25 prose_26 prose_27 prose_28 prose_29 section_30 section_31 section_32 section_33 section_34}
{rank=same; header_24 prose_25 prose_26 prose_27 prose_28 prose_29 section_30 section_31 section_32 section_33 section_34}

header_24 [label="2 : Tag Engine"]

prose_25 [label="prose"]

prose_26 [label="prose"]

prose_27 [label="prose"]

prose_28 [label="prose"]

prose_29 [label="prose"]

section_30 [label="section: 49-73"]

section_31 [label="section: 83-88"]

section_32 [label="section: 94-104"]

section_33 [label="section: 105-113"]

section_34 [label="section: 114-125"]


// END RANK section_7

header_24 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Tag Engine"]
// END RANK header_24

prose_25 -> { raw_36 prespace_37 literal_38 raw_39 prespace_40 literal_41 raw_42}
{rank=same; raw_36 prespace_37 literal_38 raw_39 prespace_40 literal_41 raw_42}

raw_36 [label="raw"]

prespace_37 [label="prespace"]

literal_38 [label="literal"]

raw_39 [label="raw"]

prespace_40 [label="prespace"]

literal_41 [label="literal"]

raw_42 [label="raw"]


// END RANK prose_25

raw_36 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  All Grimmorian operations are driven by tag directives.  We have exactly
two types of tag, the"]
// END RANK raw_36

prespace_37 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_37

literal_38 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#hashtag"]
// END RANK literal_38

raw_39 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and the"]
// END RANK raw_39

prespace_40 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_40

literal_41 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@handle"]
// END RANK literal_41

raw_42 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The hashtag is for the
engine, and the handle for userspace. 
"]
// END RANK raw_42

prose_26 -> { raw_50 prespace_51 literal_52 raw_53}
{rank=same; raw_50 prespace_51 literal_52 raw_53}

raw_50 [label="raw"]

prespace_51 [label="prespace"]

literal_52 [label="literal"]

raw_53 [label="raw"]


// END RANK prose_26

raw_50 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Hashtags handle any library that Grimoire expects to be able to load, user
contributed or core.  Thus"]
// END RANK raw_50

prespace_51 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_51

literal_52 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#import"]
// END RANK literal_52

raw_53 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the base case of hashtag, bringing
a set of tags into the local namespace.
"]
// END RANK raw_53

prose_27 -> { raw_58}
{rank=same; raw_58}

raw_58 [label="raw"]


// END RANK prose_27

raw_58 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Failing to find a namespace must not be considered an error.  It will be 
warned against and no semantics will be associated with any tags so defined.
"]
// END RANK raw_58

prose_28 -> { raw_60}
{rank=same; raw_60}

raw_60 [label="raw"]


// END RANK prose_28

raw_60 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire, like any other language in existence, will have a global static
namespace.  We at least intend to offer a separation mark between handle and
name; emacs has done just fine without this, but it's easier on the eyes. 
"]
// END RANK raw_60

prose_29 -> { raw_62}
{rank=same; raw_62}

raw_62 [label="raw"]


// END RANK prose_29

raw_62 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Here we intend to stick to the tags we need to knit a self-hosting Grimoire. 

"]
// END RANK raw_62

section_30 -> { header_64 prose_65 prose_66 prose_67 section_68 section_69}
{rank=same; header_64 prose_65 prose_66 prose_67 section_68 section_69}

header_64 [label="3 : #export"]

prose_65 [label="prose"]

prose_66 [label="prose"]

prose_67 [label="prose"]

section_68 [label="section: 65-73"]

section_69 [label="section: 74-82"]


// END RANK section_30

header_64 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #export"]
// END RANK header_64

prose_65 -> { raw_71 prespace_72 literal_73 raw_74}
{rank=same; raw_71 prespace_72 literal_73 raw_74}

raw_71 [label="raw"]

prespace_72 [label="prespace"]

literal_73 [label="literal"]

raw_74 [label="raw"]


// END RANK prose_65

raw_71 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This is a tag one might find in a header block for code, like so:"]
// END RANK raw_71

prespace_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_72

literal_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!lua  #export"]
// END RANK literal_73

raw_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  
"]
// END RANK raw_74

prose_66 -> { raw_79 prespace_80 literal_81 raw_82}
{rank=same; raw_79 prespace_80 literal_81 raw_82}

raw_79 [label="raw"]

prespace_80 [label="prespace"]

literal_81 [label="literal"]

raw_82 [label="raw"]


// END RANK prose_66

raw_79 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Found thus, without other attributes, the code block will be appended to
$name-of-file - '.org' + '.lua'.  Subsequent blocks will not need an"]
// END RANK raw_79

prespace_80 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_80

literal_81 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#export"]
// END RANK literal_81

raw_82 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" tag. 
"]
// END RANK raw_82

prose_67 -> { raw_87 prespace_88 literal_89 raw_90 prespace_91 literal_92 raw_93}
{rank=same; raw_87 prespace_88 literal_89 raw_90 prespace_91 literal_92 raw_93}

raw_87 [label="raw"]

prespace_88 [label="prespace"]

literal_89 [label="literal"]

raw_90 [label="raw"]

prespace_91 [label="prespace"]

literal_92 [label="literal"]

raw_93 [label="raw"]


// END RANK prose_67

raw_87 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is somewhat snippy about code organization and will knit "]
// END RANK raw_87

prespace_88 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_88

literal_89 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="org/anything.gm"]
// END RANK literal_89

raw_90 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into"]
// END RANK raw_90

prespace_91 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_91

literal_92 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="src/anything.*"]
// END RANK literal_92

raw_93 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for as many languages as it
encounters.  While this will be configurable at some point, I don't need
or particularly want it to be, at least where the org/src genres are
concerned.

"]
// END RANK raw_93

section_68 -> { header_101 prose_102 prose_103}
{rank=same; header_101 prose_102 prose_103}

header_101 [label="4 : #export #addguards"]

prose_102 [label="prose"]

prose_103 [label="prose"]


// END RANK section_68

header_101 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** #export #addguards"]
// END RANK header_101

prose_102 -> { raw_105}
{rank=same; raw_105}

raw_105 [label="raw"]


// END RANK prose_102

raw_105 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 This will add a language-specific comment line before each line of 
knit source code.
"]
// END RANK raw_105

prose_103 -> { raw_107 prespace_108 literal_109 raw_110}
{rank=same; raw_107 prespace_108 literal_109 raw_110}

raw_107 [label="raw"]

prespace_108 [label="prespace"]

literal_109 [label="literal"]

raw_110 [label="raw"]


// END RANK prose_103

raw_107 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Guards allow for low-stress editing of the knit documents, which can be
unraveled into the source with"]
// END RANK raw_107

prespace_108 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_108

literal_109 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym unravel"]
// END RANK literal_109

raw_110 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", provided guards are in place.

"]
// END RANK raw_110

section_69 -> { header_115 prose_116 prose_117}
{rank=same; header_115 prose_116 prose_117}

header_115 [label="4 : #export «filename»"]

prose_116 [label="prose"]

prose_117 [label="prose"]


// END RANK section_69

header_115 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** #export «filename»"]
// END RANK header_115

prose_116 -> { raw_119 prespace_120 literal_121 raw_122 prespace_123 literal_124 raw_125 prespace_126 literal_127 raw_128}
{rank=same; raw_119 prespace_120 literal_121 raw_122 prespace_123 literal_124 raw_125 prespace_126 literal_127 raw_128}

raw_119 [label="raw"]

prespace_120 [label="prespace"]

literal_121 [label="literal"]

raw_122 [label="raw"]

prespace_123 [label="prespace"]

literal_124 [label="literal"]

raw_125 [label="raw"]

prespace_126 [label="prespace"]

literal_127 [label="literal"]

raw_128 [label="raw"]


// END RANK prose_116

raw_119 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Exports to"]
// END RANK raw_119

prespace_120 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_120

literal_121 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="filename"]
// END RANK literal_121

raw_122 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and sets this as the default path to append code
blocks of that language. The"]
// END RANK raw_122

prespace_123 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_123

literal_124 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="«"]
// END RANK literal_124

raw_125 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_125

prespace_126 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_126

literal_127 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="»"]
// END RANK literal_127

raw_128 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are literal, \" is not a
substitute.
"]
// END RANK raw_128

prose_117 -> { raw_139 prespace_140 literal_141 raw_142 prespace_143 literal_144 raw_145}
{rank=same; raw_139 prespace_140 literal_141 raw_142 prespace_143 literal_144 raw_145}

raw_139 [label="raw"]

prespace_140 [label="prespace"]

literal_141 [label="literal"]

raw_142 [label="raw"]

prespace_143 [label="prespace"]

literal_144 [label="literal"]

raw_145 [label="raw"]


// END RANK prose_117

raw_139 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that a filename starting with"]
// END RANK raw_139

prespace_140 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_140

literal_141 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/"]
// END RANK literal_141

raw_142 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" goes into"]
// END RANK raw_142

prespace_143 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_143

literal_144 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label="…/src/"]
// END RANK literal_144

raw_145 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" by default. 

"]
// END RANK raw_145

section_31 -> { header_153 prose_154 section_155}
{rank=same; header_153 prose_154 section_155}

header_153 [label="3 : #noexport"]

prose_154 [label="prose"]

section_155 [label="section: 89-93"]


// END RANK section_31

header_153 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #noexport"]
// END RANK header_153

prose_154 -> { raw_157 prespace_158 literal_159 raw_160}
{rank=same; raw_157 prespace_158 literal_159 raw_160}

raw_157 [label="raw"]

prespace_158 [label="prespace"]

literal_159 [label="literal"]

raw_160 [label="raw"]


// END RANK prose_154

raw_157 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This behaves as befits an antonym.  Subsequent blocks are"]
// END RANK raw_157

prespace_158 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_158

literal_159 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#noexport"]
// END RANK literal_159

raw_160 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
by default, these act as a toggle.

"]
// END RANK raw_160

section_155 -> { header_165 prose_166}
{rank=same; header_165 prose_166}

header_165 [label="4 : #noexport #this"]

prose_166 [label="prose"]


// END RANK section_155

header_165 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** #noexport #this"]
// END RANK header_165

prose_166 -> { raw_168}
{rank=same; raw_168}

raw_168 [label="raw"]


// END RANK prose_166

raw_168 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Interrupts export for one code block only. 

"]
// END RANK raw_168

section_32 -> { header_170 prose_171 prose_172}
{rank=same; header_170 prose_171 prose_172}

header_170 [label="3 : #EOF, #eof"]

prose_171 [label="prose"]

prose_172 [label="prose"]


// END RANK section_32

header_170 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #EOF, #eof"]
// END RANK header_170

prose_171 -> { raw_174 prespace_175 literal_176 raw_177 prespace_178 literal_179 raw_180 prespace_181 literal_182 raw_183}
{rank=same; raw_174 prespace_175 literal_176 raw_177 prespace_178 literal_179 raw_180 prespace_181 literal_182 raw_183}

raw_174 [label="raw"]

prespace_175 [label="prespace"]

literal_176 [label="literal"]

raw_177 [label="raw"]

prespace_178 [label="prespace"]

literal_179 [label="literal"]

raw_180 [label="raw"]

prespace_181 [label="prespace"]

literal_182 [label="literal"]

raw_183 [label="raw"]


// END RANK prose_171

raw_174 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Two tags of the same meaning.  Intended for the footer line of a code
block, they enforce an end-of-file.  This causes export to end as though"]
// END RANK raw_174

prespace_175 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_175

literal_176 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#noexport"]
// END RANK literal_176

raw_177 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" were used.  It is likely a synonym at first, but with possible
drift since"]
// END RANK raw_177

prespace_178 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_178

literal_179 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#noexport"]
// END RANK literal_179

raw_180 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" might take arguments while"]
// END RANK raw_180

prespace_181 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_181

literal_182 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#EOF"]
// END RANK literal_182

raw_183 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will not.
"]
// END RANK raw_183

prose_172 -> { raw_194 prespace_195 literal_196 raw_197}
{rank=same; raw_194 prespace_195 literal_196 raw_197}

raw_194 [label="raw"]

prespace_195 [label="prespace"]

literal_196 [label="literal"]

raw_197 [label="raw"]


// END RANK prose_172

raw_194 -> leaf_198
leaf_198  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that all-caps versions of most tags are simply ignored, EOF is an
acronym and"]
// END RANK raw_194

prespace_195 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_195

literal_196 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#eof"]
// END RANK literal_196

raw_197 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the redundant synonym.

"]
// END RANK raw_197

section_33 -> { header_202 prose_203 prose_204}
{rank=same; header_202 prose_203 prose_204}

header_202 [label="3 : #embed-doc-as-comment"]

prose_203 [label="prose"]

prose_204 [label="prose"]


// END RANK section_33

header_202 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #embed-doc-as-comment"]
// END RANK header_202

prose_203 -> { raw_206}
{rank=same; raw_206}

raw_206 [label="raw"]


// END RANK prose_203

raw_206 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A top-level directive, this will cause the non-code portions of the
grimoire file to be exported as language-specific comments into the 
knit file.
"]
// END RANK raw_206

prose_204 -> { raw_208 prespace_209 literal_210 raw_211}
{rank=same; raw_208 prespace_209 literal_210 raw_211}

raw_208 [label="raw"]

prespace_209 [label="prespace"]

literal_210 [label="literal"]

raw_211 [label="raw"]


// END RANK prose_204

raw_208 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Paired with"]
// END RANK raw_208

prespace_209 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_209

literal_210 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#addguards"]
// END RANK literal_210

raw_211 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" this will result in two files of the same length.

"]
// END RANK raw_211

section_34 -> { header_216 prose_217 prose_218 prose_219}
{rank=same; header_216 prose_217 prose_218 prose_219}

header_216 [label="3 : #knit"]

prose_217 [label="prose"]

prose_218 [label="prose"]

prose_219 [label="prose"]


// END RANK section_34

header_216 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #knit"]
// END RANK header_216

prose_217 -> { raw_221}
{rank=same; raw_221}

raw_221 [label="raw"]


// END RANK prose_217

raw_221 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Why don't we have this tag?  Knitting is a more general act than
simply concatenating code blocks. 
"]
// END RANK raw_221

prose_218 -> { raw_223}
{rank=same; raw_223}

raw_223 [label="raw"]


// END RANK prose_218

raw_223 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is a history in a few languages, notably Coffeescript and Haskell,
of developing the simple 'linear literate' paradigm as a supported option,
then not really using it. 
"]
// END RANK raw_223

prose_219 -> { raw_225}
{rank=same; raw_225}

raw_225 [label="raw"]


// END RANK prose_219

raw_225 -> leaf_226
leaf_226  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire can and must grow into something greater than this. 

"]
// END RANK raw_225

section_8 -> { header_227 prose_228 prose_229 prose_230 prose_231}
{rank=same; header_227 prose_228 prose_229 prose_230 prose_231}

header_227 [label="2 : Next steps"]

prose_228 [label="prose"]

prose_229 [label="prose"]

prose_230 [label="prose"]

prose_231 [label="prose"]


// END RANK section_8

header_227 -> leaf_232
leaf_232  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Next steps"]
// END RANK header_227

prose_228 -> { raw_233}
{rank=same; raw_233}

raw_233 [label="raw"]


// END RANK prose_228

raw_233 -> leaf_234
leaf_234  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  That might even be enough tags to self-host. It's fairly close at least. 
"]
// END RANK raw_233

prose_229 -> { raw_235 prespace_236 literal_237 raw_238 prespace_239 literal_240 raw_241}
{rank=same; raw_235 prespace_236 literal_237 raw_238 prespace_239 literal_240 raw_241}

raw_235 [label="raw"]

prespace_236 [label="prespace"]

literal_237 [label="literal"]

raw_238 [label="raw"]

prespace_239 [label="prespace"]

literal_240 [label="literal"]

raw_241 [label="raw"]


// END RANK prose_229

raw_235 -> leaf_242
leaf_242  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I can and will write a simple unraveler which relies on a directive to
insert comments between appended blocks.  Since I'm not implementing any 
macro expansion at first, this is simple enough and will allow me to keep
working directly on the"]
// END RANK raw_235

prespace_236 -> leaf_243
leaf_243  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_236

literal_237 -> leaf_244
leaf_244  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".lua"]
// END RANK literal_237

raw_238 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" files while keeping the"]
// END RANK raw_238

prespace_239 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_239

literal_240 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/org"]
// END RANK literal_240

raw_241 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" documents
up to date.
"]
// END RANK raw_241

prose_230 -> { raw_249 prespace_250 literal_251 raw_252 prespace_253 literal_254 raw_255}
{rank=same; raw_249 prespace_250 literal_251 raw_252 prespace_253 literal_254 raw_255}

raw_249 [label="raw"]

prespace_250 [label="prespace"]

literal_251 [label="literal"]

raw_252 [label="raw"]

prespace_253 [label="prespace"]

literal_254 [label="literal"]

raw_255 [label="raw"]


// END RANK prose_230

raw_249 -> leaf_256
leaf_256  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is better for the pipelined version, when we get to"]
// END RANK raw_249

prespace_250 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_250

literal_251 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_251

raw_252 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_252

prespace_253 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_253

literal_254 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_254

raw_255 -> leaf_262
leaf_262  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" we'll have an interactive environment which can provide code-only
views into the actual source document. 
"]
// END RANK raw_255

prose_231 -> { raw_263}
{rank=same; raw_263}

raw_263 [label="raw"]


// END RANK prose_231

raw_263 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's an important tool for bringing existing projects over to Grimoire
format. "]
// END RANK raw_263


}
