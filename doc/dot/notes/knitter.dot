digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 141"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-125"]


section_1 -> { header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8}

header_2 [label="1 : Knitter"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 15-28"]

section_7 [label="section: 29-113"]

section_8 [label="section: 126-141"]


header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Knitter"]
prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  In Dr. Knuth's vision of literate programming, the two paths from source
are called weaving and tangling.  In Grimoire, we weave, but also, knit. 
"]
prose_4 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do not practice to deceive, nor tangle when our web we weave.
"]
prose_5 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The parser is coming together nicely, and we are actually within a day or 
so of being ready to start knitting.  A knitter which suffices to self-host 
grimoire and pegylator only really needs taglines and code blocks, both of
which we are supporting. Huzzah!

"]
section_6 -> { header_16 prose_17 prose_18}
{rank=same; header_16 prose_17 prose_18}

header_16 [label="2 : Rationale"]

prose_17 [label="prose"]

prose_18 [label="prose"]


header_16 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Rationale"]
prose_17 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The change of name goes deeper than aesthetics.  [[https://orgmode.org/worg/org-contrib/babel/][Babel]]
introduces a feedback loop between the enclosing code and the document itself,
a critical development.  We expect to extend this to the weave also, which is 
a browser view into the overall contents of the grimoire.
"]
prose_18 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These interactive elements would be frustrating and error-prone to add without
the editing environment, parse engine, and efficient data structure to back
them.  By contrast, the pipelined approach to producing source code for 
subsequent compiliation is straightforward to implement, and provides the
foundation for writing pure C with some prayer of a good outcome. 

"]
section_7 -> { header_24 prose_25 prose_26 prose_27 prose_28 prose_29 section_30 section_31 section_32 section_33 section_34}
{rank=same; header_24 prose_25 prose_26 prose_27 prose_28 prose_29 section_30 section_31 section_32 section_33 section_34}

header_24 [label="2 : Tag Engine"]

prose_25 [label="prose"]

prose_26 [label="prose"]

prose_27 [label="prose"]

prose_28 [label="prose"]

prose_29 [label="prose"]

section_30 [label="section: 49-73"]

section_31 [label="section: 83-88"]

section_32 [label="section: 94-104"]

section_33 [label="section: 105-113"]

section_34 [label="section: 114-125"]


header_24 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Tag Engine"]
prose_25 -> { raw_36 literal_37 raw_38 literal_39 raw_40}
{rank=same; raw_36 literal_37 raw_38 literal_39 raw_40}

raw_36 [label="raw"]

literal_37 [label="literal"]

raw_38 [label="raw"]

literal_39 [label="literal"]

raw_40 [label="raw"]


raw_36 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  All Grimmorian operations are driven by tag directives.  We have exactly
two types of tag, the "]
literal_37 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#hashtag"]
raw_38 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and the "]
literal_39 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@handle"]
raw_40 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The hashtag is for the
engine, and the handle for userspace. 
"]
prose_26 -> { raw_46 literal_47 raw_48}
{rank=same; raw_46 literal_47 raw_48}

raw_46 [label="raw"]

literal_47 [label="literal"]

raw_48 [label="raw"]


raw_46 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Hashtags handle any library that Grimoire expects to be able to load, user
contributed or core.  Thus "]
literal_47 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#import"]
raw_48 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the base case of hashtag, bringing
a set of tags into the local namespace.
"]
prose_27 -> { raw_52}
{rank=same; raw_52}

raw_52 [label="raw"]


raw_52 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Failing to find a namespace must not be considered an error.  It will be 
warned against and no semantics will be associated with any tags so defined.
"]
prose_28 -> { raw_54}
{rank=same; raw_54}

raw_54 [label="raw"]


raw_54 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire, like any other language in existence, will have a global static
namespace.  We at least intend to offer a separation mark between handle and
name; emacs has done just fine without this, but it's easier on the eyes. 
"]
prose_29 -> { raw_56}
{rank=same; raw_56}

raw_56 [label="raw"]


raw_56 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Here we intend to stick to the tags we need to knit a self-hosting Grimoire. 

"]
section_30 -> { header_58 prose_59 prose_60 prose_61 section_62 section_63}
{rank=same; header_58 prose_59 prose_60 prose_61 section_62 section_63}

header_58 [label="3 : #export"]

prose_59 [label="prose"]

prose_60 [label="prose"]

prose_61 [label="prose"]

section_62 [label="section: 65-73"]

section_63 [label="section: 74-82"]


header_58 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #export"]
prose_59 -> { raw_65 literal_66 raw_67}
{rank=same; raw_65 literal_66 raw_67}

raw_65 [label="raw"]

literal_66 [label="literal"]

raw_67 [label="raw"]


raw_65 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This is a tag one might find in a header block for code, like so:"]
literal_66 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!lua  #export"]
raw_67 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  
"]
prose_60 -> { raw_71 literal_72 raw_73}
{rank=same; raw_71 literal_72 raw_73}

raw_71 [label="raw"]

literal_72 [label="literal"]

raw_73 [label="raw"]


raw_71 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Found thus, without other attributes, the code block will be appended to
$name-of-file - '.org' + '.lua'.  Subsequent blocks will not need an"]
literal_72 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#export"]
raw_73 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" tag. 
"]
prose_61 -> { raw_77 literal_78 raw_79 literal_80 raw_81}
{rank=same; raw_77 literal_78 raw_79 literal_80 raw_81}

raw_77 [label="raw"]

literal_78 [label="literal"]

raw_79 [label="raw"]

literal_80 [label="literal"]

raw_81 [label="raw"]


raw_77 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is somewhat snippy about code organization and will knit "]
literal_78 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="org/anything.gm"]
raw_79 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into "]
literal_80 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="src/anything.*"]
raw_81 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for as many languages as it
encounters.  While this will be configurable at some point, I don't need
or particularly want it to be, at least where the org/src genres are
concerned.

"]
section_62 -> { header_87 prose_88 prose_89}
{rank=same; header_87 prose_88 prose_89}

header_87 [label="4 : #export #addguards"]

prose_88 [label="prose"]

prose_89 [label="prose"]


header_87 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** #export #addguards"]
prose_88 -> { raw_91}
{rank=same; raw_91}

raw_91 [label="raw"]


raw_91 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 This will add a language-specific comment line before each line of 
knit source code.
"]
prose_89 -> { raw_93 literal_94 raw_95}
{rank=same; raw_93 literal_94 raw_95}

raw_93 [label="raw"]

literal_94 [label="literal"]

raw_95 [label="raw"]


raw_93 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Guards allow for low-stress editing of the knit documents, which can be
unraveled into the source with "]
literal_94 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym unravel"]
raw_95 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", provided guards are in place.

"]
section_63 -> { header_99 prose_100 prose_101}
{rank=same; header_99 prose_100 prose_101}

header_99 [label="4 : #export «filename»"]

prose_100 [label="prose"]

prose_101 [label="prose"]


header_99 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** #export «filename»"]
prose_100 -> { raw_103 literal_104 raw_105 literal_106 raw_107 literal_108 raw_109}
{rank=same; raw_103 literal_104 raw_105 literal_106 raw_107 literal_108 raw_109}

raw_103 [label="raw"]

literal_104 [label="literal"]

raw_105 [label="raw"]

literal_106 [label="literal"]

raw_107 [label="raw"]

literal_108 [label="literal"]

raw_109 [label="raw"]


raw_103 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Exports to "]
literal_104 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="filename"]
raw_105 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and sets this as the default path to append code
blocks of that language. The "]
literal_106 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="«"]
raw_107 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
literal_108 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="»"]
raw_109 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are literal, \" is not a
substitute.
"]
prose_101 -> { raw_117 literal_118 raw_119 literal_120 raw_121}
{rank=same; raw_117 literal_118 raw_119 literal_120 raw_121}

raw_117 [label="raw"]

literal_118 [label="literal"]

raw_119 [label="raw"]

literal_120 [label="literal"]

raw_121 [label="raw"]


raw_117 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that a filename starting with "]
literal_118 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/"]
raw_119 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" goes into "]
literal_120 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="…/src/"]
raw_121 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" by default. 

"]
section_31 -> { header_127 prose_128 section_129}
{rank=same; header_127 prose_128 section_129}

header_127 [label="3 : #noexport"]

prose_128 [label="prose"]

section_129 [label="section: 89-93"]


header_127 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #noexport"]
prose_128 -> { raw_131 literal_132 raw_133}
{rank=same; raw_131 literal_132 raw_133}

raw_131 [label="raw"]

literal_132 [label="literal"]

raw_133 [label="raw"]


raw_131 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This behaves as befits an antonym.  Subsequent blocks are "]
literal_132 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#noexport"]
raw_133 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
by default, these act as a toggle.

"]
section_129 -> { header_137 prose_138}
{rank=same; header_137 prose_138}

header_137 [label="4 : #noexport #this"]

prose_138 [label="prose"]


header_137 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** #noexport #this"]
prose_138 -> { raw_140}
{rank=same; raw_140}

raw_140 [label="raw"]


raw_140 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Interrupts export for one code block only. 

"]
section_32 -> { header_142 prose_143 prose_144}
{rank=same; header_142 prose_143 prose_144}

header_142 [label="3 : #EOF, #eof"]

prose_143 [label="prose"]

prose_144 [label="prose"]


header_142 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #EOF, #eof"]
prose_143 -> { raw_146 literal_147 raw_148 literal_149 raw_150 literal_151 raw_152}
{rank=same; raw_146 literal_147 raw_148 literal_149 raw_150 literal_151 raw_152}

raw_146 [label="raw"]

literal_147 [label="literal"]

raw_148 [label="raw"]

literal_149 [label="literal"]

raw_150 [label="raw"]

literal_151 [label="literal"]

raw_152 [label="raw"]


raw_146 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Two tags of the same meaning.  Intended for the footer line of a code
block, they enforce an end-of-file.  This causes export to end as though"]
literal_147 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#noexport"]
raw_148 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" were used.  It is likely a synonym at first, but with possible
drift since "]
literal_149 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#noexport"]
raw_150 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" might take arguments while "]
literal_151 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#EOF"]
raw_152 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will not.
"]
prose_144 -> { raw_160 literal_161 raw_162}
{rank=same; raw_160 literal_161 raw_162}

raw_160 [label="raw"]

literal_161 [label="literal"]

raw_162 [label="raw"]


raw_160 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that all-caps versions of most tags are simply ignored, EOF is an
acronym and "]
literal_161 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#eof"]
raw_162 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the redundant synonym.

"]
section_33 -> { header_166 prose_167 prose_168}
{rank=same; header_166 prose_167 prose_168}

header_166 [label="3 : #embed-doc-as-comment"]

prose_167 [label="prose"]

prose_168 [label="prose"]


header_166 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #embed-doc-as-comment"]
prose_167 -> { raw_170}
{rank=same; raw_170}

raw_170 [label="raw"]


raw_170 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A top-level directive, this will cause the non-code portions of the
grimoire file to be exported as language-specific comments into the 
knit file.
"]
prose_168 -> { raw_172 literal_173 raw_174}
{rank=same; raw_172 literal_173 raw_174}

raw_172 [label="raw"]

literal_173 [label="literal"]

raw_174 [label="raw"]


raw_172 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Paired with "]
literal_173 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#addguards"]
raw_174 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" this will result in two files of the same length.

"]
section_34 -> { header_178 prose_179 prose_180 prose_181}
{rank=same; header_178 prose_179 prose_180 prose_181}

header_178 [label="3 : #knit"]

prose_179 [label="prose"]

prose_180 [label="prose"]

prose_181 [label="prose"]


header_178 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #knit"]
prose_179 -> { raw_183}
{rank=same; raw_183}

raw_183 [label="raw"]


raw_183 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Why don't we have this tag?  Knitting is a more general act than
simply concatenating code blocks. 
"]
prose_180 -> { raw_185}
{rank=same; raw_185}

raw_185 [label="raw"]


raw_185 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is a history in a few languages, notably Coffeescript and Haskell,
of developing the simple 'linear literate' paradigm as a supported option,
then not really using it. 
"]
prose_181 -> { raw_187}
{rank=same; raw_187}

raw_187 [label="raw"]


raw_187 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire can and must grow into something greater than this. 

"]
section_8 -> { header_189 prose_190 prose_191 prose_192 prose_193}
{rank=same; header_189 prose_190 prose_191 prose_192 prose_193}

header_189 [label="2 : Next steps"]

prose_190 [label="prose"]

prose_191 [label="prose"]

prose_192 [label="prose"]

prose_193 [label="prose"]


header_189 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Next steps"]
prose_190 -> { raw_195}
{rank=same; raw_195}

raw_195 [label="raw"]


raw_195 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  That might even be enough tags to self-host. It's fairly close at least. 
"]
prose_191 -> { raw_197 literal_198 raw_199 literal_200 raw_201}
{rank=same; raw_197 literal_198 raw_199 literal_200 raw_201}

raw_197 [label="raw"]

literal_198 [label="literal"]

raw_199 [label="raw"]

literal_200 [label="literal"]

raw_201 [label="raw"]


raw_197 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I can and will write a simple unraveler which relies on a directive to
insert comments between appended blocks.  Since I'm not implementing any 
macro expansion at first, this is simple enough and will allow me to keep
working directly on the "]
literal_198 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".lua"]
raw_199 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" files while keeping the "]
literal_200 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/org"]
raw_201 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" documents
up to date.
"]
prose_192 -> { raw_207 literal_208 raw_209 literal_210 raw_211}
{rank=same; raw_207 literal_208 raw_209 literal_210 raw_211}

raw_207 [label="raw"]

literal_208 [label="literal"]

raw_209 [label="raw"]

literal_210 [label="literal"]

raw_211 [label="raw"]


raw_207 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is better for the pipelined version, when we get to "]
literal_208 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
raw_209 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
literal_210 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
raw_211 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" we'll have an interactive environment which can provide code-only
views into the actual source document. 
"]
prose_193 -> { raw_217}
{rank=same; raw_217}

raw_217 [label="raw"]


raw_217 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's an important tool for bringing existing projects over to Grimoire
format. "]

}
