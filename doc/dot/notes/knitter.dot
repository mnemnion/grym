digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 141"]

doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-14"]

section_1 -> { header_2 block_3 block_4 block_5 section_6 section_7}
{rank=same; header_2 block_3 block_4 block_5 section_6 section_7}

header_2 [label="Knitter"]
block_3 [label="block 1-6"]
block_4 [label="block 7-8"]
block_5 [label="block 9-nil"]
section_6 [label="section: 15-28"]
section_7 [label="section: 126-141"]


block_3 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  In Dr. Knuth's vision of literate programming, the two paths from source
are called weaving and tangling.  In Grimoire, we weave, but also, knit. 

"]
block_4 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We do not practice to deceive, nor tangle when our web we weave.

"]
block_5 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The parser is coming together nicely, and we are actually within a day or 
so of being ready to start knitting.  A knitter which suffices to self-host 
grimoire and pegylator only really needs taglines and code blocks, both of
which we are supporting. Huzzah!


"]section_6 -> { header_11 block_12 block_13 section_14}
{rank=same; header_11 block_12 block_13 section_14}

header_11 [label="Rationale"]
block_12 [label="block 15-21"]
block_13 [label="block 22-nil"]
section_14 [label="section: 29-48"]


block_12 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  The change of name goes deeper than aesthetics.  [[https://orgmode.org/worg/org-contrib/babel/][Babel]]
introduces a feedback loop between the enclosing code and the document itself,
a critical development.  We expect to extend this to the weave also, which is 
a browser view into the overall contents of the grimoire.

"]
block_13 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="These interactive elements would be frustrating and error-prone to add without
the editing environment, parse engine, and efficient data structure to back
them.  By contrast, the pipelined approach to producing source code for 
subsequent compiliation is straightforward to implement, and provides the
foundation for writing pure C with some prayer of a good outcome. 


"]section_14 -> { header_17 block_18 block_19 block_20 block_21 block_22 section_23 section_24 section_25}
{rank=same; header_17 block_18 block_19 block_20 block_21 block_22 section_23 section_24 section_25}

header_17 [label="Tag Engine"]
block_18 [label="block 29-34"]
block_19 [label="block 35-38"]
block_20 [label="block 39-41"]
block_21 [label="block 42-45"]
block_22 [label="block 46-nil"]
section_23 [label="section: 49-64"]
section_24 [label="section: 83-88"]
section_25 [label="section: 94-104"]


block_18 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  All Grimmorian operations are driven by tag directives.  We have exactly
two types of tag, the =#hashtag= and the =@handle=.  The hashtag is for the
engine, and the handle for userspace. 

"]
block_19 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Hashtags handle any library that Grimoire expects to be able to load, user
contributed or core.  Thus =#import= is the base case of hashtag, bringing
a set of tags into the local namespace.

"]
block_20 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Failing to find a namespace must not be considered an error.  It will be 
warned against and no semantics will be associated with any tags so defined.

"]
block_21 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire, like any other language in existence, will have a global static
namespace.  We at least intend to offer a separation mark between handle and
name; emacs has done just fine without this, but it's easier on the eyes. 

"]
block_22 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Here we intend to stick to the tags we need to knit a self-hosting Grimoire. 


"]section_23 -> { header_31 block_32 block_33 block_34 section_35}
{rank=same; header_31 block_32 block_33 block_34 section_35}

header_31 [label="#export"]
block_32 [label="block 49-53"]
block_33 [label="block 54-57"]
block_34 [label="block 58-nil"]
section_35 [label="section: 65-73"]


block_32 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  This is a tag one might find in a header block for code, like so:
=#!lua  #export=.  

"]
block_33 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Found thus, without other attributes, the code block will be appended to
$name-of-file - '.org' + '.lua'.  Subsequent blocks will not need an
=#export= tag. 

"]
block_34 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire is somewhat snippy about code organization and will knit 
=org/anything.gm= into =src/anything.*= for as many languages as it
encounters.  While this will be configurable at some point, I don't need
or particularly want it to be, at least where the org/src genres are
concerned.


"]section_35 -> { header_39 block_40 block_41 section_42}
{rank=same; header_39 block_40 block_41 section_42}

header_39 [label="#export #addguards"]
block_40 [label="block 65-69"]
block_41 [label="block 70-nil"]
section_42 [label="section: 74-82"]


block_40 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 This will add a language-specific comment line before each line of 
knit source code.

"]
block_41 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Guards allow for low-stress editing of the knit documents, which can be
unraveled into the source with =grym unravel=, provided guards are in place.


"]section_42 -> { header_45 block_46 block_47}
{rank=same; header_45 block_46 block_47}

header_45 [label="#export «filename»"]
block_46 [label="block 74-79"]
block_47 [label="block 80-nil"]


block_46 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Exports to =filename=, and sets this as the default path to append code
blocks of that language. The =«= and =»= are literal, \" is not a
substitute.

"]
block_47 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Note that a filename starting with =/= goes into =…/src/= by default. 


"]section_24 -> { header_50 block_51 section_52}
{rank=same; header_50 block_51 section_52}

header_50 [label="#noexport"]
block_51 [label="block 83-nil"]
section_52 [label="section: 89-93"]


block_51 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  This behaves as befits an antonym.  Subsequent blocks are =#noexport=
by default, these act as a toggle.


"]section_52 -> { header_54 block_55}
{rank=same; header_54 block_55}

header_54 [label="#noexport #this"]
block_55 [label="block 89-nil"]


block_55 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Interrupts export for one code block only. 


"]section_25 -> { header_57 block_58 block_59 section_60}
{rank=same; header_57 block_58 block_59 section_60}

header_57 [label="#EOF, #eof"]
block_58 [label="block 94-100"]
block_59 [label="block 101-nil"]
section_60 [label="section: 105-113"]


block_58 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Two tags of the same meaning.  Intended for the footer line of a code
block, they enforce an end-of-file.  This causes export to end as though
=#noexport= were used.  It is likely a synonym at first, but with possible
drift since =#noexport= might take arguments while =#EOF= will not.

"]
block_59 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Note that all-caps versions of most tags are simply ignored, EOF is an
acronym and =#eof= is the redundant synonym.


"]section_60 -> { header_63 block_64 block_65 section_66}
{rank=same; header_63 block_64 block_65 section_66}

header_63 [label="#embed-doc-as-comment"]
block_64 [label="block 105-110"]
block_65 [label="block 111-nil"]
section_66 [label="section: 114-125"]


block_64 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  A top-level directive, this will cause the non-code portions of the
grimoire file to be exported as language-specific comments into the 
knit file.

"]
block_65 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Paired with =#addguards= this will result in two files of the same length.


"]section_66 -> { header_69 block_70 block_71 block_72}
{rank=same; header_69 block_70 block_71 block_72}

header_69 [label="#knit"]
block_70 [label="block 114-118"]
block_71 [label="block 119-122"]
block_72 [label="block 123-nil"]


block_70 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Why don't we have this tag?  Knitting is a more general act than
simply concatenating code blocks. 

"]
block_71 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="There is a history in a few languages, notably Coffeescript and Haskell,
of developing the simple 'linear literate' paradigm as a supported option,
then not really using it. 

"]
block_72 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire can and must grow into something greater than this. 


"]section_7 -> { header_76 block_77 block_78 block_79 block_80}
{rank=same; header_76 block_77 block_78 block_79 block_80}

header_76 [label="Next steps"]
block_77 [label="block 126-129"]
block_78 [label="block 130-135"]
block_79 [label="block 136-139"]
block_80 [label="block 140-nil"]


block_77 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  That might even be enough tags to self-host. It's fairly close at least. 

"]
block_78 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I can and will write a simple unraveler which relies on a directive to
insert comments between appended blocks.  Since I'm not implementing any 
macro expansion at first, this is simple enough and will allow me to keep
working directly on the =.lua= files while keeping the =/org= documents
up to date.

"]
block_79 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This is better for the pipelined version, when we get to =femto= and
=bridge= we'll have an interactive environment which can provide code-only
views into the actual source document. 

"]
block_80 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="It's an important tool for bringing existing projects over to Grimoire
format. 
"]
}
