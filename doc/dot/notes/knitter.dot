digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="41  "]

doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="25  "]

section_1 -> { header_2 block_3 block_4 block_5 section_6 section_7 section_8}
{rank=same; header_2 block_3 block_4 block_5 section_6 section_7 section_8}

header_2 [label="er  "]
block_3 [label="-6  "]
block_4 [label="-8  "]
block_5 [label="25  "]
section_6 [label="28  "]
section_7 [label="13  "]
section_8 [label="41  "]


block_3 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  In Dr. Knuth's vision of literate programming, the two paths from source
are called weaving and tangling.  In Grimoire, we weave, but also, knit. 

"]
block_4 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We do not practice to deceive, nor tangle when our web we weave.

"]
block_5 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The parser is coming together nicely, and we are actually within a day or 
so of being ready to start knitting.  A knitter which suffices to self-host 
grimoire and pegylator only really needs taglines and code blocks, both of
which we are supporting. Huzzah!


"]section_6 -> { header_12 block_13 block_14}
{rank=same; header_12 block_13 block_14}

header_12 [label="le  "]
block_13 [label="21  "]
block_14 [label="28  "]


block_13 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  The change of name goes deeper than aesthetics.  [[https://orgmode.org/worg/org-contrib/babel/][Babel]]
introduces a feedback loop between the enclosing code and the document itself,
a critical development.  We expect to extend this to the weave also, which is 
a browser view into the overall contents of the grimoire.

"]
block_14 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="These interactive elements would be frustrating and error-prone to add without
the editing environment, parse engine, and efficient data structure to back
them.  By contrast, the pipelined approach to producing source code for 
subsequent compiliation is straightforward to implement, and provides the
foundation for writing pure C with some prayer of a good outcome. 


"]section_7 -> { header_17 block_18 block_19 block_20 block_21 block_22 section_23 section_24 section_25 section_26 section_27}
{rank=same; header_17 block_18 block_19 block_20 block_21 block_22 section_23 section_24 section_25 section_26 section_27}

header_17 [label="ne  "]
block_18 [label="34  "]
block_19 [label="38  "]
block_20 [label="41  "]
block_21 [label="45  "]
block_22 [label="13  "]
section_23 [label="73  "]
section_24 [label="88  "]
section_25 [label="04  "]
section_26 [label="13  "]
section_27 [label="25  "]


block_18 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  All Grimmorian operations are driven by tag directives.  We have exactly
two types of tag, the =#hashtag= and the =@handle=.  The hashtag is for the
engine, and the handle for userspace. 

"]
block_19 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Hashtags handle any library that Grimoire expects to be able to load, user
contributed or core.  Thus =#import= is the base case of hashtag, bringing
a set of tags into the local namespace.

"]
block_20 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Failing to find a namespace must not be considered an error.  It will be 
warned against and no semantics will be associated with any tags so defined.

"]
block_21 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire, like any other language in existence, will have a global static
namespace.  We at least intend to offer a separation mark between handle and
name; emacs has done just fine without this, but it's easier on the eyes. 

"]
block_22 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Here we intend to stick to the tags we need to knit a self-hosting Grimoire. 


"]section_23 -> { header_33 block_34 block_35 block_36 section_37 section_38}
{rank=same; header_33 block_34 block_35 block_36 section_37 section_38}

header_33 [label="rt  "]
block_34 [label="53  "]
block_35 [label="57  "]
block_36 [label="73  "]
section_37 [label="73  "]
section_38 [label="82  "]


block_34 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  This is a tag one might find in a header block for code, like so:
=#!lua  #export=.  

"]
block_35 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Found thus, without other attributes, the code block will be appended to
$name-of-file - '.org' + '.lua'.  Subsequent blocks will not need an
=#export= tag. 

"]
block_36 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire is somewhat snippy about code organization and will knit 
=org/anything.gm= into =src/anything.*= for as many languages as it
encounters.  While this will be configurable at some point, I don't need
or particularly want it to be, at least where the org/src genres are
concerned.


"]section_37 -> { header_42 block_43 block_44}
{rank=same; header_42 block_43 block_44}

header_42 [label="ds  "]
block_43 [label="69  "]
block_44 [label="73  "]


block_43 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 This will add a language-specific comment line before each line of 
knit source code.

"]
block_44 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Guards allow for low-stress editing of the knit documents, which can be
unraveled into the source with =grym unravel=, provided guards are in place.


"]section_38 -> { header_47 block_48 block_49}
{rank=same; header_47 block_48 block_49}

header_47 [label="»  "]
block_48 [label="79  "]
block_49 [label="82  "]


block_48 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Exports to =filename=, and sets this as the default path to append code
blocks of that language. The =«= and =»= are literal, \" is not a
substitute.

"]
block_49 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Note that a filename starting with =/= goes into =…/src/= by default. 


"]section_24 -> { header_52 block_53 section_54}
{rank=same; header_52 block_53 section_54}

header_52 [label="rt  "]
block_53 [label="88  "]
section_54 [label="93  "]


block_53 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  This behaves as befits an antonym.  Subsequent blocks are =#noexport=
by default, these act as a toggle.


"]section_54 -> { header_56 block_57}
{rank=same; header_56 block_57}

header_56 [label="is  "]
block_57 [label="93  "]


block_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Interrupts export for one code block only. 


"]section_25 -> { header_59 block_60 block_61}
{rank=same; header_59 block_60 block_61}

header_59 [label="of  "]
block_60 [label="00  "]
block_61 [label="04  "]


block_60 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Two tags of the same meaning.  Intended for the footer line of a code
block, they enforce an end-of-file.  This causes export to end as though
=#noexport= were used.  It is likely a synonym at first, but with possible
drift since =#noexport= might take arguments while =#EOF= will not.

"]
block_61 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Note that all-caps versions of most tags are simply ignored, EOF is an
acronym and =#eof= is the redundant synonym.


"]section_26 -> { header_64 block_65 block_66}
{rank=same; header_64 block_65 block_66}

header_64 [label="nt  "]
block_65 [label="10  "]
block_66 [label="13  "]


block_65 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  A top-level directive, this will cause the non-code portions of the
grimoire file to be exported as language-specific comments into the 
knit file.

"]
block_66 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Paired with =#addguards= this will result in two files of the same length.


"]section_27 -> { header_69 block_70 block_71 block_72}
{rank=same; header_69 block_70 block_71 block_72}

header_69 [label="it  "]
block_70 [label="18  "]
block_71 [label="22  "]
block_72 [label="25  "]


block_70 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Why don't we have this tag?  Knitting is a more general act than
simply concatenating code blocks. 

"]
block_71 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="There is a history in a few languages, notably Coffeescript and Haskell,
of developing the simple 'linear literate' paradigm as a supported option,
then not really using it. 

"]
block_72 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire can and must grow into something greater than this. 


"]section_8 -> { header_76 block_77 block_78 block_79 block_80}
{rank=same; header_76 block_77 block_78 block_79 block_80}

header_76 [label="ps  "]
block_77 [label="29  "]
block_78 [label="35  "]
block_79 [label="39  "]
block_80 [label="41  "]


block_77 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  That might even be enough tags to self-host. It's fairly close at least. 

"]
block_78 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I can and will write a simple unraveler which relies on a directive to
insert comments between appended blocks.  Since I'm not implementing any 
macro expansion at first, this is simple enough and will allow me to keep
working directly on the =.lua= files while keeping the =/org= documents
up to date.

"]
block_79 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This is better for the pipelined version, when we get to =femto= and
=bridge= we'll have an interactive environment which can provide code-only
views into the actual source document. 

"]
block_80 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="It's an important tool for bringing existing projects over to Grimoire
format. 
"]
}
