digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 141"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-125"]


section_1 -> { header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8}

header_2 [label="1 : Knitter"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 15-28"]

section_7 [label="section: 29-113"]

section_8 [label="section: 126-141"]


header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Knitter"]
prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  In Dr. Knuth's vision of literate programming, the two paths from source
are called weaving and tangling.  In Grimoire, we weave, but also, knit. 
"]
prose_4 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do not practice to deceive, nor tangle when our web we weave.
"]
prose_5 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The parser is coming together nicely, and we are actually within a day or 
so of being ready to start knitting.  A knitter which suffices to self-host 
grimoire and pegylator only really needs taglines and code blocks, both of
which we are supporting. Huzzah!

"]
section_6 -> { header_16 prose_17 prose_18}
{rank=same; header_16 prose_17 prose_18}

header_16 [label="2 : Rationale"]

prose_17 [label="prose"]

prose_18 [label="prose"]


header_16 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Rationale"]
prose_17 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The change of name goes deeper than aesthetics.  [[https://orgmode.org/worg/org-contrib/babel/][Babel]]
introduces a feedback loop between the enclosing code and the document itself,
a critical development.  We expect to extend this to the weave also, which is 
a browser view into the overall contents of the grimoire.
"]
prose_18 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These interactive elements would be frustrating and error-prone to add without
the editing environment, parse engine, and efficient data structure to back
them.  By contrast, the pipelined approach to producing source code for 
subsequent compiliation is straightforward to implement, and provides the
foundation for writing pure C with some prayer of a good outcome. 

"]
section_7 -> { header_24 prose_25 prose_26 prose_27 prose_28 prose_29 section_30 section_31 section_32 section_33 section_34}
{rank=same; header_24 prose_25 prose_26 prose_27 prose_28 prose_29 section_30 section_31 section_32 section_33 section_34}

header_24 [label="2 : Tag Engine"]

prose_25 [label="prose"]

prose_26 [label="prose"]

prose_27 [label="prose"]

prose_28 [label="prose"]

prose_29 [label="prose"]

section_30 [label="section: 49-73"]

section_31 [label="section: 83-88"]

section_32 [label="section: 94-104"]

section_33 [label="section: 105-113"]

section_34 [label="section: 114-125"]


header_24 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Tag Engine"]
prose_25 -> { raw_36}
{rank=same; raw_36}

raw_36 [label="raw"]


raw_36 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  All Grimmorian operations are driven by tag directives.  We have exactly
two types of tag, the =#hashtag= and the =@handle=.  The hashtag is for the
engine, and the handle for userspace. 
"]
prose_26 -> { raw_38}
{rank=same; raw_38}

raw_38 [label="raw"]


raw_38 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Hashtags handle any library that Grimoire expects to be able to load, user
contributed or core.  Thus =#import= is the base case of hashtag, bringing
a set of tags into the local namespace.
"]
prose_27 -> { raw_40}
{rank=same; raw_40}

raw_40 [label="raw"]


raw_40 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Failing to find a namespace must not be considered an error.  It will be 
warned against and no semantics will be associated with any tags so defined.
"]
prose_28 -> { raw_42}
{rank=same; raw_42}

raw_42 [label="raw"]


raw_42 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire, like any other language in existence, will have a global static
namespace.  We at least intend to offer a separation mark between handle and
name; emacs has done just fine without this, but it's easier on the eyes. 
"]
prose_29 -> { raw_44}
{rank=same; raw_44}

raw_44 [label="raw"]


raw_44 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Here we intend to stick to the tags we need to knit a self-hosting Grimoire. 

"]
section_30 -> { header_46 prose_47 prose_48 prose_49 section_50 section_51}
{rank=same; header_46 prose_47 prose_48 prose_49 section_50 section_51}

header_46 [label="3 : #export"]

prose_47 [label="prose"]

prose_48 [label="prose"]

prose_49 [label="prose"]

section_50 [label="section: 65-73"]

section_51 [label="section: 74-82"]


header_46 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #export"]
prose_47 -> { raw_53}
{rank=same; raw_53}

raw_53 [label="raw"]


raw_53 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This is a tag one might find in a header block for code, like so:
=#!lua  #export=.  
"]
prose_48 -> { raw_55}
{rank=same; raw_55}

raw_55 [label="raw"]


raw_55 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Found thus, without other attributes, the code block will be appended to
$name-of-file - '.org' + '.lua'.  Subsequent blocks will not need an
=#export= tag. 
"]
prose_49 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is somewhat snippy about code organization and will knit 
=org/anything.gm= into =src/anything.*= for as many languages as it
encounters.  While this will be configurable at some point, I don't need
or particularly want it to be, at least where the org/src genres are
concerned.

"]
section_50 -> { header_59 prose_60 prose_61}
{rank=same; header_59 prose_60 prose_61}

header_59 [label="4 : #export #addguards"]

prose_60 [label="prose"]

prose_61 [label="prose"]


header_59 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** #export #addguards"]
prose_60 -> { raw_63}
{rank=same; raw_63}

raw_63 [label="raw"]


raw_63 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 This will add a language-specific comment line before each line of 
knit source code.
"]
prose_61 -> { raw_65}
{rank=same; raw_65}

raw_65 [label="raw"]


raw_65 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Guards allow for low-stress editing of the knit documents, which can be
unraveled into the source with =grym unravel=, provided guards are in place.

"]
section_51 -> { header_67 prose_68 prose_69}
{rank=same; header_67 prose_68 prose_69}

header_67 [label="4 : #export «filename»"]

prose_68 [label="prose"]

prose_69 [label="prose"]


header_67 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** #export «filename»"]
prose_68 -> { raw_71}
{rank=same; raw_71}

raw_71 [label="raw"]


raw_71 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Exports to =filename=, and sets this as the default path to append code
blocks of that language. The =«= and =»= are literal, \" is not a
substitute.
"]
prose_69 -> { raw_73}
{rank=same; raw_73}

raw_73 [label="raw"]


raw_73 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that a filename starting with =/= goes into =…/src/= by default. 

"]
section_31 -> { header_75 prose_76 section_77}
{rank=same; header_75 prose_76 section_77}

header_75 [label="3 : #noexport"]

prose_76 [label="prose"]

section_77 [label="section: 89-93"]


header_75 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #noexport"]
prose_76 -> { raw_79}
{rank=same; raw_79}

raw_79 [label="raw"]


raw_79 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This behaves as befits an antonym.  Subsequent blocks are =#noexport=
by default, these act as a toggle.

"]
section_77 -> { header_81 prose_82}
{rank=same; header_81 prose_82}

header_81 [label="4 : #noexport #this"]

prose_82 [label="prose"]


header_81 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** #noexport #this"]
prose_82 -> { raw_84}
{rank=same; raw_84}

raw_84 [label="raw"]


raw_84 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Interrupts export for one code block only. 

"]
section_32 -> { header_86 prose_87 prose_88}
{rank=same; header_86 prose_87 prose_88}

header_86 [label="3 : #EOF, #eof"]

prose_87 [label="prose"]

prose_88 [label="prose"]


header_86 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #EOF, #eof"]
prose_87 -> { raw_90}
{rank=same; raw_90}

raw_90 [label="raw"]


raw_90 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Two tags of the same meaning.  Intended for the footer line of a code
block, they enforce an end-of-file.  This causes export to end as though
=#noexport= were used.  It is likely a synonym at first, but with possible
drift since =#noexport= might take arguments while =#EOF= will not.
"]
prose_88 -> { raw_92}
{rank=same; raw_92}

raw_92 [label="raw"]


raw_92 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that all-caps versions of most tags are simply ignored, EOF is an
acronym and =#eof= is the redundant synonym.

"]
section_33 -> { header_94 prose_95 prose_96}
{rank=same; header_94 prose_95 prose_96}

header_94 [label="3 : #embed-doc-as-comment"]

prose_95 [label="prose"]

prose_96 [label="prose"]


header_94 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #embed-doc-as-comment"]
prose_95 -> { raw_98}
{rank=same; raw_98}

raw_98 [label="raw"]


raw_98 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A top-level directive, this will cause the non-code portions of the
grimoire file to be exported as language-specific comments into the 
knit file.
"]
prose_96 -> { raw_100}
{rank=same; raw_100}

raw_100 [label="raw"]


raw_100 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Paired with =#addguards= this will result in two files of the same length.

"]
section_34 -> { header_102 prose_103 prose_104 prose_105}
{rank=same; header_102 prose_103 prose_104 prose_105}

header_102 [label="3 : #knit"]

prose_103 [label="prose"]

prose_104 [label="prose"]

prose_105 [label="prose"]


header_102 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #knit"]
prose_103 -> { raw_107}
{rank=same; raw_107}

raw_107 [label="raw"]


raw_107 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Why don't we have this tag?  Knitting is a more general act than
simply concatenating code blocks. 
"]
prose_104 -> { raw_109}
{rank=same; raw_109}

raw_109 [label="raw"]


raw_109 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is a history in a few languages, notably Coffeescript and Haskell,
of developing the simple 'linear literate' paradigm as a supported option,
then not really using it. 
"]
prose_105 -> { raw_111}
{rank=same; raw_111}

raw_111 [label="raw"]


raw_111 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire can and must grow into something greater than this. 

"]
section_8 -> { header_113 prose_114 prose_115 prose_116 prose_117}
{rank=same; header_113 prose_114 prose_115 prose_116 prose_117}

header_113 [label="2 : Next steps"]

prose_114 [label="prose"]

prose_115 [label="prose"]

prose_116 [label="prose"]

prose_117 [label="prose"]


header_113 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Next steps"]
prose_114 -> { raw_119}
{rank=same; raw_119}

raw_119 [label="raw"]


raw_119 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  That might even be enough tags to self-host. It's fairly close at least. 
"]
prose_115 -> { raw_121}
{rank=same; raw_121}

raw_121 [label="raw"]


raw_121 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I can and will write a simple unraveler which relies on a directive to
insert comments between appended blocks.  Since I'm not implementing any 
macro expansion at first, this is simple enough and will allow me to keep
working directly on the =.lua= files while keeping the =/org= documents
up to date.
"]
prose_116 -> { raw_123}
{rank=same; raw_123}

raw_123 [label="raw"]


raw_123 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is better for the pipelined version, when we get to =femto= and
=bridge= we'll have an interactive environment which can provide code-only
views into the actual source document. 
"]
prose_117 -> { raw_125}
{rank=same; raw_125}

raw_125 [label="raw"]


raw_125 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's an important tool for bringing existing projects over to Grimoire
format. "]

}
