digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 141"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-125"]


section_1 -> { header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8}

header_2 [label="1 : Knitter"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 15-28"]

section_7 [label="section: 29-113"]

section_8 [label="section: 126-141"]


header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Knitter"]
prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  In Dr. Knuth's vision of literate programming, the two paths from source
are called weaving and tangling.  In Grimoire, we weave, but also, knit. 
"]
prose_4 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do not practice to deceive, nor tangle when our web we weave.
"]
prose_5 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The parser is coming together nicely, and we are actually within a day or 
so of being ready to start knitting.  A knitter which suffices to self-host 
grimoire and pegylator only really needs taglines and code blocks, both of
which we are supporting. Huzzah!

"]
section_6 -> { header_16 prose_17 prose_18}
{rank=same; header_16 prose_17 prose_18}

header_16 [label="2 : Rationale"]

prose_17 [label="prose"]

prose_18 [label="prose"]


header_16 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Rationale"]
prose_17 -> { raw_20 italic_21 raw_22 italic_23 raw_24}
{rank=same; raw_20 italic_21 raw_22 italic_23 raw_24}

raw_20 [label="raw"]

italic_21 [label="italic"]

raw_22 [label="raw"]

italic_23 [label="italic"]

raw_24 [label="raw"]


raw_20 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The change of name goes deeper than aesthetics.  [[https:/"]
italic_21 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orgmode.org"]
raw_22 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="worg"]
italic_23 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="org-contrib"]
raw_24 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="babel/][Babel]]
introduces a feedback loop between the enclosing code and the document itself,
a critical development.  We expect to extend this to the weave also, which is 
a browser view into the overall contents of the grimoire.
"]
prose_18 -> { raw_30}
{rank=same; raw_30}

raw_30 [label="raw"]


raw_30 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These interactive elements would be frustrating and error-prone to add without
the editing environment, parse engine, and efficient data structure to back
them.  By contrast, the pipelined approach to producing source code for 
subsequent compiliation is straightforward to implement, and provides the
foundation for writing pure C with some prayer of a good outcome. 

"]
section_7 -> { header_32 prose_33 prose_34 prose_35 prose_36 prose_37 section_38 section_39 section_40 section_41 section_42}
{rank=same; header_32 prose_33 prose_34 prose_35 prose_36 prose_37 section_38 section_39 section_40 section_41 section_42}

header_32 [label="2 : Tag Engine"]

prose_33 [label="prose"]

prose_34 [label="prose"]

prose_35 [label="prose"]

prose_36 [label="prose"]

prose_37 [label="prose"]

section_38 [label="section: 49-73"]

section_39 [label="section: 83-88"]

section_40 [label="section: 94-104"]

section_41 [label="section: 105-113"]

section_42 [label="section: 114-125"]


header_32 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Tag Engine"]
prose_33 -> { raw_44 literal_45 raw_46 literal_47 raw_48}
{rank=same; raw_44 literal_45 raw_46 literal_47 raw_48}

raw_44 [label="raw"]

literal_45 [label="literal"]

raw_46 [label="raw"]

literal_47 [label="literal"]

raw_48 [label="raw"]


raw_44 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  All Grimmorian operations are driven by tag directives.  We have exactly
two types of tag, the "]
literal_45 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#hashtag"]
raw_46 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and the "]
literal_47 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@handle"]
raw_48 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The hashtag is for the
engine, and the handle for userspace. 
"]
prose_34 -> { raw_54 literal_55 raw_56}
{rank=same; raw_54 literal_55 raw_56}

raw_54 [label="raw"]

literal_55 [label="literal"]

raw_56 [label="raw"]


raw_54 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Hashtags handle any library that Grimoire expects to be able to load, user
contributed or core.  Thus "]
literal_55 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#import"]
raw_56 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the base case of hashtag, bringing
a set of tags into the local namespace.
"]
prose_35 -> { raw_60}
{rank=same; raw_60}

raw_60 [label="raw"]


raw_60 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Failing to find a namespace must not be considered an error.  It will be 
warned against and no semantics will be associated with any tags so defined.
"]
prose_36 -> { raw_62}
{rank=same; raw_62}

raw_62 [label="raw"]


raw_62 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire, like any other language in existence, will have a global static
namespace.  We at least intend to offer a separation mark between handle and
name; emacs has done just fine without this, but it's easier on the eyes. 
"]
prose_37 -> { raw_64}
{rank=same; raw_64}

raw_64 [label="raw"]


raw_64 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Here we intend to stick to the tags we need to knit a self-hosting Grimoire. 

"]
section_38 -> { header_66 prose_67 prose_68 prose_69 section_70 section_71}
{rank=same; header_66 prose_67 prose_68 prose_69 section_70 section_71}

header_66 [label="3 : #export"]

prose_67 [label="prose"]

prose_68 [label="prose"]

prose_69 [label="prose"]

section_70 [label="section: 65-73"]

section_71 [label="section: 74-82"]


header_66 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #export"]
prose_67 -> { raw_73 literal_74 raw_75}
{rank=same; raw_73 literal_74 raw_75}

raw_73 [label="raw"]

literal_74 [label="literal"]

raw_75 [label="raw"]


raw_73 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This is a tag one might find in a header block for code, like so:"]
literal_74 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!lua  #export"]
raw_75 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  
"]
prose_68 -> { raw_79 literal_80 raw_81}
{rank=same; raw_79 literal_80 raw_81}

raw_79 [label="raw"]

literal_80 [label="literal"]

raw_81 [label="raw"]


raw_79 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Found thus, without other attributes, the code block will be appended to
$name-of-file - '.org' + '.lua'.  Subsequent blocks will not need an"]
literal_80 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#export"]
raw_81 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" tag. 
"]
prose_69 -> { raw_85 literal_86 raw_87 literal_88 raw_89}
{rank=same; raw_85 literal_86 raw_87 literal_88 raw_89}

raw_85 [label="raw"]

literal_86 [label="literal"]

raw_87 [label="raw"]

literal_88 [label="literal"]

raw_89 [label="raw"]


raw_85 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is somewhat snippy about code organization and will knit "]
literal_86 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="org/anything.gm"]
raw_87 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" into "]
literal_88 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="src/anything.*"]
raw_89 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for as many languages as it
encounters.  While this will be configurable at some point, I don't need
or particularly want it to be, at least where the org/src genres are
concerned.

"]
section_70 -> { header_95 prose_96 prose_97}
{rank=same; header_95 prose_96 prose_97}

header_95 [label="4 : #export #addguards"]

prose_96 [label="prose"]

prose_97 [label="prose"]


header_95 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** #export #addguards"]
prose_96 -> { raw_99}
{rank=same; raw_99}

raw_99 [label="raw"]


raw_99 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 This will add a language-specific comment line before each line of 
knit source code.
"]
prose_97 -> { raw_101 literal_102 raw_103}
{rank=same; raw_101 literal_102 raw_103}

raw_101 [label="raw"]

literal_102 [label="literal"]

raw_103 [label="raw"]


raw_101 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Guards allow for low-stress editing of the knit documents, which can be
unraveled into the source with "]
literal_102 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym unravel"]
raw_103 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", provided guards are in place.

"]
section_71 -> { header_107 prose_108 prose_109}
{rank=same; header_107 prose_108 prose_109}

header_107 [label="4 : #export «filename»"]

prose_108 [label="prose"]

prose_109 [label="prose"]


header_107 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** #export «filename»"]
prose_108 -> { raw_111 literal_112 raw_113 literal_114 raw_115 literal_116 raw_117}
{rank=same; raw_111 literal_112 raw_113 literal_114 raw_115 literal_116 raw_117}

raw_111 [label="raw"]

literal_112 [label="literal"]

raw_113 [label="raw"]

literal_114 [label="literal"]

raw_115 [label="raw"]

literal_116 [label="literal"]

raw_117 [label="raw"]


raw_111 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Exports to "]
literal_112 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="filename"]
raw_113 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and sets this as the default path to append code
blocks of that language. The "]
literal_114 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="«"]
raw_115 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
literal_116 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label="»"]
raw_117 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are literal, \" is not a
substitute.
"]
prose_109 -> { raw_125 literal_126 raw_127 literal_128 raw_129}
{rank=same; raw_125 literal_126 raw_127 literal_128 raw_129}

raw_125 [label="raw"]

literal_126 [label="literal"]

raw_127 [label="raw"]

literal_128 [label="literal"]

raw_129 [label="raw"]


raw_125 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that a filename starting with "]
literal_126 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/"]
raw_127 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" goes into "]
literal_128 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="…/src/"]
raw_129 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" by default. 

"]
section_39 -> { header_135 prose_136 section_137}
{rank=same; header_135 prose_136 section_137}

header_135 [label="3 : #noexport"]

prose_136 [label="prose"]

section_137 [label="section: 89-93"]


header_135 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #noexport"]
prose_136 -> { raw_139 literal_140 raw_141}
{rank=same; raw_139 literal_140 raw_141}

raw_139 [label="raw"]

literal_140 [label="literal"]

raw_141 [label="raw"]


raw_139 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This behaves as befits an antonym.  Subsequent blocks are "]
literal_140 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#noexport"]
raw_141 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
by default, these act as a toggle.

"]
section_137 -> { header_145 prose_146}
{rank=same; header_145 prose_146}

header_145 [label="4 : #noexport #this"]

prose_146 [label="prose"]


header_145 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** #noexport #this"]
prose_146 -> { raw_148}
{rank=same; raw_148}

raw_148 [label="raw"]


raw_148 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Interrupts export for one code block only. 

"]
section_40 -> { header_150 prose_151 prose_152}
{rank=same; header_150 prose_151 prose_152}

header_150 [label="3 : #EOF, #eof"]

prose_151 [label="prose"]

prose_152 [label="prose"]


header_150 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #EOF, #eof"]
prose_151 -> { raw_154 literal_155 raw_156 literal_157 raw_158 literal_159 raw_160}
{rank=same; raw_154 literal_155 raw_156 literal_157 raw_158 literal_159 raw_160}

raw_154 [label="raw"]

literal_155 [label="literal"]

raw_156 [label="raw"]

literal_157 [label="literal"]

raw_158 [label="raw"]

literal_159 [label="literal"]

raw_160 [label="raw"]


raw_154 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Two tags of the same meaning.  Intended for the footer line of a code
block, they enforce an end-of-file.  This causes export to end as though"]
literal_155 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#noexport"]
raw_156 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" were used.  It is likely a synonym at first, but with possible
drift since "]
literal_157 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#noexport"]
raw_158 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" might take arguments while "]
literal_159 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#EOF"]
raw_160 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will not.
"]
prose_152 -> { raw_168 literal_169 raw_170}
{rank=same; raw_168 literal_169 raw_170}

raw_168 [label="raw"]

literal_169 [label="literal"]

raw_170 [label="raw"]


raw_168 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that all-caps versions of most tags are simply ignored, EOF is an
acronym and "]
literal_169 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#eof"]
raw_170 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the redundant synonym.

"]
section_41 -> { header_174 prose_175 prose_176}
{rank=same; header_174 prose_175 prose_176}

header_174 [label="3 : #embed-doc-as-comment"]

prose_175 [label="prose"]

prose_176 [label="prose"]


header_174 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #embed-doc-as-comment"]
prose_175 -> { raw_178}
{rank=same; raw_178}

raw_178 [label="raw"]


raw_178 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A top-level directive, this will cause the non-code portions of the
grimoire file to be exported as language-specific comments into the 
knit file.
"]
prose_176 -> { raw_180 literal_181 raw_182}
{rank=same; raw_180 literal_181 raw_182}

raw_180 [label="raw"]

literal_181 [label="literal"]

raw_182 [label="raw"]


raw_180 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Paired with "]
literal_181 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#addguards"]
raw_182 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" this will result in two files of the same length.

"]
section_42 -> { header_186 prose_187 prose_188 prose_189}
{rank=same; header_186 prose_187 prose_188 prose_189}

header_186 [label="3 : #knit"]

prose_187 [label="prose"]

prose_188 [label="prose"]

prose_189 [label="prose"]


header_186 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** #knit"]
prose_187 -> { raw_191}
{rank=same; raw_191}

raw_191 [label="raw"]


raw_191 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Why don't we have this tag?  Knitting is a more general act than
simply concatenating code blocks. 
"]
prose_188 -> { raw_193}
{rank=same; raw_193}

raw_193 [label="raw"]


raw_193 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is a history in a few languages, notably Coffeescript and Haskell,
of developing the simple 'linear literate' paradigm as a supported option,
then not really using it. 
"]
prose_189 -> { raw_195}
{rank=same; raw_195}

raw_195 [label="raw"]


raw_195 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire can and must grow into something greater than this. 

"]
section_8 -> { header_197 prose_198 prose_199 prose_200 prose_201}
{rank=same; header_197 prose_198 prose_199 prose_200 prose_201}

header_197 [label="2 : Next steps"]

prose_198 [label="prose"]

prose_199 [label="prose"]

prose_200 [label="prose"]

prose_201 [label="prose"]


header_197 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Next steps"]
prose_198 -> { raw_203}
{rank=same; raw_203}

raw_203 [label="raw"]


raw_203 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  That might even be enough tags to self-host. It's fairly close at least. 
"]
prose_199 -> { raw_205 literal_206 raw_207 literal_208 raw_209}
{rank=same; raw_205 literal_206 raw_207 literal_208 raw_209}

raw_205 [label="raw"]

literal_206 [label="literal"]

raw_207 [label="raw"]

literal_208 [label="literal"]

raw_209 [label="raw"]


raw_205 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I can and will write a simple unraveler which relies on a directive to
insert comments between appended blocks.  Since I'm not implementing any 
macro expansion at first, this is simple enough and will allow me to keep
working directly on the "]
literal_206 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".lua"]
raw_207 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" files while keeping the "]
literal_208 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/org"]
raw_209 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" documents
up to date.
"]
prose_200 -> { raw_215 literal_216 raw_217 literal_218 raw_219}
{rank=same; raw_215 literal_216 raw_217 literal_218 raw_219}

raw_215 [label="raw"]

literal_216 [label="literal"]

raw_217 [label="raw"]

literal_218 [label="literal"]

raw_219 [label="raw"]


raw_215 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is better for the pipelined version, when we get to "]
literal_216 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
raw_217 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
literal_218 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
raw_219 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" we'll have an interactive environment which can provide code-only
views into the actual source document. 
"]
prose_201 -> { raw_225}
{rank=same; raw_225}

raw_225 [label="raw"]


raw_225 -> leaf_226
leaf_226  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's an important tool for bringing existing projects over to Grimoire
format. "]

}
