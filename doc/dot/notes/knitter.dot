digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 141"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-125"]


section_1 -> { header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8}

header_2 [label="1 : Knitter"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 15-28"]

section_7 [label="section: 29-113"]

section_8 [label="section: 126-141"]


prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  In Dr. Knuth's vision of literate programming, the two paths from source
are called weaving and tangling.  In Grimoire, we weave, but also, knit. 
"]
prose_4 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do not practice to deceive, nor tangle when our web we weave.
"]
prose_5 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The parser is coming together nicely, and we are actually within a day or 
so of being ready to start knitting.  A knitter which suffices to self-host 
grimoire and pegylator only really needs taglines and code blocks, both of
which we are supporting. Huzzah!

"]
section_6 -> { header_15 prose_16 prose_17}
{rank=same; header_15 prose_16 prose_17}

header_15 [label="2 : Rationale"]

prose_16 [label="prose"]

prose_17 [label="prose"]


prose_16 -> { raw_18}
{rank=same; raw_18}

raw_18 [label="raw"]


raw_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The change of name goes deeper than aesthetics.  [[https://orgmode.org/worg/org-contrib/babel/][Babel]]
introduces a feedback loop between the enclosing code and the document itself,
a critical development.  We expect to extend this to the weave also, which is 
a browser view into the overall contents of the grimoire.
"]
prose_17 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These interactive elements would be frustrating and error-prone to add without
the editing environment, parse engine, and efficient data structure to back
them.  By contrast, the pipelined approach to producing source code for 
subsequent compiliation is straightforward to implement, and provides the
foundation for writing pure C with some prayer of a good outcome. 

"]
section_7 -> { header_22 prose_23 prose_24 prose_25 prose_26 prose_27 section_28 section_29 section_30 section_31 section_32}
{rank=same; header_22 prose_23 prose_24 prose_25 prose_26 prose_27 section_28 section_29 section_30 section_31 section_32}

header_22 [label="2 : Tag Engine"]

prose_23 [label="prose"]

prose_24 [label="prose"]

prose_25 [label="prose"]

prose_26 [label="prose"]

prose_27 [label="prose"]

section_28 [label="section: 49-73"]

section_29 [label="section: 83-88"]

section_30 [label="section: 94-104"]

section_31 [label="section: 105-113"]

section_32 [label="section: 114-125"]


prose_23 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  All Grimmorian operations are driven by tag directives.  We have exactly
two types of tag, the =#hashtag= and the =@handle=.  The hashtag is for the
engine, and the handle for userspace. 
"]
prose_24 -> { raw_35}
{rank=same; raw_35}

raw_35 [label="raw"]


raw_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Hashtags handle any library that Grimoire expects to be able to load, user
contributed or core.  Thus =#import= is the base case of hashtag, bringing
a set of tags into the local namespace.
"]
prose_25 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Failing to find a namespace must not be considered an error.  It will be 
warned against and no semantics will be associated with any tags so defined.
"]
prose_26 -> { raw_39}
{rank=same; raw_39}

raw_39 [label="raw"]


raw_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire, like any other language in existence, will have a global static
namespace.  We at least intend to offer a separation mark between handle and
name; emacs has done just fine without this, but it's easier on the eyes. 
"]
prose_27 -> { raw_41}
{rank=same; raw_41}

raw_41 [label="raw"]


raw_41 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Here we intend to stick to the tags we need to knit a self-hosting Grimoire. 

"]
section_28 -> { header_43 prose_44 prose_45 prose_46 section_47 section_48}
{rank=same; header_43 prose_44 prose_45 prose_46 section_47 section_48}

header_43 [label="3 : #export"]

prose_44 [label="prose"]

prose_45 [label="prose"]

prose_46 [label="prose"]

section_47 [label="section: 65-73"]

section_48 [label="section: 74-82"]


prose_44 -> { raw_49}
{rank=same; raw_49}

raw_49 [label="raw"]


raw_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This is a tag one might find in a header block for code, like so:
=#!lua  #export=.  
"]
prose_45 -> { raw_51}
{rank=same; raw_51}

raw_51 [label="raw"]


raw_51 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Found thus, without other attributes, the code block will be appended to
$name-of-file - '.org' + '.lua'.  Subsequent blocks will not need an
=#export= tag. 
"]
prose_46 -> { raw_53}
{rank=same; raw_53}

raw_53 [label="raw"]


raw_53 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is somewhat snippy about code organization and will knit 
=org/anything.gm= into =src/anything.*= for as many languages as it
encounters.  While this will be configurable at some point, I don't need
or particularly want it to be, at least where the org/src genres are
concerned.

"]
section_47 -> { header_55 prose_56 prose_57}
{rank=same; header_55 prose_56 prose_57}

header_55 [label="4 : #export #addguards"]

prose_56 [label="prose"]

prose_57 [label="prose"]


prose_56 -> { raw_58}
{rank=same; raw_58}

raw_58 [label="raw"]


raw_58 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 This will add a language-specific comment line before each line of 
knit source code.
"]
prose_57 -> { raw_60}
{rank=same; raw_60}

raw_60 [label="raw"]


raw_60 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Guards allow for low-stress editing of the knit documents, which can be
unraveled into the source with =grym unravel=, provided guards are in place.

"]
section_48 -> { header_62 prose_63 prose_64}
{rank=same; header_62 prose_63 prose_64}

header_62 [label="4 : #export «filename»"]

prose_63 [label="prose"]

prose_64 [label="prose"]


prose_63 -> { raw_65}
{rank=same; raw_65}

raw_65 [label="raw"]


raw_65 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Exports to =filename=, and sets this as the default path to append code
blocks of that language. The =«= and =»= are literal, \" is not a
substitute.
"]
prose_64 -> { raw_67}
{rank=same; raw_67}

raw_67 [label="raw"]


raw_67 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that a filename starting with =/= goes into =…/src/= by default. 

"]
section_29 -> { header_69 prose_70 section_71}
{rank=same; header_69 prose_70 section_71}

header_69 [label="3 : #noexport"]

prose_70 [label="prose"]

section_71 [label="section: 89-93"]


prose_70 -> { raw_72}
{rank=same; raw_72}

raw_72 [label="raw"]


raw_72 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This behaves as befits an antonym.  Subsequent blocks are =#noexport=
by default, these act as a toggle.

"]
section_71 -> { header_74 prose_75}
{rank=same; header_74 prose_75}

header_74 [label="4 : #noexport #this"]

prose_75 [label="prose"]


prose_75 -> { raw_76}
{rank=same; raw_76}

raw_76 [label="raw"]


raw_76 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Interrupts export for one code block only. 

"]
section_30 -> { header_78 prose_79 prose_80}
{rank=same; header_78 prose_79 prose_80}

header_78 [label="3 : #EOF, #eof"]

prose_79 [label="prose"]

prose_80 [label="prose"]


prose_79 -> { raw_81}
{rank=same; raw_81}

raw_81 [label="raw"]


raw_81 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Two tags of the same meaning.  Intended for the footer line of a code
block, they enforce an end-of-file.  This causes export to end as though
=#noexport= were used.  It is likely a synonym at first, but with possible
drift since =#noexport= might take arguments while =#EOF= will not.
"]
prose_80 -> { raw_83}
{rank=same; raw_83}

raw_83 [label="raw"]


raw_83 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that all-caps versions of most tags are simply ignored, EOF is an
acronym and =#eof= is the redundant synonym.

"]
section_31 -> { header_85 prose_86 prose_87}
{rank=same; header_85 prose_86 prose_87}

header_85 [label="3 : #embed-doc-as-comment"]

prose_86 [label="prose"]

prose_87 [label="prose"]


prose_86 -> { raw_88}
{rank=same; raw_88}

raw_88 [label="raw"]


raw_88 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A top-level directive, this will cause the non-code portions of the
grimoire file to be exported as language-specific comments into the 
knit file.
"]
prose_87 -> { raw_90}
{rank=same; raw_90}

raw_90 [label="raw"]


raw_90 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Paired with =#addguards= this will result in two files of the same length.

"]
section_32 -> { header_92 prose_93 prose_94 prose_95}
{rank=same; header_92 prose_93 prose_94 prose_95}

header_92 [label="3 : #knit"]

prose_93 [label="prose"]

prose_94 [label="prose"]

prose_95 [label="prose"]


prose_93 -> { raw_96}
{rank=same; raw_96}

raw_96 [label="raw"]


raw_96 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Why don't we have this tag?  Knitting is a more general act than
simply concatenating code blocks. 
"]
prose_94 -> { raw_98}
{rank=same; raw_98}

raw_98 [label="raw"]


raw_98 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is a history in a few languages, notably Coffeescript and Haskell,
of developing the simple 'linear literate' paradigm as a supported option,
then not really using it. 
"]
prose_95 -> { raw_100}
{rank=same; raw_100}

raw_100 [label="raw"]


raw_100 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire can and must grow into something greater than this. 

"]
section_8 -> { header_102 prose_103 prose_104 prose_105 prose_106}
{rank=same; header_102 prose_103 prose_104 prose_105 prose_106}

header_102 [label="2 : Next steps"]

prose_103 [label="prose"]

prose_104 [label="prose"]

prose_105 [label="prose"]

prose_106 [label="prose"]


prose_103 -> { raw_107}
{rank=same; raw_107}

raw_107 [label="raw"]


raw_107 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  That might even be enough tags to self-host. It's fairly close at least. 
"]
prose_104 -> { raw_109}
{rank=same; raw_109}

raw_109 [label="raw"]


raw_109 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I can and will write a simple unraveler which relies on a directive to
insert comments between appended blocks.  Since I'm not implementing any 
macro expansion at first, this is simple enough and will allow me to keep
working directly on the =.lua= files while keeping the =/org= documents
up to date.
"]
prose_105 -> { raw_111}
{rank=same; raw_111}

raw_111 [label="raw"]


raw_111 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is better for the pipelined version, when we get to =femto= and
=bridge= we'll have an interactive environment which can provide code-only
views into the actual source document. 
"]
prose_106 -> { raw_113}
{rank=same; raw_113}

raw_113 [label="raw"]


raw_113 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's an important tool for bringing existing projects over to Grimoire
format. "]

}
