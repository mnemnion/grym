digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 241"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-206"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9}

header_2 [label="1 : Compiler"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

section_8 [label="section: 21-153"]

section_9 [label="section: 207-241"]


// END RANK section_1

header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Compiler"]
// END RANK header_2

prose_3 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


// END RANK prose_3

raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


I decided awhile back that the best format for storing libraries and
applications is as a SQLite database full of blobs and metadata.
"]
// END RANK raw_11

prose_4 -> { raw_13 prespace_14 literal_15 raw_16}
{rank=same; raw_13 prespace_14 literal_15 raw_16}

raw_13 [label="raw"]

prespace_14 [label="prespace"]

literal_15 [label="literal"]

raw_16 [label="raw"]


// END RANK prose_4

raw_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Dependencies in"]
// END RANK raw_13

prespace_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_14

literal_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridgetools"]
// END RANK literal_15

raw_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are getting out of control, so it's time to
actually make this happen.
"]
// END RANK raw_16

prose_5 -> { raw_21 prespace_22 literal_23 raw_24 prespace_25 literal_26 raw_27}
{rank=same; raw_21 prespace_22 literal_23 raw_24 prespace_25 literal_26 raw_27}

raw_21 [label="raw"]

prespace_22 [label="prespace"]

literal_23 [label="literal"]

raw_24 [label="raw"]

prespace_25 [label="prespace"]

literal_26 [label="literal"]

raw_27 [label="raw"]


// END RANK prose_5

raw_21 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The actual process of compiling is admirably straightforward; we"]
// END RANK raw_21

prespace_22 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_22

literal_23 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="load"]
// END RANK literal_23

raw_24 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" a
string, giving it a name, and then use"]
// END RANK raw_24

prespace_25 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_25

literal_26 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="string.dump"]
// END RANK literal_26

raw_27 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to create bytecode of it.
"]
// END RANK raw_27

prose_6 -> { raw_35 prespace_36 literal_37 raw_38}
{rank=same; raw_35 prespace_36 literal_37 raw_38}

raw_35 [label="raw"]

prespace_36 [label="prespace"]

literal_37 [label="literal"]

raw_38 [label="raw"]


// END RANK prose_6

raw_35 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Another invocation of"]
// END RANK raw_35

prespace_36 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_36

literal_37 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="load"]
// END RANK literal_37

raw_38 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" turns this back into a function, which we
execute.  Simple as that.
"]
// END RANK raw_38

prose_7 -> { raw_43}
{rank=same; raw_43}

raw_43 [label="raw"]


// END RANK prose_7

raw_43 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Here I intend to design the database table structure, and continue to flesh
out the full system, while hopefully avoiding my lamentable tendency to
overspecify.

"]
// END RANK raw_43

section_8 -> { header_45 prose_46 section_47 section_48 section_49 section_50}
{rank=same; header_45 prose_46 section_47 section_48 section_49 section_50}

header_45 [label="2 : SQLite tables"]

prose_46 [label="prose"]

section_47 [label="section: 24-45"]

section_48 [label="section: 46-106"]

section_49 [label="section: 107-153"]

section_50 [label="section: 154-194"]


// END RANK section_8

header_45 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** SQLite tables"]
// END RANK header_45

prose_46 -> { raw_52}
{rank=same; raw_52}

raw_52 [label="raw"]


// END RANK prose_46

raw_52 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_52

section_47 -> { header_54 prose_55 prose_56 codeblock_57 prose_58}
{rank=same; header_54 prose_55 prose_56 codeblock_57 prose_58}

header_54 [label="3 : code"]

prose_55 [label="prose"]

prose_56 [label="prose"]

codeblock_57 [label="code block 34-40"]

prose_58 [label="prose"]


// END RANK section_47

header_54 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** code"]
// END RANK header_54

prose_55 -> { raw_60 prespace_61 literal_62 raw_63 prespace_64 literal_65 raw_66 prespace_67 literal_68 raw_69 prespace_70 literal_71 raw_72 prespace_73 literal_74 raw_75 prespace_76 literal_77 raw_78}
{rank=same; raw_60 prespace_61 literal_62 raw_63 prespace_64 literal_65 raw_66 prespace_67 literal_68 raw_69 prespace_70 literal_71 raw_72 prespace_73 literal_74 raw_75 prespace_76 literal_77 raw_78}

raw_60 [label="raw"]

prespace_61 [label="prespace"]

literal_62 [label="literal"]

raw_63 [label="raw"]

prespace_64 [label="prespace"]

literal_65 [label="literal"]

raw_66 [label="raw"]

prespace_67 [label="prespace"]

literal_68 [label="literal"]

raw_69 [label="raw"]

prespace_70 [label="prespace"]

literal_71 [label="literal"]

raw_72 [label="raw"]

prespace_73 [label="prespace"]

literal_74 [label="literal"]

raw_75 [label="raw"]

prespace_76 [label="prespace"]

literal_77 [label="literal"]

raw_78 [label="raw"]


// END RANK prose_55

raw_60 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The"]
// END RANK raw_60

prespace_61 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_61

literal_62 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="code"]
// END RANK literal_62

raw_63 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" table has a key"]
// END RANK raw_63

prespace_64 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_64

literal_65 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="id"]
// END RANK literal_65

raw_66 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", a"]
// END RANK raw_66

prespace_67 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_67

literal_68 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="blob"]
// END RANK literal_68

raw_69 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" field"]
// END RANK raw_69

prespace_70 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_70

literal_71 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="binary"]
// END RANK literal_71

raw_72 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and a"]
// END RANK raw_72

prespace_73 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_73

literal_74 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hash"]
// END RANK literal_74

raw_75 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" field.  I think the"]
// END RANK raw_75

prespace_76 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_76

literal_77 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hash"]
// END RANK literal_77

raw_78 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" field should be SHA3, just as a
best-practices sort of thing. As it turns out, after running a test, SHA512 is
substantially faster.  Now, this may or may not be true of SHA512 in pure
LuaJIT, but that's less important.
"]
// END RANK raw_78

prose_56 -> { raw_98}
{rank=same; raw_98}

raw_98 [label="raw"]


// END RANK prose_56

raw_98 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So we want to open/create with:
"]
// END RANK raw_98

codeblock_57 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="CREATE TABLE IF NOT EXISTS code (
   code_id INTEGER PRIMARY KEY AUTOINCREMENT,
   hash TEXT UNIQUE NOT NULL,
   binary BLOB NOT NULL
);"]
// END RANK codeblock_57

prose_58 -> { raw_101 prespace_102 literal_103 raw_104}
{rank=same; raw_101 prespace_102 literal_103 raw_104}

raw_101 [label="raw"]

prespace_102 [label="prespace"]

literal_103 [label="literal"]

raw_104 [label="raw"]


// END RANK prose_58

raw_101 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
strictly speaking"]
// END RANK raw_101

prespace_102 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_102

literal_103 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="blob"]
// END RANK literal_103

raw_104 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" should also be UNIQUE but that's comparatively
expensive to check and guaranteed by the hash.

"]
// END RANK raw_104

section_48 -> { header_109 prose_110 codeblock_111 prose_112 prose_113 prose_114 prose_115 prose_116 prose_117 prose_118 prose_119 prose_120 prose_121}
{rank=same; header_109 prose_110 codeblock_111 prose_112 prose_113 prose_114 prose_115 prose_116 prose_117 prose_118 prose_119 prose_120 prose_121}

header_109 [label="3 : module"]

prose_110 [label="prose"]

codeblock_111 [label="code block 51-69"]

prose_112 [label="prose"]

prose_113 [label="prose"]

prose_114 [label="prose"]

prose_115 [label="prose"]

prose_116 [label="prose"]

prose_117 [label="prose"]

prose_118 [label="prose"]

prose_119 [label="prose"]

prose_120 [label="prose"]

prose_121 [label="prose"]


// END RANK section_48

header_109 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** module"]
// END RANK header_109

prose_110 -> { raw_123 prespace_124 literal_125 raw_126}
{rank=same; raw_123 prespace_124 literal_125 raw_126}

raw_123 [label="raw"]

prespace_124 [label="prespace"]

literal_125 [label="literal"]

raw_126 [label="raw"]


// END RANK prose_110

raw_123 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The"]
// END RANK raw_123

prespace_124 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_124

literal_125 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modules"]
// END RANK literal_125

raw_126 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" table has all the metadata about a given blob. Let's mock it
up first.
"]
// END RANK raw_126

codeblock_111 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="CREATE TABLE IF NOT EXISTS module (
   module_id INTEGER PRIMARY KEY AUTOINCREMENT,
   time DATETIME DEFAULT CURRENT_TIMESTAMP,
   snapshot INTEGER DEFAULT 1,
   version STRING DEFAULT 'SNAPSHOT',
   name STRING NOT NULL,
   type STRING DEFAULT 'luaJIT-bytecode',
   branch STRING,
   vc_hash STRING,
   project INTEGER NOT NULL,
   code INTEGER,
   FOREIGN KEY (project)
      REFERENCES project (project_id)
      ON DELETE RESTRICT
   FOREIGN KEY (code)
      REFERENCES code (code_id)
);"]
// END RANK codeblock_111

prose_112 -> { raw_132 prespace_133 literal_134 raw_135 prespace_136 literal_137 raw_138 prespace_139 literal_140 raw_141}
{rank=same; raw_132 prespace_133 literal_134 raw_135 prespace_136 literal_137 raw_138 prespace_139 literal_140 raw_141}

raw_132 [label="raw"]

prespace_133 [label="prespace"]

literal_134 [label="literal"]

raw_135 [label="raw"]

prespace_136 [label="prespace"]

literal_137 [label="literal"]

raw_138 [label="raw"]

prespace_139 [label="prespace"]

literal_140 [label="literal"]

raw_141 [label="raw"]


// END RANK prose_112

raw_132 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Most of this is self-describing."]
// END RANK raw_132

prespace_133 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_133

literal_134 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="snapshot"]
// END RANK literal_134

raw_135 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is a boolean, if false this is a
versioned module.  We'll be adding that later, so everything is configured so
that by default we have a snapshot. "]
// END RANK raw_135

prespace_136 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_136

literal_137 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="version"]
// END RANK literal_137

raw_138 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is expected to be set to
something if"]
// END RANK raw_138

prespace_139 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_139

literal_140 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label="version"]
// END RANK literal_140

raw_141 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is true.
"]
// END RANK raw_141

prose_113 -> { raw_152 prespace_153 literal_154 raw_155}
{rank=same; raw_152 prespace_153 literal_154 raw_155}

raw_152 [label="raw"]

prespace_153 [label="prespace"]

literal_154 [label="literal"]

raw_155 [label="raw"]


// END RANK prose_113

raw_152 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Thought: I may want to enforce semver, in which case it would make sense for"]
// END RANK raw_152

prespace_153 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_153

literal_154 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="version"]
// END RANK literal_154

raw_155 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to be a foreign key to a table containing major, minor, and patch
fields.
"]
// END RANK raw_155

prose_114 -> { prespace_160 literal_161 raw_162 prespace_163 literal_164 raw_165 prespace_166 literal_167 raw_168 prespace_169 literal_170 raw_171}
{rank=same; prespace_160 literal_161 raw_162 prespace_163 literal_164 raw_165 prespace_166 literal_167 raw_168 prespace_169 literal_170 raw_171}

prespace_160 [label="prespace"]

literal_161 [label="literal"]

raw_162 [label="raw"]

prespace_163 [label="prespace"]

literal_164 [label="literal"]

raw_165 [label="raw"]

prespace_166 [label="prespace"]

literal_167 [label="literal"]

raw_168 [label="raw"]

prespace_169 [label="prespace"]

literal_170 [label="literal"]

raw_171 [label="raw"]


// END RANK prose_114

prespace_160 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_160

literal_161 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="name"]
// END RANK literal_161

raw_162 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the string used to"]
// END RANK raw_162

prespace_163 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_163

literal_164 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label="require"]
// END RANK literal_164

raw_165 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" the module, stripped of any project
header. "]
// END RANK raw_165

prespace_166 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_166

literal_167 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label="name"]
// END RANK literal_167

raw_168 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not unique except when combined with a"]
// END RANK raw_168

prespace_169 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_169

literal_170 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="project"]
// END RANK literal_170

raw_171 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which
is.
"]
// END RANK raw_171

prose_115 -> { prespace_184 literal_185 raw_186}
{rank=same; prespace_184 literal_185 raw_186}

prespace_184 [label="prespace"]

literal_185 [label="literal"]

raw_186 [label="raw"]


// END RANK prose_115

prespace_184 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_184

literal_185 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="type"]
// END RANK literal_185

raw_186 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is for future compatibility. Eventually we'll want to store C shared
libraries in the codex, and Orb is in principle language-agnostic, so there's
no natural limit to what types we might have.
"]
// END RANK raw_186

prose_116 -> { prespace_190 literal_191 raw_192 prespace_193 literal_194 raw_195 prespace_196 literal_197 raw_198 prespace_199 literal_200 raw_201}
{rank=same; prespace_190 literal_191 raw_192 prespace_193 literal_194 raw_195 prespace_196 literal_197 raw_198 prespace_199 literal_200 raw_201}

prespace_190 [label="prespace"]

literal_191 [label="literal"]

raw_192 [label="raw"]

prespace_193 [label="prespace"]

literal_194 [label="literal"]

raw_195 [label="raw"]

prespace_196 [label="prespace"]

literal_197 [label="literal"]

raw_198 [label="raw"]

prespace_199 [label="prespace"]

literal_200 [label="literal"]

raw_201 [label="raw"]


// END RANK prose_116

prespace_190 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_190

literal_191 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="branch"]
// END RANK literal_191

raw_192 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_192

prespace_193 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_193

literal_194 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label="vc_hash"]
// END RANK literal_194

raw_195 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are optional fields for version-control purposes.
Optional because release software doesn't need them.  It's called"]
// END RANK raw_195

prespace_196 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_196

literal_197 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label="vc_hash"]
// END RANK literal_197

raw_198 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
because"]
// END RANK raw_198

prespace_199 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_199

literal_200 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label="commit"]
// END RANK literal_200

raw_201 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is a reserved word in SQL.
"]
// END RANK raw_201

prose_117 -> { prespace_214 literal_215 raw_216 prespace_217 literal_218 raw_219}
{rank=same; prespace_214 literal_215 raw_216 prespace_217 literal_218 raw_219}

prespace_214 [label="prespace"]

literal_215 [label="literal"]

raw_216 [label="raw"]

prespace_217 [label="prespace"]

literal_218 [label="literal"]

raw_219 [label="raw"]


// END RANK prose_117

prespace_214 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_214

literal_215 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label="project"]
// END RANK literal_215

raw_216 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the foreign key to the"]
// END RANK raw_216

prespace_217 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_217

literal_218 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="project"]
// END RANK literal_218

raw_219 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" table, described next.
"]
// END RANK raw_219

prose_118 -> { raw_226 prespace_227 literal_228 raw_229}
{rank=same; raw_226 prespace_227 literal_228 raw_229}

raw_226 [label="raw"]

prespace_227 [label="prespace"]

literal_228 [label="literal"]

raw_229 [label="raw"]


// END RANK prose_118

raw_226 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We don't want to delete any projects which still have modules, so we use"]
// END RANK raw_226

prespace_227 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_227

literal_228 -> leaf_232
leaf_232  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ON DELETE RESTRICT"]
// END RANK literal_228

raw_229 -> leaf_233
leaf_233  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to prevent this from succeeding.
"]
// END RANK raw_229

prose_119 -> { prespace_234 literal_235 raw_236}
{rank=same; prespace_234 literal_235 raw_236}

prespace_234 [label="prespace"]

literal_235 [label="literal"]

raw_236 [label="raw"]


// END RANK prose_119

prespace_234 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_234

literal_235 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label="code"]
// END RANK literal_235

raw_236 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is, of course, the key for the actual binary blob and its hash.
"]
// END RANK raw_236

prose_120 -> { raw_240 prespace_241 literal_242 raw_243 prespace_244 literal_245 raw_246}
{rank=same; raw_240 prespace_241 literal_242 raw_243 prespace_244 literal_245 raw_246}

raw_240 [label="raw"]

prespace_241 [label="prespace"]

literal_242 [label="literal"]

raw_243 [label="raw"]

prespace_244 [label="prespace"]

literal_245 [label="literal"]

raw_246 [label="raw"]


// END RANK prose_120

raw_240 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Not sure whether to de-normalize the hash, and since I'm not sure, we won't
for now.  It doesn't seem necessary since we'll"]
// END RANK raw_240

prespace_241 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_241

literal_242 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label="JOIN"]
// END RANK literal_242

raw_243 -> leaf_250
leaf_250  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" against the"]
// END RANK raw_243

prespace_244 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_244

literal_245 -> leaf_252
leaf_252  [color=Gray,shape=rectangle,fontname=Inconsolata,label="code"]
// END RANK literal_245

raw_246 -> leaf_253
leaf_253  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
table in all cases.
"]
// END RANK raw_246

prose_121 -> { raw_254}
{rank=same; raw_254}

raw_254 [label="raw"]


// END RANK prose_121

raw_254 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It might be useful to add at least the hash of the source Orb file, I'm
trying to stay focused for now.

"]
// END RANK raw_254

section_49 -> { header_256 prose_257 prose_258 prose_259 prose_260 prose_261 codeblock_262 prose_263 prose_264 prose_265 prose_266}
{rank=same; header_256 prose_257 prose_258 prose_259 prose_260 prose_261 codeblock_262 prose_263 prose_264 prose_265 prose_266}

header_256 [label="3 : project"]

prose_257 [label="prose"]

prose_258 [label="prose"]

prose_259 [label="prose"]

prose_260 [label="prose"]

prose_261 [label="prose"]

codeblock_262 [label="code block 126-136"]

prose_263 [label="prose"]

prose_264 [label="prose"]

prose_265 [label="prose"]

prose_266 [label="prose"]


// END RANK section_49

header_256 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** project"]
// END RANK header_256

prose_257 -> { raw_268}
{rank=same; raw_268}

raw_268 [label="raw"]


// END RANK prose_257

raw_268 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This table describes projects.
"]
// END RANK raw_268

prose_258 -> { raw_270 prespace_271 literal_272 raw_273 prespace_274 literal_275 raw_276}
{rank=same; raw_270 prespace_271 literal_272 raw_273 prespace_274 literal_275 raw_276}

raw_270 [label="raw"]

prespace_271 [label="prespace"]

literal_272 [label="literal"]

raw_273 [label="raw"]

prespace_274 [label="prespace"]

literal_275 [label="literal"]

raw_276 [label="raw"]


// END RANK prose_258

raw_270 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Our"]
// END RANK raw_270

prespace_271 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_271

literal_272 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="require"]
// END RANK literal_272

raw_273 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will, at first, just add a function to"]
// END RANK raw_273

prespace_274 -> leaf_281
leaf_281  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_274

literal_275 -> leaf_282
leaf_282  [color=Gray,shape=rectangle,fontname=Inconsolata,label="package.loader"]
// END RANK literal_275

raw_276 -> leaf_283
leaf_283  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
Additionally we'll use some sort of manifest to resolve dependencies,
but that comes later.
"]
// END RANK raw_276

prose_259 -> { raw_284 prespace_285 italic_286 raw_287 prespace_288 literal_289 raw_290 prespace_291 literal_292 raw_293}
{rank=same; raw_284 prespace_285 italic_286 raw_287 prespace_288 literal_289 raw_290 prespace_291 literal_292 raw_293}

raw_284 [label="raw"]

prespace_285 [label="prespace"]

italic_286 [label="italic"]

raw_287 [label="raw"]

prespace_288 [label="prespace"]

literal_289 [label="literal"]

raw_290 [label="raw"]

prespace_291 [label="prespace"]

literal_292 [label="literal"]

raw_293 [label="raw"]


// END RANK prose_259

raw_284 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I"]
// END RANK raw_284

prespace_285 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_285

italic_286 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label="think"]
// END RANK italic_286

raw_287 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" the best way to separate fully-qualified from relative module names
is like so:"]
// END RANK raw_287

prespace_288 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_288

literal_289 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label="modname/submod"]
// END RANK literal_289

raw_290 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_290

prespace_291 -> leaf_301
leaf_301  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_291

literal_292 -> leaf_302
leaf_302  [color=Gray,shape=rectangle,fontname=Inconsolata,label="fully.qualified.project:modname/submod"]
// END RANK literal_292

raw_293 -> leaf_303
leaf_303  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_293

prose_260 -> { raw_304 prespace_305 literal_306 raw_307 prespace_308 bold_309 raw_310}
{rank=same; raw_304 prespace_305 literal_306 raw_307 prespace_308 bold_309 raw_310}

raw_304 [label="raw"]

prespace_305 [label="prespace"]

literal_306 [label="literal"]

raw_307 [label="raw"]

prespace_308 [label="prespace"]

bold_309 [label="bold"]

raw_310 [label="raw"]


// END RANK prose_260

raw_304 -> leaf_311
leaf_311  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Any"]
// END RANK raw_304

prespace_305 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_305

literal_306 -> leaf_313
leaf_313  [color=Gray,shape=rectangle,fontname=Inconsolata,label="fully.qualified.project"]
// END RANK literal_306

raw_307 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" needs to be"]
// END RANK raw_307

prespace_308 -> leaf_315
leaf_315  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_308

bold_309 -> leaf_316
leaf_316  [color=Gray,shape=rectangle,fontname=Inconsolata,label="globally"]
// END RANK bold_309

raw_310 -> leaf_317
leaf_317  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" unique across all bridge
projects.  There has never in the history of ever been a good way to do this.
Having project manifests at least keeps this from leaking into codebases.
"]
// END RANK raw_310

prose_261 -> { raw_318 prespace_319 literal_320 raw_321}
{rank=same; raw_318 prespace_319 literal_320 raw_321}

raw_318 [label="raw"]

prespace_319 [label="prespace"]

literal_320 [label="literal"]

raw_321 [label="raw"]


// END RANK prose_261

raw_318 -> leaf_322
leaf_322  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that we're just going to split on"]
// END RANK raw_318

prespace_319 -> leaf_323
leaf_323  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_319

literal_320 -> leaf_324
leaf_324  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":"]
// END RANK literal_320

raw_321 -> leaf_325
leaf_325  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", there's no expectation that either
side is formatted in any special way.  Any \"valid utf8\" except let's be real,
I'm not even going to sanitize your string...
"]
// END RANK raw_321

codeblock_262 -> leaf_326
leaf_326  [color=Gray,shape=rectangle,fontname=Inconsolata,label="CREATE TABLE IF NOT EXISTS project (
   project_id INTEGER PRIMARY KEY AUTOINCREMENT,
   name STRING UNIQUE NOT NULL,
   repo STRING,
   repo_type STRING DEFAULT 'git',
   repo_alternates STRING,
   home STRING,
   website STRING
);"]
// END RANK codeblock_262

prose_263 -> { raw_327 prespace_328 literal_329 raw_330 prespace_331 literal_332 raw_333 prespace_334 literal_335 raw_336 prespace_337 literal_338 raw_339 prespace_340 literal_341 raw_342 prespace_343 literal_344 raw_345}
{rank=same; raw_327 prespace_328 literal_329 raw_330 prespace_331 literal_332 raw_333 prespace_334 literal_335 raw_336 prespace_337 literal_338 raw_339 prespace_340 literal_341 raw_342 prespace_343 literal_344 raw_345}

raw_327 [label="raw"]

prespace_328 [label="prespace"]

literal_329 [label="literal"]

raw_330 [label="raw"]

prespace_331 [label="prespace"]

literal_332 [label="literal"]

raw_333 [label="raw"]

prespace_334 [label="prespace"]

literal_335 [label="literal"]

raw_336 [label="raw"]

prespace_337 [label="prespace"]

literal_338 [label="literal"]

raw_339 [label="raw"]

prespace_340 [label="prespace"]

literal_341 [label="literal"]

raw_342 [label="raw"]

prespace_343 [label="prespace"]

literal_344 [label="literal"]

raw_345 [label="raw"]


// END RANK prose_263

raw_327 -> leaf_346
leaf_346  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is a simple table. The"]
// END RANK raw_327

prespace_328 -> leaf_347
leaf_347  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_328

literal_329 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label="name"]
// END RANK literal_329

raw_330 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" field is most important and must be unique,
as we've indicated, globally unique."]
// END RANK raw_330

prespace_331 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_331

literal_332 -> leaf_351
leaf_351  [color=Gray,shape=rectangle,fontname=Inconsolata,label="repo"]
// END RANK literal_332

raw_333 -> leaf_352
leaf_352  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_333

prespace_334 -> leaf_353
leaf_353  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_334

literal_335 -> leaf_354
leaf_354  [color=Gray,shape=rectangle,fontname=Inconsolata,label="home"]
// END RANK literal_335

raw_336 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and"]
// END RANK raw_336

prespace_337 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_337

literal_338 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label="website"]
// END RANK literal_338

raw_339 -> leaf_358
leaf_358  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are all
URIs; I think"]
// END RANK raw_339

prespace_340 -> leaf_359
leaf_359  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_340

literal_341 -> leaf_360
leaf_360  [color=Gray,shape=rectangle,fontname=Inconsolata,label="repo"]
// END RANK literal_341

raw_342 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_342

prespace_343 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_343

literal_344 -> leaf_363
leaf_363  [color=Gray,shape=rectangle,fontname=Inconsolata,label="website"]
// END RANK literal_344

raw_345 -> leaf_364
leaf_364  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" are fairly self-explanatory.
"]
// END RANK raw_345

prose_264 -> { prespace_365 literal_366 raw_367 prespace_368 literal_369 raw_370}
{rank=same; prespace_365 literal_366 raw_367 prespace_368 literal_369 raw_370}

prespace_365 [label="prespace"]

literal_366 [label="literal"]

raw_367 [label="raw"]

prespace_368 [label="prespace"]

literal_369 [label="literal"]

raw_370 [label="raw"]


// END RANK prose_264

prespace_365 -> leaf_371
leaf_371  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_365

literal_366 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label="home"]
// END RANK literal_366

raw_367 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is intended to serve content, probably in JSON format, which can be
placed into a"]
// END RANK raw_367

prespace_368 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_368

literal_369 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label="codex"]
// END RANK literal_369

raw_370 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" without having to compile a repo.  This will be added
(much) later.
"]
// END RANK raw_370

prose_265 -> { prespace_377 literal_378 raw_379}
{rank=same; prespace_377 literal_378 raw_379}

prespace_377 [label="prespace"]

literal_378 [label="literal"]

raw_379 [label="raw"]


// END RANK prose_265

prespace_377 -> leaf_380
leaf_380  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_377

literal_378 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label="repo_alternates"]
// END RANK literal_378

raw_379 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is just what it says: if the main repo isn't available for
any reason, this is a list of URIs which can be checked for the repo.  Format
TBD.
"]
// END RANK raw_379

prose_266 -> { raw_383 prespace_384 literal_385 raw_386 prespace_387 literal_388 raw_389 prespace_390 literal_391 raw_392 prespace_393 literal_394 raw_395}
{rank=same; raw_383 prespace_384 literal_385 raw_386 prespace_387 literal_388 raw_389 prespace_390 literal_391 raw_392 prespace_393 literal_394 raw_395}

raw_383 [label="raw"]

prespace_384 [label="prespace"]

literal_385 [label="literal"]

raw_386 [label="raw"]

prespace_387 [label="prespace"]

literal_388 [label="literal"]

raw_389 [label="raw"]

prespace_390 [label="prespace"]

literal_391 [label="literal"]

raw_392 [label="raw"]

prespace_393 [label="prespace"]

literal_394 [label="literal"]

raw_395 [label="raw"]


// END RANK prose_266

raw_383 -> leaf_396
leaf_396  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This scheme isn't 100% satisfactory, since"]
// END RANK raw_383

prespace_384 -> leaf_397
leaf_397  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_384

literal_385 -> leaf_398
leaf_398  [color=Gray,shape=rectangle,fontname=Inconsolata,label="repo"]
// END RANK literal_385

raw_386 -> leaf_399
leaf_399  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" can be"]
// END RANK raw_386

prespace_387 -> leaf_400
leaf_400  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_387

literal_388 -> leaf_401
leaf_401  [color=Gray,shape=rectangle,fontname=Inconsolata,label="NULL"]
// END RANK literal_388

raw_389 -> leaf_402
leaf_402  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", but"]
// END RANK raw_389

prespace_390 -> leaf_403
leaf_403  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_390

literal_391 -> leaf_404
leaf_404  [color=Gray,shape=rectangle,fontname=Inconsolata,label="repo_type"]
// END RANK literal_391

raw_392 -> leaf_405
leaf_405  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" would be"]
// END RANK raw_392

prespace_393 -> leaf_406
leaf_406  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_393

literal_394 -> leaf_407
leaf_407  [color=Gray,shape=rectangle,fontname=Inconsolata,label="git"]
// END RANK literal_394

raw_395 -> leaf_408
leaf_408  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" anyway. I think that's fine in practice.

"]
// END RANK raw_395

section_50 -> { header_409 prose_410 section_411 section_412 section_413 section_414 section_415}
{rank=same; header_409 prose_410 section_411 section_412 section_413 section_414 section_415}

header_409 [label="3 : SQL statements"]

prose_410 [label="prose"]

section_411 [label="section: 159-166"]

section_412 [label="section: 167-175"]

section_413 [label="section: 176-186"]

section_414 [label="section: 187-194"]

section_415 [label="section: 195-206"]


// END RANK section_50

header_409 -> leaf_416
leaf_416  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** SQL statements"]
// END RANK header_409

prose_410 -> { raw_417}
{rank=same; raw_417}

raw_417 [label="raw"]


// END RANK prose_410

raw_417 -> leaf_418
leaf_418  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Various commands to insert and retrieve data.

"]
// END RANK raw_417

section_411 -> { header_419 prose_420 codeblock_421}
{rank=same; header_419 prose_420 codeblock_421}

header_419 [label="4 : new project"]

prose_420 [label="prose"]

codeblock_421 [label="code block 161-164"]


// END RANK section_411

header_419 -> leaf_422
leaf_422  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** new project"]
// END RANK header_419

prose_420 -> { raw_423}
{rank=same; raw_423}

raw_423 [label="raw"]


// END RANK prose_420

raw_423 -> leaf_424
leaf_424  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_423

codeblock_421 -> leaf_425
leaf_425  [color=Gray,shape=rectangle,fontname=Inconsolata,label="INSERT INTO project (name, repo, home, website, repo_type, repo_alternates)
VALUES (:name, :repo, :home, :website, :repo_type, :repo_alternates);"]
// END RANK codeblock_421

section_412 -> { header_426 prose_427 codeblock_428}
{rank=same; header_426 prose_427 codeblock_428}

header_426 [label="4 : new code"]

prose_427 [label="prose"]

codeblock_428 [label="code block 171-173"]


// END RANK section_412

header_426 -> leaf_429
leaf_429  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** new code"]
// END RANK header_426

prose_427 -> { raw_430}
{rank=same; raw_430}

raw_430 [label="raw"]


// END RANK prose_427

raw_430 -> leaf_431
leaf_431  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We want to check first to see if we've committed this version already.
"]
// END RANK raw_430

codeblock_428 -> leaf_432
leaf_432  [color=Gray,shape=rectangle,fontname=Inconsolata,label="INSERT INTO code (hash, binary) VALUES (:hash, :binary);"]
// END RANK codeblock_428

section_413 -> { header_433 prose_434 codeblock_435}
{rank=same; header_433 prose_434 codeblock_435}

header_433 [label="4 : add module"]

prose_434 [label="prose"]

codeblock_435 [label="code block 181-184"]


// END RANK section_413

header_433 -> leaf_436
leaf_436  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** add module"]
// END RANK header_433

prose_434 -> { raw_437}
{rank=same; raw_437}

raw_437 [label="raw"]


// END RANK prose_434

raw_437 -> leaf_438
leaf_438  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Note that many versions of a module may refer to the same code, and each
module must be a part of a project.
"]
// END RANK raw_437

codeblock_435 -> leaf_439
leaf_439  [color=Gray,shape=rectangle,fontname=Inconsolata,label="INSERT INTO module (snapshot, version, name, branch, vc_hash, project, code)
VALUES (:snapshot, :version, :name, :branch, :vc_hash, :project, :code);"]
// END RANK codeblock_435

section_414 -> { header_440 prose_441 codeblock_442}
{rank=same; header_440 prose_441 codeblock_442}

header_440 [label="4 : get project_id"]

prose_441 [label="prose"]

codeblock_442 [label="code block 189-192"]


// END RANK section_414

header_440 -> leaf_443
leaf_443  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** get project_id"]
// END RANK header_440

prose_441 -> { raw_444}
{rank=same; raw_444}

raw_444 [label="raw"]


// END RANK prose_441

raw_444 -> leaf_445
leaf_445  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_444

codeblock_442 -> leaf_446
leaf_446  [color=Gray,shape=rectangle,fontname=Inconsolata,label="SELECT (CAST project.project_id AS REAL) FROM project
WHERE project.name = %s;"]
// END RANK codeblock_442

section_415 -> { header_447 prose_448 codeblock_449}
{rank=same; header_447 prose_448 codeblock_449}

header_447 [label="4 : get latest module"]

prose_448 [label="prose"]

codeblock_449 [label="code block 200-205"]


// END RANK section_415

header_447 -> leaf_450
leaf_450  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** get latest module"]
// END RANK header_447

prose_448 -> { raw_451 prespace_452 literal_453 raw_454}
{rank=same; raw_451 prespace_452 literal_453 raw_454}

raw_451 [label="raw"]

prespace_452 [label="prespace"]

literal_453 [label="literal"]

raw_454 [label="raw"]


// END RANK prose_448

raw_451 -> leaf_455
leaf_455  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

When I get some documentation I can join this against the"]
// END RANK raw_451

prespace_452 -> leaf_456
leaf_456  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_452

literal_453 -> leaf_457
leaf_457  [color=Gray,shape=rectangle,fontname=Inconsolata,label="code"]
// END RANK literal_453

raw_454 -> leaf_458
leaf_458  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" table and
retrieve the code itself, directly.
"]
// END RANK raw_454

codeblock_449 -> leaf_459
leaf_459  [color=Gray,shape=rectangle,fontname=Inconsolata,label="SELECT (CAST module.module_id AS REAL) from module
WHERE module.project = %d
   AND module.name = %s
ORDER BY module.time DESC LIMIT 1;"]
// END RANK codeblock_449

section_9 -> { header_460 prose_461 prose_462 prose_463 prose_464 prose_465 prose_466 prose_467}
{rank=same; header_460 prose_461 prose_462 prose_463 prose_464 prose_465 prose_466 prose_467}

header_460 [label="2 : Future"]

prose_461 [label="prose"]

prose_462 [label="prose"]

prose_463 [label="prose"]

prose_464 [label="prose"]

prose_465 [label="prose"]

prose_466 [label="prose"]

prose_467 [label="prose"]


// END RANK section_9

header_460 -> leaf_468
leaf_468  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Future"]
// END RANK header_460

prose_461 -> { raw_469 prespace_470 literal_471 raw_472}
{rank=same; raw_469 prespace_470 literal_471 raw_472}

raw_469 [label="raw"]

prespace_470 [label="prespace"]

literal_471 [label="literal"]

raw_472 [label="raw"]


// END RANK prose_461

raw_469 -> leaf_473
leaf_473  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This is an initial and (almost) minimal specification of what will
eventually be the"]
// END RANK raw_469

prespace_470 -> leaf_474
leaf_474  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_470

literal_471 -> leaf_475
leaf_475  [color=Gray,shape=rectangle,fontname=Inconsolata,label="codex"]
// END RANK literal_471

raw_472 -> leaf_476
leaf_476  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" format.  One thing Orb is trying to do better, is
that there is always a bunch of metadata associated with codebases, and no
obvious place to store it.  We're compelled to think of code as a
pile-of-files, and this breaks down badly when we're doing literate
programming.
"]
// END RANK raw_472

prose_462 -> { raw_477}
{rank=same; raw_477}

raw_477 [label="raw"]


// END RANK prose_462

raw_477 -> leaf_478
leaf_478  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Nor do I just want to recreate version control, badly. At various points in
this journey I wanted to use fossil-scm as a library, and I still think that's
about the best way to do things, but it's not practical for now, given the
resources I have available.
"]
// END RANK raw_477

prose_463 -> { raw_479 prespace_480 italic_481 raw_482}
{rank=same; raw_479 prespace_480 italic_481 raw_482}

raw_479 [label="raw"]

prespace_480 [label="prespace"]

italic_481 [label="italic"]

raw_482 [label="raw"]


// END RANK prose_463

raw_479 -> leaf_483
leaf_483  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
What"]
// END RANK raw_479

prespace_480 -> leaf_484
leaf_484  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_480

italic_481 -> leaf_485
leaf_485  [color=Gray,shape=rectangle,fontname=Inconsolata,label="is"]
// END RANK italic_481

raw_482 -> leaf_486
leaf_486  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" practical is to solve my case of dependency hell, and get to where
I can use my REPL on any of my projects without everything breaking.
"]
// END RANK raw_482

prose_464 -> { raw_487}
{rank=same; raw_487}

raw_487 [label="raw"]


// END RANK prose_464

raw_487 -> leaf_488
leaf_488  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
After I do that, we want a native HTML representation of Orb files, and a
simple server for it.
"]
// END RANK raw_487

prose_465 -> { raw_489}
{rank=same; raw_489}

raw_489 [label="raw"]


// END RANK prose_465

raw_489 -> leaf_490
leaf_490  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Then we start breaking the most serious current limitation of Orb: it's
basically a fancy comment system, from Lua's perspective.  The load-and-dump
scheme does strip all the extraneous whitespace and keep the line numbers,
but we do want source mapping, which generalizes better.
"]
// END RANK raw_489

prose_466 -> { raw_491}
{rank=same; raw_491}

raw_491 [label="raw"]


// END RANK prose_466

raw_491 -> leaf_492
leaf_492  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Those source maps should of course be stored in the codex.
"]
// END RANK raw_491

prose_467 -> { raw_493}
{rank=same; raw_493}

raw_493 [label="raw"]


// END RANK prose_467

raw_493 -> leaf_494
leaf_494  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
One leap at a time.






"]
// END RANK raw_493


}
