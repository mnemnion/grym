digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 59"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-38"]


section_1 -> { header_2 block_3 block_4 section_5 section_6}
{rank=same; header_2 block_3 block_4 section_5 section_6}

header_2 [label="1 : Node class"]

block_3 [label="block 1-6"]

block_4 [label="block 7-38"]

section_5 [label="section: 11-38"]

section_6 [label="section: 39-54"]


block_3 -> { prose_7}
{rank=same; prose_7}

prose_7 [label="prose"]


prose_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The behavior of abstract syntax trees in `pegylator` is provided by the Node
class.
"]
block_4 -> { prose_9}
{rank=same; prose_9}

prose_9 [label="prose"]


prose_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This is in turn poorly specified and full of exploratory code that is in need
of a few once-overs.

"]
section_5 -> { header_11 block_12 block_13 block_14 block_15 block_16 block_17}
{rank=same; header_11 block_12 block_13 block_14 block_15 block_16 block_17}

header_11 [label="2 : Members"]

block_12 [label="block 11-15"]

block_13 [label="block 16-24"]

block_14 [label="block 25-26"]

block_15 [label="block 27-32"]

block_16 [label="block 33-35"]

block_17 [label="block 36-38"]


block_12 -> { prose_18}
{rank=same; prose_18}

prose_18 [label="prose"]


prose_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  To be a Node, all indexed elements of the Array must also be Nodes. 
"]
block_13 -> { prose_20}
{rank=same; prose_20}

prose_20 [label="prose"]


prose_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="There are invariant fields a Node is also expected to have, they are:
 
  - `first` :  Index into `str` which begins the span.
  - `last`  :  Index into `str` which ends the span.
  - `id`    :  A string naming the Node. 
               This is identical to the name of the pattern that recognizes
               or captures it.

"]
block_14 -> { prose_22}
{rank=same; prose_22}

prose_22 [label="prose"]


prose_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="There are other fields which are of less obvious value, which still exist:
"]
block_15 -> { prose_24}
{rank=same; prose_24}

prose_24 [label="prose"]


prose_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - `str`  : a \"string\" covering the whole abstract syntax tree.
             This is normally found on root for which see:
  - `root` : a function which, called, returns the root node.
             I was impressed with this idea when I came up with it.
             Haven't been getting much use out of it.
"]
block_16 -> { prose_26}
{rank=same; prose_26}

prose_26 [label="prose"]


prose_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="An important optional field, if a Node has a semantic span (such as a symbol)
then it will have:
"]
block_17 -> { prose_28}
{rank=same; prose_28}

prose_28 [label="prose"]


prose_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - `val` :  The substring of value to the syntax tree.

"]
section_6 -> { header_30 block_31 block_32 section_33 section_34}
{rank=same; header_30 block_31 block_32 section_33 section_34}

header_30 [label="2 : Node metatable"]

block_31 [label="block 39-44"]

block_32 [label="block 45-54"]

section_33 [label="section: 48-54"]

section_34 [label="section: 55-59"]


block_31 -> { prose_35}
{rank=same; prose_35}

prose_35 [label="prose"]


prose_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This is currently constructed wildly and piecemeal.  It also does important
work. 
"]
block_32 -> { prose_37}
{rank=same; prose_37}

prose_37 [label="prose"]


prose_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Best methods are:

"]
section_33 -> { header_39 block_40 block_41}
{rank=same; header_39 block_40 block_41}

header_39 [label="3 : dot"]

block_40 [label="block 48-51"]

block_41 [label="block 52-54"]


block_40 -> { prose_42}
{rank=same; prose_42}

prose_42 [label="prose"]


prose_42 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Some of my most recent code, this prints the AST as a dot file. 
"]
block_41 -> { prose_44}
{rank=same; prose_44}

prose_44 [label="prose"]


prose_44 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="It is now reasonably documented in [[src/peg/transform.lua]].

"]
section_34 -> { header_46 block_47}
{rank=same; header_46 block_47}

header_46 [label="3 : select"]

block_47 [label="block 55-59"]


block_47 -> { prose_48}
{rank=same; prose_48}

prose_48 [label="prose"]


prose_48 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Select pulls out sub Nodes which fulfill certain predicates.

"]

}
