digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 60"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-39"]


section_1 -> { header_2 prose_3 section_4 section_5 section_6}
{rank=same; header_2 prose_3 section_4 section_5 section_6}

header_2 [label="1 : Node class"]

prose_3 [label="prose"]

section_4 [label="section: 3-11"]

section_5 [label="section: 12-39"]

section_6 [label="section: 40-55"]


header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Node class"]
prose_3 -> { raw_8}
{rank=same; raw_8}

raw_8 [label="raw"]


raw_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
section_4 -> { header_10 prose_11 prose_12}
{rank=same; header_10 prose_11 prose_12}

header_10 [label="2 : THIS FILE IS DEPRECATED"]

prose_11 [label="prose"]

prose_12 [label="prose"]


header_10 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** THIS FILE IS DEPRECATED"]
prose_11 -> { raw_14 interpolated_15 raw_16}
{rank=same; raw_14 interpolated_15 raw_16}

raw_14 [label="raw"]

interpolated_15 [label="interpolated"]

raw_16 [label="raw"]


raw_14 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The behavior of abstract syntax trees in "]
interpolated_15 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pegylator"]
raw_16 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is provided by the Node
class.
"]
prose_12 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is in turn poorly specified and full of exploratory code that is in need
of a few once-overs.

"]
section_5 -> { header_22 prose_23 prose_24 prose_25 prose_26 prose_27 prose_28}
{rank=same; header_22 prose_23 prose_24 prose_25 prose_26 prose_27 prose_28}

header_22 [label="2 : Members"]

prose_23 [label="prose"]

prose_24 [label="prose"]

prose_25 [label="prose"]

prose_26 [label="prose"]

prose_27 [label="prose"]

prose_28 [label="prose"]


header_22 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Members"]
prose_23 -> { raw_30}
{rank=same; raw_30}

raw_30 [label="raw"]


raw_30 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  To be a Node, all indexed elements of the Array must also be Nodes. 
"]
prose_24 -> { raw_32 interpolated_33 raw_34 interpolated_35 raw_36 interpolated_37 raw_38 interpolated_39 raw_40 interpolated_41 raw_42}
{rank=same; raw_32 interpolated_33 raw_34 interpolated_35 raw_36 interpolated_37 raw_38 interpolated_39 raw_40 interpolated_41 raw_42}

raw_32 [label="raw"]

interpolated_33 [label="interpolated"]

raw_34 [label="raw"]

interpolated_35 [label="interpolated"]

raw_36 [label="raw"]

interpolated_37 [label="interpolated"]

raw_38 [label="raw"]

interpolated_39 [label="interpolated"]

raw_40 [label="raw"]

interpolated_41 [label="interpolated"]

raw_42 [label="raw"]


raw_32 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There are invariant fields a Node is also expected to have, they are:
 
  - "]
interpolated_33 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="first"]
raw_34 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" :  Index into "]
interpolated_35 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
raw_36 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which begins the span.
  - "]
interpolated_37 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="last"]
raw_38 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  :  Index into "]
interpolated_39 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
raw_40 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which ends the span.
  - "]
interpolated_41 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="id"]
raw_42 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    :  A string naming the Node. 
               This is identical to the name of the pattern that recognizes
               or captures it.

"]
prose_25 -> { raw_54}
{rank=same; raw_54}

raw_54 [label="raw"]


raw_54 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There are other fields which are of less obvious value, which still exist:
"]
prose_26 -> { raw_56 interpolated_57 raw_58 interpolated_59 raw_60}
{rank=same; raw_56 interpolated_57 raw_58 interpolated_59 raw_60}

raw_56 [label="raw"]

interpolated_57 [label="interpolated"]

raw_58 [label="raw"]

interpolated_59 [label="interpolated"]

raw_60 [label="raw"]


raw_56 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - "]
interpolated_57 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
raw_58 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  : a \"string\" covering the whole abstract syntax tree.
             This is normally found on root for which see:
  - "]
interpolated_59 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="root"]
raw_60 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" : a function which, called, returns the root node.
             I was impressed with this idea when I came up with it.
             Haven't been getting much use out of it.
"]
prose_27 -> { raw_66}
{rank=same; raw_66}

raw_66 [label="raw"]


raw_66 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An important optional field, if a Node has a semantic span (such as a symbol)
then it will have:
"]
prose_28 -> { raw_68 interpolated_69 raw_70}
{rank=same; raw_68 interpolated_69 raw_70}

raw_68 [label="raw"]

interpolated_69 [label="interpolated"]

raw_70 [label="raw"]


raw_68 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - "]
interpolated_69 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="val"]
raw_70 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" :  The substring of value to the syntax tree.

"]
section_6 -> { header_74 prose_75 prose_76 section_77 section_78}
{rank=same; header_74 prose_75 prose_76 section_77 section_78}

header_74 [label="2 : Node metatable"]

prose_75 [label="prose"]

prose_76 [label="prose"]

section_77 [label="section: 49-55"]

section_78 [label="section: 56-60"]


header_74 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Node metatable"]
prose_75 -> { raw_80}
{rank=same; raw_80}

raw_80 [label="raw"]


raw_80 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  This is currently constructed wildly and piecemeal.  It also does important
work. 
"]
prose_76 -> { raw_82}
{rank=same; raw_82}

raw_82 [label="raw"]


raw_82 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Best methods are:

"]
section_77 -> { header_84 prose_85 prose_86}
{rank=same; header_84 prose_85 prose_86}

header_84 [label="3 : dot"]

prose_85 [label="prose"]

prose_86 [label="prose"]


header_84 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** dot"]
prose_85 -> { raw_88}
{rank=same; raw_88}

raw_88 [label="raw"]


raw_88 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Some of my most recent code, this prints the AST as a dot file. 
"]
prose_86 -> { raw_90 italic_91 raw_92}
{rank=same; raw_90 italic_91 raw_92}

raw_90 [label="raw"]

italic_91 [label="italic"]

raw_92 [label="raw"]


raw_90 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It is now reasonably documented in [[src"]
italic_91 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="peg"]
raw_92 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="transform.lua]].

"]
section_78 -> { header_96 prose_97}
{rank=same; header_96 prose_97}

header_96 [label="3 : select"]

prose_97 [label="prose"]


header_96 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** select"]
prose_97 -> { raw_99}
{rank=same; raw_99}

raw_99 [label="raw"]


raw_99 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Select pulls out sub Nodes which fulfill certain predicates.

"]

}
