digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 59"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-38"]


section_1 -> { header_2 prose_3 prose_4 section_5 section_6}
{rank=same; header_2 prose_3 prose_4 section_5 section_6}

header_2 [label="1 : Node class"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 11-38"]

section_6 [label="section: 39-54"]


prose_3 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  The behavior of abstract syntax trees in `pegylator` is provided by the Node
class.
"]
prose_4 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is in turn poorly specified and full of exploratory code that is in need
of a few once-overs.

"]
section_5 -> { header_9 prose_10 prose_11 prose_12 prose_13 prose_14 prose_15}
{rank=same; header_9 prose_10 prose_11 prose_12 prose_13 prose_14 prose_15}

header_9 [label="2 : Members"]

prose_10 [label="prose"]

prose_11 [label="prose"]

prose_12 [label="prose"]

prose_13 [label="prose"]

prose_14 [label="prose"]

prose_15 [label="prose"]


prose_10 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  To be a Node, all indexed elements of the Array must also be Nodes. 
"]
prose_11 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There are invariant fields a Node is also expected to have, they are:
 
  - `first` :  Index into `str` which begins the span.
  - `last`  :  Index into `str` which ends the span.
  - `id`    :  A string naming the Node. 
               This is identical to the name of the pattern that recognizes
               or captures it.

"]
prose_12 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There are other fields which are of less obvious value, which still exist:
"]
prose_13 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - `str`  : a \"string\" covering the whole abstract syntax tree.
             This is normally found on root for which see:
  - `root` : a function which, called, returns the root node.
             I was impressed with this idea when I came up with it.
             Haven't been getting much use out of it.
"]
prose_14 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An important optional field, if a Node has a semantic span (such as a symbol)
then it will have:
"]
prose_15 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - `val` :  The substring of value to the syntax tree.

"]
section_6 -> { header_22 prose_23 prose_24 section_25 section_26}
{rank=same; header_22 prose_23 prose_24 section_25 section_26}

header_22 [label="2 : Node metatable"]

prose_23 [label="prose"]

prose_24 [label="prose"]

section_25 [label="section: 48-54"]

section_26 [label="section: 55-59"]


prose_23 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  This is currently constructed wildly and piecemeal.  It also does important
work. 
"]
prose_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Best methods are:

"]
section_25 -> { header_29 prose_30 prose_31}
{rank=same; header_29 prose_30 prose_31}

header_29 [label="3 : dot"]

prose_30 [label="prose"]

prose_31 [label="prose"]


prose_30 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Some of my most recent code, this prints the AST as a dot file. 
"]
prose_31 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It is now reasonably documented in [[src/peg/transform.lua]].

"]
section_26 -> { header_34 prose_35}
{rank=same; header_34 prose_35}

header_34 [label="3 : select"]

prose_35 [label="prose"]


prose_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Select pulls out sub Nodes which fulfill certain predicates.

"]

}
