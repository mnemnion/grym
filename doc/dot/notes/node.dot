digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 60"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-39"]


section_1 -> { header_2 prose_3 section_4 section_5 section_6}
{rank=same; header_2 prose_3 section_4 section_5 section_6}

header_2 [label="1 : Node class"]

prose_3 [label="prose"]

section_4 [label="section: 3-11"]

section_5 [label="section: 12-39"]

section_6 [label="section: 40-55"]


prose_3 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
section_4 -> { header_8 prose_9 prose_10}
{rank=same; header_8 prose_9 prose_10}

header_8 [label="2 : THIS FILE IS DEPRECATED"]

prose_9 [label="prose"]

prose_10 [label="prose"]


prose_9 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The behavior of abstract syntax trees in `pegylator` is provided by the Node
class.
"]
prose_10 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is in turn poorly specified and full of exploratory code that is in need
of a few once-overs.

"]
section_5 -> { header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19}
{rank=same; header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19}

header_13 [label="2 : Members"]

prose_14 [label="prose"]

prose_15 [label="prose"]

prose_16 [label="prose"]

prose_17 [label="prose"]

prose_18 [label="prose"]

prose_19 [label="prose"]


prose_14 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  To be a Node, all indexed elements of the Array must also be Nodes. 
"]
prose_15 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There are invariant fields a Node is also expected to have, they are:
 
  - `first` :  Index into `str` which begins the span.
  - `last`  :  Index into `str` which ends the span.
  - `id`    :  A string naming the Node. 
               This is identical to the name of the pattern that recognizes
               or captures it.

"]
prose_16 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There are other fields which are of less obvious value, which still exist:
"]
prose_17 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - `str`  : a \"string\" covering the whole abstract syntax tree.
             This is normally found on root for which see:
  - `root` : a function which, called, returns the root node.
             I was impressed with this idea when I came up with it.
             Haven't been getting much use out of it.
"]
prose_18 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An important optional field, if a Node has a semantic span (such as a symbol)
then it will have:
"]
prose_19 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - `val` :  The substring of value to the syntax tree.

"]
section_6 -> { header_26 prose_27 prose_28 section_29 section_30}
{rank=same; header_26 prose_27 prose_28 section_29 section_30}

header_26 [label="2 : Node metatable"]

prose_27 [label="prose"]

prose_28 [label="prose"]

section_29 [label="section: 49-55"]

section_30 [label="section: 56-60"]


prose_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  This is currently constructed wildly and piecemeal.  It also does important
work. 
"]
prose_28 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Best methods are:

"]
section_29 -> { header_33 prose_34 prose_35}
{rank=same; header_33 prose_34 prose_35}

header_33 [label="3 : dot"]

prose_34 [label="prose"]

prose_35 [label="prose"]


prose_34 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Some of my most recent code, this prints the AST as a dot file. 
"]
prose_35 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It is now reasonably documented in [[src/peg/transform.lua]].

"]
section_30 -> { header_38 prose_39}
{rank=same; header_38 prose_39}

header_38 [label="3 : select"]

prose_39 [label="prose"]


prose_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Select pulls out sub Nodes which fulfill certain predicates.

"]

}
