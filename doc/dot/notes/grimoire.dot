digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 1219"]


doc_0 -> { section_1 section_2}
{rank=same; section_1 section_2}

section_1 [label="section: 1-3"]

section_2 [label="section: 34-338"]


section_1 -> { header_3 block_4 block_5 section_6}
{rank=same; header_3 block_4 block_5 section_6}

header_3 [label="0 : "]

block_4 [label="block 1-1"]

block_5 [label="block 2-3"]

section_6 [label="section: 4-33"]


header_3 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_4 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_5 -> { structure_9 structure_10}
{rank=same; structure_9 structure_10}

structure_9 [label="structure"]

structure_10 [label="structure"]


structure_9 -> { hashline_11}
{rank=same; hashline_11}

hashline_11 [label="hashline"]


hashline_11 -> { hashtag_12}
{rank=same; hashtag_12}

hashtag_12 [label="hashtag"]


hashtag_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_10 -> { hashline_14}
{rank=same; hashline_14}

hashline_14 [label="hashline"]


hashline_14 -> { hashtag_15}
{rank=same; hashtag_15}

hashtag_15 [label="hashtag"]


hashtag_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_6 -> { header_17 block_18 block_19 block_20 block_21 block_22 block_23 block_24 block_25 block_26}
{rank=same; header_17 block_18 block_19 block_20 block_21 block_22 block_23 block_24 block_25 block_26}

header_17 [label="1 : Introduction"]

block_18 [label="block 4-7"]

block_19 [label="block 8-9"]

block_20 [label="block 10-12"]

block_21 [label="block 13-16"]

block_22 [label="block 17-19"]

block_23 [label="block 20-23"]

block_24 [label="block 24-26"]

block_25 [label="block 27-28"]

block_26 [label="block 29-33"]


header_17 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_18 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is a response to Babel.
"]
block_19 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Babel is simultaneously a kludge and the most potentially powerful language in existence.
"]
block_20 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Babel is a metalanguage. The structure of Org mode lets the user weave together code into a
living document, in a flexible, powerful way.
"]
block_21 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The name is charmingly apt. Babel exists at the top of a tower of abstractions that is teetering
on the verge of collapse. Org-mode is an extension of outline mode, which was a simple tree
editor task list.
"]
block_22 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Various users bolted stuff on, because that's how emacs grows, you bolt stuff onto it and it
continues to function because it's [[http://lispers.org/][made with alien technology]].
"]
block_23 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The problem with Babel is more than the syntax being clunky, though that's a problem. The issue is
more profoundly that Babel is built on Org, which is built on emacs. It's a language, yes,
parsers exist for other platforms. But as a runtime, it isn't portable without a lot of effort.
"]
block_24 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="So much so, that we get a chance to start over. It's roughly as difficult to write Grimoire as it would be to
reimplement Babel in, say, Sublime.
"]
block_25 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In the process, we can:
"]
block_26 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - streamline concepts, making them more orthogonal
  - clean up the clunkiness in the grammar
  - build a toolchain that will let us write magic spells in any number of languages, amassing a powerful
    collection of same. A grimoire, if you will: a living book in which magic is both written and performed.
"]
section_2 -> { header_37 block_38 section_39 section_40 section_41}
{rank=same; header_37 block_38 section_39 section_40 section_41}

header_37 [label="1 : Musings on Metasyntax"]

block_38 [label="block 34-338"]

section_39 [label="section: 35-82"]

section_40 [label="section: 105-311"]

section_41 [label="section: 339-343"]


header_37 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_38 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_39 -> { header_44 block_45 block_46 section_47 section_48 section_49}
{rank=same; header_44 block_45 block_46 section_47 section_48 section_49}

header_44 [label="2 : Constraints"]

block_45 [label="block 35-39"]

block_46 [label="block 40-82"]

section_47 [label="section: 42-68"]

section_48 [label="section: 69-82"]

section_49 [label="section: 83-104"]


header_44 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_45 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is a difference between a metalanguage and a literate programming language. Babel is a metalanguage,
as Grimoire is intended to be.
"]
block_46 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="An effective metalanguage balances three concerns. It must be usable, readable, and parsable.
"]
section_47 -> { header_53 block_54 block_55 block_56 block_57 block_58 block_59 block_60}
{rank=same; header_53 block_54 block_55 block_56 block_57 block_58 block_59 block_60}

header_53 [label="3 : Usable"]

block_54 [label="block 42-45"]

block_55 [label="block 46-50"]

block_56 [label="block 51-54"]

block_57 [label="block 55-58"]

block_58 [label="block 59-63"]

block_59 [label="block 64-66"]

block_60 [label="block 67-68"]


header_53 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_54 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A metalanguage is used interactively, on a deeper level than REPLs.
"]
block_55 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This is what makes working with Org so amazing. The first purpose of what became Babel
was simply editing outlines. This was outline mode, which dates back to the era when
using asterisks and =- [ ]= checkboxes in a plain ASCII text file was fairly futuristic
behavior.
"]
block_56 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="You can't really call that a language either, though it's a syntax. More and more features
were attached until we have modern Babel. But because each feature was build as an extension
to the editing/runtime environment, Babel is fairly smooth to work with.
"]
block_57 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If you can handle Emacs. I can, some can't. A metalanguage is tightly coupled to its runtime,
because its runtime is its editing environment. Not much of a metalanguage if this isn't the
case.
"]
block_58 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire is the culmination of a considerable dependency chain. We need a data structure, a
parser to work with the data structure, and an editing environment that builds on these. For
maximum enjoyment, we'll want a custom terminal that enhances the xterm protocol with a few
features, most notably graphics.
"]
block_59 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Just like I have trouble writing Lua without burning huge amounts of time planning out Clu, I
can't use Org without doing the same for Grimoire. It's all related: I need a really good parser.
"]
block_60 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[[https://github.com/UpstandingHackers/hammer][hammer]] is the leading contender. But back to Grimoire.
"]
section_48 -> { header_69 block_70 block_71 block_72}
{rank=same; header_69 block_70 block_71 block_72}

header_69 [label="3 : Readable"]

block_70 [label="block 69-74"]

block_71 [label="block 75-78"]

block_72 [label="block 79-82"]


header_69 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_70 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is designed to be read.  It's important that the raw syntax not
 break the reader's flow.  A good metalanguage lets the user employ just
 as much magic as she's comfortable with, without imposing more.
"]
block_71 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Our syntax is  designed to support this. As such  it is deeply concerned
with matters  such as indentation  and whitespacing, which are  basic to
readability.
"]
block_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="It will be quite possible and indeed comfortable to write pure documents
such  as blog  posts in  Grimoire form.  In that  use case  it resembles
Markdown.
"]
section_49 -> { header_77 block_78 block_79 block_80 block_81 block_82}
{rank=same; header_77 block_78 block_79 block_80 block_81 block_82}

header_77 [label="3 : Parsable"]

block_78 [label="block 83-89"]

block_79 [label="block 90-93"]

block_80 [label="block 94-97"]

block_81 [label="block 98-101"]

block_82 [label="block 102-104"]


header_77 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_78 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire  documents are  intended  to be  highly  convoluted. The  basic
editing operation  is the fold. The  Grimoire editor must be  capable of
handling documents in the tens of megabytes with a complex and preserved
folding structure.
"]
block_79 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This requires  a ground-up  editing environment  rewrite to  employ data
structures   with   correct   big-O    complexity   and   an   efficient
implementation.
"]
block_80 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This  also  requires  that  the   language  be  well-designed  for  easy
recognition of the structural elements. As this document evolves, I will
be defining a grammar in the syntax preferred by barbarian.
"]
block_81 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire is  an error-free  language. There  are several  concepts which
interact to  create this, namely  structure, prose, well-  and malformed
structure, and validity.
"]
block_82 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A parser for Grimoire which doesn't  succeed without error for any utf-8
string is not valid.
"]
section_40 -> { header_89 block_90 section_91 section_92 section_93 section_94 section_95 section_96}
{rank=same; header_89 block_90 section_91 section_92 section_93 section_94 section_95 section_96}

header_89 [label="2 : Structure"]

block_90 [label="block 105-311"]

section_91 [label="section: 109-149"]

section_92 [label="section: 161-190"]

section_93 [label="section: 191-200"]

section_94 [label="section: 253-285"]

section_95 [label="section: 295-311"]

section_96 [label="section: 312-338"]


header_89 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_90 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is a top-down look at Grimoire's proposed syntax.
"]
section_91 -> { header_99 block_100 block_101 block_102 block_103 block_104 block_105 block_106 block_107 block_108 section_109}
{rank=same; header_99 block_100 block_101 block_102 block_103 block_104 block_105 block_106 block_107 block_108 section_109}

header_99 [label="3 : Encoding"]

block_100 [label="block 109-112"]

block_101 [label="block 113-118"]

block_102 [label="block 119-123"]

block_103 [label="block 124-128"]

block_104 [label="block 129-131"]

block_105 [label="block 132-135"]

block_106 [label="block 136-140"]

block_107 [label="block 141-143"]

block_108 [label="block 144-149"]

section_109 [label="section: 150-160"]


header_99 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_100 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is defined in terms of utf-8.
"]
block_101 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The core syntax is defined in terms of the reachable keys on a US keyboard.
This tradition is firmly entrenched in the mid teens, and I have no
designs on budging that at present. The miser in me likes that they're
a byte each. The lawyer in me insists that this isn't ASCII, which is a
seven-bit legacy encoding. All aspects of utf-8 are equally meaningful.
"]
block_102 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We aren't at all afraid to use Unicode characters to display aspects
of the runtime. In fact we favor this, as it marks those operations
as distinctive. Most people can't type ⦿ without effort (I can't)
and it's easy to recognize as a folded drawer once you've seen a couple.
"]
block_103 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire is case sensitive and uses lower-snake-case for built-in English
phrases. There is a convention (see classes) that uses capitalization of
user words to affect semantics. This may be overridden with other rules
for languages that lack the majuscule-miniscule distinction.
"]
block_104 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I want Grimoire to have correct Unicode handling, for some value of
correct. It can't be considered 1.0 without this.
"]
block_105 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Bidirectional handling in a context that's indentation sensitive is
an example of something subtle. Grimoire uses indentation in various
ways, so here's the rule:
"]
block_106 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Any newline that has a reversed direction ends indentation. So if
you are going ltr, issue an rtl marker, and a newline, your indentation
level is zero. If you reverse direction twice in a line, you keep
your indentation level. Three times, you lose it.
"]
block_107 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I'd love to get a Hebrew and/or Arabic fluent hacker on the project
early, to make sure this works correctly.
"]
block_108 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Another thing I want to get right is equivalence. If you have a
variable called \"Glück\" the compiler shouldn't complain if it's
rendered in either of the valid ways. For some sequences that's
\"any of the valid ways\". If we normalized your prose, you might
have problems later, so we don't want to solve it that way.
"]
section_109 -> { header_120 block_121 block_122}
{rank=same; header_120 block_121 block_122}

header_120 [label="4 : Internationalization"]

block_121 [label="block 150-155"]

block_122 [label="block 156-160"]


header_120 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_121 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
All parts of Grimoire defined in English will be namespaced
as =en:/=, and loaded by default. Other languages will be added
when there is a fluent maintainer available.
"]
block_122 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Note  that  many  words  aren't  truly English.  Notably  the  names  of
programming languages are  the same in all human languages.   A tag like
=#author= can be namespaced =#fr:/auteur= and will be, but =#!python= is not
in the =en:/= namespace.
"]
section_92 -> { header_126 block_127 block_128 block_129 block_130 block_131 block_132 block_133}
{rank=same; header_126 block_127 block_128 block_129 block_130 block_131 block_132 block_133}

header_126 [label="3 : Prose and Structure"]

block_127 [label="block 161-164"]

block_128 [label="block 165-170"]

block_129 [label="block 171-175"]

block_130 [label="block 176-178"]

block_131 [label="block 179-182"]

block_132 [label="block 183-187"]

block_133 [label="block 188-190"]


header_126 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_127 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The major distinction Grimoire draws is between prose and structure.
"]
block_128 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Prose is the default parsing state. It is far from unstructured from the
runtime  perspective. Although  this needn't  be embedded  in the  parse
tree,  Grimoire   understands  concepts   such  as   paragraphs,  words,
punctuation,  capital letters,  languages, and  anything else  proper to
prose.
"]
block_129 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I refer to human languages, but Grimoire understands programming languages
also. In principle, all of them, it shouldn't be harder to add them than
it is to call them from shell, though getting a runtime rigged up to
another runtime always calls for some finesse to derive a good experience.
"]
block_130 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"Programming languages\" is overly specific. Grimoire draws a distinction
between prose and structure. Blocks may contain either, or both.
"]
block_131 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Something that's nice about a language build on a prose/structure
relationship is that it can be error free. Anything *grym* can't build into
a structure is just prose.
"]
block_132 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Markdown has this property. Sometimes you run into crappy parsers which
build errors into Markdown, which is just obnoxious. If you [[http://daringfireball.net/projects/markdown/syntax][RTFM]],
you'll find the word \"error\" once. Helpfully explaining how Markdown
keeps you from making one.
"]
block_133 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We do what we can to make the document look the same as it is
in fact structured. Syntax highlighting handles the edge cases.
"]
section_93 -> { header_142 block_143 block_144 block_145 section_146}
{rank=same; header_142 block_143 block_144 block_145 section_146}

header_142 [label="3 : Ownership"]

block_143 [label="block 191-194"]

block_144 [label="block 195-198"]

block_145 [label="block 199-200"]

section_146 [label="section: 201-252"]


header_142 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_143 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The basic structural relationship in Grimoire is ownership.
"]
block_144 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Root elements of a heirarchy own their children, blocks own
lines that refer to that block. Indentation has a subtle but
regular interaction with ownership; it does what you expect.
"]
block_145 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Edge cases are resolved using the cling rule.
"]
section_146 -> { header_151 block_152 block_153 block_154 block_155 block_156 block_157 block_158 block_159 block_160 block_161 block_162 block_163 block_164 block_165}
{rank=same; header_151 block_152 block_153 block_154 block_155 block_156 block_157 block_158 block_159 block_160 block_161 block_162 block_163 block_164 block_165}

header_151 [label="4 : The Cling Rule"]

block_152 [label="block 201-205"]

block_153 [label="block 206-209"]

block_154 [label="block 210-213"]

block_155 [label="block 214-217"]

block_156 [label="block 218-224"]

block_157 [label="block 225-228"]

block_158 [label="block 229-232"]

block_159 [label="block 233-235"]

block_160 [label="block 236-239"]

block_161 [label="block 240-241"]

block_162 [label="block 242-244"]

block_163 [label="block 245-247"]

block_164 [label="block 248-250"]

block_165 [label="block 251-252"]


header_151 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_152 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The cling rule specifies that a group 'clings' to another group when
it is closer to that group than the other group. Ties resolve down.
"]
block_153 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This should make it intuitive to group elements that aren't grouping the
way you expect: put in whitespace until the block is visually distinguished
from the surroundings.
"]
block_154 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Cling applies between blocks which are at the same level of ownership.
Ownership has precedence over cling: all blocks underneath e.g. a header
line are owned by that line, newlines notwithstanding.
"]
block_155 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Note that indentation of e.g. lists invokes the cling rule within the
indentation level.

"]
block_156 -> { structure_171 structure_172}
{rank=same; structure_171 structure_172}

structure_171 [label="structure"]

structure_172 [label="structure"]


structure_171 -> { hashline_173}
{rank=same; hashline_173}

hashline_173 [label="hashline"]


hashline_173 -> { hashtag_174}
{rank=same; hashtag_174}

hashtag_174 [label="hashtag"]


hashtag_174 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_172 -> { hashline_176}
{rank=same; hashline_176}

hashline_176 [label="hashline"]


hashline_176 -> { hashtag_177}
{rank=same; hashtag_177}

hashtag_177 [label="hashtag"]


hashtag_177 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
block_157 -> { structure_179}
{rank=same; structure_179}

structure_179 [label="structure"]


structure_179 -> { hashline_180}
{rank=same; hashline_180}

hashline_180 [label="hashline"]


hashline_180 -> { hashtag_181}
{rank=same; hashtag_181}

hashtag_181 [label="hashtag"]


hashtag_181 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_158 -> { structure_183}
{rank=same; structure_183}

structure_183 [label="structure"]


structure_183 -> { hashline_184}
{rank=same; hashline_184}

hashline_184 [label="hashline"]


hashline_184 -> { hashtag_185}
{rank=same; hashtag_185}

hashtag_185 [label="hashtag"]


hashtag_185 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_159 -> { structure_187}
{rank=same; structure_187}

structure_187 [label="structure"]


structure_187 -> { hashline_188}
{rank=same; hashline_188}

hashline_188 [label="hashline"]


hashline_188 -> { hashtag_189}
{rank=same; hashtag_189}

hashtag_189 [label="hashtag"]


hashtag_189 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
block_160 -> { structure_191}
{rank=same; structure_191}

structure_191 [label="structure"]


structure_191 -> { hashline_192}
{rank=same; hashline_192}

hashline_192 [label="hashline"]


hashline_192 -> { hashtag_193}
{rank=same; hashtag_193}

hashtag_193 [label="hashtag"]


hashtag_193 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_161 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Even clings are resolved forwards:
"]
block_162 -> { structure_196}
{rank=same; structure_196}

structure_196 [label="structure"]


structure_196 -> { hashline_197}
{rank=same; hashline_197}

hashline_197 [label="hashline"]


hashline_197 -> { hashtag_198}
{rank=same; hashtag_198}

hashtag_198 [label="hashtag"]


hashtag_198 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_163 -> { structure_200}
{rank=same; structure_200}

structure_200 [label="structure"]


structure_200 -> { hashline_201}
{rank=same; hashline_201}

hashline_201 [label="hashline"]


hashline_201 -> { hashtag_202}
{rank=same; hashtag_202}

hashtag_202 [label="hashtag"]


hashtag_202 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
block_164 -> { structure_204}
{rank=same; structure_204}

structure_204 [label="structure"]


structure_204 -> { hashline_205}
{rank=same; hashline_205}

hashline_205 [label="hashline"]


hashline_205 -> { hashtag_206}
{rank=same; hashtag_206}

hashtag_206 [label="hashtag"]


hashtag_206 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_165 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label="be considered bad style.
"]
section_94 -> { header_209 block_210 section_211 section_212 section_213}
{rank=same; header_209 block_210 section_211 section_212 section_213}

header_209 [label="3 : Whitespace, Lines, and Indentation."]

block_210 [label="block 253-285"]

section_211 [label="section: 258-279"]

section_212 [label="section: 280-285"]

section_213 [label="section: 286-294"]


header_209 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_210 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is a structured document format. There are semantics associated
with every character we encode.
"]
section_211 -> { header_216 block_217 block_218 block_219 block_220 block_221}
{rank=same; header_216 block_217 block_218 block_219 block_220 block_221}

header_216 [label="4 : Whitespace"]

block_217 [label="block 258-262"]

block_218 [label="block 263-265"]

block_219 [label="block 266-271"]

block_220 [label="block 272-276"]

block_221 [label="block 277-279"]


header_216 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_217 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Whitespace is either the space or newline character. Returns are removed,
tabs resolved to two spaces by the formatter, the latter is warned against.
"]
block_218 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Most of the token-like categories we refer to must be surrounded by
whitespace. Newlines have semantics more often than they do not.
"]
block_219 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Unicode actually contains quite a number of whitespace characters. They are
all treated as a single ordinary space. If that space is semantically meaningful,
as in the space between =*** A Headline=, it is filtered into an ordinary space.
Otherwise it's considered prose, the only filtration prose receives is tab->space
conversion.
"]
block_220 -> leaf_226
leaf_226  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire mercilessly enforces tab-space conversion, even on your code blocks.
I will cling to this tenet as long as I can, the tab character needs to die,
the world has decided, that key is special and shouldn't insert a special
dropping that looks like n spaces.
"]
block_221 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*make*? Outta my face with make. Yes, we'll have a make syntax, yes, it will
put the tabs back in.
"]
section_212 -> { header_228 block_229}
{rank=same; header_228 block_229}

header_228 [label="4 : Lines"]

block_229 [label="block 280-285"]


header_228 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_229 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
When we refer to the beginning of a line, this allows for spaces before the
reference point. We call the absolute beginning of a line the first
position.
"]
section_213 -> { header_232 block_233 block_234 block_235}
{rank=same; header_232 block_233 block_234 block_235}

header_232 [label="4 : Indentation"]

block_233 [label="block 286-290"]

block_234 [label="block 291-292"]

block_235 [label="block 293-294"]


header_232 -> leaf_236
leaf_236  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_233 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is an indentation-aware language. Most kinds of block can be
arcically[fn:1] ordered by means of indentation.
"]
block_234 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Indentation follows [[http://nim-lang.org/manual.html#indentation][Nim rules]].
"]
block_235 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[fn:1] There's nothing sacred about ordered subrules, and if we're making up
a new word, let's drop the silent h. Webster was a cool guy."]
section_95 -> { header_240 block_241 block_242 block_243 block_244}
{rank=same; header_240 block_241 block_242 block_243 block_244}

header_240 [label="3 : Order of Recognition"]

block_241 [label="block 295-300"]

block_242 [label="block 301-305"]

block_243 [label="block 306-309"]

block_244 [label="block 310-311"]


header_240 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_241 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Starting from the neutral context, which is always at a newline, Grimoire
tries to make one of its initializing special forms. Failing that, it will
begin a prose block.
"]
block_242 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If there is whitespace, it affects indentation level in indicated ways.
They will not directly affect the semantics of the following form, that is,
these rules apply after any potentially block-ending newline, apart from
spaces that may be found between the newline and the character.
"]
block_243 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label="At present,  =*=, =#=,  =|=, =-=,  , =~=,  =@=, =:=  and ={=  all create
special  contexts.  A  special  context  creates a  block  in a  context
specific way.
"]
block_244 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Blocks have a left associativity which can be recursive.
"]
section_96 -> { header_250 block_251 block_252 block_253 block_254 block_255}
{rank=same; header_250 block_251 block_252 block_253 block_254 block_255}

header_250 [label="3 : Blocks"]

block_251 [label="block 312-315"]

block_252 [label="block 316-318"]

block_253 [label="block 319-323"]

block_254 [label="block 324-331"]

block_255 [label="block 332-338"]


header_250 -> leaf_256
leaf_256  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_251 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is oriented around blocks.
"]
block_252 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Blocks are at least one line long,  all restarts are on a new line.  Any
syntactic structure smaller than a block we call an element.
"]
block_253 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Some types of blocks nest.  A document is a single  block.  There may be
other semantic units such as directories, I'd think a language that uses
strict  nested heirarchy  as powerfully  as Grimoire  could dictate  the
semantics of a file system, but that's currently out of scope.
"]
block_254 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Indentation is relevant to some  kinds of blocks. In general, whitespace
matters quite a  bit in a Grimoire  document. We keep some  of the warts
out because the tab character is  illegal, and there will be a mandatory
formatter, =grym  fmt= if  you will, that  does everything  from turning
=**bold**=  into =*bold*=  (because the  extra stars  weren't used),  to
newline stripping, and so on.  This is normally applied incrementally by
the runtime editing environment.
"]
block_255 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Indentation is human  readable and, with some care, a  computer may come
to the  same conclusions a  human would. I'm  still wary of  Python, but
there's no good  reason, unless the headache of most  Python not working
correctly  on my  computer, for  reasons I  can't track  down that  seem
related to  there being two languages  invoked as 'python', counts  as a
good reason.
"]
section_41 -> { header_262 block_263 section_264}
{rank=same; header_262 block_263 section_264}

header_262 [label="2 : Syntax"]

block_263 [label="block 339-343"]

section_264 [label="section: 344-407"]


header_262 -> leaf_265
leaf_265  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_263 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Now that we've established the basic constraints, let's
start our recursive descent into the parse.
"]
section_264 -> { header_267 block_268 block_269 block_270 block_271 block_272 block_273 block_274 section_275 section_276}
{rank=same; header_267 block_268 block_269 block_270 block_271 block_272 block_273 block_274 section_275 section_276}

header_267 [label="3 : Headers"]

block_268 [label="block 344-348"]

block_269 [label="block 349-353"]

block_270 [label="block 354-359"]

block_271 [label="block 360-361"]

block_272 [label="block 362-364"]

block_273 [label="block 365-366"]

block_274 [label="block 367-407"]

section_275 [label="section: 368-368"]

section_276 [label="section: 408-419"]


header_267 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_268 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is arcically constrained by structure groups,
called headers.
"]
block_269 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="These start on a new line and begin with any number of  =*=. These must
be followed by a space mark to be valid. Contra Babel, you may
have a content-free header line, provided a space is found before the
newline.
"]
block_270 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In weaves and the like, headers represent document structure. Their
intention is structural: they support the same syntax as lists,
but the user is expected to use lists for list purposes. Putting
[TODO] in a header line should mean you have a document-specific
task to perform in that block.
"]
block_271 -> leaf_281
leaf_281  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Contra Babel, you may put spaces before the beginning of a header line.
"]
block_272 -> leaf_282
leaf_282  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The semantics of header lines are entirely determined by
the number of stars.
"]
block_273 -> leaf_283
leaf_283  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If you write
"]
block_274 -> { structure_284}
{rank=same; structure_284}

structure_284 [label="structure"]


structure_284 -> { hashline_285}
{rank=same; hashline_285}

hashline_285 [label="hashline"]


hashline_285 -> { hashtag_286}
{rank=same; hashtag_286}

hashtag_286 [label="hashtag"]


hashtag_286 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_275 -> { header_288 block_289 section_290}
{rank=same; header_288 block_289 section_290}

header_288 [label="1 : Top Header"]

block_289 [label="block 368-368"]

section_290 [label="section: 369-380"]


header_288 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_289 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_290 -> { header_293 block_294 block_295 section_296}
{rank=same; header_293 block_294 block_295 section_296}

header_293 [label="2 : Second Header"]

block_294 [label="block 369-379"]

block_295 [label="block 380-380"]

section_296 [label="section: 381-381"]


header_293 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_294 -> { structure_298}
{rank=same; structure_298}

structure_298 [label="structure"]


structure_298 -> { hashline_299}
{rank=same; hashline_299}

hashline_299 [label="hashline"]


hashline_299 -> { hashtag_300}
{rank=same; hashtag_300}

hashtag_300 [label="hashtag"]


hashtag_300 -> leaf_301
leaf_301  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_295 -> { structure_302}
{rank=same; structure_302}

structure_302 [label="structure"]


structure_302 -> { hashline_303}
{rank=same; hashline_303}

hashline_303 [label="hashline"]


hashline_303 -> { hashtag_304}
{rank=same; hashtag_304}

hashtag_304 [label="hashtag"]


hashtag_304 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_296 -> { header_306 block_307 section_308}
{rank=same; header_306 block_307 section_308}

header_306 [label="1 : Top Header ▼"]

block_307 [label="block 381-381"]

section_308 [label="section: 382-731"]


header_306 -> leaf_309
leaf_309  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_307 -> leaf_310
leaf_310  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_308 -> { header_311 block_312 block_313 block_314 block_315 section_316 section_317 section_318 section_319 section_320 section_321 section_322 section_323 section_324 section_325}
{rank=same; header_311 block_312 block_313 block_314 block_315 section_316 section_317 section_318 section_319 section_320 section_321 section_322 section_323 section_324 section_325}

header_311 [label="2 : Second Header ►"]

block_312 [label="block 382-389"]

block_313 [label="block 390-391"]

block_314 [label="block 392-395"]

block_315 [label="block 396-731"]

section_316 [label="section: 398-407"]

section_317 [label="section: 422-440"]

section_318 [label="section: 441-481"]

section_319 [label="section: 489-501"]

section_320 [label="section: 502-558"]

section_321 [label="section: 567-593"]

section_322 [label="section: 594-611"]

section_323 [label="section: 612-672"]

section_324 [label="section: 691-731"]

section_325 [label="section: 732-741"]


header_311 -> leaf_326
leaf_326  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_312 -> { structure_327}
{rank=same; structure_327}

structure_327 [label="structure"]


structure_327 -> { hashline_328}
{rank=same; hashline_328}

hashline_328 [label="hashline"]


hashline_328 -> { hashtag_329}
{rank=same; hashtag_329}

hashtag_329 [label="hashtag"]


hashtag_329 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_313 -> leaf_331
leaf_331  [color=Gray,shape=rectangle,fontname=Inconsolata,label="may contain any number of blocks.
"]
block_314 -> leaf_332
leaf_332  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"begins\" means first non-whitespace character. Indentation levels are tracked by
Nim rules, obviously a Grimoire document can contain no tab marks
and if any wander in they become four spaces.
"]
block_315 -> leaf_333
leaf_333  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Contra other block forms, tags may not precede a headline.
"]
section_316 -> { header_334 block_335 block_336 block_337}
{rank=same; header_334 block_335 block_336 block_337}

header_334 [label="4 : Header Lines"]

block_335 [label="block 398-402"]

block_336 [label="block 403-405"]

block_337 [label="block 406-407"]


header_334 -> leaf_338
leaf_338  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_335 -> leaf_339
leaf_339  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Anything after a run of =*= and a space, and before a newline, is
a header line.
"]
block_336 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Header lines and list lines are structured identically. If I discover
a necessary exception, I'll note it.
"]
block_337 -> leaf_341
leaf_341  [color=Gray,shape=rectangle,fontname=Inconsolata,label="That structure is discussed under [[*Lists][lists]].
"]
section_317 -> { header_342 block_343 block_344 block_345 block_346 block_347 block_348}
{rank=same; header_342 block_343 block_344 block_345 block_346 block_347 block_348}

header_342 [label="3 : Prose blocks"]

block_343 [label="block 422-426"]

block_344 [label="block 427-428"]

block_345 [label="block 429-432"]

block_346 [label="block 433-434"]

block_347 [label="block 435-436"]

block_348 [label="block 437-440"]


header_342 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_343 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A prose block is preceded and followed by a single newline. Extraneous
whitespace on the bare line is filtered.
"]
block_344 -> leaf_351
leaf_351  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Prose blocks may not be indented in a semantically meaningful way.
"]
block_345 -> { structure_352}
{rank=same; structure_352}

structure_352 [label="structure"]


structure_352 -> { hashline_353}
{rank=same; hashline_353}

hashline_353 [label="hashline"]


hashline_353 -> { hashtag_354}
{rank=same; hashtag_354}

hashtag_354 [label="hashtag"]


hashtag_354 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_346 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    prose
"]
block_347 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label="        prose
"]
block_348 -> { structure_358}
{rank=same; structure_358}

structure_358 [label="structure"]


structure_358 -> { hashline_359}
{rank=same; hashline_359}

hashline_359 [label="hashline"]


hashline_359 -> { hashtag_360}
{rank=same; hashtag_360}

hashtag_360 [label="hashtag"]


hashtag_360 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_318 -> { header_362 block_363 block_364 block_365 block_366 block_367 block_368 block_369 block_370 block_371 block_372 block_373 section_374}
{rank=same; header_362 block_363 block_364 block_365 block_366 block_367 block_368 block_369 block_370 block_371 block_372 block_373 section_374}

header_362 [label="3 : Prose markup"]

block_363 [label="block 441-444"]

block_364 [label="block 445-450"]

block_365 [label="block 451-452"]

block_366 [label="block 453-456"]

block_367 [label="block 457-460"]

block_368 [label="block 461-466"]

block_369 [label="block 467-468"]

block_370 [label="block 469-473"]

block_371 [label="block 474-477"]

block_372 [label="block 478-479"]

block_373 [label="block 480-481"]

section_374 [label="section: 482-488"]


header_362 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_363 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose markup rules apply in any prose contexts, not just for prose blocks.
"]
block_364 -> leaf_377
leaf_377  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We mark =*bold*=, =/italic/=, =_underline_=, =~strikethrough~=, 
and =​=literal=​=, using the indicated marks. They must not be separated 
with whitespace from the connecting prose. Any number may be used and matched,
whitespace is allowed, so =**bold math: 4 * 5**= will highlight
correctly.
"]
block_365 -> leaf_378
leaf_378  [color=Gray,shape=rectangle,fontname=Inconsolata,label="There is also [[*Inline%20Code][Inline Code]], which is formatted =`code`=.
"]
block_366 -> leaf_379
leaf_379  [color=Gray,shape=rectangle,fontname=Inconsolata,label="These all follow the prose markup rule: any number of the starting
character matches the same number of the ending character in the
document string.
"]
block_367 -> leaf_380
leaf_380  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We make subscripts mildly annoying, =sub__script= and =super^^script=, 
to avoid colliding the former with =snake_case=. That's a lot of ways 
to parse the =_= character...
"]
block_368 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In general, prose is more 'active'  than in Babel. There are more things
you can't say without triggering a parsed data structure.  Due to quirks
of Org  involving string  escaping, =`\\\"\\\"`=  can't be  literally quoted
without repercussions. Check  out the source if you enjoy pounding your
head in frustration at the nastiness of escaped strings.
"]
block_369 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Let's just use a code block:
"]
block_370 -> { structure_383 structure_384}
{rank=same; structure_383 structure_384}

structure_383 [label="structure"]

structure_384 [label="structure"]


structure_383 -> { hashline_385}
{rank=same; hashline_385}

hashline_385 [label="hashline"]


hashline_385 -> { hashtag_386}
{rank=same; hashtag_386}

hashtag_386 [label="hashtag"]


hashtag_386 -> leaf_387
leaf_387  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_384 -> { hashline_388}
{rank=same; hashline_388}

hashline_388 [label="hashline"]


hashline_388 -> { hashtag_389}
{rank=same; hashtag_389}

hashtag_389 [label="hashtag"]


hashtag_389 -> leaf_390
leaf_390  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_371 -> leaf_391
leaf_391  [color=Gray,shape=rectangle,fontname=Inconsolata,label="one, of the \" character. This is pretty-printed in edit mode as =‟literal”=,
but such a string does *not* create escaping, we rely on semantic highlighting
to make the distinction clear.
"]
block_372 -> leaf_392
leaf_392  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Any number of \"\"\"\" collapse into one set of such balanced quites.
"]
block_373 -> leaf_393
leaf_393  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In the woven documentation, no quotation marks appear, just the string.
"]
section_374 -> { header_394 block_395}
{rank=same; header_394 block_395}

header_394 [label="4 : Latex"]

block_395 [label="block 482-488"]


header_394 -> leaf_396
leaf_396  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_395 -> leaf_397
leaf_397  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For further markup purposes in a prose context, we escape to LaTeX. The
syntax is =`\\latex`=, where the backslash causes us to use LaTeX instead
of Lua. Our TeX backend is LuaTeX, giving arbitrary levels of control from
within a Grimoire-native language.
"]
section_319 -> { header_398 block_399 block_400 block_401}
{rank=same; header_398 block_399 block_400 block_401}

header_398 [label="3 : Comments"]

block_399 [label="block 489-493"]

block_400 [label="block 494-497"]

block_401 [label="block 498-501"]


header_398 -> leaf_402
leaf_402  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_399 -> leaf_403
leaf_403  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In a structure context, you may place line comments. These begin with =--=
and continue to the end of a line.
"]
block_400 -> leaf_404
leaf_404  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Commenting out a header line, or anything else, causes it to be ignored.
It does *not* result in any subdata being commented out, though it will
in the case of a headline change the ownership of the owned blocks.
"]
block_401 -> leaf_405
leaf_405  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The  tag =#comment=  in a  valid tag  content position  marks the  owned
region  of  the tagged  block  as  a  comment.  Nothing within  will  be
evaluated or exported, though it will be parsed.
"]
section_320 -> { header_406 block_407 block_408 block_409 block_410 block_411 block_412 block_413 block_414 block_415 block_416 block_417 block_418 block_419 block_420 block_421 block_422 section_423}
{rank=same; header_406 block_407 block_408 block_409 block_410 block_411 block_412 block_413 block_414 block_415 block_416 block_417 block_418 block_419 block_420 block_421 block_422 section_423}

header_406 [label="3 : Marks"]

block_407 [label="block 502-506"]

block_408 [label="block 507-509"]

block_409 [label="block 510-512"]

block_410 [label="block 513-515"]

block_411 [label="block 516-517"]

block_412 [label="block 518-522"]

block_413 [label="block 523-526"]

block_414 [label="block 527-528"]

block_415 [label="block 529-530"]

block_416 [label="block 531-535"]

block_417 [label="block 536-538"]

block_418 [label="block 539-542"]

block_419 [label="block 543-546"]

block_420 [label="block 547-549"]

block_421 [label="block 550-551"]

block_422 [label="block 552-558"]

section_423 [label="section: 559-566"]


header_406 -> leaf_424
leaf_424  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_407 -> leaf_425
leaf_425  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Marks provide global semantic categories for Grimoire. They may appear
anywhere, including a prose context, whitespace is required on both sides.
"]
block_408 -> leaf_426
leaf_426  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We use  a couple kinds  of marks:  =@names= name things,  and =#tags=
categorize them. Tags are semantics, while names are nominal. 
"]
block_409 -> leaf_427
leaf_427  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Tags that  are boundaries are  paired as  =#tag= and =#/tag=,  plus some
light sugaring. Names are never bounded
"]
block_410 -> leaf_428
leaf_428  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Marks in the first position own the following line. If there is indentation
below that line, they own that too. This doesn't affect the associativity.
"]
block_411 -> leaf_429
leaf_429  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Marks may be namespaced, as =@name.subname= or =#tag.sub-tag.sub-tag=.
"]
block_412 -> leaf_430
leaf_430  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If  you  require   further  namespacing,  =@many/levels/java.class=  and
=#mojo/nation.space/station=  is your  friend. Codices (that is, projects
following the bridge conventions for organization) will use namespacing
in a consistent way. 
"]
block_413 -> leaf_431
leaf_431  [color=Gray,shape=rectangle,fontname=Inconsolata,label="As I continue to muse on it, I  can think of no reason why marks couldn't follow
URI syntax,  or at  least mirror  it closely.  Chaining marks  is not  valid, so
=@named@example.com= could be a valid name. 
"]
block_414 -> leaf_432
leaf_432  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This would mean we could say something like =@file://~/usr/blah=.
"]
block_415 -> leaf_433
leaf_433  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Or =#!/usr/bin/perl/=...
"]
block_416 -> leaf_434
leaf_434  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Yes. This  is a good idea.  Let's do this.  It doesn't displace [[*Links][link]]  syntax, it
enhances it. A  URI [[http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax][may not begin with  a slash]] so this is  parse-clean for tags
and names both. Tags aren't intended to  be user extensible in the narrow sense,
but uniformity is a virtue.
"]
block_417 -> leaf_435
leaf_435  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I don't know why you might want to stick a query in a tag. It's not my
place to know. We just slap a parser on that puppy and continue.
"]
block_418 -> leaf_436
leaf_436  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Implication: The hash or at should be syntax highlighted a different color
from the tag. I'd say hash and at get the same color, with categories and
symbols getting different ones.
"]
block_419 -> leaf_437
leaf_437  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Apparently, [[http://blog.nig.gl/post/48802013022/although-parentheses-are-technically-allowed-in][parentheses are allowed in URLs]], but follow the link, they
suck and you should never use them. They play badly with our calling
convention for named structures, and aren't allowed in our schema.
"]
block_420 -> leaf_438
leaf_438  [color=Gray,shape=rectangle,fontname=Inconsolata,label="It's not a real URI anyway, or it can be but it's also allowed to be a legal
fragment without the handle. In our case the assumed handle is =grimoire://=?
"]
block_421 -> leaf_439
leaf_439  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Not a real URI. But an acceptable fake one.
"]
block_422 -> leaf_440
leaf_440  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The actual rule for a mark is that it begins with =@= or =#= and is surrounded
by whitespace. Internal parsing of the mark is part of recognition, anything 
not recognized is subsequently ignored. It's still considered a mark for e.g. 
weaving purposes. 


"]
section_423 -> { header_441 block_442 block_443}
{rank=same; header_441 block_442 block_443}

header_441 [label="4 : Plural Hashtags"]

block_442 [label="block 559-563"]

block_443 [label="block 564-566"]


header_441 -> leaf_444
leaf_444  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_442 -> leaf_445
leaf_445  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In some cases, such as =#formula= and =#formulas=, a tag may have a
singular or plural form. These are equivalent from the runtimes perspective.
"]
block_443 -> leaf_446
leaf_446  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The same concept applies to pairs such as =#export= and =#exports=, though
the linguistic distinction is not that of plurality.
"]
section_321 -> { header_447 block_448 block_449 block_450 block_451 block_452 block_453}
{rank=same; header_447 block_448 block_449 block_450 block_451 block_452 block_453}

header_447 [label="3 : Classes"]

block_448 [label="block 567-574"]

block_449 [label="block 575-578"]

block_450 [label="block 579-582"]

block_451 [label="block 583-585"]

block_452 [label="block 586-589"]

block_453 [label="block 590-593"]


header_447 -> leaf_454
leaf_454  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_448 -> leaf_455
leaf_455  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags are for Grimoire. A category provides runtime semantics,
cooperating with structure groups to provide the API. Names
play the role of a value in languages which provide a
value-variable distinction: every name within a documents reachable
namespace must be globally unique.
"]
block_449 -> leaf_456
leaf_456  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Specifically names are globally hyperstatic: any redefinition affects
the referent from the moment the parser receives it forward. Redefinitions
are warned against and have no utility, don't do it.
"]
block_450 -> leaf_457
leaf_457  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Classes are roughly equivalent to categories/hashtags, but
for the user. They have a light semantics similar to their
function in Org.
"]
block_451 -> leaf_458
leaf_458  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A class is defined as =:Class:= or =:class:= including
=:several:Classes:chained:=.
"]
block_452 -> leaf_459
leaf_459  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A capital letter means the class inherits onto all subgroups of the block,
a miniscule means the class is associated with the indentation level it is
found within.
"]
block_453 -> leaf_460
leaf_460  [color=Gray,shape=rectangle,fontname=Inconsolata,label="You know you're programming a computer when class and category have distinct
semantics. At least there are no objects, and only two primitive types,
structure and prose.
"]
section_322 -> { header_461 block_462 block_463 block_464 block_465 block_466}
{rank=same; header_461 block_462 block_463 block_464 block_465 block_466}

header_461 [label="3 : Links"]

block_462 [label="block 594-597"]

block_463 [label="block 598-599"]

block_464 [label="block 600-605"]

block_465 [label="block 606-608"]

block_466 [label="block 609-611"]


header_461 -> leaf_467
leaf_467  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_462 -> leaf_468
leaf_468  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There's nothing at all wrong with the syntax or behavior of Babel links.
"]
block_463 -> leaf_469
leaf_469  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Which look like this:
"]
block_464 -> { structure_470 structure_471}
{rank=same; structure_470 structure_471}

structure_470 [label="structure"]

structure_471 [label="structure"]


structure_470 -> { hashline_472}
{rank=same; hashline_472}

hashline_472 [label="hashline"]


hashline_472 -> { hashtag_473}
{rank=same; hashtag_473}

hashtag_473 [label="hashtag"]


hashtag_473 -> leaf_474
leaf_474  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_471 -> { hashline_475}
{rank=same; hashline_475}

hashline_475 [label="hashline"]


hashline_475 -> { hashtag_476}
{rank=same; hashtag_476}

hashtag_476 [label="hashtag"]


hashtag_476 -> leaf_477
leaf_477  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_465 -> leaf_478
leaf_478  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We won't support legacy forms of footnoting, such as =[1]=. This applies
to legacy versions of table formulas and list syntax also.
"]
block_466 -> leaf_479
leaf_479  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In Grimoire  there's one way  to do things.  At least, we  avoid variant
syntax with identical semantics.
"]
section_323 -> { header_480 block_481 block_482 block_483 block_484 block_485 block_486 block_487 block_488 block_489 block_490 block_491 block_492 block_493 block_494 section_495}
{rank=same; header_480 block_481 block_482 block_483 block_484 block_485 block_486 block_487 block_488 block_489 block_490 block_491 block_492 block_493 block_494 section_495}

header_480 [label="3 : Cookies"]

block_481 [label="block 612-616"]

block_482 [label="block 617-620"]

block_483 [label="block 621-624"]

block_484 [label="block 625-628"]

block_485 [label="block 629-633"]

block_486 [label="block 634-639"]

block_487 [label="block 640-642"]

block_488 [label="block 643-645"]

block_489 [label="block 646-650"]

block_490 [label="block 651-654"]

block_491 [label="block 655-660"]

block_492 [label="block 661-665"]

block_493 [label="block 666-669"]

block_494 [label="block 670-672"]

section_495 [label="section: 673-690"]


header_480 -> leaf_496
leaf_496  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_481 -> leaf_497
leaf_497  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
List line contexts (header lines and list lines) may have cookies. A
cookie looks like =[ ]=, it must have contents and a space on both sides.
"]
block_482 -> leaf_498
leaf_498  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Cookies are valid after the symbol that defines the list line, but before
anything else. They are also valid at the end of a list line, in which
case they are preceded by a space and followed by a newline.
"]
block_483 -> leaf_499
leaf_499  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Cookies are distinctive in that they may only be applied to list lines.
Most other token-like groups, specifically tags, classes, and inline drawers,
may be embedded into all prose contexts excepting literal strings.
"]
block_484 -> leaf_500
leaf_500  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Cookies are used similarly to cookies in Org, but with consistent semantics.
A simple cookie set is \"X\" and \" \", the user cycles through them. TODO and
DONE are another option.
"]
block_485 -> leaf_501
leaf_501  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I don't want cookies to turn into lightweight tables. Still, saying to
the user \"you may have precisely two cookies a line\" is restrictive.
It's not a violation of the [[http://c2.com/cgi/wiki?TwoIsAnImpossibleNumber][\"Two is an Impossible Number\"]] principle,
because they're head and tail. I think this is ugly:
"]
block_486 -> { structure_502 structure_503}
{rank=same; structure_502 structure_503}

structure_502 [label="structure"]

structure_503 [label="structure"]


structure_502 -> { hashline_504}
{rank=same; hashline_504}

hashline_504 [label="hashline"]


hashline_504 -> { hashtag_505}
{rank=same; hashtag_505}

hashtag_505 [label="hashtag"]


hashtag_505 -> leaf_506
leaf_506  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_503 -> { hashline_507}
{rank=same; hashline_507}

hashline_507 [label="hashline"]


hashline_507 -> { hashtag_508}
{rank=same; hashtag_508}

hashtag_508 [label="hashtag"]


hashtag_508 -> leaf_509
leaf_509  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_487 -> leaf_510
leaf_510  [color=Gray,shape=rectangle,fontname=Inconsolata,label="You can stick a table in a list. I don't know if I mentioned, it's kind
of an obvious thing, I'll write a unit for it at some point.
"]
block_488 -> leaf_511
leaf_511  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Still. I can see a case for two on the left. Once you allow two, you allow
n, without excellent reason.
"]
block_489 -> leaf_512
leaf_512  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[[*Radio%20cookies][Radio cookies]] must be the leftmost cookie on a line, only one is of course allowed.
I could allow a single-line short form multi-radio-button interface but what
is it, a fancy text slider for some value? No. Any number of ordinary cookies
can follow. Knock yourself out.
"]
block_490 -> leaf_513
leaf_513  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Anything more than a couple and one should consider a class or a table.
Handrolling data structures is perverse in a markup language, and I'm
still tempted to forbid it.
"]
block_491 -> leaf_514
leaf_514  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I don't like distinctions without difference. A cookie at the end of a
line is filled by Grimoire, not the user. This mirrors Org's use, which is
to display either a percent or a n/m marker for completion of list items.
The user seeds the cookie, in these cases with =%= or =/=, and the runtime
does the rest.
"]
block_492 -> leaf_515
leaf_515  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Adding more than one such structure to the tail list would complicate the
reference syntax, which I haven't designed, and again, it's just not necessary.
Grimoire can fill in any data structure, \"n-dimensional end cookie array\"
isn't one we have a compelling need for.
"]
block_493 -> leaf_516
leaf_516  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Cookies could interact badly with link syntax. I don't think a [bare box]
qualifies as a link in Org, clearly it doesn't, we can follow that notion
and disallow \"[]\" as a filling for cookies.
"]
block_494 -> leaf_517
leaf_517  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I also think they should be allowed in table cells, which have their own
context which is mostly handwaved right now but is prose++.
"]
section_495 -> { header_518 block_519 block_520 block_521 block_522}
{rank=same; header_518 block_519 block_520 block_521 block_522}

header_518 [label="4 : Radio cookies"]

block_519 [label="block 673-678"]

block_520 [label="block 679-681"]

block_521 [label="block 682-687"]

block_522 [label="block 688-690"]


header_518 -> leaf_523
leaf_523  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_519 -> leaf_524
leaf_524  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We have one 'weird cookie'. A radio cookie, which looks like =( )=,
must be present at the head position of list line contexts. All
list lines at the same level of indentation must have one, if one does.
"]
block_520 -> leaf_525
leaf_525  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Only one is selected at any given time. These would be awkward to add
into tables, to little gain.
"]
block_521 -> leaf_526
leaf_526  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This comes perilously close to pushing us into the realm of error.
The formatter adds buttons to an entire subtree if one member has it,
and if more than one is ticked off, it warns if possible or removes
all but the first mark encountered. If none are present the first
option is selected.
"]
block_522 -> leaf_527
leaf_527  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The runtime will not normally build an invalid radio list, but
Grimoire must import plain text.
"]
section_324 -> { header_528 block_529 block_530 block_531 block_532 block_533 block_534 block_535 block_536 block_537}
{rank=same; header_528 block_529 block_530 block_531 block_532 block_533 block_534 block_535 block_536 block_537}

header_528 [label="3 : Drawers"]

block_529 [label="block 691-695"]

block_530 [label="block 696-702"]

block_531 [label="block 703-705"]

block_532 [label="block 706-708"]

block_533 [label="block 709-710"]

block_534 [label="block 711-721"]

block_535 [label="block 722-724"]

block_536 [label="block 725-727"]

block_537 [label="block 728-731"]


header_528 -> leaf_538
leaf_538  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_529 -> leaf_539
leaf_539  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A drawer is a block that's hidden by default. The computer sees it,
the user sees ⦿, or a similar rune.
"]
block_530 -> { structure_540 structure_541}
{rank=same; structure_540 structure_541}

structure_540 [label="structure"]

structure_541 [label="structure"]


structure_540 -> { hashline_542}
{rank=same; hashline_542}

hashline_542 [label="hashline"]


hashline_542 -> { hashtag_543}
{rank=same; hashtag_543}

hashtag_543 [label="hashtag"]


hashtag_543 -> leaf_544
leaf_544  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_541 -> { hashline_545}
{rank=same; hashline_545}

hashline_545 [label="hashline"]


hashline_545 -> { hashtag_546}
{rank=same; hashtag_546}

hashtag_546 [label="hashtag"]


hashtag_546 -> leaf_547
leaf_547  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_531 -> leaf_548
leaf_548  [color=Gray,shape=rectangle,fontname=Inconsolata,label="without opening it. Deleting into an ordinary fold marker opens the fold,
deleting towards a drawer marker skips past it.
"]
block_532 -> leaf_549
leaf_549  [color=Gray,shape=rectangle,fontname=Inconsolata,label="=a-drawer=  is  a type,  not  a  name, something  like  =weave=  or =tangle=  in
practice. This may or  may not be supported with a =#weave=  tag. 
"]
block_533 -> leaf_550
leaf_550  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I'm not entirely sure how to interact names with drawers, perhaps like this:
"]
block_534 -> { structure_551 structure_552 structure_553}
{rank=same; structure_551 structure_552 structure_553}

structure_551 [label="structure"]

structure_552 [label="structure"]

structure_553 [label="structure"]


structure_551 -> { hashline_554}
{rank=same; hashline_554}

hashline_554 [label="hashline"]


hashline_554 -> { hashtag_555}
{rank=same; hashtag_555}

hashtag_555 [label="hashtag"]


hashtag_555 -> leaf_556
leaf_556  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_552 -> { handleline_557}
{rank=same; handleline_557}

handleline_557 [label="handleline"]


handleline_557 -> { handle_558}
{rank=same; handle_558}

handle_558 [label="handle"]


handle_558 -> leaf_559
leaf_559  [color=Gray,shape=rectangle,fontname=Inconsolata,label="drawer-name"]
structure_553 -> { hashline_560}
{rank=same; hashline_560}

hashline_560 [label="hashline"]


hashline_560 -> { hashtag_561}
{rank=same; hashtag_561}

hashtag_561 [label="hashtag"]


hashtag_561 -> leaf_562
leaf_562  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_535 -> leaf_563
leaf_563  [color=Gray,shape=rectangle,fontname=Inconsolata,label="should keep it closed unless it's  open, those are the only additional semantics
associated.
"]
block_536 -> leaf_564
leaf_564  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This lets master wizards embed unobtrusive magic into documents for apprentice
wizards to spell with.
"]
block_537 -> leaf_565
leaf_565  [color=Gray,shape=rectangle,fontname=Inconsolata,label="An inline drawer looks like =:[[some contents]]:=.  As usual when we say \"inline\" it
can be as long as you want. Being anonymous, because untagged, the only semantics
of such a drawer are to hide the contents in source mode. 
"]
section_325 -> { header_566 block_567 block_568 block_569 block_570 section_571}
{rank=same; header_566 block_567 block_568 block_569 block_570 section_571}

header_566 [label="3 : Runes"]

block_567 [label="block 732-735"]

block_568 [label="block 736-738"]

block_569 [label="block 739-740"]

block_570 [label="block 741-741"]

section_571 [label="section: 742-742"]


header_566 -> leaf_572
leaf_572  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_567 -> leaf_573
leaf_573  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
After drawers is as good a place to put runes as any.
"]
block_568 -> leaf_574
leaf_574  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Runes are characters drawn from the pictographic zones of Unicode,
which describe semantic activity within a document.
"]
block_569 -> leaf_575
leaf_575  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Contra Org, when we have something like the aformentioned:
"]
block_570 -> { structure_576}
{rank=same; structure_576}

structure_576 [label="structure"]


structure_576 -> { hashline_577}
{rank=same; hashline_577}

hashline_577 [label="hashline"]


hashline_577 -> { hashtag_578}
{rank=same; hashtag_578}

hashtag_578 [label="hashtag"]


hashtag_578 -> leaf_579
leaf_579  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_571 -> { header_580 block_581 section_582}
{rank=same; header_580 block_581 section_582}

header_580 [label="1 : Top Header ▼"]

block_581 [label="block 742-742"]

section_582 [label="section: 743-924"]


header_580 -> leaf_583
leaf_583  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_581 -> leaf_584
leaf_584  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_582 -> { header_585 block_586 block_587 block_588 block_589 block_590 block_591 block_592 block_593 section_594 section_595 section_596 section_597 section_598}
{rank=same; header_585 block_586 block_587 block_588 block_589 block_590 block_591 block_592 block_593 section_594 section_595 section_596 section_597 section_598}

header_585 [label="2 : Second Header ►"]

block_586 [label="block 743-749"]

block_587 [label="block 750-752"]

block_588 [label="block 753-755"]

block_589 [label="block 756-757"]

block_590 [label="block 758-760"]

block_591 [label="block 761-765"]

block_592 [label="block 766-768"]

block_593 [label="block 769-924"]

section_594 [label="section: 772-822"]

section_595 [label="section: 823-843"]

section_596 [label="section: 844-910"]

section_597 [label="section: 911-924"]

section_598 [label="section: 925-963"]


header_585 -> leaf_599
leaf_599  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_586 -> { structure_600}
{rank=same; structure_600}

structure_600 [label="structure"]


structure_600 -> { hashline_601}
{rank=same; hashline_601}

hashline_601 [label="hashline"]


hashline_601 -> { hashtag_602}
{rank=same; hashtag_602}

hashtag_602 [label="hashtag"]


hashtag_602 -> leaf_603
leaf_603  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_587 -> leaf_604
leaf_604  [color=Gray,shape=rectangle,fontname=Inconsolata,label="any transformation we may take. If you load up last Wednesday's
version of something, it will be in last Wednesday's fold state.
"]
block_588 -> leaf_605
leaf_605  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This lets us have richer folding semantics, like \"don't unfold when
cycling\". It lets us have richer drawer semantics, and so on.
"]
block_589 -> leaf_606
leaf_606  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We will reserve a number of characters for this purpose, at least
"]
block_590 -> leaf_607
leaf_607  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| ▼ |  ► | ⦿ |
    |
"]
block_591 -> leaf_608
leaf_608  [color=Gray,shape=rectangle,fontname=Inconsolata,label="It's legal to delete runes, like anything else. It's also legal to
insert them manually. Neither of these paradigms is typical;
deleting into a rune may or may not cause it to disappear in
normal edit mode.
"]
block_592 -> leaf_609
leaf_609  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Runes, like absolutely everything in Grimoire, are prose if encountered
in a context where they aren't valid structure.
"]
block_593 -> leaf_610
leaf_610  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We will most likely reuse runes inside cookies, though it's just as valid
and quite typical to use normal letters or words.
"]
section_594 -> { header_611 block_612 block_613 block_614 block_615 block_616 block_617 block_618}
{rank=same; header_611 block_612 block_613 block_614 block_615 block_616 block_617 block_618}

header_611 [label="3 : Lists"]

block_612 [label="block 772-779"]

block_613 [label="block 780-781"]

block_614 [label="block 782-796"]

block_615 [label="block 797-798"]

block_616 [label="block 799-800"]

block_617 [label="block 801-820"]

block_618 [label="block 821-822"]


header_611 -> leaf_619
leaf_619  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_612 -> leaf_620
leaf_620  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something that irks me about Org is basically historic. It was a TODO
list first, and became a heiarchical document editor later. As a result,
the functions that let you tag, track, and so on, are in the wrong place;
an Org file has to choose whether or not it's a task list or a document,
which doesn't fit the metalanguage paradigm cleanly.
"]
block_613 -> leaf_621
leaf_621  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A list looks like this:
"]
block_614 -> { structure_622 structure_623}
{rank=same; structure_622 structure_623}

structure_622 [label="structure"]

structure_623 [label="structure"]


structure_622 -> { hashline_624}
{rank=same; hashline_624}

hashline_624 [label="hashline"]


hashline_624 -> { hashtag_625}
{rank=same; hashtag_625}

hashtag_625 [label="hashtag"]


hashtag_625 -> leaf_626
leaf_626  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_623 -> { hashline_627}
{rank=same; hashline_627}

hashline_627 [label="hashline"]


hashline_627 -> { hashtag_628}
{rank=same; hashtag_628}

hashtag_628 [label="hashtag"]


hashtag_628 -> leaf_629
leaf_629  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_615 -> leaf_630
leaf_630  [color=Gray,shape=rectangle,fontname=Inconsolata,label="and we have radio buttons.
"]
block_616 -> leaf_631
leaf_631  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We also have whitespace lists:
"]
block_617 -> { structure_632}
{rank=same; structure_632}

structure_632 [label="structure"]


structure_632 -> { hashline_633}
{rank=same; hashline_633}

hashline_633 [label="hashline"]


hashline_633 -> { hashtag_634}
{rank=same; hashtag_634}

hashtag_634 [label="hashtag"]


hashtag_634 -> leaf_635
leaf_635  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_618 -> { structure_636}
{rank=same; structure_636}

structure_636 [label="structure"]


structure_636 -> { hashline_637}
{rank=same; hashline_637}

hashline_637 [label="hashline"]


hashline_637 -> { hashtag_638}
{rank=same; hashtag_638}

hashtag_638 [label="hashtag"]


hashtag_638 -> leaf_639
leaf_639  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_595 -> { header_640 block_641 block_642 block_643 block_644 block_645}
{rank=same; header_640 block_641 block_642 block_643 block_644 block_645}

header_640 [label="3 : Embedded Data"]

block_641 [label="block 823-829"]

block_642 [label="block 830-832"]

block_643 [label="block 833-835"]

block_644 [label="block 836-840"]

block_645 [label="block 841-843"]


header_640 -> leaf_646
leaf_646  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_641 -> leaf_647
leaf_647  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Anything found in prose between ={= and =}= is EDN. Note that the
outermost pair of curlies denotes a boundary. ={ foo }= is the symbol
foo, ={ foo bar }= is the symbol *foo* and the symbol *bar*, ={{foo bar}}= is
a map with key *foo* and value *bar*.
"]
block_642 -> leaf_648
leaf_648  [color=Gray,shape=rectangle,fontname=Inconsolata,label="To quote the [[https://github.com/edn-format/edn][spec]], \"There is no enclosing element at the top level\". The
braces mark the boundaries of the data region.
"]
block_643 -> leaf_649
leaf_649  [color=Gray,shape=rectangle,fontname=Inconsolata,label="There is a mapping between lists and EDN, the basics of which will be clear
to the astute reader. The non-basics are unclear to the author as well.
"]
block_644 -> leaf_650
leaf_650  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Unresolved: may data be inlined into prose? What would that even mean?
slap some colors on it in the document? If we want to provide a 'this is
code but not for interpretation' mark, we will, it won't be EDN specific.
Inlining colorized code is not high on my todo list.
"]
block_645 -> leaf_651
leaf_651  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I don't think you can. Embeds are down here with lists and
tables in 'things you can't inline', for now.
"]
section_596 -> { header_652 block_653 block_654 block_655 block_656 block_657 block_658 block_659 block_660 block_661 block_662 block_663 block_664 block_665 block_666 block_667 block_668}
{rank=same; header_652 block_653 block_654 block_655 block_656 block_657 block_658 block_659 block_660 block_661 block_662 block_663 block_664 block_665 block_666 block_667 block_668}

header_652 [label="3 : Tables"]

block_653 [label="block 844-848"]

block_654 [label="block 849-852"]

block_655 [label="block 853-855"]

block_656 [label="block 856-857"]

block_657 [label="block 858-863"]

block_658 [label="block 864-869"]

block_659 [label="block 870-875"]

block_660 [label="block 876-882"]

block_661 [label="block 883-889"]

block_662 [label="block 890-891"]

block_663 [label="block 892-896"]

block_664 [label="block 897-898"]

block_665 [label="block 899-901"]

block_666 [label="block 902-904"]

block_667 [label="block 905-906"]

block_668 [label="block 907-910"]


header_652 -> leaf_669
leaf_669  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_653 -> leaf_670
leaf_670  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The way tables work in Babel is fine and needs little polish. Any modest
improvements we make will be in the face of considerable experience.
"]
block_654 -> leaf_671
leaf_671  [color=Gray,shape=rectangle,fontname=Inconsolata,label="For example, I expect there's a way to make multiple literal rows serve
as a single row in existing Org, but I don't know what it is. I'll be
playing around a lot in the coming weeks, I hope.
"]
block_655 -> leaf_672
leaf_672  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Composability being an overarching goal, we can embed anything in a table
that we would put elsewhere.
"]
block_656 -> leaf_673
leaf_673  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Looks something like this:
"]
block_657 -> { structure_674}
{rank=same; structure_674}

structure_674 [label="structure"]


structure_674 -> { hashline_675}
{rank=same; hashline_675}

hashline_675 [label="hashline"]


hashline_675 -> { hashtag_676}
{rank=same; hashtag_676}

hashtag_676 [label="hashtag"]


hashtag_676 -> leaf_677
leaf_677  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_658 -> { structure_678 structure_679}
{rank=same; structure_678 structure_679}

structure_678 [label="structure"]

structure_679 [label="structure"]


structure_678 -> { hashline_680}
{rank=same; hashline_680}

hashline_680 [label="hashline"]


hashline_680 -> { hashtag_681}
{rank=same; hashtag_681}

hashtag_681 [label="hashtag"]


hashtag_681 -> leaf_682
leaf_682  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_679 -> { hashline_683}
{rank=same; hashline_683}

hashline_683 [label="hashline"]


hashline_683 -> { hashtag_684}
{rank=same; hashtag_684}

hashtag_684 [label="hashtag"]


hashtag_684 -> leaf_685
leaf_685  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_659 -> { structure_686}
{rank=same; structure_686}

structure_686 [label="structure"]


structure_686 -> { hashline_687}
{rank=same; hashline_687}

hashline_687 [label="hashline"]


hashline_687 -> { hashtag_688}
{rank=same; hashtag_688}

hashtag_688 [label="hashtag"]


hashtag_688 -> leaf_689
leaf_689  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_660 -> { structure_690 structure_691}
{rank=same; structure_690 structure_691}

structure_690 [label="structure"]

structure_691 [label="structure"]


structure_690 -> { hashline_692}
{rank=same; hashline_692}

hashline_692 [label="hashline"]


hashline_692 -> { hashtag_693}
{rank=same; hashtag_693}

hashtag_693 [label="hashtag"]


hashtag_693 -> leaf_694
leaf_694  [color=Gray,shape=rectangle,fontname=Inconsolata,label="formulas"]
structure_691 -> { hashline_695}
{rank=same; hashline_695}

hashline_695 [label="hashline"]


hashline_695 -> { hashtag_696}
{rank=same; hashtag_696}

hashtag_696 [label="hashtag"]


hashtag_696 -> leaf_697
leaf_697  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_661 -> leaf_698
leaf_698  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A subtle point of parsing I'm not sure is correct is =#formulas -=
or =- #formulas=. I feel like by normal associativity the latter
attaches the tag to the list, then nothing to the tag,
since the rule is a tag preceded only by whitespace owns the line
after it and indentations below it. The tag doesn't affect the indentation level
of the =-=, which could be confusing but won't be.
"]
block_662 -> leaf_699
leaf_699  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We should be able to tag tables like this:
"]
block_663 -> { structure_700 structure_701}
{rank=same; structure_700 structure_701}

structure_700 [label="structure"]

structure_701 [label="structure"]


structure_700 -> { hashline_702}
{rank=same; hashline_702}

hashline_702 [label="hashline"]


hashline_702 -> { hashtag_703}
{rank=same; hashtag_703}

hashtag_703 [label="hashtag"]


hashtag_703 -> leaf_704
leaf_704  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_701 -> { handleline_705}
{rank=same; handleline_705}

handleline_705 [label="handleline"]


handleline_705 -> { handle_706}
{rank=same; handle_706}

handle_706 [label="handle"]


handle_706 -> leaf_707
leaf_707  [color=Gray,shape=rectangle,fontname=Inconsolata,label="named-table"]
block_664 -> { structure_708}
{rank=same; structure_708}

structure_708 [label="structure"]


structure_708 -> { hashline_709}
{rank=same; hashline_709}

hashline_709 [label="hashline"]


hashline_709 -> { hashtag_710}
{rank=same; hashtag_710}

hashtag_710 [label="hashtag"]


hashtag_710 -> leaf_711
leaf_711  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_665 -> { structure_712}
{rank=same; structure_712}

structure_712 [label="structure"]


structure_712 -> { hashline_713}
{rank=same; hashline_713}

hashline_713 [label="hashline"]


hashline_713 -> { hashtag_714}
{rank=same; hashtag_714}

hashtag_714 [label="hashtag"]


hashtag_714 -> leaf_715
leaf_715  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_666 -> leaf_716
leaf_716  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Totally okay in this context, doesn't trigger Nim rules because the table
associates to the tag anyway.
"]
block_667 -> leaf_717
leaf_717  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This gives us a nice left gutter which I propose we can use in various ways.
"]
block_668 -> leaf_718
leaf_718  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This section can get much longer. Generalizing how tables work is incredibly
powerful. My dream is to embed APL into Grimoire. Give me an excuse to
finally learn it!
"]
section_597 -> { header_719 block_720 block_721 block_722 block_723 block_724}
{rank=same; header_719 block_720 block_721 block_722 block_723 block_724}

header_719 [label="3 : Clocks"]

block_720 [label="block 911-914"]

block_721 [label="block 915-916"]

block_722 [label="block 917-918"]

block_723 [label="block 919-920"]

block_724 [label="block 921-924"]


header_719 -> leaf_725
leaf_725  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_720 -> leaf_726
leaf_726  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I think timestamps are just a drawer you put a timestamp in.
"]
block_721 -> leaf_727
leaf_727  [color=Gray,shape=rectangle,fontname=Inconsolata,label="That drawer can collapse and look like ⏱.
"]
block_722 -> leaf_728
leaf_728  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Or we can collapse it into something from the set containing 🕞.
"]
block_723 -> leaf_729
leaf_729  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Which normal Emacs doesn't display. I really need to go Japanese soon.
"]
block_724 -> leaf_730
leaf_730  [color=Gray,shape=rectangle,fontname=Inconsolata,label="But it would be just adorable to have a little clock representing the timestamp.
Emoji are quirky but the set contains useful icons, and it's Unicode.
Grimoire supports Unicode.
"]
section_598 -> { header_731 block_732 block_733 block_734 block_735 section_736 section_737}
{rank=same; header_731 block_732 block_733 block_734 block_735 section_736 section_737}

header_731 [label="3 : Code"]

block_732 [label="block 925-928"]

block_733 [label="block 929-933"]

block_734 [label="block 934-937"]

block_735 [label="block 938-963"]

section_736 [label="section: 946-963"]

section_737 [label="section: 964-1084"]


header_731 -> leaf_738
leaf_738  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_732 -> leaf_739
leaf_739  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The place where it all comes together.
"]
block_733 -> leaf_740
leaf_740  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire has a servant language, Lua by default, but this
is of course configurable. Eventually we'll write Clu,
it's a race to see which project is finished first but they
have common dependencies, surprise, surprise.
"]
block_734 -> leaf_741
leaf_741  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Code and data are yin and yang in Grimoire. Code embedded in
documents is executed in various ways and times; comments within
code blocks are themselves in Grimoire data format, and so on.
"]
block_735 -> leaf_742
leaf_742  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Given a single language Grimoire text, we can perform a mechanical
figure-ground reversal, such that data blocks become comments and
code blocks become live. We have many more sophisticated weave and
tangle operations, but this is a designed-in property that will prove
handy: sometimes you want to take code, org it up, and then flip it
into a literate context. Upgrade path for existing codebases.

"]
section_736 -> { header_743 block_744 block_745 block_746 block_747}
{rank=same; header_743 block_744 block_745 block_746 block_747}

header_743 [label="4 : Inline Code"]

block_744 [label="block 946-951"]

block_745 [label="block 952-958"]

block_746 [label="block 959-960"]

block_747 [label="block 961-963"]


header_743 -> leaf_748
leaf_748  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_744 -> leaf_749
leaf_749  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Inline code is written =`4 + 5`=. It executes in something similar to
:function mode in Babel, the call is as though it were wrapped in a function
call that looks like:
"]
block_745 -> { structure_750 structure_751}
{rank=same; structure_750 structure_751}

structure_750 [label="structure"]

structure_751 [label="structure"]


structure_750 -> { hashline_752}
{rank=same; hashline_752}

hashline_752 [label="hashline"]


hashline_752 -> { hashtag_753}
{rank=same; hashtag_753}

hashtag_753 [label="hashtag"]


hashtag_753 -> leaf_754
leaf_754  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_751 -> { hashline_755}
{rank=same; hashline_755}

hashline_755 [label="hashline"]


hashline_755 -> { hashtag_756}
{rank=same; hashtag_756}

hashtag_756 [label="hashtag"]


hashtag_756 -> leaf_757
leaf_757  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_746 -> leaf_758
leaf_758  [color=Gray,shape=rectangle,fontname=Inconsolata,label="maintaining state between calls.
"]
block_747 -> leaf_759
leaf_759  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Anything named exists as a data structure in the helper language. This makes it easy to
refer to a block that contains a self-reference, so these are stored in a cycle-safe way.
"]
section_737 -> { header_760 block_761 block_762 block_763 block_764 block_765 block_766 block_767 block_768 block_769 block_770 block_771 block_772 block_773 block_774 block_775 block_776 block_777 block_778 block_779 block_780 block_781 block_782 block_783 block_784 block_785 block_786 block_787 block_788 block_789 block_790 section_791}
{rank=same; header_760 block_761 block_762 block_763 block_764 block_765 block_766 block_767 block_768 block_769 block_770 block_771 block_772 block_773 block_774 block_775 block_776 block_777 block_778 block_779 block_780 block_781 block_782 block_783 block_784 block_785 block_786 block_787 block_788 block_789 block_790 section_791}

header_760 [label="4 : Code Blocks"]

block_761 [label="block 964-967"]

block_762 [label="block 968-969"]

block_763 [label="block 970-974"]

block_764 [label="block 975-977"]

block_765 [label="block 978-979"]

block_766 [label="block 980-982"]

block_767 [label="block 983-988"]

block_768 [label="block 989-990"]

block_769 [label="block 991-996"]

block_770 [label="block 997-999"]

block_771 [label="block 1000-1001"]

block_772 [label="block 1002-1005"]

block_773 [label="block 1006-1007"]

block_774 [label="block 1008-1015"]

block_775 [label="block 1016-1020"]

block_776 [label="block 1021-1026"]

block_777 [label="block 1027-1031"]

block_778 [label="block 1032-1032"]

block_779 [label="block 1033-1036"]

block_780 [label="block 1037-1038"]

block_781 [label="block 1039-1041"]

block_782 [label="block 1042-1047"]

block_783 [label="block 1048-1052"]

block_784 [label="block 1053-1055"]

block_785 [label="block 1056-1059"]

block_786 [label="block 1060-1065"]

block_787 [label="block 1066-1068"]

block_788 [label="block 1069-1074"]

block_789 [label="block 1075-1076"]

block_790 [label="block 1077-1084"]

section_791 [label="section: 1085-1155"]


header_760 -> leaf_792
leaf_792  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_761 -> leaf_793
leaf_793  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The =`inline`= syntax works like the rest, you may use any number of backticks to enclose a form.
"]
block_762 -> leaf_794
leaf_794  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Something like:
"]
block_763 -> { structure_795}
{rank=same; structure_795}

structure_795 [label="structure"]


structure_795 -> { hashline_796}
{rank=same; hashline_796}

hashline_796 [label="hashline"]


hashline_796 -> { hashtag_797}
{rank=same; hashtag_797}

hashtag_797 [label="hashtag"]


hashtag_797 -> leaf_798
leaf_798  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_764 -> { structure_799}
{rank=same; structure_799}

structure_799 [label="structure"]


structure_799 -> { hashline_800}
{rank=same; hashline_800}

hashline_800 [label="hashline"]


hashline_800 -> { hashtag_801}
{rank=same; hashtag_801}

hashtag_801 [label="hashtag"]


hashtag_801 -> leaf_802
leaf_802  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_765 -> leaf_803
leaf_803  [color=Gray,shape=rectangle,fontname=Inconsolata,label="it is evaluated when referenced. This:
"]
block_766 -> { structure_804 structure_805}
{rank=same; structure_804 structure_805}

structure_804 [label="structure"]

structure_805 [label="structure"]


structure_804 -> { hashline_806}
{rank=same; hashline_806}

hashline_806 [label="hashline"]


hashline_806 -> { hashtag_807}
{rank=same; hashtag_807}

hashtag_807 [label="hashtag"]


hashtag_807 -> leaf_808
leaf_808  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_805 -> { handleline_809}
{rank=same; handleline_809}

handleline_809 [label="handleline"]


handleline_809 -> { handle_810}
{rank=same; handle_810}

handle_810 [label="handle"]


handle_810 -> leaf_811
leaf_811  [color=Gray,shape=rectangle,fontname=Inconsolata,label="named-block"]
block_767 -> { structure_812}
{rank=same; structure_812}

structure_812 [label="structure"]


structure_812 -> { hashline_813}
{rank=same; hashline_813}

hashline_813 [label="hashline"]


hashline_813 -> { hashtag_814}
{rank=same; hashtag_814}

hashtag_814 [label="hashtag"]


hashtag_814 -> leaf_815
leaf_815  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_768 -> leaf_816
leaf_816  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Separated code blocks use special tags:
"]
block_769 -> { codeblock_817}
{rank=same; codeblock_817}

codeblock_817 [label="code block 993-995"]


codeblock_817 -> leaf_818
leaf_818  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
block_770 -> { structure_819}
{rank=same; structure_819}

structure_819 [label="structure"]


structure_819 -> { hashline_820}
{rank=same; hashline_820}

hashline_820 [label="hashline"]


hashline_820 -> { hashtag_821}
{rank=same; hashtag_821}

hashtag_821 [label="hashtag"]


hashtag_821 -> leaf_822
leaf_822  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_771 -> leaf_823
leaf_823  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nesting apply. As indeed they might in a Grimoire code block.
"]
block_772 -> leaf_824
leaf_824  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We need a good runtime. Playing the Inception game
with Grimoire should be an amusing headache, not a dog-slow
system killer.
"]
block_773 -> leaf_825
leaf_825  [color=Gray,shape=rectangle,fontname=Inconsolata,label="They may be named like anything else:
"]
block_774 -> { codeblock_826 structure_827}
{rank=same; codeblock_826 structure_827}

codeblock_826 [label="code block 1009-1011"]

structure_827 [label="structure"]


codeblock_826 -> leaf_828
leaf_828  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
structure_827 -> { hashline_829}
{rank=same; hashline_829}

hashline_829 [label="hashline"]


hashline_829 -> { hashtag_830}
{rank=same; hashtag_830}

hashtag_830 [label="hashtag"]


hashtag_830 -> leaf_831
leaf_831  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_775 -> { codeblock_832}
{rank=same; codeblock_832}

codeblock_832 [label="code block 1017-1019"]


codeblock_832 -> leaf_833
leaf_833  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
block_776 -> { codeblock_834}
{rank=same; codeblock_834}

codeblock_834 [label="code block 1023-1025"]


codeblock_834 -> leaf_835
leaf_835  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 4 + 5"]
block_777 -> { structure_836}
{rank=same; structure_836}

structure_836 [label="structure"]


structure_836 -> { hashline_837}
{rank=same; hashline_837}

hashline_837 [label="hashline"]


hashline_837 -> { hashtag_838}
{rank=same; hashtag_838}

hashtag_838 [label="hashtag"]


hashtag_838 -> leaf_839
leaf_839  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_778 -> { structure_840}
{rank=same; structure_840}

structure_840 [label="structure"]


structure_840 -> { handleline_841}
{rank=same; handleline_841}

handleline_841 [label="handleline"]


handleline_841 -> { handle_842}
{rank=same; handle_842}

handle_842 [label="handle"]


handle_842 -> leaf_843
leaf_843  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nine"]
block_779 -> { codeblock_844}
{rank=same; codeblock_844}

codeblock_844 [label="code block 1033-1035"]


codeblock_844 -> leaf_845
leaf_845  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 4 + 5"]
block_780 -> { structure_846}
{rank=same; structure_846}

structure_846 [label="structure"]


structure_846 -> { hashline_847}
{rank=same; hashline_847}

hashline_847 [label="hashline"]


hashline_847 -> { hashtag_848}
{rank=same; hashtag_848}

hashtag_848 [label="hashtag"]


hashtag_848 -> leaf_849
leaf_849  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_781 -> { structure_850}
{rank=same; structure_850}

structure_850 [label="structure"]


structure_850 -> { hashline_851}
{rank=same; hashline_851}

hashline_851 [label="hashline"]


hashline_851 -> { hashtag_852}
{rank=same; hashtag_852}

hashtag_852 [label="hashtag"]


hashtag_852 -> leaf_853
leaf_853  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_782 -> leaf_854
leaf_854  [color=Gray,shape=rectangle,fontname=Inconsolata,label="marks an anonymous result. =#@nine->= is the automatically generated tag for
the return value of the block named =@nine=, adding =@nine()= to a prose block will
add the number 9 to the weave at that location. *bridge* will either display the result,
the call, or both, configurably, when editing the source, with syntax-highlighting to 
enforce the distinction. 
"]
block_783 -> leaf_855
leaf_855  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Code blocks may be indented as any other blocks, with the associated owership
rules. Code blocks so indented have a logical start equal to their level of
indentation, which is to say the program being called will not see indentation
that is proper to the Grimoire document.
"]
block_784 -> leaf_856
leaf_856  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Code blocks may be placed inside lists, as tables may be, but may not be
explicitly placed inside tables.
"]
block_785 -> leaf_857
leaf_857  [color=Gray,shape=rectangle,fontname=Inconsolata,label="You may insert the result of a named code block in the data context
by simply saying =@a-named-block()=. If there are variables, you may pass
them, =@a-named-block(23, true)= or if you wish, by name:
"]
block_786 -> { structure_858 structure_859 structure_860}
{rank=same; structure_858 structure_859 structure_860}

structure_858 [label="structure"]

structure_859 [label="structure"]

structure_860 [label="structure"]


structure_858 -> { hashline_861}
{rank=same; hashline_861}

hashline_861 [label="hashline"]


hashline_861 -> { hashtag_862}
{rank=same; hashtag_862}

hashtag_862 [label="hashtag"]


hashtag_862 -> leaf_863
leaf_863  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_859 -> { handleline_864}
{rank=same; handleline_864}

handleline_864 [label="handleline"]


handleline_864 -> { handle_865}
{rank=same; handle_865}

handle_865 [label="handle"]


handle_865 -> leaf_866
leaf_866  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a-named-block"]
structure_860 -> { hashline_867}
{rank=same; hashline_867}

hashline_867 [label="hashline"]


hashline_867 -> { hashtag_868}
{rank=same; hashtag_868}

hashtag_868 [label="hashtag"]


hashtag_868 -> leaf_869
leaf_869  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_787 -> leaf_870
leaf_870  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Within a formula applied to a table, it is valid to use the description
syntax for a variable to supply an argument to a function.
"]
block_788 -> leaf_871
leaf_871  [color=Gray,shape=rectangle,fontname=Inconsolata,label="There will be further syntax involved in building up the line that
begins a code block. It's considered good form to assign complex
code block headers into distinct tags, and use those, rather than
being explicit and repeating yourself or hiding file-local defaults
in drawers.
"]
block_789 -> leaf_872
leaf_872  [color=Gray,shape=rectangle,fontname=Inconsolata,label="So we prefer something like
"]
block_790 -> { codeblock_873 structure_874}
{rank=same; codeblock_873 structure_874}

codeblock_873 [label="code block 1078-1080"]

structure_874 [label="structure"]


codeblock_873 -> leaf_875
leaf_875  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
structure_874 -> { hashline_876}
{rank=same; hashline_876}

hashline_876 [label="hashline"]


hashline_876 -> { hashtag_877}
{rank=same; hashtag_877}

hashtag_877 [label="hashtag"]


hashtag_877 -> leaf_878
leaf_878  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_791 -> { header_879 block_880 section_881 section_882}
{rank=same; header_879 block_880 section_881 section_882}

header_879 [label="1 : Runtime"]

block_880 [label="block 1085-1155"]

section_881 [label="section: 1089-1123"]

section_882 [label="section: 1156-1200"]


header_879 -> leaf_883
leaf_883  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_880 -> leaf_884
leaf_884  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Here, we begin to explore the interactions Grimoire is capable of.
"]
section_881 -> { header_885 block_886 block_887 block_888 block_889 block_890 block_891 block_892 block_893 section_894}
{rank=same; header_885 block_886 block_887 block_888 block_889 block_890 block_891 block_892 block_893 section_894}

header_885 [label="2 : Literate or Live?"]

block_886 [label="block 1089-1093"]

block_887 [label="block 1094-1098"]

block_888 [label="block 1099-1101"]

block_889 [label="block 1102-1105"]

block_890 [label="block 1106-1109"]

block_891 [label="block 1110-1114"]

block_892 [label="block 1115-1119"]

block_893 [label="block 1120-1123"]

section_894 [label="section: 1124-1155"]


header_885 -> leaf_895
leaf_895  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_886 -> leaf_896
leaf_896  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Babel is descended from the tradition of [[http://en.wikipedia.org/wiki/Literate_programming][literate programming]], and
Grimoire inherits this from Babel.
"]
block_887 -> leaf_897
leaf_897  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire is capable of producing code and documentation in the
classic literate style. This is not the aim of Grimoire: it is
a metalanguage, for working with prose, data, and code in an
integrated fashion.
"]
block_888 -> leaf_898
leaf_898  [color=Gray,shape=rectangle,fontname=Inconsolata,label="What a compiler is to a REPL, literate programming is to living
documents.
"]
block_889 -> leaf_899
leaf_899  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In a literate programming context, we have source, which integrates
code and documentation. The source is then woven into documentation,
and tangled into code. Both are compiled, one is printed, one is run.
"]
block_890 -> leaf_900
leaf_900  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The word 'printed' sounds somewhat archaic, no? The number of tools
Donald Knuth had to write just to write the tools he wanted to write,
and tool the writings he wanted to tool, is simply staggering.
"]
block_891 -> leaf_901
leaf_901  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Traces of that legacy remain in Grimoire. Like Babel, we allow for
LaTeX embedding, with the sugar =`\\latex`=. Starting Lua code with
a backslash is illegal, starting Clu code with a backslash is also
illegal.
"]
block_892 -> leaf_902
leaf_902  [color=Gray,shape=rectangle,fontname=Inconsolata,label="For a Grimoire document to be printed, realistically, in today's world,
it will be translated to LaTeX, hence to PDF, sent off to a print
on demand company, and drop shipped. Some documents may in fact
make this journey, because why not? We aren't oriented around it.
"]
block_893 -> leaf_903
leaf_903  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The basic flow in a Grimoire context is one of excursion and return.
We have tangling and weaving, but also unraveling, where actions taken
within the weave or tangle are integrated back into the source document.
"]
section_894 -> { header_904 block_905 block_906 block_907 block_908 block_909 block_910}
{rank=same; header_904 block_905 block_906 block_907 block_908 block_909 block_910}

header_904 [label="3 : Unraveling the Mystery"]

block_905 [label="block 1124-1131"]

block_906 [label="block 1132-1137"]

block_907 [label="block 1138-1140"]

block_908 [label="block 1141-1145"]

block_909 [label="block 1146-1150"]

block_910 [label="block 1151-1155"]


header_904 -> leaf_911
leaf_911  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_905 -> leaf_912
leaf_912  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
What's unraveling? When I picture Donald Knuth writing literate code,
I picture him with a notebook, writing free-flowing algorithms in a
fashion he refined his entire career. I imagine him carefully transcribing
into Web, running the compiler, going for a stroll around the Stanford
campus, and examining the changes upon his return.
"]
block_906 -> leaf_913
leaf_913  [color=Gray,shape=rectangle,fontname=Inconsolata,label="On the days, and they did happen, when his program was in a state of error,
I picture him returning to his notebook first. While thinking. Perhaps
playing the organ for an hour or two, to relax. He would then correct the
notebook, then the code, then the program, which would be correct now,
most of the time.
"]
block_907 -> leaf_914
leaf_914  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I'm making that all up. But I'd wager I'm not far off the mark. We
don't work like that and most of us can't.
"]
block_908 -> leaf_915
leaf_915  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A tangle is named that because the mapping between it and the source
can be non-trivial. It's quite possible to make it undecidable what to
do with edits to the tangle. it's also possible to move edits from the tangle
back into the source, in most cases, if we structure things well.
"]
block_909 -> leaf_916
leaf_916  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Donald Knuth was unable to print a book that would alter his code. I'm
sure he'd have been delighted to have the ability. Our weaves can easily
be living documents, through in-browser and server side empowerment.
Those changes, too, should make it back into the source.
"]
block_910 -> leaf_917
leaf_917  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Ultimately I imagine many people will prefer to edit and run their
Grimoire documents entirely from a weave that provides a bit of the
ol' WYSIWYG to the experience. Well and good for them, I have my own
view of Heaven, and it isn't Heaven if we don't all fit.
"]
section_882 -> { header_918 block_919 block_920 block_921 block_922 section_923 section_924}
{rank=same; header_918 block_919 block_920 block_921 block_922 section_923 section_924}

header_918 [label="2 : Source, Tangle and Weave"]

block_919 [label="block 1156-1160"]

block_920 [label="block 1161-1164"]

block_921 [label="block 1165-1168"]

block_922 [label="block 1169-1200"]

section_923 [label="section: 1173-1200"]

section_924 [label="section: 1201-1219"]


header_918 -> leaf_925
leaf_925  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_919 -> leaf_926
leaf_926  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These classic concepts from literate programming are central to
the Grimoire paradigm.
"]
block_920 -> leaf_927
leaf_927  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In Grimoire, something like a PDF is not a true weave. It is a product;
much like an image or data derived from a simulation, it is regenerated
when necessary but has no further connection to the Grimoire environment.
"]
block_921 -> leaf_928
leaf_928  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Our first section discusses the format of Grimoire source code. Like Babel,
unlike Web and descendants, it is self-tangling. Grimoire will be tightly
integrated and purpose-built for this task, operating at a REPL+ level.
"]
block_922 -> leaf_929
leaf_929  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We still wish to use it to compile programs written in appropriate languages.
These languages needn't be educated in the ways of Grimoire, imposing this
requirement would be so onerous as to block adoption.
"]
section_923 -> { header_930 block_931 block_932 block_933 block_934 block_935}
{rank=same; header_930 block_931 block_932 block_933 block_934 block_935}

header_930 [label="3 : Unraveling the Tangle"]

block_931 [label="block 1173-1178"]

block_932 [label="block 1179-1182"]

block_933 [label="block 1183-1189"]

block_934 [label="block 1190-1193"]

block_935 [label="block 1194-1200"]


header_930 -> leaf_936
leaf_936  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_931 -> leaf_937
leaf_937  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Babel offers limited facilities for working within source blocks. What it
doesn't offer is the critical 'unravel' operation, which takes changes to
the tangle and integrates them back into the weave.
"]
block_932 -> leaf_938
leaf_938  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This is a partially-solved problem, with Babel able to put comment tags into
the source which allow Emacs to jump back into your actual source from
errors in the tangle.
"]
block_933 -> leaf_939
leaf_939  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This is just not good enough. For any number of reasons, we need to be able
to unravel. I'll cite one: Converting existing codebases over to literacy.
The first step is to recreate the existing program on a source-line-identical
level. The entire existing developer base is familiar with the program already
and isn't going to want to start editing a bunch of Grimoire. They can most
likely be induced to accept readable metadata, and that's it.
"]
block_934 -> leaf_940
leaf_940  [color=Gray,shape=rectangle,fontname=Inconsolata,label="That's all we need. Code is in one of three categories: either it is a single
literal copy from source, it's one of several copies from source, or
it's generated code that's dependent on information in the source.
"]
block_935 -> leaf_941
leaf_941  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We incorporate all changes to the former automatically when we unravel.
Changes to a single version of multiple copies prompts user interaction: do
you want to embed the change as its own source block, propagate it to each
instance, or decline the merge? Changes to generated code are simply
forbidden. If one is doing generation on the code base, working from
the weave is the more comfortable approach.
"]
section_924 -> { header_942 block_943 block_944 block_945 block_946}
{rank=same; header_942 block_943 block_944 block_945 block_946}

header_942 [label="3 : Backweaving"]

block_943 [label="block 1201-1204"]

block_944 [label="block 1205-1209"]

block_945 [label="block 1210-1214"]

block_946 [label="block 1215-1219"]


header_942 -> leaf_947
leaf_947  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_943 -> leaf_948
leaf_948  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An analogous operation is backweaving.
"]
block_944 -> leaf_949
leaf_949  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A weave in Grimoire is an HTML/CSS/JS document. In other words, a program.
The weave is much closer akin to the source than any tangle. Any Grimoire
program can have a weave view, though it isn't necessary; many will have
no tangle at all, containing the functionality within Grimoire.
"]
block_945 -> leaf_950
leaf_950  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The weave may therefore be manipulated, and we need some way to reflect
those changes back into the source. This can't be automated in a general
way. What we're left with is an EDN protocol for exchanging information
to update the weave in cooperation with some server logic and git.
"]
block_946 -> leaf_951
leaf_951  [color=Gray,shape=rectangle,fontname=Inconsolata,label="So, could you write the server logic for a site as a literate program,
push it to a server that tangles and weaves it, and use the source
and Grimoire/bridge as the sysadmin view? I bet you could, it might
even be fairly popular.
"]
section_276 -> { header_952 block_953 block_954 block_955 section_956}
{rank=same; header_952 block_953 block_954 block_955 section_956}

header_952 [label="4 : Zero-header tag"]

block_953 [label="block 408-413"]

block_954 [label="block 414-417"]

block_955 [label="block 418-419"]

section_956 [label="section: 420-421"]


header_952 -> leaf_957
leaf_957  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_953 -> leaf_958
leaf_958  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The special [[*Tags][tag]] =#*=, which is only meaningful at the top of a document,
 indicates a 'zero header'. This lets you use the one-star level as a
series within a single document.
"]
block_954 -> leaf_959
leaf_959  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The related tag =#meta*= must be followed by a space and any number of
stars. This indicates a meta-level for the entire under-tree, that
exists somewhere else. Further semantics may be provided.
"]
block_955 -> leaf_960
leaf_960  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This section belongs in some further API section.
"]
section_956 -> { header_961 block_962}
{rank=same; header_961 block_962}

header_961 [label="5 : TODO Move to API Section"]

block_962 [label="block 420-421"]


header_961 -> leaf_963
leaf_963  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_962 -> leaf_964
leaf_964  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]

}
