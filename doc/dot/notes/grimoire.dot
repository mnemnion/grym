digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 1219"]

doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-3"]

section_1 -> { header_2 block_3 block_4 section_5}
{rank=same; header_2 block_3 block_4 section_5}

header_2 [label=""]
block_3 [label="block 1-1"]
block_4 [label="block 2-nil"]
section_5 [label="section: 4-33"]


block_3 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]block_4 -> { structure_7 structure_8}
{rank=same; structure_7 structure_8}

structure_7 [label="structure"]
structure_8 [label="structure"]

structure_7 -> { hashline_9}
{rank=same; hashline_9}

hashline_9 [label="hashline"]

hashline_9 -> { hashtag_10}
{rank=same; hashtag_10}

hashtag_10 [label="hashtag"]


hashtag_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]structure_8 -> { hashline_12}
{rank=same; hashline_12}

hashline_12 [label="hashline"]

hashline_12 -> { hashtag_13}
{rank=same; hashtag_13}

hashtag_13 [label="hashtag"]


hashtag_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_4 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]section_5 -> { header_16 block_17 block_18 block_19 block_20 block_21 block_22 block_23 block_24 block_25 section_26}
{rank=same; header_16 block_17 block_18 block_19 block_20 block_21 block_22 block_23 block_24 block_25 section_26}

header_16 [label="Introduction"]
block_17 [label="block 4-7"]
block_18 [label="block 8-9"]
block_19 [label="block 10-12"]
block_20 [label="block 13-16"]
block_21 [label="block 17-19"]
block_22 [label="block 20-23"]
block_23 [label="block 24-26"]
block_24 [label="block 27-28"]
block_25 [label="block 29-nil"]
section_26 [label="section: 34-34"]


block_17 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is a response to Babel.

"]
block_18 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Babel is simultaneously a kludge and the most potentially powerful language in existence.

"]
block_19 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Babel is a metalanguage. The structure of Org mode lets the user weave together code into a
living document, in a flexible, powerful way.

"]
block_20 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The name is charmingly apt. Babel exists at the top of a tower of abstractions that is teetering
on the verge of collapse. Org-mode is an extension of outline mode, which was a simple tree
editor task list.

"]
block_21 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Various users bolted stuff on, because that's how emacs grows, you bolt stuff onto it and it
continues to function because it's [[http://lispers.org/][made with alien technology]].

"]
block_22 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The problem with Babel is more than the syntax being clunky, though that's a problem. The issue is
more profoundly that Babel is built on Org, which is built on emacs. It's a language, yes,
parsers exist for other platforms. But as a runtime, it isn't portable without a lot of effort.

"]
block_23 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="So much so, that we get a chance to start over. It's roughly as difficult to write Grimoire as it would be to
reimplement Babel in, say, Sublime.

"]
block_24 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In the process, we can:

"]
block_25 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - streamline concepts, making them more orthogonal
  - clean up the clunkiness in the grammar
  - build a toolchain that will let us write magic spells in any number of languages, amassing a powerful
    collection of same. A grimoire, if you will: a living book in which magic is both written and performed.

"]section_26 -> { header_36 block_37 section_38 section_39 section_40}
{rank=same; header_36 block_37 section_38 section_39 section_40}

header_36 [label="Musings on Metasyntax"]
block_37 [label="block 34-nil"]
section_38 [label="section: 35-41"]
section_39 [label="section: 105-108"]
section_40 [label="section: 339-343"]


block_37 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]section_38 -> { header_42 block_43 block_44 section_45}
{rank=same; header_42 block_43 block_44 section_45}

header_42 [label="Constraints"]
block_43 [label="block 35-39"]
block_44 [label="block 40-nil"]
section_45 [label="section: 42-68"]


block_43 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is a difference between a metalanguage and a literate programming language. Babel is a metalanguage,
as Grimoire is intended to be.

"]
block_44 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="An effective metalanguage balances three concerns. It must be usable, readable, and parsable.

"]section_45 -> { header_48 block_49 block_50 block_51 block_52 block_53 block_54 block_55 section_56}
{rank=same; header_48 block_49 block_50 block_51 block_52 block_53 block_54 block_55 section_56}

header_48 [label="Usable"]
block_49 [label="block 42-45"]
block_50 [label="block 46-50"]
block_51 [label="block 51-54"]
block_52 [label="block 55-58"]
block_53 [label="block 59-63"]
block_54 [label="block 64-66"]
block_55 [label="block 67-nil"]
section_56 [label="section: 69-82"]


block_49 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A metalanguage is used interactively, on a deeper level than REPLs.

"]
block_50 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This is what makes working with Org so amazing. The first purpose of what became Babel
was simply editing outlines. This was outline mode, which dates back to the era when
using asterisks and =- [ ]= checkboxes in a plain ASCII text file was fairly futuristic
behavior.

"]
block_51 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="You can't really call that a language either, though it's a syntax. More and more features
were attached until we have modern Babel. But because each feature was build as an extension
to the editing/runtime environment, Babel is fairly smooth to work with.

"]
block_52 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If you can handle Emacs. I can, some can't. A metalanguage is tightly coupled to its runtime,
because its runtime is its editing environment. Not much of a metalanguage if this isn't the
case.

"]
block_53 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire is the culmination of a considerable dependency chain. We need a data structure, a
parser to work with the data structure, and an editing environment that builds on these. For
maximum enjoyment, we'll want a custom terminal that enhances the xterm protocol with a few
features, most notably graphics.

"]
block_54 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Just like I have trouble writing Lua without burning huge amounts of time planning out Clu, I
can't use Org without doing the same for Grimoire. It's all related: I need a really good parser.

"]
block_55 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[[https://github.com/UpstandingHackers/hammer][hammer]] is the leading contender. But back to Grimoire.

"]section_56 -> { header_64 block_65 block_66 block_67 section_68}
{rank=same; header_64 block_65 block_66 block_67 section_68}

header_64 [label="Readable"]
block_65 [label="block 69-74"]
block_66 [label="block 75-78"]
block_67 [label="block 79-nil"]
section_68 [label="section: 83-104"]


block_65 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is designed to be read.  It's important that the raw syntax not
 break the reader's flow.  A good metalanguage lets the user employ just
 as much magic as she's comfortable with, without imposing more.

"]
block_66 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Our syntax is  designed to support this. As such  it is deeply concerned
with matters  such as indentation  and whitespacing, which are  basic to
readability.

"]
block_67 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="It will be quite possible and indeed comfortable to write pure documents
such  as blog  posts in  Grimoire form.  In that  use case  it resembles
Markdown.

"]section_68 -> { header_72 block_73 block_74 block_75 block_76 block_77}
{rank=same; header_72 block_73 block_74 block_75 block_76 block_77}

header_72 [label="Parsable"]
block_73 [label="block 83-89"]
block_74 [label="block 90-93"]
block_75 [label="block 94-97"]
block_76 [label="block 98-101"]
block_77 [label="block 102-nil"]


block_73 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire  documents are  intended  to be  highly  convoluted. The  basic
editing operation  is the fold. The  Grimoire editor must be  capable of
handling documents in the tens of megabytes with a complex and preserved
folding structure.

"]
block_74 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This requires  a ground-up  editing environment  rewrite to  employ data
structures   with   correct   big-O    complexity   and   an   efficient
implementation.

"]
block_75 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This  also  requires  that  the   language  be  well-designed  for  easy
recognition of the structural elements. As this document evolves, I will
be defining a grammar in the syntax preferred by barbarian.

"]
block_76 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire is  an error-free  language. There  are several  concepts which
interact to  create this, namely  structure, prose, well-  and malformed
structure, and validity.

"]
block_77 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A parser for Grimoire which doesn't  succeed without error for any utf-8
string is not valid.

"]section_39 -> { header_83 block_84 section_85 section_86 section_87 section_88}
{rank=same; header_83 block_84 section_85 section_86 section_87 section_88}

header_83 [label="Structure"]
block_84 [label="block 105-nil"]
section_85 [label="section: 109-149"]
section_86 [label="section: 161-190"]
section_87 [label="section: 253-257"]
section_88 [label="section: 295-311"]


block_84 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is a top-down look at Grimoire's proposed syntax.

"]section_85 -> { header_90 block_91 block_92 block_93 block_94 block_95 block_96 block_97 block_98 block_99 section_100}
{rank=same; header_90 block_91 block_92 block_93 block_94 block_95 block_96 block_97 block_98 block_99 section_100}

header_90 [label="Encoding"]
block_91 [label="block 109-112"]
block_92 [label="block 113-118"]
block_93 [label="block 119-123"]
block_94 [label="block 124-128"]
block_95 [label="block 129-131"]
block_96 [label="block 132-135"]
block_97 [label="block 136-140"]
block_98 [label="block 141-143"]
block_99 [label="block 144-nil"]
section_100 [label="section: 150-160"]


block_91 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is defined in terms of utf-8.

"]
block_92 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The core syntax is defined in terms of the reachable keys on a US keyboard.
This tradition is firmly entrenched in the mid teens, and I have no
designs on budging that at present. The miser in me likes that they're
a byte each. The lawyer in me insists that this isn't ASCII, which is a
seven-bit legacy encoding. All aspects of utf-8 are equally meaningful.

"]
block_93 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We aren't at all afraid to use Unicode characters to display aspects
of the runtime. In fact we favor this, as it marks those operations
as distinctive. Most people can't type ⦿ without effort (I can't)
and it's easy to recognize as a folded drawer once you've seen a couple.

"]
block_94 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire is case sensitive and uses lower-snake-case for built-in English
phrases. There is a convention (see classes) that uses capitalization of
user words to affect semantics. This may be overridden with other rules
for languages that lack the majuscule-miniscule distinction.

"]
block_95 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I want Grimoire to have correct Unicode handling, for some value of
correct. It can't be considered 1.0 without this.

"]
block_96 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Bidirectional handling in a context that's indentation sensitive is
an example of something subtle. Grimoire uses indentation in various
ways, so here's the rule:

"]
block_97 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Any newline that has a reversed direction ends indentation. So if
you are going ltr, issue an rtl marker, and a newline, your indentation
level is zero. If you reverse direction twice in a line, you keep
your indentation level. Three times, you lose it.

"]
block_98 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I'd love to get a Hebrew and/or Arabic fluent hacker on the project
early, to make sure this works correctly.

"]
block_99 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Another thing I want to get right is equivalence. If you have a
variable called \"Glück\" the compiler shouldn't complain if it's
rendered in either of the valid ways. For some sequences that's
\"any of the valid ways\". If we normalized your prose, you might
have problems later, so we don't want to solve it that way.

"]section_100 -> { header_110 block_111 block_112}
{rank=same; header_110 block_111 block_112}

header_110 [label="Internationalization"]
block_111 [label="block 150-155"]
block_112 [label="block 156-nil"]


block_111 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
All parts of Grimoire defined in English will be namespaced
as =en:/=, and loaded by default. Other languages will be added
when there is a fluent maintainer available.

"]
block_112 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Note  that  many  words  aren't  truly English.  Notably  the  names  of
programming languages are  the same in all human languages.   A tag like
=#author= can be namespaced =#fr:/auteur= and will be, but =#!python= is not
in the =en:/= namespace.

"]section_86 -> { header_115 block_116 block_117 block_118 block_119 block_120 block_121 block_122 section_123}
{rank=same; header_115 block_116 block_117 block_118 block_119 block_120 block_121 block_122 section_123}

header_115 [label="Prose and Structure"]
block_116 [label="block 161-164"]
block_117 [label="block 165-170"]
block_118 [label="block 171-175"]
block_119 [label="block 176-178"]
block_120 [label="block 179-182"]
block_121 [label="block 183-187"]
block_122 [label="block 188-nil"]
section_123 [label="section: 191-200"]


block_116 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The major distinction Grimoire draws is between prose and structure.

"]
block_117 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Prose is the default parsing state. It is far from unstructured from the
runtime  perspective. Although  this needn't  be embedded  in the  parse
tree,  Grimoire   understands  concepts   such  as   paragraphs,  words,
punctuation,  capital letters,  languages, and  anything else  proper to
prose.

"]
block_118 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I refer to human languages, but Grimoire understands programming languages
also. In principle, all of them, it shouldn't be harder to add them than
it is to call them from shell, though getting a runtime rigged up to
another runtime always calls for some finesse to derive a good experience.

"]
block_119 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"Programming languages\" is overly specific. Grimoire draws a distinction
between prose and structure. Blocks may contain either, or both.

"]
block_120 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Something that's nice about a language build on a prose/structure
relationship is that it can be error free. Anything *grym* can't build into
a structure is just prose.

"]
block_121 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Markdown has this property. Sometimes you run into crappy parsers which
build errors into Markdown, which is just obnoxious. If you [[http://daringfireball.net/projects/markdown/syntax][RTFM]],
you'll find the word \"error\" once. Helpfully explaining how Markdown
keeps you from making one.

"]
block_122 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We do what we can to make the document look the same as it is
in fact structured. Syntax highlighting handles the edge cases.

"]section_123 -> { header_131 block_132 block_133 block_134 section_135}
{rank=same; header_131 block_132 block_133 block_134 section_135}

header_131 [label="Ownership"]
block_132 [label="block 191-194"]
block_133 [label="block 195-198"]
block_134 [label="block 199-nil"]
section_135 [label="section: 201-252"]


block_132 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The basic structural relationship in Grimoire is ownership.

"]
block_133 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Root elements of a heirarchy own their children, blocks own
lines that refer to that block. Indentation has a subtle but
regular interaction with ownership; it does what you expect.

"]
block_134 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Edge cases are resolved using the cling rule.

"]section_135 -> { header_139 block_140 block_141 block_142 block_143 block_144 block_145 block_146 block_147 block_148 block_149 block_150 block_151 block_152 block_153}
{rank=same; header_139 block_140 block_141 block_142 block_143 block_144 block_145 block_146 block_147 block_148 block_149 block_150 block_151 block_152 block_153}

header_139 [label="The Cling Rule"]
block_140 [label="block 201-205"]
block_141 [label="block 206-209"]
block_142 [label="block 210-213"]
block_143 [label="block 214-217"]
block_144 [label="block 218-224"]
block_145 [label="block 225-228"]
block_146 [label="block 229-232"]
block_147 [label="block 233-235"]
block_148 [label="block 236-239"]
block_149 [label="block 240-241"]
block_150 [label="block 242-244"]
block_151 [label="block 245-247"]
block_152 [label="block 248-250"]
block_153 [label="block 251-nil"]


block_140 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The cling rule specifies that a group 'clings' to another group when
it is closer to that group than the other group. Ties resolve down.

"]
block_141 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This should make it intuitive to group elements that aren't grouping the
way you expect: put in whitespace until the block is visually distinguished
from the surroundings.

"]
block_142 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Cling applies between blocks which are at the same level of ownership.
Ownership has precedence over cling: all blocks underneath e.g. a header
line are owned by that line, newlines notwithstanding.

"]
block_143 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Note that indentation of e.g. lists invokes the cling rule within the
indentation level.


"]block_144 -> { structure_158 structure_159}
{rank=same; structure_158 structure_159}

structure_158 [label="structure"]
structure_159 [label="structure"]

structure_158 -> { hashline_160}
{rank=same; hashline_160}

hashline_160 [label="hashline"]

hashline_160 -> { hashtag_161}
{rank=same; hashtag_161}

hashtag_161 [label="hashtag"]


hashtag_161 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]structure_159 -> { hashline_163}
{rank=same; hashline_163}

hashline_163 [label="hashline"]

hashline_163 -> { hashtag_164}
{rank=same; hashtag_164}

hashtag_164 [label="hashtag"]


hashtag_164 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
block_144 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |



someprose on a block
"]block_145 -> { structure_167}
{rank=same; structure_167}

structure_167 [label="structure"]

structure_167 -> { hashline_168}
{rank=same; hashline_168}

hashline_168 [label="hashline"]

hashline_168 -> { hashtag_169}
{rank=same; hashtag_169}

hashtag_169 [label="hashtag"]


hashtag_169 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_145 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the table, but

"]block_146 -> { structure_172}
{rank=same; structure_172}

structure_172 [label="structure"]

structure_172 -> { hashline_173}
{rank=same; hashline_173}

hashline_173 [label="hashline"]

hashline_173 -> { hashtag_174}
{rank=same; hashtag_174}

hashtag_174 [label="hashtag"]


hashtag_174 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_146 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |


"]block_147 -> { structure_177}
{rank=same; structure_177}

structure_177 [label="structure"]

structure_177 -> { hashline_178}
{rank=same; hashline_178}

hashline_178 [label="hashline"]

hashline_178 -> { hashtag_179}
{rank=same; hashtag_179}

hashtag_179 [label="hashtag"]


hashtag_179 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
block_147 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
someprose on a block
"]block_148 -> { structure_182}
{rank=same; structure_182}

structure_182 [label="structure"]

structure_182 -> { hashline_183}
{rank=same; hashline_183}

hashline_183 [label="hashline"]

hashline_183 -> { hashtag_184}
{rank=same; hashtag_184}

hashtag_184 [label="hashtag"]


hashtag_184 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_148 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags the block.

"]
block_149 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Even clings are resolved forwards:

"]block_150 -> { structure_188}
{rank=same; structure_188}

structure_188 [label="structure"]

structure_188 -> { hashline_189}
{rank=same; hashline_189}

hashline_189 [label="hashline"]

hashline_189 -> { hashtag_190}
{rank=same; hashtag_190}

hashtag_190 [label="hashtag"]


hashtag_190 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_150 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| x | y | z |

"]block_151 -> { structure_193}
{rank=same; structure_193}

structure_193 [label="structure"]

structure_193 -> { hashline_194}
{rank=same; hashline_194}

hashline_194 [label="hashline"]

hashline_194 -> { hashtag_195}
{rank=same; hashtag_195}

hashtag_195 [label="hashtag"]


hashtag_195 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
block_151 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
someprose on a block
"]block_152 -> { structure_198}
{rank=same; structure_198}

structure_198 [label="structure"]

structure_198 -> { hashline_199}
{rank=same; hashline_199}

hashline_199 [label="hashline"]

hashline_199 -> { hashtag_200}
{rank=same; hashtag_200}

hashtag_200 [label="hashtag"]


hashtag_200 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_152 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags  the prose  block. The first and last examples should
"]
block_153 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="be considered bad style.

"]section_87 -> { header_204 block_205 section_206}
{rank=same; header_204 block_205 section_206}

header_204 [label="Whitespace, Lines, and Indentation."]
block_205 [label="block 253-nil"]
section_206 [label="section: 258-279"]


block_205 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is a structured document format. There are semantics associated
with every character we encode.

"]section_206 -> { header_208 block_209 block_210 block_211 block_212 block_213 section_214}
{rank=same; header_208 block_209 block_210 block_211 block_212 block_213 section_214}

header_208 [label="Whitespace"]
block_209 [label="block 258-262"]
block_210 [label="block 263-265"]
block_211 [label="block 266-271"]
block_212 [label="block 272-276"]
block_213 [label="block 277-nil"]
section_214 [label="section: 280-285"]


block_209 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Whitespace is either the space or newline character. Returns are removed,
tabs resolved to two spaces by the formatter, the latter is warned against.

"]
block_210 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Most of the token-like categories we refer to must be surrounded by
whitespace. Newlines have semantics more often than they do not.

"]
block_211 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Unicode actually contains quite a number of whitespace characters. They are
all treated as a single ordinary space. If that space is semantically meaningful,
as in the space between =*** A Headline=, it is filtered into an ordinary space.
Otherwise it's considered prose, the only filtration prose receives is tab->space
conversion.

"]
block_212 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire mercilessly enforces tab-space conversion, even on your code blocks.
I will cling to this tenet as long as I can, the tab character needs to die,
the world has decided, that key is special and shouldn't insert a special
dropping that looks like n spaces.

"]
block_213 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*make*? Outta my face with make. Yes, we'll have a make syntax, yes, it will
put the tabs back in.

"]section_214 -> { header_220 block_221 section_222}
{rank=same; header_220 block_221 section_222}

header_220 [label="Lines"]
block_221 [label="block 280-nil"]
section_222 [label="section: 286-294"]


block_221 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
When we refer to the beginning of a line, this allows for spaces before the
reference point. We call the absolute beginning of a line the first
position.

"]section_222 -> { header_224 block_225 block_226 block_227}
{rank=same; header_224 block_225 block_226 block_227}

header_224 [label="Indentation"]
block_225 [label="block 286-290"]
block_226 [label="block 291-292"]
block_227 [label="block 293-nil"]


block_225 -> leaf_228
leaf_228  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is an indentation-aware language. Most kinds of block can be
arcically[fn:1] ordered by means of indentation.

"]
block_226 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Indentation follows [[http://nim-lang.org/manual.html#indentation][Nim rules]].

"]
block_227 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[fn:1] There's nothing sacred about ordered subrules, and if we're making up
a new word, let's drop the silent h. Webster was a cool guy.
"]section_88 -> { header_231 block_232 block_233 block_234 block_235 section_236}
{rank=same; header_231 block_232 block_233 block_234 block_235 section_236}

header_231 [label="Order of Recognition"]
block_232 [label="block 295-300"]
block_233 [label="block 301-305"]
block_234 [label="block 306-309"]
block_235 [label="block 310-nil"]
section_236 [label="section: 312-338"]


block_232 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Starting from the neutral context, which is always at a newline, Grimoire
tries to make one of its initializing special forms. Failing that, it will
begin a prose block.

"]
block_233 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If there is whitespace, it affects indentation level in indicated ways.
They will not directly affect the semantics of the following form, that is,
these rules apply after any potentially block-ending newline, apart from
spaces that may be found between the newline and the character.

"]
block_234 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label="At present,  =*=, =#=,  =|=, =-=,  , =~=,  =@=, =:=  and ={=  all create
special  contexts.  A  special  context  creates a  block  in a  context
specific way.

"]
block_235 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Blocks have a left associativity which can be recursive.

"]section_236 -> { header_241 block_242 block_243 block_244 block_245 block_246}
{rank=same; header_241 block_242 block_243 block_244 block_245 block_246}

header_241 [label="Blocks"]
block_242 [label="block 312-315"]
block_243 [label="block 316-318"]
block_244 [label="block 319-323"]
block_245 [label="block 324-331"]
block_246 [label="block 332-nil"]


block_242 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is oriented around blocks.

"]
block_243 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Blocks are at least one line long,  all restarts are on a new line.  Any
syntactic structure smaller than a block we call an element.

"]
block_244 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Some types of blocks nest.  A document is a single  block.  There may be
other semantic units such as directories, I'd think a language that uses
strict  nested heirarchy  as powerfully  as Grimoire  could dictate  the
semantics of a file system, but that's currently out of scope.

"]
block_245 -> leaf_250
leaf_250  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Indentation is relevant to some  kinds of blocks. In general, whitespace
matters quite a  bit in a Grimoire  document. We keep some  of the warts
out because the tab character is  illegal, and there will be a mandatory
formatter, =grym  fmt= if  you will, that  does everything  from turning
=**bold**=  into =*bold*=  (because the  extra stars  weren't used),  to
newline stripping, and so on.  This is normally applied incrementally by
the runtime editing environment.

"]
block_246 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Indentation is human  readable and, with some care, a  computer may come
to the  same conclusions a  human would. I'm  still wary of  Python, but
there's no good  reason, unless the headache of most  Python not working
correctly  on my  computer, for  reasons I  can't track  down that  seem
related to  there being two languages  invoked as 'python', counts  as a
good reason.

"]section_40 -> { header_252 block_253 section_254}
{rank=same; header_252 block_253 section_254}

header_252 [label="Syntax"]
block_253 [label="block 339-nil"]
section_254 [label="section: 344-367"]


block_253 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Now that we've established the basic constraints, let's
start our recursive descent into the parse.

"]section_254 -> { header_256 block_257 block_258 block_259 block_260 block_261 block_262 block_263 section_264}
{rank=same; header_256 block_257 block_258 block_259 block_260 block_261 block_262 block_263 section_264}

header_256 [label="Headers"]
block_257 [label="block 344-348"]
block_258 [label="block 349-353"]
block_259 [label="block 354-359"]
block_260 [label="block 360-361"]
block_261 [label="block 362-364"]
block_262 [label="block 365-366"]
block_263 [label="block 367-nil"]
section_264 [label="section: 368-368"]


block_257 -> leaf_265
leaf_265  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is arcically constrained by structure groups,
called headers.

"]
block_258 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label="These start on a new line and begin with any number of  =*=. These must
be followed by a space mark to be valid. Contra Babel, you may
have a content-free header line, provided a space is found before the
newline.

"]
block_259 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In weaves and the like, headers represent document structure. Their
intention is structural: they support the same syntax as lists,
but the user is expected to use lists for list purposes. Putting
[TODO] in a header line should mean you have a document-specific
task to perform in that block.

"]
block_260 -> leaf_268
leaf_268  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Contra Babel, you may put spaces before the beginning of a header line.

"]
block_261 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The semantics of header lines are entirely determined by
the number of stars.

"]
block_262 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If you write

"]block_263 -> { structure_271}
{rank=same; structure_271}

structure_271 [label="structure"]

structure_271 -> { hashline_272}
{rank=same; hashline_272}

hashline_272 [label="hashline"]

hashline_272 -> { hashtag_273}
{rank=same; hashtag_273}

hashtag_273 [label="hashtag"]


hashtag_273 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_263 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]section_264 -> { header_276 block_277 section_278}
{rank=same; header_276 block_277 section_278}

header_276 [label="Top Header"]
block_277 [label="block 368-nil"]
section_278 [label="section: 369-380"]


block_277 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]section_278 -> { header_280 block_281 block_282 section_283}
{rank=same; header_280 block_281 block_282 section_283}

header_280 [label="Second Header"]
block_281 [label="block 369-379"]
block_282 [label="block 380-nil"]
section_283 [label="section: 381-381"]

block_281 -> { structure_284}
{rank=same; structure_284}

structure_284 [label="structure"]

structure_284 -> { hashline_285}
{rank=same; hashline_285}

hashline_285 [label="hashline"]

hashline_285 -> { hashtag_286}
{rank=same; hashtag_286}

hashtag_286 [label="hashtag"]


hashtag_286 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_281 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The rest of the header lines are reformatted with the same
degree of indentation. Note that you still must use the
requisite number of asterisks, this is a syntax sugar giving
a more natural look to collapsed header structures. Prose blocks
needn't be indented to match.

Collapsed headers look like this:

"]block_282 -> { structure_289}
{rank=same; structure_289}

structure_289 [label="structure"]

structure_289 -> { hashline_290}
{rank=same; hashline_290}

hashline_290 [label="hashline"]

hashline_290 -> { hashtag_291}
{rank=same; hashtag_291}

hashtag_291 [label="hashtag"]


hashtag_291 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_282 -> leaf_293
leaf_293  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]section_283 -> { header_294 block_295 section_296}
{rank=same; header_294 block_295 section_296}

header_294 [label="Top Header ▼"]
block_295 [label="block 381-nil"]
section_296 [label="section: 382-397"]


block_295 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]section_296 -> { header_298 block_299 block_300 block_301 block_302 section_303 section_304 section_305 section_306 section_307}
{rank=same; header_298 block_299 block_300 block_301 block_302 section_303 section_304 section_305 section_306 section_307}

header_298 [label="Second Header ►"]
block_299 [label="block 382-389"]
block_300 [label="block 390-391"]
block_301 [label="block 392-395"]
block_302 [label="block 396-nil"]
section_303 [label="section: 398-407"]
section_304 [label="section: 422-440"]
section_305 [label="section: 489-501"]
section_306 [label="section: 567-593"]
section_307 [label="section: 691-731"]

block_299 -> { structure_308}
{rank=same; structure_308}

structure_308 [label="structure"]

structure_308 -> { hashline_309}
{rank=same; hashline_309}

hashline_309 [label="hashline"]

hashline_309 -> { hashtag_310}
{rank=same; hashtag_310}

hashtag_310 [label="hashtag"]


hashtag_310 -> leaf_311
leaf_311  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_299 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This indicates that the top header is partially unfolded
and that the second header is completely folded. Deleting
into the mark unfolds.

Within sections, ordinary prose rules apply. A section
"]
block_300 -> leaf_313
leaf_313  [color=Gray,shape=rectangle,fontname=Inconsolata,label="may contain any number of blocks.

"]
block_301 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"begins\" means first non-whitespace character. Indentation levels are tracked by
Nim rules, obviously a Grimoire document can contain no tab marks
and if any wander in they become four spaces.

"]
block_302 -> leaf_315
leaf_315  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Contra other block forms, tags may not precede a headline.

"]section_303 -> { header_316 block_317 block_318 block_319 section_320}
{rank=same; header_316 block_317 block_318 block_319 section_320}

header_316 [label="Header Lines"]
block_317 [label="block 398-402"]
block_318 [label="block 403-405"]
block_319 [label="block 406-nil"]
section_320 [label="section: 408-419"]


block_317 -> leaf_321
leaf_321  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Anything after a run of =*= and a space, and before a newline, is
a header line.

"]
block_318 -> leaf_322
leaf_322  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Header lines and list lines are structured identically. If I discover
a necessary exception, I'll note it.

"]
block_319 -> leaf_323
leaf_323  [color=Gray,shape=rectangle,fontname=Inconsolata,label="That structure is discussed under [[*Lists][lists]].

"]section_320 -> { header_324 block_325 block_326 block_327 section_328}
{rank=same; header_324 block_325 block_326 block_327 section_328}

header_324 [label="Zero-header tag"]
block_325 [label="block 408-413"]
block_326 [label="block 414-417"]
block_327 [label="block 418-nil"]
section_328 [label="section: 420-421"]


block_325 -> leaf_329
leaf_329  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The special [[*Tags][tag]] =#*=, which is only meaningful at the top of a document,
 indicates a 'zero header'. This lets you use the one-star level as a
series within a single document.

"]
block_326 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The related tag =#meta*= must be followed by a space and any number of
stars. This indicates a meta-level for the entire under-tree, that
exists somewhere else. Further semantics may be provided.

"]
block_327 -> leaf_331
leaf_331  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This section belongs in some further API section.

"]section_328 -> { header_332 block_333}
{rank=same; header_332 block_333}

header_332 [label="TODO Move to API Section"]
block_333 [label="block 420-nil"]


block_333 -> leaf_334
leaf_334  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]section_304 -> { header_335 block_336 block_337 block_338 block_339 block_340 block_341 section_342}
{rank=same; header_335 block_336 block_337 block_338 block_339 block_340 block_341 section_342}

header_335 [label="Prose blocks"]
block_336 [label="block 422-426"]
block_337 [label="block 427-428"]
block_338 [label="block 429-432"]
block_339 [label="block 433-434"]
block_340 [label="block 435-436"]
block_341 [label="block 437-nil"]
section_342 [label="section: 441-481"]


block_336 -> leaf_343
leaf_343  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A prose block is preceded and followed by a single newline. Extraneous
whitespace on the bare line is filtered.

"]
block_337 -> leaf_344
leaf_344  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Prose blocks may not be indented in a semantically meaningful way.

"]block_338 -> { structure_345}
{rank=same; structure_345}

structure_345 [label="structure"]

structure_345 -> { hashline_346}
{rank=same; hashline_346}

hashline_346 [label="hashline"]

hashline_346 -> { hashtag_347}
{rank=same; hashtag_347}

hashtag_347 [label="hashtag"]


hashtag_347 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_338 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
prose

"]
block_339 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    prose

"]
block_340 -> leaf_351
leaf_351  [color=Gray,shape=rectangle,fontname=Inconsolata,label="        prose

"]block_341 -> { structure_352}
{rank=same; structure_352}

structure_352 [label="structure"]

structure_352 -> { hashline_353}
{rank=same; hashline_353}

hashline_353 [label="hashline"]

hashline_353 -> { hashtag_354}
{rank=same; hashtag_354}

hashtag_354 [label="hashtag"]


hashtag_354 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_341 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
is not nested, nor will formatter correct it.

"]section_342 -> { header_357 block_358 block_359 block_360 block_361 block_362 block_363 block_364 block_365 block_366 block_367 block_368 section_369}
{rank=same; header_357 block_358 block_359 block_360 block_361 block_362 block_363 block_364 block_365 block_366 block_367 block_368 section_369}

header_357 [label="Prose markup"]
block_358 [label="block 441-444"]
block_359 [label="block 445-450"]
block_360 [label="block 451-452"]
block_361 [label="block 453-456"]
block_362 [label="block 457-460"]
block_363 [label="block 461-466"]
block_364 [label="block 467-468"]
block_365 [label="block 469-473"]
block_366 [label="block 474-477"]
block_367 [label="block 478-479"]
block_368 [label="block 480-nil"]
section_369 [label="section: 482-488"]


block_358 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose markup rules apply in any prose contexts, not just for prose blocks.

"]
block_359 -> leaf_371
leaf_371  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We mark =*bold*=, =/italic/=, =_underline_=, =~strikethrough~=, 
and =​=literal=​=, using the indicated marks. They must not be separated 
with whitespace from the connecting prose. Any number may be used and matched,
whitespace is allowed, so =**bold math: 4 * 5**= will highlight
correctly.

"]
block_360 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label="There is also [[*Inline%20Code][Inline Code]], which is formatted =`code`=.

"]
block_361 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label="These all follow the prose markup rule: any number of the starting
character matches the same number of the ending character in the
document string.

"]
block_362 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We make subscripts mildly annoying, =sub__script= and =super^^script=, 
to avoid colliding the former with =snake_case=. That's a lot of ways 
to parse the =_= character...

"]
block_363 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In general, prose is more 'active'  than in Babel. There are more things
you can't say without triggering a parsed data structure.  Due to quirks
of Org  involving string  escaping, =`\\"\\"`=  can't be  literally quoted
without repercussions. Check  out the source if you enjoy pounding your
head in frustration at the nastiness of escaped strings.

"]
block_364 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Let's just use a code block:

"]block_365 -> { structure_377 structure_378}
{rank=same; structure_377 structure_378}

structure_377 [label="structure"]
structure_378 [label="structure"]

structure_377 -> { hashline_379}
{rank=same; hashline_379}

hashline_379 [label="hashline"]

hashline_379 -> { hashtag_380}
{rank=same; hashtag_380}

hashtag_380 [label="hashtag"]


hashtag_380 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]structure_378 -> { hashline_382}
{rank=same; hashline_382}

hashline_382 [label="hashline"]

hashline_382 -> { hashtag_383}
{rank=same; hashtag_383}

hashtag_383 [label="hashtag"]


hashtag_383 -> leaf_384
leaf_384  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_365 -> leaf_385
leaf_385  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"\"literal string *containing* @some #things:of-various-sorts { that would be parsed }\"\"

So literal strings start with a minimum of two, rather than a minimum of
"]
block_366 -> leaf_386
leaf_386  [color=Gray,shape=rectangle,fontname=Inconsolata,label="one, of the \" character. This is pretty-printed in edit mode as =‟literal”=,
but such a string does *not* create escaping, we rely on semantic highlighting
to make the distinction clear.

"]
block_367 -> leaf_387
leaf_387  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Any number of \"\"\"\" collapse into one set of such balanced quites.

"]
block_368 -> leaf_388
leaf_388  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In the woven documentation, no quotation marks appear, just the string.

"]section_369 -> { header_389 block_390}
{rank=same; header_389 block_390}

header_389 [label="Latex"]
block_390 [label="block 482-nil"]


block_390 -> leaf_391
leaf_391  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For further markup purposes in a prose context, we escape to LaTeX. The
syntax is =`\latex`=, where the backslash causes us to use LaTeX instead
of Lua. Our TeX backend is LuaTeX, giving arbitrary levels of control from
within a Grimoire-native language.

"]section_305 -> { header_392 block_393 block_394 block_395 section_396}
{rank=same; header_392 block_393 block_394 block_395 section_396}

header_392 [label="Comments"]
block_393 [label="block 489-493"]
block_394 [label="block 494-497"]
block_395 [label="block 498-nil"]
section_396 [label="section: 502-558"]


block_393 -> leaf_397
leaf_397  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In a structure context, you may place line comments. These begin with =--=
and continue to the end of a line.

"]
block_394 -> leaf_398
leaf_398  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Commenting out a header line, or anything else, causes it to be ignored.
It does *not* result in any subdata being commented out, though it will
in the case of a headline change the ownership of the owned blocks.

"]
block_395 -> leaf_399
leaf_399  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The  tag =#comment=  in a  valid tag  content position  marks the  owned
region  of  the tagged  block  as  a  comment.  Nothing within  will  be
evaluated or exported, though it will be parsed.

"]section_396 -> { header_400 block_401 block_402 block_403 block_404 block_405 block_406 block_407 block_408 block_409 block_410 block_411 block_412 block_413 block_414 block_415 block_416 section_417}
{rank=same; header_400 block_401 block_402 block_403 block_404 block_405 block_406 block_407 block_408 block_409 block_410 block_411 block_412 block_413 block_414 block_415 block_416 section_417}

header_400 [label="Marks"]
block_401 [label="block 502-506"]
block_402 [label="block 507-509"]
block_403 [label="block 510-512"]
block_404 [label="block 513-515"]
block_405 [label="block 516-517"]
block_406 [label="block 518-522"]
block_407 [label="block 523-526"]
block_408 [label="block 527-528"]
block_409 [label="block 529-530"]
block_410 [label="block 531-535"]
block_411 [label="block 536-538"]
block_412 [label="block 539-542"]
block_413 [label="block 543-546"]
block_414 [label="block 547-549"]
block_415 [label="block 550-551"]
block_416 [label="block 552-nil"]
section_417 [label="section: 559-566"]


block_401 -> leaf_418
leaf_418  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Marks provide global semantic categories for Grimoire. They may appear
anywhere, including a prose context, whitespace is required on both sides.

"]
block_402 -> leaf_419
leaf_419  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We use  a couple kinds  of marks:  =@names= name things,  and =#tags=
categorize them. Tags are semantics, while names are nominal. 

"]
block_403 -> leaf_420
leaf_420  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Tags that  are boundaries are  paired as  =#tag= and =#/tag=,  plus some
light sugaring. Names are never bounded

"]
block_404 -> leaf_421
leaf_421  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Marks in the first position own the following line. If there is indentation
below that line, they own that too. This doesn't affect the associativity.

"]
block_405 -> leaf_422
leaf_422  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Marks may be namespaced, as =@name.subname= or =#tag.sub-tag.sub-tag=.

"]
block_406 -> leaf_423
leaf_423  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If  you  require   further  namespacing,  =@many/levels/java.class=  and
=#mojo/nation.space/station=  is your  friend. Codices (that is, projects
following the bridge conventions for organization) will use namespacing
in a consistent way. 

"]
block_407 -> leaf_424
leaf_424  [color=Gray,shape=rectangle,fontname=Inconsolata,label="As I continue to muse on it, I  can think of no reason why marks couldn't follow
URI syntax,  or at  least mirror  it closely.  Chaining marks  is not  valid, so
=@named@example.com= could be a valid name. 

"]
block_408 -> leaf_425
leaf_425  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This would mean we could say something like =@file://~/usr/blah=.

"]
block_409 -> leaf_426
leaf_426  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Or =#!/usr/bin/perl/=...

"]
block_410 -> leaf_427
leaf_427  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Yes. This  is a good idea.  Let's do this.  It doesn't displace [[*Links][link]]  syntax, it
enhances it. A  URI [[http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax][may not begin with  a slash]] so this is  parse-clean for tags
and names both. Tags aren't intended to  be user extensible in the narrow sense,
but uniformity is a virtue.

"]
block_411 -> leaf_428
leaf_428  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I don't know why you might want to stick a query in a tag. It's not my
place to know. We just slap a parser on that puppy and continue.

"]
block_412 -> leaf_429
leaf_429  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Implication: The hash or at should be syntax highlighted a different color
from the tag. I'd say hash and at get the same color, with categories and
symbols getting different ones.

"]
block_413 -> leaf_430
leaf_430  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Apparently, [[http://blog.nig.gl/post/48802013022/although-parentheses-are-technically-allowed-in][parentheses are allowed in URLs]], but follow the link, they
suck and you should never use them. They play badly with our calling
convention for named structures, and aren't allowed in our schema.

"]
block_414 -> leaf_431
leaf_431  [color=Gray,shape=rectangle,fontname=Inconsolata,label="It's not a real URI anyway, or it can be but it's also allowed to be a legal
fragment without the handle. In our case the assumed handle is =grimoire://=?

"]
block_415 -> leaf_432
leaf_432  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Not a real URI. But an acceptable fake one.

"]
block_416 -> leaf_433
leaf_433  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The actual rule for a mark is that it begins with =@= or =#= and is surrounded
by whitespace. Internal parsing of the mark is part of recognition, anything 
not recognized is subsequently ignored. It's still considered a mark for e.g. 
weaving purposes. 



"]section_417 -> { header_434 block_435 block_436}
{rank=same; header_434 block_435 block_436}

header_434 [label="Plural Hashtags"]
block_435 [label="block 559-563"]
block_436 [label="block 564-nil"]


block_435 -> leaf_437
leaf_437  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In some cases, such as =#formula= and =#formulas=, a tag may have a
singular or plural form. These are equivalent from the runtimes perspective.

"]
block_436 -> leaf_438
leaf_438  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The same concept applies to pairs such as =#export= and =#exports=, though
the linguistic distinction is not that of plurality.

"]section_306 -> { header_439 block_440 block_441 block_442 block_443 block_444 block_445 section_446}
{rank=same; header_439 block_440 block_441 block_442 block_443 block_444 block_445 section_446}

header_439 [label="Classes"]
block_440 [label="block 567-574"]
block_441 [label="block 575-578"]
block_442 [label="block 579-582"]
block_443 [label="block 583-585"]
block_444 [label="block 586-589"]
block_445 [label="block 590-nil"]
section_446 [label="section: 594-611"]


block_440 -> leaf_447
leaf_447  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags are for Grimoire. A category provides runtime semantics,
cooperating with structure groups to provide the API. Names
play the role of a value in languages which provide a
value-variable distinction: every name within a documents reachable
namespace must be globally unique.

"]
block_441 -> leaf_448
leaf_448  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Specifically names are globally hyperstatic: any redefinition affects
the referent from the moment the parser receives it forward. Redefinitions
are warned against and have no utility, don't do it.

"]
block_442 -> leaf_449
leaf_449  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Classes are roughly equivalent to categories/hashtags, but
for the user. They have a light semantics similar to their
function in Org.

"]
block_443 -> leaf_450
leaf_450  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A class is defined as =:Class:= or =:class:= including
=:several:Classes:chained:=.

"]
block_444 -> leaf_451
leaf_451  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A capital letter means the class inherits onto all subgroups of the block,
a miniscule means the class is associated with the indentation level it is
found within.

"]
block_445 -> leaf_452
leaf_452  [color=Gray,shape=rectangle,fontname=Inconsolata,label="You know you're programming a computer when class and category have distinct
semantics. At least there are no objects, and only two primitive types,
structure and prose.

"]section_446 -> { header_453 block_454 block_455 block_456 block_457 block_458 section_459}
{rank=same; header_453 block_454 block_455 block_456 block_457 block_458 section_459}

header_453 [label="Links"]
block_454 [label="block 594-597"]
block_455 [label="block 598-599"]
block_456 [label="block 600-605"]
block_457 [label="block 606-608"]
block_458 [label="block 609-nil"]
section_459 [label="section: 612-672"]


block_454 -> leaf_460
leaf_460  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There's nothing at all wrong with the syntax or behavior of Babel links.

"]
block_455 -> leaf_461
leaf_461  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Which look like this:

"]block_456 -> { structure_462 structure_463}
{rank=same; structure_462 structure_463}

structure_462 [label="structure"]
structure_463 [label="structure"]

structure_462 -> { hashline_464}
{rank=same; hashline_464}

hashline_464 [label="hashline"]

hashline_464 -> { hashtag_465}
{rank=same; hashtag_465}

hashtag_465 [label="hashtag"]


hashtag_465 -> leaf_466
leaf_466  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]structure_463 -> { hashline_467}
{rank=same; hashline_467}

hashline_467 [label="hashline"]

hashline_467 -> { hashtag_468}
{rank=same; hashtag_468}

hashtag_468 [label="hashtag"]


hashtag_468 -> leaf_469
leaf_469  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_456 -> leaf_470
leaf_470  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[[http://example.com][Hello Example]]

With various wrinkles, all supported.

"]
block_457 -> leaf_471
leaf_471  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We won't support legacy forms of footnoting, such as =[1]=. This applies
to legacy versions of table formulas and list syntax also.

"]
block_458 -> leaf_472
leaf_472  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In Grimoire  there's one way  to do things.  At least, we  avoid variant
syntax with identical semantics.

"]section_459 -> { header_473 block_474 block_475 block_476 block_477 block_478 block_479 block_480 block_481 block_482 block_483 block_484 block_485 block_486 block_487 section_488}
{rank=same; header_473 block_474 block_475 block_476 block_477 block_478 block_479 block_480 block_481 block_482 block_483 block_484 block_485 block_486 block_487 section_488}

header_473 [label="Cookies"]
block_474 [label="block 612-616"]
block_475 [label="block 617-620"]
block_476 [label="block 621-624"]
block_477 [label="block 625-628"]
block_478 [label="block 629-633"]
block_479 [label="block 634-639"]
block_480 [label="block 640-642"]
block_481 [label="block 643-645"]
block_482 [label="block 646-650"]
block_483 [label="block 651-654"]
block_484 [label="block 655-660"]
block_485 [label="block 661-665"]
block_486 [label="block 666-669"]
block_487 [label="block 670-nil"]
section_488 [label="section: 673-690"]


block_474 -> leaf_489
leaf_489  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
List line contexts (header lines and list lines) may have cookies. A
cookie looks like =[ ]=, it must have contents and a space on both sides.

"]
block_475 -> leaf_490
leaf_490  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Cookies are valid after the symbol that defines the list line, but before
anything else. They are also valid at the end of a list line, in which
case they are preceded by a space and followed by a newline.

"]
block_476 -> leaf_491
leaf_491  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Cookies are distinctive in that they may only be applied to list lines.
Most other token-like groups, specifically tags, classes, and inline drawers,
may be embedded into all prose contexts excepting literal strings.

"]
block_477 -> leaf_492
leaf_492  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Cookies are used similarly to cookies in Org, but with consistent semantics.
A simple cookie set is \"X\" and \" \", the user cycles through them. TODO and
DONE are another option.

"]
block_478 -> leaf_493
leaf_493  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I don't want cookies to turn into lightweight tables. Still, saying to
the user \"you may have precisely two cookies a line\" is restrictive.
It's not a violation of the [[http://c2.com/cgi/wiki?TwoIsAnImpossibleNumber][\"Two is an Impossible Number\"]] principle,
because they're head and tail. I think this is ugly:

"]block_479 -> { structure_494 structure_495}
{rank=same; structure_494 structure_495}

structure_494 [label="structure"]
structure_495 [label="structure"]

structure_494 -> { hashline_496}
{rank=same; hashline_496}

hashline_496 [label="hashline"]

hashline_496 -> { hashtag_497}
{rank=same; hashtag_497}

hashtag_497 [label="hashtag"]


hashtag_497 -> leaf_498
leaf_498  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]structure_495 -> { hashline_499}
{rank=same; hashline_499}

hashline_499 [label="hashline"]

hashline_499 -> { hashtag_500}
{rank=same; hashtag_500}

hashtag_500 [label="hashtag"]


hashtag_500 -> leaf_501
leaf_501  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_479 -> leaf_502
leaf_502  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" - [ ] [ ] [ ] Oh god boxes [ ] [ ] [ ]

And whatever you're trying to model there should be a table.

"]
block_480 -> leaf_503
leaf_503  [color=Gray,shape=rectangle,fontname=Inconsolata,label="You can stick a table in a list. I don't know if I mentioned, it's kind
of an obvious thing, I'll write a unit for it at some point.

"]
block_481 -> leaf_504
leaf_504  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Still. I can see a case for two on the left. Once you allow two, you allow
n, without excellent reason.

"]
block_482 -> leaf_505
leaf_505  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[[*Radio%20cookies][Radio cookies]] must be the leftmost cookie on a line, only one is of course allowed.
I could allow a single-line short form multi-radio-button interface but what
is it, a fancy text slider for some value? No. Any number of ordinary cookies
can follow. Knock yourself out.

"]
block_483 -> leaf_506
leaf_506  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Anything more than a couple and one should consider a class or a table.
Handrolling data structures is perverse in a markup language, and I'm
still tempted to forbid it.

"]
block_484 -> leaf_507
leaf_507  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I don't like distinctions without difference. A cookie at the end of a
line is filled by Grimoire, not the user. This mirrors Org's use, which is
to display either a percent or a n/m marker for completion of list items.
The user seeds the cookie, in these cases with =%= or =/=, and the runtime
does the rest.

"]
block_485 -> leaf_508
leaf_508  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Adding more than one such structure to the tail list would complicate the
reference syntax, which I haven't designed, and again, it's just not necessary.
Grimoire can fill in any data structure, \"n-dimensional end cookie array\"
isn't one we have a compelling need for.

"]
block_486 -> leaf_509
leaf_509  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Cookies could interact badly with link syntax. I don't think a [bare box]
qualifies as a link in Org, clearly it doesn't, we can follow that notion
and disallow \"[]\" as a filling for cookies.

"]
block_487 -> leaf_510
leaf_510  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I also think they should be allowed in table cells, which have their own
context which is mostly handwaved right now but is prose++.

"]section_488 -> { header_511 block_512 block_513 block_514 block_515}
{rank=same; header_511 block_512 block_513 block_514 block_515}

header_511 [label="Radio cookies"]
block_512 [label="block 673-678"]
block_513 [label="block 679-681"]
block_514 [label="block 682-687"]
block_515 [label="block 688-nil"]


block_512 -> leaf_516
leaf_516  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We have one 'weird cookie'. A radio cookie, which looks like =( )=,
must be present at the head position of list line contexts. All
list lines at the same level of indentation must have one, if one does.

"]
block_513 -> leaf_517
leaf_517  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Only one is selected at any given time. These would be awkward to add
into tables, to little gain.

"]
block_514 -> leaf_518
leaf_518  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This comes perilously close to pushing us into the realm of error.
The formatter adds buttons to an entire subtree if one member has it,
and if more than one is ticked off, it warns if possible or removes
all but the first mark encountered. If none are present the first
option is selected.

"]
block_515 -> leaf_519
leaf_519  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The runtime will not normally build an invalid radio list, but
Grimoire must import plain text.

"]section_307 -> { header_520 block_521 block_522 block_523 block_524 block_525 block_526 block_527 block_528 block_529 block_530 section_531}
{rank=same; header_520 block_521 block_522 block_523 block_524 block_525 block_526 block_527 block_528 block_529 block_530 section_531}

header_520 [label="Drawers"]
block_521 [label="block 691-695"]
block_522 [label="block 696-702"]
block_523 [label="block 703-705"]
block_524 [label="block 706-708"]
block_525 [label="block 709-710"]
block_526 [label="block 711-712"]
block_527 [label="block 713-721"]
block_528 [label="block 722-724"]
block_529 [label="block 725-727"]
block_530 [label="block 728-nil"]
section_531 [label="section: 732-741"]


block_521 -> leaf_532
leaf_532  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A drawer is a block that's hidden by default. The computer sees it,
the user sees ⦿, or a similar rune.

"]block_522 -> { structure_533 structure_534}
{rank=same; structure_533 structure_534}

structure_533 [label="structure"]
structure_534 [label="structure"]

structure_533 -> { hashline_535}
{rank=same; hashline_535}

hashline_535 [label="hashline"]

hashline_535 -> { hashtag_536}
{rank=same; hashtag_536}

hashtag_536 [label="hashtag"]


hashtag_536 -> leaf_537
leaf_537  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]structure_534 -> { hashline_538}
{rank=same; hashline_538}

hashline_538 [label="hashline"]

hashline_538 -> { hashtag_539}
{rank=same; hashtag_539}

hashtag_539 [label="hashtag"]


hashtag_539 -> leaf_540
leaf_540  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_522 -> leaf_541
leaf_541  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[a-drawer]:
contents
:/[a-drawer]:

This closes to a single Unicode character, such as ⦿, which can't be deleted
"]
block_523 -> leaf_542
leaf_542  [color=Gray,shape=rectangle,fontname=Inconsolata,label="without opening it. Deleting into an ordinary fold marker opens the fold,
deleting towards a drawer marker skips past it.

"]
block_524 -> leaf_543
leaf_543  [color=Gray,shape=rectangle,fontname=Inconsolata,label="=a-drawer=  is  a type,  not  a  name, something  like  =weave=  or =tangle=  in
practice. This may or  may not be supported with a =#weave=  tag. 

"]
block_525 -> leaf_544
leaf_544  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I'm not entirely sure how to interact names with drawers, perhaps like this:

"]block_526 -> { structure_545}
{rank=same; structure_545}

structure_545 [label="structure"]

structure_545 -> { hashline_546}
{rank=same; hashline_546}

hashline_546 [label="hashline"]

hashline_546 -> { hashtag_547}
{rank=same; hashtag_547}

hashtag_547 [label="hashtag"]


hashtag_547 -> leaf_548
leaf_548  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_526 -> leaf_549
leaf_549  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[a-drawer]:
"]block_527 -> { structure_550 structure_551}
{rank=same; structure_550 structure_551}

structure_550 [label="structure"]
structure_551 [label="structure"]

structure_550 -> { handleline_552}
{rank=same; handleline_552}

handleline_552 [label="handleline"]

handleline_552 -> { handle_553}
{rank=same; handle_553}

handle_553 [label="handle"]


handle_553 -> leaf_554
leaf_554  [color=Gray,shape=rectangle,fontname=Inconsolata,label="drawer-name"]structure_551 -> { hashline_555}
{rank=same; hashline_555}

hashline_555 [label="hashline"]

hashline_555 -> { hashtag_556}
{rank=same; hashtag_556}

hashtag_556 [label="hashtag"]


hashtag_556 -> leaf_557
leaf_557  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_527 -> leaf_558
leaf_558  [color=Gray,shape=rectangle,fontname=Inconsolata,label="- some contents
  - in list form
  - etc.
[:/a-drawer]:


Under the  hood, a  drawer is just  a chunked  block owned by  a tag.  An editor
"]
block_528 -> leaf_559
leaf_559  [color=Gray,shape=rectangle,fontname=Inconsolata,label="should keep it closed unless it's  open, those are the only additional semantics
associated.

"]
block_529 -> leaf_560
leaf_560  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This lets master wizards embed unobtrusive magic into documents for apprentice
wizards to spell with.

"]
block_530 -> leaf_561
leaf_561  [color=Gray,shape=rectangle,fontname=Inconsolata,label="An inline drawer looks like =:[[some contents]]:=.  As usual when we say \"inline\" it
can be as long as you want. Being anonymous, because untagged, the only semantics
of such a drawer are to hide the contents in source mode. 

"]section_531 -> { header_562 block_563 block_564 block_565 block_566 section_567}
{rank=same; header_562 block_563 block_564 block_565 block_566 section_567}

header_562 [label="Runes"]
block_563 [label="block 732-735"]
block_564 [label="block 736-738"]
block_565 [label="block 739-740"]
block_566 [label="block 741-nil"]
section_567 [label="section: 742-742"]


block_563 -> leaf_568
leaf_568  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
After drawers is as good a place to put runes as any.

"]
block_564 -> leaf_569
leaf_569  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Runes are characters drawn from the pictographic zones of Unicode,
which describe semantic activity within a document.

"]
block_565 -> leaf_570
leaf_570  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Contra Org, when we have something like the aformentioned:

"]block_566 -> { structure_571}
{rank=same; structure_571}

structure_571 [label="structure"]

structure_571 -> { hashline_572}
{rank=same; hashline_572}

hashline_572 [label="hashline"]

hashline_572 -> { hashtag_573}
{rank=same; hashtag_573}

hashtag_573 [label="hashtag"]


hashtag_573 -> leaf_574
leaf_574  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_566 -> leaf_575
leaf_575  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]section_567 -> { header_576 block_577 section_578}
{rank=same; header_576 block_577 section_578}

header_576 [label="Top Header ▼"]
block_577 [label="block 742-nil"]
section_578 [label="section: 743-771"]


block_577 -> leaf_579
leaf_579  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]section_578 -> { header_580 block_581 block_582 block_583 block_584 block_585 block_586 block_587 block_588 section_589}
{rank=same; header_580 block_581 block_582 block_583 block_584 block_585 block_586 block_587 block_588 section_589}

header_580 [label="Second Header ►"]
block_581 [label="block 743-749"]
block_582 [label="block 750-752"]
block_583 [label="block 753-755"]
block_584 [label="block 756-757"]
block_585 [label="block 758-760"]
block_586 [label="block 761-765"]
block_587 [label="block 766-768"]
block_588 [label="block 769-nil"]
section_589 [label="section: 772-822"]

block_581 -> { structure_590}
{rank=same; structure_590}

structure_590 [label="structure"]

structure_590 -> { hashline_591}
{rank=same; hashline_591}

hashline_591 [label="hashline"]

hashline_591 -> { hashtag_592}
{rank=same; hashtag_592}

hashtag_592 [label="hashtag"]


hashtag_592 -> leaf_593
leaf_593  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_581 -> leaf_594
leaf_594  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
or the dot which represents a drawer =⦿=, the Unicode character
is actually present in the document.

This tidily preserves the state indicated by the sigil through
"]
block_582 -> leaf_595
leaf_595  [color=Gray,shape=rectangle,fontname=Inconsolata,label="any transformation we may take. If you load up last Wednesday's
version of something, it will be in last Wednesday's fold state.

"]
block_583 -> leaf_596
leaf_596  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This lets us have richer folding semantics, like \"don't unfold when
cycling\". It lets us have richer drawer semantics, and so on.

"]
block_584 -> leaf_597
leaf_597  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We will reserve a number of characters for this purpose, at least

"]
block_585 -> leaf_598
leaf_598  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| ▼ |  ► | ⦿ |
    |

"]
block_586 -> leaf_599
leaf_599  [color=Gray,shape=rectangle,fontname=Inconsolata,label="It's legal to delete runes, like anything else. It's also legal to
insert them manually. Neither of these paradigms is typical;
deleting into a rune may or may not cause it to disappear in
normal edit mode.

"]
block_587 -> leaf_600
leaf_600  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Runes, like absolutely everything in Grimoire, are prose if encountered
in a context where they aren't valid structure.

"]
block_588 -> leaf_601
leaf_601  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We will most likely reuse runes inside cookies, though it's just as valid
and quite typical to use normal letters or words.

"]section_589 -> { header_602 block_603 block_604 block_605 block_606 block_607 block_608 block_609 section_610}
{rank=same; header_602 block_603 block_604 block_605 block_606 block_607 block_608 block_609 section_610}

header_602 [label="Lists"]
block_603 [label="block 772-779"]
block_604 [label="block 780-781"]
block_605 [label="block 782-796"]
block_606 [label="block 797-798"]
block_607 [label="block 799-800"]
block_608 [label="block 801-820"]
block_609 [label="block 821-nil"]
section_610 [label="section: 823-843"]


block_603 -> leaf_611
leaf_611  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something that irks me about Org is basically historic. It was a TODO
list first, and became a heiarchical document editor later. As a result,
the functions that let you tag, track, and so on, are in the wrong place;
an Org file has to choose whether or not it's a task list or a document,
which doesn't fit the metalanguage paradigm cleanly.

"]
block_604 -> leaf_612
leaf_612  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A list looks like this:

"]block_605 -> { structure_613 structure_614}
{rank=same; structure_613 structure_614}

structure_613 [label="structure"]
structure_614 [label="structure"]

structure_613 -> { hashline_615}
{rank=same; hashline_615}

hashline_615 [label="hashline"]

hashline_615 -> { hashtag_616}
{rank=same; hashtag_616}

hashtag_616 [label="hashtag"]


hashtag_616 -> leaf_617
leaf_617  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]structure_614 -> { hashline_618}
{rank=same; hashline_618}

hashline_618 [label="hashline"]

hashline_618 -> { hashtag_619}
{rank=same; hashtag_619}

hashtag_619 [label="hashtag"]


hashtag_619 -> leaf_620
leaf_620  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_605 -> leaf_621
leaf_621  [color=Gray,shape=rectangle,fontname=Inconsolata,label="- a list
  - can have some data
  - key :: value
  - [ ] boolean
  - multiple choice #relevant-elsewhere
    - ( ) A
    - (*) B
    - ( ) C
  - Can contain ordered Lists
    1. Such as this
    2. And this

Similar enough to Org, though `+` and `*` aren't equivalent options,
"]
block_606 -> leaf_622
leaf_622  [color=Gray,shape=rectangle,fontname=Inconsolata,label="and we have radio buttons.

"]
block_607 -> leaf_623
leaf_623  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We also have whitespace lists:

"]block_608 -> { structure_624}
{rank=same; structure_624}

structure_624 [label="structure"]

structure_624 -> { hashline_625}
{rank=same; hashline_625}

hashline_625 [label="hashline"]

hashline_625 -> { hashtag_626}
{rank=same; hashtag_626}

hashtag_626 [label="hashtag"]


hashtag_626 -> leaf_627
leaf_627  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_608 -> leaf_628
leaf_628  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~ a whitespace list
   has data
   organized by indentation:
     the colon is prose
     [ ] [todo] checkboxes :fred:
   also radio buttons
     (*) as you might expect
   multiple lines may be spanned \
   by C-style backslash newlines,\
     level is the same as long as \
  you keep escaping, though this is\
  confusing.
   this is the next item
   you can number them:
     1. apple
     2. persimmon
     3. mangosteen

and we're done.
"]block_609 -> { structure_629}
{rank=same; structure_629}

structure_629 [label="structure"]

structure_629 -> { hashline_630}
{rank=same; hashline_630}

hashline_630 [label="hashline"]

hashline_630 -> { hashtag_631}
{rank=same; hashtag_631}

hashtag_631 [label="hashtag"]


hashtag_631 -> leaf_632
leaf_632  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_609 -> leaf_633
leaf_633  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]section_610 -> { header_634 block_635 block_636 block_637 block_638 block_639 section_640}
{rank=same; header_634 block_635 block_636 block_637 block_638 block_639 section_640}

header_634 [label="Embedded Data"]
block_635 [label="block 823-829"]
block_636 [label="block 830-832"]
block_637 [label="block 833-835"]
block_638 [label="block 836-840"]
block_639 [label="block 841-nil"]
section_640 [label="section: 844-910"]


block_635 -> leaf_641
leaf_641  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Anything found in prose between ={= and =}= is EDN. Note that the
outermost pair of curlies denotes a boundary. ={ foo }= is the symbol
foo, ={ foo bar }= is the symbol *foo* and the symbol *bar*, ={{foo bar}}= is
a map with key *foo* and value *bar*.

"]
block_636 -> leaf_642
leaf_642  [color=Gray,shape=rectangle,fontname=Inconsolata,label="To quote the [[https://github.com/edn-format/edn][spec]], \"There is no enclosing element at the top level\". The
braces mark the boundaries of the data region.

"]
block_637 -> leaf_643
leaf_643  [color=Gray,shape=rectangle,fontname=Inconsolata,label="There is a mapping between lists and EDN, the basics of which will be clear
to the astute reader. The non-basics are unclear to the author as well.

"]
block_638 -> leaf_644
leaf_644  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Unresolved: may data be inlined into prose? What would that even mean?
slap some colors on it in the document? If we want to provide a 'this is
code but not for interpretation' mark, we will, it won't be EDN specific.
Inlining colorized code is not high on my todo list.

"]
block_639 -> leaf_645
leaf_645  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I don't think you can. Embeds are down here with lists and
tables in 'things you can't inline', for now.

"]section_640 -> { header_646 block_647 block_648 block_649 block_650 block_651 block_652 block_653 block_654 block_655 block_656 block_657 block_658 block_659 block_660 block_661 block_662 block_663 section_664}
{rank=same; header_646 block_647 block_648 block_649 block_650 block_651 block_652 block_653 block_654 block_655 block_656 block_657 block_658 block_659 block_660 block_661 block_662 block_663 section_664}

header_646 [label="Tables"]
block_647 [label="block 844-848"]
block_648 [label="block 849-852"]
block_649 [label="block 853-855"]
block_650 [label="block 856-857"]
block_651 [label="block 858-863"]
block_652 [label="block 864-869"]
block_653 [label="block 870-875"]
block_654 [label="block 876-882"]
block_655 [label="block 883-889"]
block_656 [label="block 890-891"]
block_657 [label="block 892-892"]
block_658 [label="block 893-896"]
block_659 [label="block 897-898"]
block_660 [label="block 899-901"]
block_661 [label="block 902-904"]
block_662 [label="block 905-906"]
block_663 [label="block 907-nil"]
section_664 [label="section: 911-924"]


block_647 -> leaf_665
leaf_665  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The way tables work in Babel is fine and needs little polish. Any modest
improvements we make will be in the face of considerable experience.

"]
block_648 -> leaf_666
leaf_666  [color=Gray,shape=rectangle,fontname=Inconsolata,label="For example, I expect there's a way to make multiple literal rows serve
as a single row in existing Org, but I don't know what it is. I'll be
playing around a lot in the coming weeks, I hope.

"]
block_649 -> leaf_667
leaf_667  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Composability being an overarching goal, we can embed anything in a table
that we would put elsewhere.

"]
block_650 -> leaf_668
leaf_668  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Looks something like this:

"]block_651 -> { structure_669}
{rank=same; structure_669}

structure_669 [label="structure"]

structure_669 -> { hashline_670}
{rank=same; hashline_670}

hashline_670 [label="hashline"]

hashline_670 -> { hashtag_671}
{rank=same; hashtag_671}

hashtag_671 [label="hashtag"]


hashtag_671 -> leaf_672
leaf_672  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_651 -> leaf_673
leaf_673  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  | a table           | very simple         |
  |-------------------+---------------------|
  | some rows         | with *bold* stuff   |
  | \"\"literal stuff\"\" | etc.                |
  | 23                | This gets filled in |
"]block_652 -> { structure_674 structure_675}
{rank=same; structure_674 structure_675}

structure_674 [label="structure"]
structure_675 [label="structure"]

structure_674 -> { hashline_676}
{rank=same; hashline_676}

hashline_676 [label="hashline"]

hashline_676 -> { hashtag_677}
{rank=same; hashtag_677}

hashtag_677 [label="hashtag"]


hashtag_677 -> leaf_678
leaf_678  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]structure_675 -> { hashline_679}
{rank=same; hashline_679}

hashline_679 [label="hashline"]

hashline_679 -> { hashtag_680}
{rank=same; hashtag_680}

hashtag_680 [label="hashtag"]


hashtag_680 -> leaf_681
leaf_681  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_652 -> leaf_682
leaf_682  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Another option would be a formula list:

"]block_653 -> { structure_683}
{rank=same; structure_683}

structure_683 [label="structure"]

structure_683 -> { hashline_684}
{rank=same; hashline_684}

hashline_684 [label="hashline"]

hashline_684 -> { hashtag_685}
{rank=same; hashtag_685}

hashtag_685 [label="hashtag"]


hashtag_685 -> leaf_686
leaf_686  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_653 -> leaf_687
leaf_687  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  | a table           | very simple         |
  |-------------------+---------------------|
  | some rows         | with *bold* stuff   |
  | \"\"literal stuff\"\" | $23 :expenses:      |
  | 23                | This gets filled in |
"]block_654 -> { structure_688 structure_689}
{rank=same; structure_688 structure_689}

structure_688 [label="structure"]
structure_689 [label="structure"]

structure_688 -> { hashline_690}
{rank=same; hashline_690}

hashline_690 [label="hashline"]

hashline_690 -> { hashtag_691}
{rank=same; hashtag_691}

hashtag_691 [label="hashtag"]


hashtag_691 -> leaf_692
leaf_692  [color=Gray,shape=rectangle,fontname=Inconsolata,label="formulas"]structure_689 -> { hashline_693}
{rank=same; hashline_693}

hashline_693 [label="hashline"]

hashline_693 -> { hashtag_694}
{rank=same; hashtag_694}

hashtag_694 [label="hashtag"]


hashtag_694 -> leaf_695
leaf_695  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_654 -> leaf_696
leaf_696  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   - [X] @3$2 :: @on-formula
   - [ ] @1$1 :: @off-formula

This is a point for Grimoire I dare say.

"]
block_655 -> leaf_697
leaf_697  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A subtle point of parsing I'm not sure is correct is =#formulas -=
or =- #formulas=. I feel like by normal associativity the latter
attaches the tag to the list, then nothing to the tag,
since the rule is a tag preceded only by whitespace owns the line
after it and indentations below it. The tag doesn't affect the indentation level
of the =-=, which could be confusing but won't be.

"]
block_656 -> leaf_698
leaf_698  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We should be able to tag tables like this:

"]block_657 -> { structure_699}
{rank=same; structure_699}

structure_699 [label="structure"]

structure_699 -> { hashline_700}
{rank=same; hashline_700}

hashline_700 [label="hashline"]

hashline_700 -> { hashtag_701}
{rank=same; hashtag_701}

hashtag_701 [label="hashtag"]


hashtag_701 -> leaf_702
leaf_702  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_657 -> leaf_703
leaf_703  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]block_658 -> { structure_704}
{rank=same; structure_704}

structure_704 [label="structure"]

structure_704 -> { handleline_705}
{rank=same; handleline_705}

handleline_705 [label="handleline"]

handleline_705 -> { handle_706}
{rank=same; handle_706}

handle_706 [label="handle"]


handle_706 -> leaf_707
leaf_707  [color=Gray,shape=rectangle,fontname=Inconsolata,label="named-table"]
block_658 -> leaf_708
leaf_708  [color=Gray,shape=rectangle,fontname=Inconsolata,label="             |-----------+-----------|
             |           |           |

"]block_659 -> { structure_709}
{rank=same; structure_709}

structure_709 [label="structure"]

structure_709 -> { hashline_710}
{rank=same; hashline_710}

hashline_710 [label="hashline"]

hashline_710 -> { hashtag_711}
{rank=same; hashtag_711}

hashtag_711 [label="hashtag"]


hashtag_711 -> leaf_712
leaf_712  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_659 -> leaf_713
leaf_713  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]block_660 -> { structure_714}
{rank=same; structure_714}

structure_714 [label="structure"]

structure_714 -> { hashline_715}
{rank=same; hashline_715}

hashline_715 [label="hashline"]

hashline_715 -> { hashtag_716}
{rank=same; hashtag_716}

hashtag_716 [label="hashtag"]


hashtag_716 -> leaf_717
leaf_717  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_660 -> leaf_718
leaf_718  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note the intermediate indentation of the =#formulas:= category tag.
"]
block_661 -> leaf_719
leaf_719  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Totally okay in this context, doesn't trigger Nim rules because the table
associates to the tag anyway.

"]
block_662 -> leaf_720
leaf_720  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This gives us a nice left gutter which I propose we can use in various ways.

"]
block_663 -> leaf_721
leaf_721  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This section can get much longer. Generalizing how tables work is incredibly
powerful. My dream is to embed APL into Grimoire. Give me an excuse to
finally learn it!

"]section_664 -> { header_722 block_723 block_724 block_725 block_726 block_727 section_728}
{rank=same; header_722 block_723 block_724 block_725 block_726 block_727 section_728}

header_722 [label="Clocks"]
block_723 [label="block 911-914"]
block_724 [label="block 915-916"]
block_725 [label="block 917-918"]
block_726 [label="block 919-920"]
block_727 [label="block 921-nil"]
section_728 [label="section: 925-945"]


block_723 -> leaf_729
leaf_729  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I think timestamps are just a drawer you put a timestamp in.

"]
block_724 -> leaf_730
leaf_730  [color=Gray,shape=rectangle,fontname=Inconsolata,label="That drawer can collapse and look like ⏱.

"]
block_725 -> leaf_731
leaf_731  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Or we can collapse it into something from the set containing 🕞.

"]
block_726 -> leaf_732
leaf_732  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Which normal Emacs doesn't display. I really need to go Japanese soon.

"]
block_727 -> leaf_733
leaf_733  [color=Gray,shape=rectangle,fontname=Inconsolata,label="But it would be just adorable to have a little clock representing the timestamp.
Emoji are quirky but the set contains useful icons, and it's Unicode.
Grimoire supports Unicode.

"]section_728 -> { header_734 block_735 block_736 block_737 block_738 section_739}
{rank=same; header_734 block_735 block_736 block_737 block_738 section_739}

header_734 [label="Code"]
block_735 [label="block 925-928"]
block_736 [label="block 929-933"]
block_737 [label="block 934-937"]
block_738 [label="block 938-nil"]
section_739 [label="section: 946-963"]


block_735 -> leaf_740
leaf_740  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The place where it all comes together.

"]
block_736 -> leaf_741
leaf_741  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire has a servant language, Lua by default, but this
is of course configurable. Eventually we'll write Clu,
it's a race to see which project is finished first but they
have common dependencies, surprise, surprise.

"]
block_737 -> leaf_742
leaf_742  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Code and data are yin and yang in Grimoire. Code embedded in
documents is executed in various ways and times; comments within
code blocks are themselves in Grimoire data format, and so on.

"]
block_738 -> leaf_743
leaf_743  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Given a single language Grimoire text, we can perform a mechanical
figure-ground reversal, such that data blocks become comments and
code blocks become live. We have many more sophisticated weave and
tangle operations, but this is a designed-in property that will prove
handy: sometimes you want to take code, org it up, and then flip it
into a literate context. Upgrade path for existing codebases.


"]section_739 -> { header_744 block_745 block_746 block_747 block_748 section_749}
{rank=same; header_744 block_745 block_746 block_747 block_748 section_749}

header_744 [label="Inline Code"]
block_745 [label="block 946-951"]
block_746 [label="block 952-958"]
block_747 [label="block 959-960"]
block_748 [label="block 961-nil"]
section_749 [label="section: 964-1084"]


block_745 -> leaf_750
leaf_750  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Inline code is written =`4 + 5`=. It executes in something similar to
:function mode in Babel, the call is as though it were wrapped in a function
call that looks like:

"]block_746 -> { structure_751 structure_752}
{rank=same; structure_751 structure_752}

structure_751 [label="structure"]
structure_752 [label="structure"]

structure_751 -> { hashline_753}
{rank=same; hashline_753}

hashline_753 [label="hashline"]

hashline_753 -> { hashtag_754}
{rank=same; hashtag_754}

hashtag_754 [label="hashtag"]


hashtag_754 -> leaf_755
leaf_755  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]structure_752 -> { hashline_756}
{rank=same; hashline_756}

hashline_756 [label="hashline"]

hashline_756 -> { hashtag_757}
{rank=same; hashtag_757}

hashtag_757 [label="hashtag"]


hashtag_757 -> leaf_758
leaf_758  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_746 -> leaf_759
leaf_759  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return tostring((function() return
   4 + 5
end)())

With the difference that the inline servant language is run in a session mode by default,
"]
block_747 -> leaf_760
leaf_760  [color=Gray,shape=rectangle,fontname=Inconsolata,label="maintaining state between calls.

"]
block_748 -> leaf_761
leaf_761  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Anything named exists as a data structure in the helper language. This makes it easy to
refer to a block that contains a self-reference, so these are stored in a cycle-safe way.

"]section_749 -> { header_762 block_763 block_764 block_765 block_766 block_767 block_768 block_769 block_770 block_771 block_772 block_773 block_774 block_775 block_776 block_777 block_778 block_779 block_780 block_781 block_782 block_783 block_784 block_785 block_786 block_787 block_788 block_789 block_790 block_791 block_792 section_793}
{rank=same; header_762 block_763 block_764 block_765 block_766 block_767 block_768 block_769 block_770 block_771 block_772 block_773 block_774 block_775 block_776 block_777 block_778 block_779 block_780 block_781 block_782 block_783 block_784 block_785 block_786 block_787 block_788 block_789 block_790 block_791 block_792 section_793}

header_762 [label="Code Blocks"]
block_763 [label="block 964-967"]
block_764 [label="block 968-969"]
block_765 [label="block 970-974"]
block_766 [label="block 975-977"]
block_767 [label="block 978-979"]
block_768 [label="block 980-981"]
block_769 [label="block 982-988"]
block_770 [label="block 989-990"]
block_771 [label="block 991-996"]
block_772 [label="block 997-999"]
block_773 [label="block 1000-1001"]
block_774 [label="block 1002-1005"]
block_775 [label="block 1006-1007"]
block_776 [label="block 1008-1015"]
block_777 [label="block 1016-1020"]
block_778 [label="block 1021-1026"]
block_779 [label="block 1027-1031"]
block_780 [label="block 1032-1036"]
block_781 [label="block 1037-1038"]
block_782 [label="block 1039-1041"]
block_783 [label="block 1042-1047"]
block_784 [label="block 1048-1052"]
block_785 [label="block 1053-1055"]
block_786 [label="block 1056-1059"]
block_787 [label="block 1060-1060"]
block_788 [label="block 1061-1065"]
block_789 [label="block 1066-1068"]
block_790 [label="block 1069-1074"]
block_791 [label="block 1075-1076"]
block_792 [label="block 1077-nil"]
section_793 [label="section: 1085-1088"]


block_763 -> leaf_794
leaf_794  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The =`inline`= syntax works like the rest, you may use any number of backticks to enclose a form.

"]
block_764 -> leaf_795
leaf_795  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Something like:

"]block_765 -> { structure_796}
{rank=same; structure_796}

structure_796 [label="structure"]

structure_796 -> { hashline_797}
{rank=same; hashline_797}

hashline_797 [label="hashline"]

hashline_797 -> { hashtag_798}
{rank=same; hashtag_798}

hashtag_798 [label="hashtag"]


hashtag_798 -> leaf_799
leaf_799  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_765 -> leaf_800
leaf_800  [color=Gray,shape=rectangle,fontname=Inconsolata,label="```
-- some code

```
"]block_766 -> { structure_801}
{rank=same; structure_801}

structure_801 [label="structure"]

structure_801 -> { hashline_802}
{rank=same; hashline_802}

hashline_802 [label="hashline"]

hashline_802 -> { hashtag_803}
{rank=same; hashtag_803}

hashtag_803 [label="hashtag"]


hashtag_803 -> leaf_804
leaf_804  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_766 -> leaf_805
leaf_805  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
is just another inline block, it's evaluated and expanded in-place into the weave, if it's named,
"]
block_767 -> leaf_806
leaf_806  [color=Gray,shape=rectangle,fontname=Inconsolata,label="it is evaluated when referenced. This:

"]block_768 -> { structure_807}
{rank=same; structure_807}

structure_807 [label="structure"]

structure_807 -> { hashline_808}
{rank=same; hashline_808}

hashline_808 [label="hashline"]

hashline_808 -> { hashtag_809}
{rank=same; hashtag_809}

hashtag_809 [label="hashtag"]


hashtag_809 -> leaf_810
leaf_810  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_768 -> leaf_811
leaf_811  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]block_769 -> { structure_812 structure_813}
{rank=same; structure_812 structure_813}

structure_812 [label="structure"]
structure_813 [label="structure"]

structure_812 -> { handleline_814}
{rank=same; handleline_814}

handleline_814 [label="handleline"]

handleline_814 -> { handle_815}
{rank=same; handle_815}

handle_815 [label="handle"]


handle_815 -> leaf_816
leaf_816  [color=Gray,shape=rectangle,fontname=Inconsolata,label="named-block"]structure_813 -> { hashline_817}
{rank=same; hashline_817}

hashline_817 [label="hashline"]

hashline_817 -> { hashtag_818}
{rank=same; hashtag_818}

hashtag_818 [label="hashtag"]


hashtag_818 -> leaf_819
leaf_819  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_769 -> leaf_820
leaf_820  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some code
```

is a named, *prose* block, which contains inline code.

"]
block_770 -> leaf_821
leaf_821  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Separated code blocks use special tags:

"]block_771 -> { codeblock_822}
{rank=same; codeblock_822}

codeblock_822 [label="code block 993-995"]


codeblock_822 -> leaf_823
leaf_823  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code
"]
block_771 -> leaf_824
leaf_824  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]block_772 -> { structure_825}
{rank=same; structure_825}

structure_825 [label="structure"]

structure_825 -> { hashline_826}
{rank=same; hashline_826}

hashline_826 [label="hashline"]

hashline_826 -> { hashtag_827}
{rank=same; hashtag_827}

hashtag_827 [label="hashtag"]


hashtag_827 -> leaf_828
leaf_828  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_772 -> leaf_829
leaf_829  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The =!= and =/= characters may be multiplied if multiple levels of
"]
block_773 -> leaf_830
leaf_830  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nesting apply. As indeed they might in a Grimoire code block.

"]
block_774 -> leaf_831
leaf_831  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We need a good runtime. Playing the Inception game
with Grimoire should be an amusing headache, not a dog-slow
system killer.

"]
block_775 -> leaf_832
leaf_832  [color=Gray,shape=rectangle,fontname=Inconsolata,label="They may be named like anything else:

"]block_776 -> { codeblock_833 structure_834}
{rank=same; codeblock_833 structure_834}

codeblock_833 [label="code block 1009-1011"]
structure_834 [label="structure"]


codeblock_833 -> leaf_835
leaf_835  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code
"]structure_834 -> { hashline_836}
{rank=same; hashline_836}

hashline_836 [label="hashline"]

hashline_836 -> { hashtag_837}
{rank=same; hashtag_837}

hashtag_837 [label="hashtag"]


hashtag_837 -> leaf_838
leaf_838  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_776 -> leaf_839
leaf_839  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They may be marked for evaluation:

"]block_777 -> { codeblock_840}
{rank=same; codeblock_840}

codeblock_840 [label="code block 1017-1019"]


codeblock_840 -> leaf_841
leaf_841  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code
"]
block_777 -> leaf_842
leaf_842  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]block_778 -> { codeblock_843}
{rank=same; codeblock_843}

codeblock_843 [label="code block 1023-1025"]


codeblock_843 -> leaf_844
leaf_844  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 4 + 5
"]
block_778 -> leaf_845
leaf_845  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]block_779 -> { structure_846}
{rank=same; structure_846}

structure_846 [label="structure"]

structure_846 -> { hashline_847}
{rank=same; hashline_847}

hashline_847 [label="hashline"]

hashline_847 -> { hashtag_848}
{rank=same; hashtag_848}

hashtag_848 [label="hashtag"]


hashtag_848 -> leaf_849
leaf_849  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_779 -> leaf_850
leaf_850  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

-- equivalent:

"]block_780 -> { codeblock_851}
{rank=same; codeblock_851}

codeblock_851 [label="code block 1033-1035"]


codeblock_851 -> leaf_852
leaf_852  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 4 + 5
"]
block_780 -> leaf_853
leaf_853  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]block_781 -> { structure_854}
{rank=same; structure_854}

structure_854 [label="structure"]

structure_854 -> { hashline_855}
{rank=same; hashline_855}

hashline_855 [label="hashline"]

hashline_855 -> { hashtag_856}
{rank=same; hashtag_856}

hashtag_856 [label="hashtag"]


hashtag_856 -> leaf_857
leaf_857  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_781 -> leaf_858
leaf_858  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]block_782 -> { structure_859}
{rank=same; structure_859}

structure_859 [label="structure"]

structure_859 -> { hashline_860}
{rank=same; hashline_860}

hashline_860 [label="hashline"]

hashline_860 -> { hashtag_861}
{rank=same; hashtag_861}

hashtag_861 [label="hashtag"]


hashtag_861 -> leaf_862
leaf_862  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_782 -> leaf_863
leaf_863  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note the =#/lua()= form, which calls the code block, and the =#->= tag, which
"]
block_783 -> leaf_864
leaf_864  [color=Gray,shape=rectangle,fontname=Inconsolata,label="marks an anonymous result. =#@nine->= is the automatically generated tag for
the return value of the block named =@nine=, adding =@nine()= to a prose block will
add the number 9 to the weave at that location. *bridge* will either display the result,
the call, or both, configurably, when editing the source, with syntax-highlighting to 
enforce the distinction. 

"]
block_784 -> leaf_865
leaf_865  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Code blocks may be indented as any other blocks, with the associated owership
rules. Code blocks so indented have a logical start equal to their level of
indentation, which is to say the program being called will not see indentation
that is proper to the Grimoire document.

"]
block_785 -> leaf_866
leaf_866  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Code blocks may be placed inside lists, as tables may be, but may not be
explicitly placed inside tables.

"]
block_786 -> leaf_867
leaf_867  [color=Gray,shape=rectangle,fontname=Inconsolata,label="You may insert the result of a named code block in the data context
by simply saying =@a-named-block()=. If there are variables, you may pass
them, =@a-named-block(23, true)= or if you wish, by name:

"]block_787 -> { structure_868}
{rank=same; structure_868}

structure_868 [label="structure"]

structure_868 -> { hashline_869}
{rank=same; hashline_869}

hashline_869 [label="hashline"]

hashline_869 -> { hashtag_870}
{rank=same; hashtag_870}

hashtag_870 [label="hashtag"]


hashtag_870 -> leaf_871
leaf_871  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_787 -> leaf_872
leaf_872  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]block_788 -> { structure_873 structure_874}
{rank=same; structure_873 structure_874}

structure_873 [label="structure"]
structure_874 [label="structure"]

structure_873 -> { handleline_875}
{rank=same; handleline_875}

handleline_875 [label="handleline"]

handleline_875 -> { handle_876}
{rank=same; handle_876}

handle_876 [label="handle"]


handle_876 -> leaf_877
leaf_877  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a-named-block"]structure_874 -> { hashline_878}
{rank=same; hashline_878}

hashline_878 [label="hashline"]

hashline_878 -> { hashtag_879}
{rank=same; hashtag_879}

hashtag_879 [label="hashtag"]


hashtag_879 -> leaf_880
leaf_880  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_788 -> leaf_881
leaf_881  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The values will be inserted as per an inline reference.

"]
block_789 -> leaf_882
leaf_882  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Within a formula applied to a table, it is valid to use the description
syntax for a variable to supply an argument to a function.

"]
block_790 -> leaf_883
leaf_883  [color=Gray,shape=rectangle,fontname=Inconsolata,label="There will be further syntax involved in building up the line that
begins a code block. It's considered good form to assign complex
code block headers into distinct tags, and use those, rather than
being explicit and repeating yourself or hiding file-local defaults
in drawers.

"]
block_791 -> leaf_884
leaf_884  [color=Gray,shape=rectangle,fontname=Inconsolata,label="So we prefer something like

"]block_792 -> { codeblock_885 structure_886}
{rank=same; codeblock_885 structure_886}

codeblock_885 [label="code block 1078-1080"]
structure_886 [label="structure"]


codeblock_885 -> leaf_887
leaf_887  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code
"]structure_886 -> { hashline_888}
{rank=same; hashline_888}

hashline_888 [label="hashline"]

hashline_888 -> { hashtag_889}
{rank=same; hashtag_889}

hashtag_889 [label="hashtag"]


hashtag_889 -> leaf_890
leaf_890  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_792 -> leaf_891
leaf_891  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
over anything more or less explicit.

"]section_793 -> { header_892 block_893 section_894 section_895}
{rank=same; header_892 block_893 section_894 section_895}

header_892 [label="Runtime"]
block_893 [label="block 1085-nil"]
section_894 [label="section: 1089-1123"]
section_895 [label="section: 1156-1172"]


block_893 -> leaf_896
leaf_896  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Here, we begin to explore the interactions Grimoire is capable of.

"]section_894 -> { header_897 block_898 block_899 block_900 block_901 block_902 block_903 block_904 block_905 section_906}
{rank=same; header_897 block_898 block_899 block_900 block_901 block_902 block_903 block_904 block_905 section_906}

header_897 [label="Literate or Live?"]
block_898 [label="block 1089-1093"]
block_899 [label="block 1094-1098"]
block_900 [label="block 1099-1101"]
block_901 [label="block 1102-1105"]
block_902 [label="block 1106-1109"]
block_903 [label="block 1110-1114"]
block_904 [label="block 1115-1119"]
block_905 [label="block 1120-nil"]
section_906 [label="section: 1124-1155"]


block_898 -> leaf_907
leaf_907  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Babel is descended from the tradition of [[http://en.wikipedia.org/wiki/Literate_programming][literate programming]], and
Grimoire inherits this from Babel.

"]
block_899 -> leaf_908
leaf_908  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire is capable of producing code and documentation in the
classic literate style. This is not the aim of Grimoire: it is
a metalanguage, for working with prose, data, and code in an
integrated fashion.

"]
block_900 -> leaf_909
leaf_909  [color=Gray,shape=rectangle,fontname=Inconsolata,label="What a compiler is to a REPL, literate programming is to living
documents.

"]
block_901 -> leaf_910
leaf_910  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In a literate programming context, we have source, which integrates
code and documentation. The source is then woven into documentation,
and tangled into code. Both are compiled, one is printed, one is run.

"]
block_902 -> leaf_911
leaf_911  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The word 'printed' sounds somewhat archaic, no? The number of tools
Donald Knuth had to write just to write the tools he wanted to write,
and tool the writings he wanted to tool, is simply staggering.

"]
block_903 -> leaf_912
leaf_912  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Traces of that legacy remain in Grimoire. Like Babel, we allow for
LaTeX embedding, with the sugar =`\latex`=. Starting Lua code with
a backslash is illegal, starting Clu code with a backslash is also
illegal.

"]
block_904 -> leaf_913
leaf_913  [color=Gray,shape=rectangle,fontname=Inconsolata,label="For a Grimoire document to be printed, realistically, in today's world,
it will be translated to LaTeX, hence to PDF, sent off to a print
on demand company, and drop shipped. Some documents may in fact
make this journey, because why not? We aren't oriented around it.

"]
block_905 -> leaf_914
leaf_914  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The basic flow in a Grimoire context is one of excursion and return.
We have tangling and weaving, but also unraveling, where actions taken
within the weave or tangle are integrated back into the source document.

"]section_906 -> { header_915 block_916 block_917 block_918 block_919 block_920 block_921}
{rank=same; header_915 block_916 block_917 block_918 block_919 block_920 block_921}

header_915 [label="Unraveling the Mystery"]
block_916 [label="block 1124-1131"]
block_917 [label="block 1132-1137"]
block_918 [label="block 1138-1140"]
block_919 [label="block 1141-1145"]
block_920 [label="block 1146-1150"]
block_921 [label="block 1151-nil"]


block_916 -> leaf_922
leaf_922  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
What's unraveling? When I picture Donald Knuth writing literate code,
I picture him with a notebook, writing free-flowing algorithms in a
fashion he refined his entire career. I imagine him carefully transcribing
into Web, running the compiler, going for a stroll around the Stanford
campus, and examining the changes upon his return.

"]
block_917 -> leaf_923
leaf_923  [color=Gray,shape=rectangle,fontname=Inconsolata,label="On the days, and they did happen, when his program was in a state of error,
I picture him returning to his notebook first. While thinking. Perhaps
playing the organ for an hour or two, to relax. He would then correct the
notebook, then the code, then the program, which would be correct now,
most of the time.

"]
block_918 -> leaf_924
leaf_924  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I'm making that all up. But I'd wager I'm not far off the mark. We
don't work like that and most of us can't.

"]
block_919 -> leaf_925
leaf_925  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A tangle is named that because the mapping between it and the source
can be non-trivial. It's quite possible to make it undecidable what to
do with edits to the tangle. it's also possible to move edits from the tangle
back into the source, in most cases, if we structure things well.

"]
block_920 -> leaf_926
leaf_926  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Donald Knuth was unable to print a book that would alter his code. I'm
sure he'd have been delighted to have the ability. Our weaves can easily
be living documents, through in-browser and server side empowerment.
Those changes, too, should make it back into the source.

"]
block_921 -> leaf_927
leaf_927  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Ultimately I imagine many people will prefer to edit and run their
Grimoire documents entirely from a weave that provides a bit of the
ol' WYSIWYG to the experience. Well and good for them, I have my own
view of Heaven, and it isn't Heaven if we don't all fit.

"]section_895 -> { header_928 block_929 block_930 block_931 block_932 section_933}
{rank=same; header_928 block_929 block_930 block_931 block_932 section_933}

header_928 [label="Source, Tangle and Weave"]
block_929 [label="block 1156-1160"]
block_930 [label="block 1161-1164"]
block_931 [label="block 1165-1168"]
block_932 [label="block 1169-nil"]
section_933 [label="section: 1173-1200"]


block_929 -> leaf_934
leaf_934  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These classic concepts from literate programming are central to
the Grimoire paradigm.

"]
block_930 -> leaf_935
leaf_935  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In Grimoire, something like a PDF is not a true weave. It is a product;
much like an image or data derived from a simulation, it is regenerated
when necessary but has no further connection to the Grimoire environment.

"]
block_931 -> leaf_936
leaf_936  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Our first section discusses the format of Grimoire source code. Like Babel,
unlike Web and descendants, it is self-tangling. Grimoire will be tightly
integrated and purpose-built for this task, operating at a REPL+ level.

"]
block_932 -> leaf_937
leaf_937  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We still wish to use it to compile programs written in appropriate languages.
These languages needn't be educated in the ways of Grimoire, imposing this
requirement would be so onerous as to block adoption.

"]section_933 -> { header_938 block_939 block_940 block_941 block_942 block_943 section_944}
{rank=same; header_938 block_939 block_940 block_941 block_942 block_943 section_944}

header_938 [label="Unraveling the Tangle"]
block_939 [label="block 1173-1178"]
block_940 [label="block 1179-1182"]
block_941 [label="block 1183-1189"]
block_942 [label="block 1190-1193"]
block_943 [label="block 1194-nil"]
section_944 [label="section: 1201-1219"]


block_939 -> leaf_945
leaf_945  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Babel offers limited facilities for working within source blocks. What it
doesn't offer is the critical 'unravel' operation, which takes changes to
the tangle and integrates them back into the weave.

"]
block_940 -> leaf_946
leaf_946  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This is a partially-solved problem, with Babel able to put comment tags into
the source which allow Emacs to jump back into your actual source from
errors in the tangle.

"]
block_941 -> leaf_947
leaf_947  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This is just not good enough. For any number of reasons, we need to be able
to unravel. I'll cite one: Converting existing codebases over to literacy.
The first step is to recreate the existing program on a source-line-identical
level. The entire existing developer base is familiar with the program already
and isn't going to want to start editing a bunch of Grimoire. They can most
likely be induced to accept readable metadata, and that's it.

"]
block_942 -> leaf_948
leaf_948  [color=Gray,shape=rectangle,fontname=Inconsolata,label="That's all we need. Code is in one of three categories: either it is a single
literal copy from source, it's one of several copies from source, or
it's generated code that's dependent on information in the source.

"]
block_943 -> leaf_949
leaf_949  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We incorporate all changes to the former automatically when we unravel.
Changes to a single version of multiple copies prompts user interaction: do
you want to embed the change as its own source block, propagate it to each
instance, or decline the merge? Changes to generated code are simply
forbidden. If one is doing generation on the code base, working from
the weave is the more comfortable approach.

"]section_944 -> { header_950 block_951 block_952 block_953 block_954}
{rank=same; header_950 block_951 block_952 block_953 block_954}

header_950 [label="Backweaving"]
block_951 [label="block 1201-1204"]
block_952 [label="block 1205-1209"]
block_953 [label="block 1210-1214"]
block_954 [label="block 1215-nil"]


block_951 -> leaf_955
leaf_955  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An analogous operation is backweaving.

"]
block_952 -> leaf_956
leaf_956  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A weave in Grimoire is an HTML/CSS/JS document. In other words, a program.
The weave is much closer akin to the source than any tangle. Any Grimoire
program can have a weave view, though it isn't necessary; many will have
no tangle at all, containing the functionality within Grimoire.

"]
block_953 -> leaf_957
leaf_957  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The weave may therefore be manipulated, and we need some way to reflect
those changes back into the source. This can't be automated in a general
way. What we're left with is an EDN protocol for exchanging information
to update the weave in cooperation with some server logic and git.

"]
block_954 -> leaf_958
leaf_958  [color=Gray,shape=rectangle,fontname=Inconsolata,label="So, could you write the server logic for a site as a literate program,
push it to a server that tangles and weaves it, and use the source
and Grimoire/bridge as the sysadmin view? I bet you could, it might
even be fairly popular.

"]
}
