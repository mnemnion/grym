digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 1219"]


doc_0 -> { section_1 section_2}
{rank=same; section_1 section_2}

section_1 [label="section: 1-3"]

section_2 [label="section: 34-338"]


section_1 -> { header_3 prose_4 structure_5 section_6}
{rank=same; header_3 prose_4 structure_5 section_6}

header_3 [label="0 : "]

prose_4 [label="prose"]

structure_5 [label="structure"]

section_6 [label="section: 4-33"]


prose_4 -> { raw_7}
{rank=same; raw_7}

raw_7 [label="raw"]


raw_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_5 -> { hashline_9}
{rank=same; hashline_9}

hashline_9 [label="hashline"]


hashline_9 -> { hashtag_10}
{rank=same; hashtag_10}

hashtag_10 [label="hashtag"]


hashtag_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_6 -> { header_12 prose_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 prose_21}
{rank=same; header_12 prose_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 prose_21}

header_12 [label="1 : Introduction"]

prose_13 [label="prose"]

prose_14 [label="prose"]

prose_15 [label="prose"]

prose_16 [label="prose"]

prose_17 [label="prose"]

prose_18 [label="prose"]

prose_19 [label="prose"]

prose_20 [label="prose"]

prose_21 [label="prose"]


prose_13 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is a response to Babel.
"]
prose_14 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Babel is simultaneously a kludge and the most potentially powerful language in existence.
"]
prose_15 -> { raw_26}
{rank=same; raw_26}

raw_26 [label="raw"]


raw_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Babel is a metalanguage. The structure of Org mode lets the user weave together code into a
living document, in a flexible, powerful way.
"]
prose_16 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The name is charmingly apt. Babel exists at the top of a tower of abstractions that is teetering
on the verge of collapse. Org-mode is an extension of outline mode, which was a simple tree
editor task list.
"]
prose_17 -> { raw_30}
{rank=same; raw_30}

raw_30 [label="raw"]


raw_30 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Various users bolted stuff on, because that's how emacs grows, you bolt stuff onto it and it
continues to function because it's [[http://lispers.org/][made with alien technology]].
"]
prose_18 -> { raw_32}
{rank=same; raw_32}

raw_32 [label="raw"]


raw_32 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The problem with Babel is more than the syntax being clunky, though that's a problem. The issue is
more profoundly that Babel is built on Org, which is built on emacs. It's a language, yes,
parsers exist for other platforms. But as a runtime, it isn't portable without a lot of effort.
"]
prose_19 -> { raw_34}
{rank=same; raw_34}

raw_34 [label="raw"]


raw_34 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So much so, that we get a chance to start over. It's roughly as difficult to write Grimoire as it would be to
reimplement Babel in, say, Sublime.
"]
prose_20 -> { raw_36}
{rank=same; raw_36}

raw_36 [label="raw"]


raw_36 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the process, we can:
"]
prose_21 -> { raw_38}
{rank=same; raw_38}

raw_38 [label="raw"]


raw_38 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - streamline concepts, making them more orthogonal
  - clean up the clunkiness in the grammar
  - build a toolchain that will let us write magic spells in any number of languages, amassing a powerful
    collection of same. A grimoire, if you will: a living book in which magic is both written and performed.
"]
section_2 -> { header_40 prose_41 section_42 section_43 section_44}
{rank=same; header_40 prose_41 section_42 section_43 section_44}

header_40 [label="1 : Musings on Metasyntax"]

prose_41 [label="prose"]

section_42 [label="section: 35-82"]

section_43 [label="section: 105-311"]

section_44 [label="section: 339-343"]


prose_41 -> { raw_45}
{rank=same; raw_45}

raw_45 [label="raw"]


raw_45 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_42 -> { header_47 prose_48 prose_49 section_50 section_51 section_52}
{rank=same; header_47 prose_48 prose_49 section_50 section_51 section_52}

header_47 [label="2 : Constraints"]

prose_48 [label="prose"]

prose_49 [label="prose"]

section_50 [label="section: 42-68"]

section_51 [label="section: 69-82"]

section_52 [label="section: 83-104"]


prose_48 -> { raw_53}
{rank=same; raw_53}

raw_53 [label="raw"]


raw_53 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

There is a difference between a metalanguage and a literate programming language. Babel is a metalanguage,
as Grimoire is intended to be.
"]
prose_49 -> { raw_55}
{rank=same; raw_55}

raw_55 [label="raw"]


raw_55 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An effective metalanguage balances three concerns. It must be usable, readable, and parsable.
"]
section_50 -> { header_57 prose_58 prose_59 prose_60 prose_61 prose_62 prose_63 prose_64}
{rank=same; header_57 prose_58 prose_59 prose_60 prose_61 prose_62 prose_63 prose_64}

header_57 [label="3 : Usable"]

prose_58 [label="prose"]

prose_59 [label="prose"]

prose_60 [label="prose"]

prose_61 [label="prose"]

prose_62 [label="prose"]

prose_63 [label="prose"]

prose_64 [label="prose"]


prose_58 -> { raw_65}
{rank=same; raw_65}

raw_65 [label="raw"]


raw_65 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A metalanguage is used interactively, on a deeper level than REPLs.
"]
prose_59 -> { raw_67}
{rank=same; raw_67}

raw_67 [label="raw"]


raw_67 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is what makes working with Org so amazing. The first purpose of what became Babel
was simply editing outlines. This was outline mode, which dates back to the era when
using asterisks and =- [ ]= checkboxes in a plain ASCII text file was fairly futuristic
behavior.
"]
prose_60 -> { raw_69}
{rank=same; raw_69}

raw_69 [label="raw"]


raw_69 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You can't really call that a language either, though it's a syntax. More and more features
were attached until we have modern Babel. But because each feature was build as an extension
to the editing/runtime environment, Babel is fairly smooth to work with.
"]
prose_61 -> { raw_71}
{rank=same; raw_71}

raw_71 [label="raw"]


raw_71 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If you can handle Emacs. I can, some can't. A metalanguage is tightly coupled to its runtime,
because its runtime is its editing environment. Not much of a metalanguage if this isn't the
case.
"]
prose_62 -> { raw_73}
{rank=same; raw_73}

raw_73 [label="raw"]


raw_73 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is the culmination of a considerable dependency chain. We need a data structure, a
parser to work with the data structure, and an editing environment that builds on these. For
maximum enjoyment, we'll want a custom terminal that enhances the xterm protocol with a few
features, most notably graphics.
"]
prose_63 -> { raw_75}
{rank=same; raw_75}

raw_75 [label="raw"]


raw_75 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Just like I have trouble writing Lua without burning huge amounts of time planning out Clu, I
can't use Org without doing the same for Grimoire. It's all related: I need a really good parser.
"]
prose_64 -> { raw_77}
{rank=same; raw_77}

raw_77 [label="raw"]


raw_77 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[[https://github.com/UpstandingHackers/hammer][hammer]] is the leading contender. But back to Grimoire.
"]
section_51 -> { header_79 prose_80 prose_81 prose_82}
{rank=same; header_79 prose_80 prose_81 prose_82}

header_79 [label="3 : Readable"]

prose_80 [label="prose"]

prose_81 [label="prose"]

prose_82 [label="prose"]


prose_80 -> { raw_83}
{rank=same; raw_83}

raw_83 [label="raw"]


raw_83 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is designed to be read.  It's important that the raw syntax not
 break the reader's flow.  A good metalanguage lets the user employ just
 as much magic as she's comfortable with, without imposing more.
"]
prose_81 -> { raw_85}
{rank=same; raw_85}

raw_85 [label="raw"]


raw_85 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Our syntax is  designed to support this. As such  it is deeply concerned
with matters  such as indentation  and whitespacing, which are  basic to
readability.
"]
prose_82 -> { raw_87}
{rank=same; raw_87}

raw_87 [label="raw"]


raw_87 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It will be quite possible and indeed comfortable to write pure documents
such  as blog  posts in  Grimoire form.  In that  use case  it resembles
Markdown.
"]
section_52 -> { header_89 prose_90 prose_91 prose_92 prose_93 prose_94}
{rank=same; header_89 prose_90 prose_91 prose_92 prose_93 prose_94}

header_89 [label="3 : Parsable"]

prose_90 [label="prose"]

prose_91 [label="prose"]

prose_92 [label="prose"]

prose_93 [label="prose"]

prose_94 [label="prose"]


prose_90 -> { raw_95}
{rank=same; raw_95}

raw_95 [label="raw"]


raw_95 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire  documents are  intended  to be  highly  convoluted. The  basic
editing operation  is the fold. The  Grimoire editor must be  capable of
handling documents in the tens of megabytes with a complex and preserved
folding structure.
"]
prose_91 -> { raw_97}
{rank=same; raw_97}

raw_97 [label="raw"]


raw_97 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This requires  a ground-up  editing environment  rewrite to  employ data
structures   with   correct   big-O    complexity   and   an   efficient
implementation.
"]
prose_92 -> { raw_99}
{rank=same; raw_99}

raw_99 [label="raw"]


raw_99 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This  also  requires  that  the   language  be  well-designed  for  easy
recognition of the structural elements. As this document evolves, I will
be defining a grammar in the syntax preferred by barbarian.
"]
prose_93 -> { raw_101}
{rank=same; raw_101}

raw_101 [label="raw"]


raw_101 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is  an error-free  language. There  are several  concepts which
interact to  create this, namely  structure, prose, well-  and malformed
structure, and validity.
"]
prose_94 -> { raw_103}
{rank=same; raw_103}

raw_103 [label="raw"]


raw_103 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A parser for Grimoire which doesn't  succeed without error for any utf-8
string is not valid.
"]
section_43 -> { header_105 prose_106 section_107 section_108 section_109 section_110 section_111 section_112}
{rank=same; header_105 prose_106 section_107 section_108 section_109 section_110 section_111 section_112}

header_105 [label="2 : Structure"]

prose_106 [label="prose"]

section_107 [label="section: 109-149"]

section_108 [label="section: 161-190"]

section_109 [label="section: 191-200"]

section_110 [label="section: 253-285"]

section_111 [label="section: 295-311"]

section_112 [label="section: 312-338"]


prose_106 -> { raw_113}
{rank=same; raw_113}

raw_113 [label="raw"]


raw_113 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a top-down look at Grimoire's proposed syntax.
"]
section_107 -> { header_115 prose_116 prose_117 prose_118 prose_119 prose_120 prose_121 prose_122 prose_123 prose_124 section_125}
{rank=same; header_115 prose_116 prose_117 prose_118 prose_119 prose_120 prose_121 prose_122 prose_123 prose_124 section_125}

header_115 [label="3 : Encoding"]

prose_116 [label="prose"]

prose_117 [label="prose"]

prose_118 [label="prose"]

prose_119 [label="prose"]

prose_120 [label="prose"]

prose_121 [label="prose"]

prose_122 [label="prose"]

prose_123 [label="prose"]

prose_124 [label="prose"]

section_125 [label="section: 150-160"]


prose_116 -> { raw_126}
{rank=same; raw_126}

raw_126 [label="raw"]


raw_126 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is defined in terms of utf-8.
"]
prose_117 -> { raw_128}
{rank=same; raw_128}

raw_128 [label="raw"]


raw_128 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The core syntax is defined in terms of the reachable keys on a US keyboard.
This tradition is firmly entrenched in the mid teens, and I have no
designs on budging that at present. The miser in me likes that they're
a byte each. The lawyer in me insists that this isn't ASCII, which is a
seven-bit legacy encoding. All aspects of utf-8 are equally meaningful.
"]
prose_118 -> { raw_130}
{rank=same; raw_130}

raw_130 [label="raw"]


raw_130 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We aren't at all afraid to use Unicode characters to display aspects
of the runtime. In fact we favor this, as it marks those operations
as distinctive. Most people can't type ⦿ without effort (I can't)
and it's easy to recognize as a folded drawer once you've seen a couple.
"]
prose_119 -> { raw_132}
{rank=same; raw_132}

raw_132 [label="raw"]


raw_132 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is case sensitive and uses lower-snake-case for built-in English
phrases. There is a convention (see classes) that uses capitalization of
user words to affect semantics. This may be overridden with other rules
for languages that lack the majuscule-miniscule distinction.
"]
prose_120 -> { raw_134}
{rank=same; raw_134}

raw_134 [label="raw"]


raw_134 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I want Grimoire to have correct Unicode handling, for some value of
correct. It can't be considered 1.0 without this.
"]
prose_121 -> { raw_136}
{rank=same; raw_136}

raw_136 [label="raw"]


raw_136 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Bidirectional handling in a context that's indentation sensitive is
an example of something subtle. Grimoire uses indentation in various
ways, so here's the rule:
"]
prose_122 -> { raw_138}
{rank=same; raw_138}

raw_138 [label="raw"]


raw_138 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Any newline that has a reversed direction ends indentation. So if
you are going ltr, issue an rtl marker, and a newline, your indentation
level is zero. If you reverse direction twice in a line, you keep
your indentation level. Three times, you lose it.
"]
prose_123 -> { raw_140}
{rank=same; raw_140}

raw_140 [label="raw"]


raw_140 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'd love to get a Hebrew and/or Arabic fluent hacker on the project
early, to make sure this works correctly.
"]
prose_124 -> { raw_142}
{rank=same; raw_142}

raw_142 [label="raw"]


raw_142 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Another thing I want to get right is equivalence. If you have a
variable called \"Glück\" the compiler shouldn't complain if it's
rendered in either of the valid ways. For some sequences that's
\"any of the valid ways\". If we normalized your prose, you might
have problems later, so we don't want to solve it that way.
"]
section_125 -> { header_144 prose_145 prose_146}
{rank=same; header_144 prose_145 prose_146}

header_144 [label="4 : Internationalization"]

prose_145 [label="prose"]

prose_146 [label="prose"]


prose_145 -> { raw_147}
{rank=same; raw_147}

raw_147 [label="raw"]


raw_147 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

All parts of Grimoire defined in English will be namespaced
as =en:/=, and loaded by default. Other languages will be added
when there is a fluent maintainer available.
"]
prose_146 -> { raw_149}
{rank=same; raw_149}

raw_149 [label="raw"]


raw_149 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note  that  many  words  aren't  truly English.  Notably  the  names  of
programming languages are  the same in all human languages.   A tag like
=#author= can be namespaced =#fr:/auteur= and will be, but =#!python= is not
in the =en:/= namespace.
"]
section_108 -> { header_151 prose_152 prose_153 prose_154 prose_155 prose_156 prose_157 prose_158}
{rank=same; header_151 prose_152 prose_153 prose_154 prose_155 prose_156 prose_157 prose_158}

header_151 [label="3 : Prose and Structure"]

prose_152 [label="prose"]

prose_153 [label="prose"]

prose_154 [label="prose"]

prose_155 [label="prose"]

prose_156 [label="prose"]

prose_157 [label="prose"]

prose_158 [label="prose"]


prose_152 -> { raw_159}
{rank=same; raw_159}

raw_159 [label="raw"]


raw_159 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The major distinction Grimoire draws is between prose and structure.
"]
prose_153 -> { raw_161}
{rank=same; raw_161}

raw_161 [label="raw"]


raw_161 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose is the default parsing state. It is far from unstructured from the
runtime  perspective. Although  this needn't  be embedded  in the  parse
tree,  Grimoire   understands  concepts   such  as   paragraphs,  words,
punctuation,  capital letters,  languages, and  anything else  proper to
prose.
"]
prose_154 -> { raw_163}
{rank=same; raw_163}

raw_163 [label="raw"]


raw_163 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I refer to human languages, but Grimoire understands programming languages
also. In principle, all of them, it shouldn't be harder to add them than
it is to call them from shell, though getting a runtime rigged up to
another runtime always calls for some finesse to derive a good experience.
"]
prose_155 -> { raw_165}
{rank=same; raw_165}

raw_165 [label="raw"]


raw_165 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
\"Programming languages\" is overly specific. Grimoire draws a distinction
between prose and structure. Blocks may contain either, or both.
"]
prose_156 -> { raw_167}
{rank=same; raw_167}

raw_167 [label="raw"]


raw_167 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something that's nice about a language build on a prose/structure
relationship is that it can be error free. Anything *grym* can't build into
a structure is just prose.
"]
prose_157 -> { raw_169}
{rank=same; raw_169}

raw_169 [label="raw"]


raw_169 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Markdown has this property. Sometimes you run into crappy parsers which
build errors into Markdown, which is just obnoxious. If you [[http://daringfireball.net/projects/markdown/syntax][RTFM]],
you'll find the word \"error\" once. Helpfully explaining how Markdown
keeps you from making one.
"]
prose_158 -> { raw_171}
{rank=same; raw_171}

raw_171 [label="raw"]


raw_171 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do what we can to make the document look the same as it is
in fact structured. Syntax highlighting handles the edge cases.
"]
section_109 -> { header_173 prose_174 prose_175 prose_176 section_177}
{rank=same; header_173 prose_174 prose_175 prose_176 section_177}

header_173 [label="3 : Ownership"]

prose_174 [label="prose"]

prose_175 [label="prose"]

prose_176 [label="prose"]

section_177 [label="section: 201-252"]


prose_174 -> { raw_178}
{rank=same; raw_178}

raw_178 [label="raw"]


raw_178 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The basic structural relationship in Grimoire is ownership.
"]
prose_175 -> { raw_180}
{rank=same; raw_180}

raw_180 [label="raw"]


raw_180 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Root elements of a heirarchy own their children, blocks own
lines that refer to that block. Indentation has a subtle but
regular interaction with ownership; it does what you expect.
"]
prose_176 -> { raw_182}
{rank=same; raw_182}

raw_182 [label="raw"]


raw_182 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Edge cases are resolved using the cling rule.
"]
section_177 -> { header_184 prose_185 prose_186 prose_187 prose_188 structure_189 structure_190 structure_191 structure_192 structure_193 prose_194 structure_195 structure_196 structure_197 prose_198}
{rank=same; header_184 prose_185 prose_186 prose_187 prose_188 structure_189 structure_190 structure_191 structure_192 structure_193 prose_194 structure_195 structure_196 structure_197 prose_198}

header_184 [label="4 : The Cling Rule"]

prose_185 [label="prose"]

prose_186 [label="prose"]

prose_187 [label="prose"]

prose_188 [label="prose"]

structure_189 [label="structure"]

structure_190 [label="structure"]

structure_191 [label="structure"]

structure_192 [label="structure"]

structure_193 [label="structure"]

prose_194 [label="prose"]

structure_195 [label="structure"]

structure_196 [label="structure"]

structure_197 [label="structure"]

prose_198 [label="prose"]


prose_185 -> { raw_199}
{rank=same; raw_199}

raw_199 [label="raw"]


raw_199 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The cling rule specifies that a group 'clings' to another group when
it is closer to that group than the other group. Ties resolve down.
"]
prose_186 -> { raw_201}
{rank=same; raw_201}

raw_201 [label="raw"]


raw_201 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This should make it intuitive to group elements that aren't grouping the
way you expect: put in whitespace until the block is visually distinguished
from the surroundings.
"]
prose_187 -> { raw_203}
{rank=same; raw_203}

raw_203 [label="raw"]


raw_203 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cling applies between blocks which are at the same level of ownership.
Ownership has precedence over cling: all blocks underneath e.g. a header
line are owned by that line, newlines notwithstanding.
"]
prose_188 -> { raw_205}
{rank=same; raw_205}

raw_205 [label="raw"]


raw_205 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that indentation of e.g. lists invokes the cling rule within the
indentation level.

"]
structure_189 -> { hashline_207}
{rank=same; hashline_207}

hashline_207 [label="hashline"]


hashline_207 -> { hashtag_208}
{rank=same; hashtag_208}

hashtag_208 [label="hashtag"]


hashtag_208 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_190 -> { hashline_210}
{rank=same; hashline_210}

hashline_210 [label="hashline"]


hashline_210 -> { hashtag_211}
{rank=same; hashtag_211}

hashtag_211 [label="hashtag"]


hashtag_211 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_191 -> { hashline_213}
{rank=same; hashline_213}

hashline_213 [label="hashline"]


hashline_213 -> { hashtag_214}
{rank=same; hashtag_214}

hashtag_214 [label="hashtag"]


hashtag_214 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_192 -> { hashline_216}
{rank=same; hashline_216}

hashline_216 [label="hashline"]


hashline_216 -> { hashtag_217}
{rank=same; hashtag_217}

hashtag_217 [label="hashtag"]


hashtag_217 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
structure_193 -> { hashline_219}
{rank=same; hashline_219}

hashline_219 [label="hashline"]


hashline_219 -> { hashtag_220}
{rank=same; hashtag_220}

hashtag_220 [label="hashtag"]


hashtag_220 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_194 -> { raw_222}
{rank=same; raw_222}

raw_222 [label="raw"]


raw_222 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Even clings are resolved forwards:
"]
structure_195 -> { hashline_224}
{rank=same; hashline_224}

hashline_224 [label="hashline"]


hashline_224 -> { hashtag_225}
{rank=same; hashtag_225}

hashtag_225 [label="hashtag"]


hashtag_225 -> leaf_226
leaf_226  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_196 -> { hashline_227}
{rank=same; hashline_227}

hashline_227 [label="hashline"]


hashline_227 -> { hashtag_228}
{rank=same; hashtag_228}

hashtag_228 [label="hashtag"]


hashtag_228 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
structure_197 -> { hashline_230}
{rank=same; hashline_230}

hashline_230 [label="hashline"]


hashline_230 -> { hashtag_231}
{rank=same; hashtag_231}

hashtag_231 [label="hashtag"]


hashtag_231 -> leaf_232
leaf_232  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_198 -> { raw_233}
{rank=same; raw_233}

raw_233 [label="raw"]


raw_233 -> leaf_234
leaf_234  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
be considered bad style.
"]
section_110 -> { header_235 prose_236 section_237 section_238 section_239}
{rank=same; header_235 prose_236 section_237 section_238 section_239}

header_235 [label="3 : Whitespace, Lines, and Indentation."]

prose_236 [label="prose"]

section_237 [label="section: 258-279"]

section_238 [label="section: 280-285"]

section_239 [label="section: 286-294"]


prose_236 -> { raw_240}
{rank=same; raw_240}

raw_240 [label="raw"]


raw_240 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is a structured document format. There are semantics associated
with every character we encode.
"]
section_237 -> { header_242 prose_243 prose_244 prose_245 prose_246 prose_247}
{rank=same; header_242 prose_243 prose_244 prose_245 prose_246 prose_247}

header_242 [label="4 : Whitespace"]

prose_243 [label="prose"]

prose_244 [label="prose"]

prose_245 [label="prose"]

prose_246 [label="prose"]

prose_247 [label="prose"]


prose_243 -> { raw_248}
{rank=same; raw_248}

raw_248 [label="raw"]


raw_248 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Whitespace is either the space or newline character. Returns are removed,
tabs resolved to two spaces by the formatter, the latter is warned against.
"]
prose_244 -> { raw_250}
{rank=same; raw_250}

raw_250 [label="raw"]


raw_250 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Most of the token-like categories we refer to must be surrounded by
whitespace. Newlines have semantics more often than they do not.
"]
prose_245 -> { raw_252}
{rank=same; raw_252}

raw_252 [label="raw"]


raw_252 -> leaf_253
leaf_253  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Unicode actually contains quite a number of whitespace characters. They are
all treated as a single ordinary space. If that space is semantically meaningful,
as in the space between =*** A Headline=, it is filtered into an ordinary space.
Otherwise it's considered prose, the only filtration prose receives is tab->space
conversion.
"]
prose_246 -> { raw_254}
{rank=same; raw_254}

raw_254 [label="raw"]


raw_254 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire mercilessly enforces tab-space conversion, even on your code blocks.
I will cling to this tenet as long as I can, the tab character needs to die,
the world has decided, that key is special and shouldn't insert a special
dropping that looks like n spaces.
"]
prose_247 -> { raw_256}
{rank=same; raw_256}

raw_256 [label="raw"]


raw_256 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
*make*? Outta my face with make. Yes, we'll have a make syntax, yes, it will
put the tabs back in.
"]
section_238 -> { header_258 prose_259}
{rank=same; header_258 prose_259}

header_258 [label="4 : Lines"]

prose_259 [label="prose"]


prose_259 -> { raw_260}
{rank=same; raw_260}

raw_260 [label="raw"]


raw_260 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

When we refer to the beginning of a line, this allows for spaces before the
reference point. We call the absolute beginning of a line the first
position.
"]
section_239 -> { header_262 prose_263 prose_264 prose_265}
{rank=same; header_262 prose_263 prose_264 prose_265}

header_262 [label="4 : Indentation"]

prose_263 [label="prose"]

prose_264 [label="prose"]

prose_265 [label="prose"]


prose_263 -> { raw_266}
{rank=same; raw_266}

raw_266 [label="raw"]


raw_266 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is an indentation-aware language. Most kinds of block can be
arcically[fn:1] ordered by means of indentation.
"]
prose_264 -> { raw_268}
{rank=same; raw_268}

raw_268 [label="raw"]


raw_268 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indentation follows [[http://nim-lang.org/manual.html#indentation][Nim rules]].
"]
prose_265 -> { raw_270}
{rank=same; raw_270}

raw_270 [label="raw"]


raw_270 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[fn:1] There's nothing sacred about ordered subrules, and if we're making up
a new word, let's drop the silent h. Webster was a cool guy."]
section_111 -> { header_272 prose_273 prose_274 prose_275 prose_276}
{rank=same; header_272 prose_273 prose_274 prose_275 prose_276}

header_272 [label="3 : Order of Recognition"]

prose_273 [label="prose"]

prose_274 [label="prose"]

prose_275 [label="prose"]

prose_276 [label="prose"]


prose_273 -> { raw_277}
{rank=same; raw_277}

raw_277 [label="raw"]


raw_277 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Starting from the neutral context, which is always at a newline, Grimoire
tries to make one of its initializing special forms. Failing that, it will
begin a prose block.
"]
prose_274 -> { raw_279}
{rank=same; raw_279}

raw_279 [label="raw"]


raw_279 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If there is whitespace, it affects indentation level in indicated ways.
They will not directly affect the semantics of the following form, that is,
these rules apply after any potentially block-ending newline, apart from
spaces that may be found between the newline and the character.
"]
prose_275 -> { raw_281}
{rank=same; raw_281}

raw_281 [label="raw"]


raw_281 -> leaf_282
leaf_282  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
At present,  =*=, =#=,  =|=, =-=,  , =~=,  =@=, =:=  and ={=  all create
special  contexts.  A  special  context  creates a  block  in a  context
specific way.
"]
prose_276 -> { raw_283}
{rank=same; raw_283}

raw_283 [label="raw"]


raw_283 -> leaf_284
leaf_284  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Blocks have a left associativity which can be recursive.
"]
section_112 -> { header_285 prose_286 prose_287 prose_288 prose_289 prose_290}
{rank=same; header_285 prose_286 prose_287 prose_288 prose_289 prose_290}

header_285 [label="3 : Blocks"]

prose_286 [label="prose"]

prose_287 [label="prose"]

prose_288 [label="prose"]

prose_289 [label="prose"]

prose_290 [label="prose"]


prose_286 -> { raw_291}
{rank=same; raw_291}

raw_291 [label="raw"]


raw_291 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is oriented around blocks.
"]
prose_287 -> { raw_293}
{rank=same; raw_293}

raw_293 [label="raw"]


raw_293 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Blocks are at least one line long,  all restarts are on a new line.  Any
syntactic structure smaller than a block we call an element.
"]
prose_288 -> { raw_295}
{rank=same; raw_295}

raw_295 [label="raw"]


raw_295 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Some types of blocks nest.  A document is a single  block.  There may be
other semantic units such as directories, I'd think a language that uses
strict  nested heirarchy  as powerfully  as Grimoire  could dictate  the
semantics of a file system, but that's currently out of scope.
"]
prose_289 -> { raw_297}
{rank=same; raw_297}

raw_297 [label="raw"]


raw_297 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indentation is relevant to some  kinds of blocks. In general, whitespace
matters quite a  bit in a Grimoire  document. We keep some  of the warts
out because the tab character is  illegal, and there will be a mandatory
formatter, =grym  fmt= if  you will, that  does everything  from turning
=**bold**=  into =*bold*=  (because the  extra stars  weren't used),  to
newline stripping, and so on.  This is normally applied incrementally by
the runtime editing environment.
"]
prose_290 -> { raw_299}
{rank=same; raw_299}

raw_299 [label="raw"]


raw_299 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indentation is human  readable and, with some care, a  computer may come
to the  same conclusions a  human would. I'm  still wary of  Python, but
there's no good  reason, unless the headache of most  Python not working
correctly  on my  computer, for  reasons I  can't track  down that  seem
related to  there being two languages  invoked as 'python', counts  as a
good reason.
"]
section_44 -> { header_301 prose_302 section_303}
{rank=same; header_301 prose_302 section_303}

header_301 [label="2 : Syntax"]

prose_302 [label="prose"]

section_303 [label="section: 344-407"]


prose_302 -> { raw_304}
{rank=same; raw_304}

raw_304 [label="raw"]


raw_304 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Now that we've established the basic constraints, let's
start our recursive descent into the parse.
"]
section_303 -> { header_306 prose_307 prose_308 prose_309 prose_310 prose_311 prose_312 structure_313 section_314 section_315}
{rank=same; header_306 prose_307 prose_308 prose_309 prose_310 prose_311 prose_312 structure_313 section_314 section_315}

header_306 [label="3 : Headers"]

prose_307 [label="prose"]

prose_308 [label="prose"]

prose_309 [label="prose"]

prose_310 [label="prose"]

prose_311 [label="prose"]

prose_312 [label="prose"]

structure_313 [label="structure"]

section_314 [label="section: 368-368"]

section_315 [label="section: 408-419"]


prose_307 -> { raw_316}
{rank=same; raw_316}

raw_316 [label="raw"]


raw_316 -> leaf_317
leaf_317  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is arcically constrained by structure groups,
called headers.
"]
prose_308 -> { raw_318}
{rank=same; raw_318}

raw_318 [label="raw"]


raw_318 -> leaf_319
leaf_319  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These start on a new line and begin with any number of  =*=. These must
be followed by a space mark to be valid. Contra Babel, you may
have a content-free header line, provided a space is found before the
newline.
"]
prose_309 -> { raw_320}
{rank=same; raw_320}

raw_320 [label="raw"]


raw_320 -> leaf_321
leaf_321  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In weaves and the like, headers represent document structure. Their
intention is structural: they support the same syntax as lists,
but the user is expected to use lists for list purposes. Putting
[TODO] in a header line should mean you have a document-specific
task to perform in that block.
"]
prose_310 -> { raw_322}
{rank=same; raw_322}

raw_322 [label="raw"]


raw_322 -> leaf_323
leaf_323  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Contra Babel, you may put spaces before the beginning of a header line.
"]
prose_311 -> { raw_324}
{rank=same; raw_324}

raw_324 [label="raw"]


raw_324 -> leaf_325
leaf_325  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The semantics of header lines are entirely determined by
the number of stars.
"]
prose_312 -> { raw_326}
{rank=same; raw_326}

raw_326 [label="raw"]


raw_326 -> leaf_327
leaf_327  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If you write
"]
structure_313 -> { hashline_328}
{rank=same; hashline_328}

hashline_328 [label="hashline"]


hashline_328 -> { hashtag_329}
{rank=same; hashtag_329}

hashtag_329 [label="hashtag"]


hashtag_329 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_314 -> { header_331 prose_332 section_333}
{rank=same; header_331 prose_332 section_333}

header_331 [label="1 : Top Header"]

prose_332 [label="prose"]

section_333 [label="section: 369-380"]


prose_332 -> { raw_334}
{rank=same; raw_334}

raw_334 [label="raw"]


raw_334 -> leaf_335
leaf_335  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_333 -> { header_336 structure_337 structure_338 section_339}
{rank=same; header_336 structure_337 structure_338 section_339}

header_336 [label="2 : Second Header"]

structure_337 [label="structure"]

structure_338 [label="structure"]

section_339 [label="section: 381-381"]


structure_337 -> { hashline_340}
{rank=same; hashline_340}

hashline_340 [label="hashline"]


hashline_340 -> { hashtag_341}
{rank=same; hashtag_341}

hashtag_341 [label="hashtag"]


hashtag_341 -> leaf_342
leaf_342  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_338 -> { hashline_343}
{rank=same; hashline_343}

hashline_343 [label="hashline"]


hashline_343 -> { hashtag_344}
{rank=same; hashtag_344}

hashtag_344 [label="hashtag"]


hashtag_344 -> leaf_345
leaf_345  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_339 -> { header_346 prose_347 section_348}
{rank=same; header_346 prose_347 section_348}

header_346 [label="1 : Top Header ▼"]

prose_347 [label="prose"]

section_348 [label="section: 382-731"]


prose_347 -> { raw_349}
{rank=same; raw_349}

raw_349 [label="raw"]


raw_349 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_348 -> { header_351 structure_352 prose_353 prose_354 prose_355 section_356 section_357 section_358 section_359 section_360 section_361 section_362 section_363 section_364 section_365}
{rank=same; header_351 structure_352 prose_353 prose_354 prose_355 section_356 section_357 section_358 section_359 section_360 section_361 section_362 section_363 section_364 section_365}

header_351 [label="2 : Second Header ►"]

structure_352 [label="structure"]

prose_353 [label="prose"]

prose_354 [label="prose"]

prose_355 [label="prose"]

section_356 [label="section: 398-407"]

section_357 [label="section: 422-440"]

section_358 [label="section: 441-481"]

section_359 [label="section: 489-501"]

section_360 [label="section: 502-558"]

section_361 [label="section: 567-593"]

section_362 [label="section: 594-611"]

section_363 [label="section: 612-672"]

section_364 [label="section: 691-731"]

section_365 [label="section: 732-741"]


structure_352 -> { hashline_366}
{rank=same; hashline_366}

hashline_366 [label="hashline"]


hashline_366 -> { hashtag_367}
{rank=same; hashtag_367}

hashtag_367 [label="hashtag"]


hashtag_367 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_353 -> { raw_369}
{rank=same; raw_369}

raw_369 [label="raw"]


raw_369 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
may contain any number of blocks.
"]
prose_354 -> { raw_371}
{rank=same; raw_371}

raw_371 [label="raw"]


raw_371 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
\"begins\" means first non-whitespace character. Indentation levels are tracked by
Nim rules, obviously a Grimoire document can contain no tab marks
and if any wander in they become four spaces.
"]
prose_355 -> { raw_373}
{rank=same; raw_373}

raw_373 [label="raw"]


raw_373 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Contra other block forms, tags may not precede a headline.
"]
section_356 -> { header_375 prose_376 prose_377 prose_378}
{rank=same; header_375 prose_376 prose_377 prose_378}

header_375 [label="4 : Header Lines"]

prose_376 [label="prose"]

prose_377 [label="prose"]

prose_378 [label="prose"]


prose_376 -> { raw_379}
{rank=same; raw_379}

raw_379 [label="raw"]


raw_379 -> leaf_380
leaf_380  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Anything after a run of =*= and a space, and before a newline, is
a header line.
"]
prose_377 -> { raw_381}
{rank=same; raw_381}

raw_381 [label="raw"]


raw_381 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Header lines and list lines are structured identically. If I discover
a necessary exception, I'll note it.
"]
prose_378 -> { raw_383}
{rank=same; raw_383}

raw_383 [label="raw"]


raw_383 -> leaf_384
leaf_384  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That structure is discussed under [[*Lists][lists]].
"]
section_357 -> { header_385 prose_386 prose_387 structure_388 prose_389 prose_390 structure_391}
{rank=same; header_385 prose_386 prose_387 structure_388 prose_389 prose_390 structure_391}

header_385 [label="3 : Prose blocks"]

prose_386 [label="prose"]

prose_387 [label="prose"]

structure_388 [label="structure"]

prose_389 [label="prose"]

prose_390 [label="prose"]

structure_391 [label="structure"]


prose_386 -> { raw_392}
{rank=same; raw_392}

raw_392 [label="raw"]


raw_392 -> leaf_393
leaf_393  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A prose block is preceded and followed by a single newline. Extraneous
whitespace on the bare line is filtered.
"]
prose_387 -> { raw_394}
{rank=same; raw_394}

raw_394 [label="raw"]


raw_394 -> leaf_395
leaf_395  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose blocks may not be indented in a semantically meaningful way.
"]
structure_388 -> { hashline_396}
{rank=same; hashline_396}

hashline_396 [label="hashline"]


hashline_396 -> { hashtag_397}
{rank=same; hashtag_397}

hashtag_397 [label="hashtag"]


hashtag_397 -> leaf_398
leaf_398  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_389 -> { raw_399}
{rank=same; raw_399}

raw_399 [label="raw"]


raw_399 -> leaf_400
leaf_400  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
    prose
"]
prose_390 -> { raw_401}
{rank=same; raw_401}

raw_401 [label="raw"]


raw_401 -> leaf_402
leaf_402  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
        prose
"]
structure_391 -> { hashline_403}
{rank=same; hashline_403}

hashline_403 [label="hashline"]


hashline_403 -> { hashtag_404}
{rank=same; hashtag_404}

hashtag_404 [label="hashtag"]


hashtag_404 -> leaf_405
leaf_405  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_358 -> { header_406 prose_407 prose_408 prose_409 prose_410 prose_411 prose_412 prose_413 structure_414 prose_415 prose_416 prose_417 section_418}
{rank=same; header_406 prose_407 prose_408 prose_409 prose_410 prose_411 prose_412 prose_413 structure_414 prose_415 prose_416 prose_417 section_418}

header_406 [label="3 : Prose markup"]

prose_407 [label="prose"]

prose_408 [label="prose"]

prose_409 [label="prose"]

prose_410 [label="prose"]

prose_411 [label="prose"]

prose_412 [label="prose"]

prose_413 [label="prose"]

structure_414 [label="structure"]

prose_415 [label="prose"]

prose_416 [label="prose"]

prose_417 [label="prose"]

section_418 [label="section: 482-488"]


prose_407 -> { raw_419}
{rank=same; raw_419}

raw_419 [label="raw"]


raw_419 -> leaf_420
leaf_420  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Prose markup rules apply in any prose contexts, not just for prose blocks.
"]
prose_408 -> { raw_421}
{rank=same; raw_421}

raw_421 [label="raw"]


raw_421 -> leaf_422
leaf_422  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We mark =*bold*=, =/italic/=, =_underline_=, =~strikethrough~=, 
and =​=literal=​=, using the indicated marks. They must not be separated 
with whitespace from the connecting prose. Any number may be used and matched,
whitespace is allowed, so =**bold math: 4 * 5**= will highlight
correctly.
"]
prose_409 -> { raw_423}
{rank=same; raw_423}

raw_423 [label="raw"]


raw_423 -> leaf_424
leaf_424  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is also [[*Inline%20Code][Inline Code]], which is formatted =`code`=.
"]
prose_410 -> { raw_425}
{rank=same; raw_425}

raw_425 [label="raw"]


raw_425 -> leaf_426
leaf_426  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These all follow the prose markup rule: any number of the starting
character matches the same number of the ending character in the
document string.
"]
prose_411 -> { raw_427}
{rank=same; raw_427}

raw_427 [label="raw"]


raw_427 -> leaf_428
leaf_428  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We make subscripts mildly annoying, =sub__script= and =super^^script=, 
to avoid colliding the former with =snake_case=. That's a lot of ways 
to parse the =_= character...
"]
prose_412 -> { raw_429}
{rank=same; raw_429}

raw_429 [label="raw"]


raw_429 -> leaf_430
leaf_430  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In general, prose is more 'active'  than in Babel. There are more things
you can't say without triggering a parsed data structure.  Due to quirks
of Org  involving string  escaping, =`\\\"\\\"`=  can't be  literally quoted
without repercussions. Check  out the source if you enjoy pounding your
head in frustration at the nastiness of escaped strings.
"]
prose_413 -> { raw_431}
{rank=same; raw_431}

raw_431 [label="raw"]


raw_431 -> leaf_432
leaf_432  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Let's just use a code block:
"]
structure_414 -> { hashline_433}
{rank=same; hashline_433}

hashline_433 [label="hashline"]


hashline_433 -> { hashtag_434}
{rank=same; hashtag_434}

hashtag_434 [label="hashtag"]


hashtag_434 -> leaf_435
leaf_435  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_415 -> { raw_436}
{rank=same; raw_436}

raw_436 [label="raw"]


raw_436 -> leaf_437
leaf_437  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
one, of the \" character. This is pretty-printed in edit mode as =‟literal”=,
but such a string does *not* create escaping, we rely on semantic highlighting
to make the distinction clear.
"]
prose_416 -> { raw_438}
{rank=same; raw_438}

raw_438 [label="raw"]


raw_438 -> leaf_439
leaf_439  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Any number of \"\"\"\" collapse into one set of such balanced quites.
"]
prose_417 -> { raw_440}
{rank=same; raw_440}

raw_440 [label="raw"]


raw_440 -> leaf_441
leaf_441  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the woven documentation, no quotation marks appear, just the string.
"]
section_418 -> { header_442 prose_443}
{rank=same; header_442 prose_443}

header_442 [label="4 : Latex"]

prose_443 [label="prose"]


prose_443 -> { raw_444}
{rank=same; raw_444}

raw_444 [label="raw"]


raw_444 -> leaf_445
leaf_445  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

For further markup purposes in a prose context, we escape to LaTeX. The
syntax is =`\\latex`=, where the backslash causes us to use LaTeX instead
of Lua. Our TeX backend is LuaTeX, giving arbitrary levels of control from
within a Grimoire-native language.
"]
section_359 -> { header_446 prose_447 prose_448 prose_449}
{rank=same; header_446 prose_447 prose_448 prose_449}

header_446 [label="3 : Comments"]

prose_447 [label="prose"]

prose_448 [label="prose"]

prose_449 [label="prose"]


prose_447 -> { raw_450}
{rank=same; raw_450}

raw_450 [label="raw"]


raw_450 -> leaf_451
leaf_451  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

In a structure context, you may place line comments. These begin with =--=
and continue to the end of a line.
"]
prose_448 -> { raw_452}
{rank=same; raw_452}

raw_452 [label="raw"]


raw_452 -> leaf_453
leaf_453  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Commenting out a header line, or anything else, causes it to be ignored.
It does *not* result in any subdata being commented out, though it will
in the case of a headline change the ownership of the owned blocks.
"]
prose_449 -> { raw_454}
{rank=same; raw_454}

raw_454 [label="raw"]


raw_454 -> leaf_455
leaf_455  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The  tag =#comment=  in a  valid tag  content position  marks the  owned
region  of  the tagged  block  as  a  comment.  Nothing within  will  be
evaluated or exported, though it will be parsed.
"]
section_360 -> { header_456 prose_457 prose_458 prose_459 prose_460 prose_461 prose_462 prose_463 prose_464 prose_465 prose_466 prose_467 prose_468 prose_469 prose_470 prose_471 prose_472 section_473}
{rank=same; header_456 prose_457 prose_458 prose_459 prose_460 prose_461 prose_462 prose_463 prose_464 prose_465 prose_466 prose_467 prose_468 prose_469 prose_470 prose_471 prose_472 section_473}

header_456 [label="3 : Marks"]

prose_457 [label="prose"]

prose_458 [label="prose"]

prose_459 [label="prose"]

prose_460 [label="prose"]

prose_461 [label="prose"]

prose_462 [label="prose"]

prose_463 [label="prose"]

prose_464 [label="prose"]

prose_465 [label="prose"]

prose_466 [label="prose"]

prose_467 [label="prose"]

prose_468 [label="prose"]

prose_469 [label="prose"]

prose_470 [label="prose"]

prose_471 [label="prose"]

prose_472 [label="prose"]

section_473 [label="section: 559-566"]


prose_457 -> { raw_474}
{rank=same; raw_474}

raw_474 [label="raw"]


raw_474 -> leaf_475
leaf_475  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Marks provide global semantic categories for Grimoire. They may appear
anywhere, including a prose context, whitespace is required on both sides.
"]
prose_458 -> { raw_476}
{rank=same; raw_476}

raw_476 [label="raw"]


raw_476 -> leaf_477
leaf_477  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We use  a couple kinds  of marks:  =@names= name things,  and =#tags=
categorize them. Tags are semantics, while names are nominal. 
"]
prose_459 -> { raw_478}
{rank=same; raw_478}

raw_478 [label="raw"]


raw_478 -> leaf_479
leaf_479  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags that  are boundaries are  paired as  =#tag= and =#/tag=,  plus some
light sugaring. Names are never bounded
"]
prose_460 -> { raw_480}
{rank=same; raw_480}

raw_480 [label="raw"]


raw_480 -> leaf_481
leaf_481  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Marks in the first position own the following line. If there is indentation
below that line, they own that too. This doesn't affect the associativity.
"]
prose_461 -> { raw_482}
{rank=same; raw_482}

raw_482 [label="raw"]


raw_482 -> leaf_483
leaf_483  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Marks may be namespaced, as =@name.subname= or =#tag.sub-tag.sub-tag=.
"]
prose_462 -> { raw_484}
{rank=same; raw_484}

raw_484 [label="raw"]


raw_484 -> leaf_485
leaf_485  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If  you  require   further  namespacing,  =@many/levels/java.class=  and
=#mojo/nation.space/station=  is your  friend. Codices (that is, projects
following the bridge conventions for organization) will use namespacing
in a consistent way. 
"]
prose_463 -> { raw_486}
{rank=same; raw_486}

raw_486 [label="raw"]


raw_486 -> leaf_487
leaf_487  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
As I continue to muse on it, I  can think of no reason why marks couldn't follow
URI syntax,  or at  least mirror  it closely.  Chaining marks  is not  valid, so
=@named@example.com= could be a valid name. 
"]
prose_464 -> { raw_488}
{rank=same; raw_488}

raw_488 [label="raw"]


raw_488 -> leaf_489
leaf_489  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This would mean we could say something like =@file://~/usr/blah=.
"]
prose_465 -> { raw_490}
{rank=same; raw_490}

raw_490 [label="raw"]


raw_490 -> leaf_491
leaf_491  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Or =#!/usr/bin/perl/=...
"]
prose_466 -> { raw_492}
{rank=same; raw_492}

raw_492 [label="raw"]


raw_492 -> leaf_493
leaf_493  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Yes. This  is a good idea.  Let's do this.  It doesn't displace [[*Links][link]]  syntax, it
enhances it. A  URI [[http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax][may not begin with  a slash]] so this is  parse-clean for tags
and names both. Tags aren't intended to  be user extensible in the narrow sense,
but uniformity is a virtue.
"]
prose_467 -> { raw_494}
{rank=same; raw_494}

raw_494 [label="raw"]


raw_494 -> leaf_495
leaf_495  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't know why you might want to stick a query in a tag. It's not my
place to know. We just slap a parser on that puppy and continue.
"]
prose_468 -> { raw_496}
{rank=same; raw_496}

raw_496 [label="raw"]


raw_496 -> leaf_497
leaf_497  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Implication: The hash or at should be syntax highlighted a different color
from the tag. I'd say hash and at get the same color, with categories and
symbols getting different ones.
"]
prose_469 -> { raw_498}
{rank=same; raw_498}

raw_498 [label="raw"]


raw_498 -> leaf_499
leaf_499  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Apparently, [[http://blog.nig.gl/post/48802013022/although-parentheses-are-technically-allowed-in][parentheses are allowed in URLs]], but follow the link, they
suck and you should never use them. They play badly with our calling
convention for named structures, and aren't allowed in our schema.
"]
prose_470 -> { raw_500}
{rank=same; raw_500}

raw_500 [label="raw"]


raw_500 -> leaf_501
leaf_501  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not a real URI anyway, or it can be but it's also allowed to be a legal
fragment without the handle. In our case the assumed handle is =grimoire://=?
"]
prose_471 -> { raw_502}
{rank=same; raw_502}

raw_502 [label="raw"]


raw_502 -> leaf_503
leaf_503  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Not a real URI. But an acceptable fake one.
"]
prose_472 -> { raw_504}
{rank=same; raw_504}

raw_504 [label="raw"]


raw_504 -> leaf_505
leaf_505  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The actual rule for a mark is that it begins with =@= or =#= and is surrounded
by whitespace. Internal parsing of the mark is part of recognition, anything 
not recognized is subsequently ignored. It's still considered a mark for e.g. 
weaving purposes. 


"]
section_473 -> { header_506 prose_507 prose_508}
{rank=same; header_506 prose_507 prose_508}

header_506 [label="4 : Plural Hashtags"]

prose_507 [label="prose"]

prose_508 [label="prose"]


prose_507 -> { raw_509}
{rank=same; raw_509}

raw_509 [label="raw"]


raw_509 -> leaf_510
leaf_510  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

In some cases, such as =#formula= and =#formulas=, a tag may have a
singular or plural form. These are equivalent from the runtimes perspective.
"]
prose_508 -> { raw_511}
{rank=same; raw_511}

raw_511 [label="raw"]


raw_511 -> leaf_512
leaf_512  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The same concept applies to pairs such as =#export= and =#exports=, though
the linguistic distinction is not that of plurality.
"]
section_361 -> { header_513 prose_514 prose_515 prose_516 prose_517 prose_518 prose_519}
{rank=same; header_513 prose_514 prose_515 prose_516 prose_517 prose_518 prose_519}

header_513 [label="3 : Classes"]

prose_514 [label="prose"]

prose_515 [label="prose"]

prose_516 [label="prose"]

prose_517 [label="prose"]

prose_518 [label="prose"]

prose_519 [label="prose"]


prose_514 -> { raw_520}
{rank=same; raw_520}

raw_520 [label="raw"]


raw_520 -> leaf_521
leaf_521  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Tags are for Grimoire. A category provides runtime semantics,
cooperating with structure groups to provide the API. Names
play the role of a value in languages which provide a
value-variable distinction: every name within a documents reachable
namespace must be globally unique.
"]
prose_515 -> { raw_522}
{rank=same; raw_522}

raw_522 [label="raw"]


raw_522 -> leaf_523
leaf_523  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Specifically names are globally hyperstatic: any redefinition affects
the referent from the moment the parser receives it forward. Redefinitions
are warned against and have no utility, don't do it.
"]
prose_516 -> { raw_524}
{rank=same; raw_524}

raw_524 [label="raw"]


raw_524 -> leaf_525
leaf_525  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Classes are roughly equivalent to categories/hashtags, but
for the user. They have a light semantics similar to their
function in Org.
"]
prose_517 -> { raw_526}
{rank=same; raw_526}

raw_526 [label="raw"]


raw_526 -> leaf_527
leaf_527  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A class is defined as =:Class:= or =:class:= including
=:several:Classes:chained:=.
"]
prose_518 -> { raw_528}
{rank=same; raw_528}

raw_528 [label="raw"]


raw_528 -> leaf_529
leaf_529  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A capital letter means the class inherits onto all subgroups of the block,
a miniscule means the class is associated with the indentation level it is
found within.
"]
prose_519 -> { raw_530}
{rank=same; raw_530}

raw_530 [label="raw"]


raw_530 -> leaf_531
leaf_531  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You know you're programming a computer when class and category have distinct
semantics. At least there are no objects, and only two primitive types,
structure and prose.
"]
section_362 -> { header_532 prose_533 prose_534 structure_535 prose_536 prose_537}
{rank=same; header_532 prose_533 prose_534 structure_535 prose_536 prose_537}

header_532 [label="3 : Links"]

prose_533 [label="prose"]

prose_534 [label="prose"]

structure_535 [label="structure"]

prose_536 [label="prose"]

prose_537 [label="prose"]


prose_533 -> { raw_538}
{rank=same; raw_538}

raw_538 [label="raw"]


raw_538 -> leaf_539
leaf_539  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

There's nothing at all wrong with the syntax or behavior of Babel links.
"]
prose_534 -> { raw_540}
{rank=same; raw_540}

raw_540 [label="raw"]


raw_540 -> leaf_541
leaf_541  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which look like this:
"]
structure_535 -> { hashline_542}
{rank=same; hashline_542}

hashline_542 [label="hashline"]


hashline_542 -> { hashtag_543}
{rank=same; hashtag_543}

hashtag_543 [label="hashtag"]


hashtag_543 -> leaf_544
leaf_544  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_536 -> { raw_545}
{rank=same; raw_545}

raw_545 [label="raw"]


raw_545 -> leaf_546
leaf_546  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We won't support legacy forms of footnoting, such as =[1]=. This applies
to legacy versions of table formulas and list syntax also.
"]
prose_537 -> { raw_547}
{rank=same; raw_547}

raw_547 [label="raw"]


raw_547 -> leaf_548
leaf_548  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In Grimoire  there's one way  to do things.  At least, we  avoid variant
syntax with identical semantics.
"]
section_363 -> { header_549 prose_550 prose_551 prose_552 prose_553 prose_554 structure_555 prose_556 prose_557 prose_558 prose_559 prose_560 prose_561 prose_562 prose_563 section_564}
{rank=same; header_549 prose_550 prose_551 prose_552 prose_553 prose_554 structure_555 prose_556 prose_557 prose_558 prose_559 prose_560 prose_561 prose_562 prose_563 section_564}

header_549 [label="3 : Cookies"]

prose_550 [label="prose"]

prose_551 [label="prose"]

prose_552 [label="prose"]

prose_553 [label="prose"]

prose_554 [label="prose"]

structure_555 [label="structure"]

prose_556 [label="prose"]

prose_557 [label="prose"]

prose_558 [label="prose"]

prose_559 [label="prose"]

prose_560 [label="prose"]

prose_561 [label="prose"]

prose_562 [label="prose"]

prose_563 [label="prose"]

section_564 [label="section: 673-690"]


prose_550 -> { raw_565}
{rank=same; raw_565}

raw_565 [label="raw"]


raw_565 -> leaf_566
leaf_566  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

List line contexts (header lines and list lines) may have cookies. A
cookie looks like =[ ]=, it must have contents and a space on both sides.
"]
prose_551 -> { raw_567}
{rank=same; raw_567}

raw_567 [label="raw"]


raw_567 -> leaf_568
leaf_568  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies are valid after the symbol that defines the list line, but before
anything else. They are also valid at the end of a list line, in which
case they are preceded by a space and followed by a newline.
"]
prose_552 -> { raw_569}
{rank=same; raw_569}

raw_569 [label="raw"]


raw_569 -> leaf_570
leaf_570  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies are distinctive in that they may only be applied to list lines.
Most other token-like groups, specifically tags, classes, and inline drawers,
may be embedded into all prose contexts excepting literal strings.
"]
prose_553 -> { raw_571}
{rank=same; raw_571}

raw_571 [label="raw"]


raw_571 -> leaf_572
leaf_572  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies are used similarly to cookies in Org, but with consistent semantics.
A simple cookie set is \"X\" and \" \", the user cycles through them. TODO and
DONE are another option.
"]
prose_554 -> { raw_573}
{rank=same; raw_573}

raw_573 [label="raw"]


raw_573 -> leaf_574
leaf_574  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't want cookies to turn into lightweight tables. Still, saying to
the user \"you may have precisely two cookies a line\" is restrictive.
It's not a violation of the [[http://c2.com/cgi/wiki?TwoIsAnImpossibleNumber][\"Two is an Impossible Number\"]] principle,
because they're head and tail. I think this is ugly:
"]
structure_555 -> { hashline_575}
{rank=same; hashline_575}

hashline_575 [label="hashline"]


hashline_575 -> { hashtag_576}
{rank=same; hashtag_576}

hashtag_576 [label="hashtag"]


hashtag_576 -> leaf_577
leaf_577  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_556 -> { raw_578}
{rank=same; raw_578}

raw_578 [label="raw"]


raw_578 -> leaf_579
leaf_579  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You can stick a table in a list. I don't know if I mentioned, it's kind
of an obvious thing, I'll write a unit for it at some point.
"]
prose_557 -> { raw_580}
{rank=same; raw_580}

raw_580 [label="raw"]


raw_580 -> leaf_581
leaf_581  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Still. I can see a case for two on the left. Once you allow two, you allow
n, without excellent reason.
"]
prose_558 -> { raw_582}
{rank=same; raw_582}

raw_582 [label="raw"]


raw_582 -> leaf_583
leaf_583  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[[*Radio%20cookies][Radio cookies]] must be the leftmost cookie on a line, only one is of course allowed.
I could allow a single-line short form multi-radio-button interface but what
is it, a fancy text slider for some value? No. Any number of ordinary cookies
can follow. Knock yourself out.
"]
prose_559 -> { raw_584}
{rank=same; raw_584}

raw_584 [label="raw"]


raw_584 -> leaf_585
leaf_585  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Anything more than a couple and one should consider a class or a table.
Handrolling data structures is perverse in a markup language, and I'm
still tempted to forbid it.
"]
prose_560 -> { raw_586}
{rank=same; raw_586}

raw_586 [label="raw"]


raw_586 -> leaf_587
leaf_587  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't like distinctions without difference. A cookie at the end of a
line is filled by Grimoire, not the user. This mirrors Org's use, which is
to display either a percent or a n/m marker for completion of list items.
The user seeds the cookie, in these cases with =%= or =/=, and the runtime
does the rest.
"]
prose_561 -> { raw_588}
{rank=same; raw_588}

raw_588 [label="raw"]


raw_588 -> leaf_589
leaf_589  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Adding more than one such structure to the tail list would complicate the
reference syntax, which I haven't designed, and again, it's just not necessary.
Grimoire can fill in any data structure, \"n-dimensional end cookie array\"
isn't one we have a compelling need for.
"]
prose_562 -> { raw_590}
{rank=same; raw_590}

raw_590 [label="raw"]


raw_590 -> leaf_591
leaf_591  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies could interact badly with link syntax. I don't think a [bare box]
qualifies as a link in Org, clearly it doesn't, we can follow that notion
and disallow \"[]\" as a filling for cookies.
"]
prose_563 -> { raw_592}
{rank=same; raw_592}

raw_592 [label="raw"]


raw_592 -> leaf_593
leaf_593  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I also think they should be allowed in table cells, which have their own
context which is mostly handwaved right now but is prose++.
"]
section_564 -> { header_594 prose_595 prose_596 prose_597 prose_598}
{rank=same; header_594 prose_595 prose_596 prose_597 prose_598}

header_594 [label="4 : Radio cookies"]

prose_595 [label="prose"]

prose_596 [label="prose"]

prose_597 [label="prose"]

prose_598 [label="prose"]


prose_595 -> { raw_599}
{rank=same; raw_599}

raw_599 [label="raw"]


raw_599 -> leaf_600
leaf_600  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We have one 'weird cookie'. A radio cookie, which looks like =( )=,
must be present at the head position of list line contexts. All
list lines at the same level of indentation must have one, if one does.
"]
prose_596 -> { raw_601}
{rank=same; raw_601}

raw_601 [label="raw"]


raw_601 -> leaf_602
leaf_602  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Only one is selected at any given time. These would be awkward to add
into tables, to little gain.
"]
prose_597 -> { raw_603}
{rank=same; raw_603}

raw_603 [label="raw"]


raw_603 -> leaf_604
leaf_604  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This comes perilously close to pushing us into the realm of error.
The formatter adds buttons to an entire subtree if one member has it,
and if more than one is ticked off, it warns if possible or removes
all but the first mark encountered. If none are present the first
option is selected.
"]
prose_598 -> { raw_605}
{rank=same; raw_605}

raw_605 [label="raw"]


raw_605 -> leaf_606
leaf_606  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The runtime will not normally build an invalid radio list, but
Grimoire must import plain text.
"]
section_364 -> { header_607 prose_608 structure_609 prose_610 prose_611 prose_612 structure_613 prose_614 prose_615 prose_616}
{rank=same; header_607 prose_608 structure_609 prose_610 prose_611 prose_612 structure_613 prose_614 prose_615 prose_616}

header_607 [label="3 : Drawers"]

prose_608 [label="prose"]

structure_609 [label="structure"]

prose_610 [label="prose"]

prose_611 [label="prose"]

prose_612 [label="prose"]

structure_613 [label="structure"]

prose_614 [label="prose"]

prose_615 [label="prose"]

prose_616 [label="prose"]


prose_608 -> { raw_617}
{rank=same; raw_617}

raw_617 [label="raw"]


raw_617 -> leaf_618
leaf_618  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A drawer is a block that's hidden by default. The computer sees it,
the user sees ⦿, or a similar rune.
"]
structure_609 -> { hashline_619}
{rank=same; hashline_619}

hashline_619 [label="hashline"]


hashline_619 -> { hashtag_620}
{rank=same; hashtag_620}

hashtag_620 [label="hashtag"]


hashtag_620 -> leaf_621
leaf_621  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_610 -> { raw_622}
{rank=same; raw_622}

raw_622 [label="raw"]


raw_622 -> leaf_623
leaf_623  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
without opening it. Deleting into an ordinary fold marker opens the fold,
deleting towards a drawer marker skips past it.
"]
prose_611 -> { raw_624}
{rank=same; raw_624}

raw_624 [label="raw"]


raw_624 -> leaf_625
leaf_625  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
=a-drawer=  is  a type,  not  a  name, something  like  =weave=  or =tangle=  in
practice. This may or  may not be supported with a =#weave=  tag. 
"]
prose_612 -> { raw_626}
{rank=same; raw_626}

raw_626 [label="raw"]


raw_626 -> leaf_627
leaf_627  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm not entirely sure how to interact names with drawers, perhaps like this:
"]
structure_613 -> { hashline_628}
{rank=same; hashline_628}

hashline_628 [label="hashline"]


hashline_628 -> { hashtag_629}
{rank=same; hashtag_629}

hashtag_629 [label="hashtag"]


hashtag_629 -> leaf_630
leaf_630  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_614 -> { raw_631}
{rank=same; raw_631}

raw_631 [label="raw"]


raw_631 -> leaf_632
leaf_632  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
should keep it closed unless it's  open, those are the only additional semantics
associated.
"]
prose_615 -> { raw_633}
{rank=same; raw_633}

raw_633 [label="raw"]


raw_633 -> leaf_634
leaf_634  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This lets master wizards embed unobtrusive magic into documents for apprentice
wizards to spell with.
"]
prose_616 -> { raw_635 link_636 raw_637}
{rank=same; raw_635 link_636 raw_637}

raw_635 [label="raw"]

link_636 [label="link: "]

raw_637 [label="raw"]


raw_635 -> leaf_638
leaf_638  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An inline drawer looks like =:"]
link_636 -> leaf_639
leaf_639  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[[some contents]]"]
raw_637 -> leaf_640
leaf_640  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":=.  As usual when we say \"inline\" it
can be as long as you want. Being anonymous, because untagged, the only semantics
of such a drawer are to hide the contents in source mode. 
"]
section_365 -> { header_641 prose_642 prose_643 prose_644 structure_645 section_646}
{rank=same; header_641 prose_642 prose_643 prose_644 structure_645 section_646}

header_641 [label="3 : Runes"]

prose_642 [label="prose"]

prose_643 [label="prose"]

prose_644 [label="prose"]

structure_645 [label="structure"]

section_646 [label="section: 742-742"]


prose_642 -> { raw_647}
{rank=same; raw_647}

raw_647 [label="raw"]


raw_647 -> leaf_648
leaf_648  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

After drawers is as good a place to put runes as any.
"]
prose_643 -> { raw_649}
{rank=same; raw_649}

raw_649 [label="raw"]


raw_649 -> leaf_650
leaf_650  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Runes are characters drawn from the pictographic zones of Unicode,
which describe semantic activity within a document.
"]
prose_644 -> { raw_651}
{rank=same; raw_651}

raw_651 [label="raw"]


raw_651 -> leaf_652
leaf_652  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Contra Org, when we have something like the aformentioned:
"]
structure_645 -> { hashline_653}
{rank=same; hashline_653}

hashline_653 [label="hashline"]


hashline_653 -> { hashtag_654}
{rank=same; hashtag_654}

hashtag_654 [label="hashtag"]


hashtag_654 -> leaf_655
leaf_655  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_646 -> { header_656 prose_657 section_658}
{rank=same; header_656 prose_657 section_658}

header_656 [label="1 : Top Header ▼"]

prose_657 [label="prose"]

section_658 [label="section: 743-924"]


prose_657 -> { raw_659}
{rank=same; raw_659}

raw_659 [label="raw"]


raw_659 -> leaf_660
leaf_660  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_658 -> { header_661 structure_662 prose_663 prose_664 prose_665 prose_666 prose_667 prose_668 prose_669 section_670 section_671 section_672 section_673 section_674}
{rank=same; header_661 structure_662 prose_663 prose_664 prose_665 prose_666 prose_667 prose_668 prose_669 section_670 section_671 section_672 section_673 section_674}

header_661 [label="2 : Second Header ►"]

structure_662 [label="structure"]

prose_663 [label="prose"]

prose_664 [label="prose"]

prose_665 [label="prose"]

prose_666 [label="prose"]

prose_667 [label="prose"]

prose_668 [label="prose"]

prose_669 [label="prose"]

section_670 [label="section: 772-822"]

section_671 [label="section: 823-843"]

section_672 [label="section: 844-910"]

section_673 [label="section: 911-924"]

section_674 [label="section: 925-963"]


structure_662 -> { hashline_675}
{rank=same; hashline_675}

hashline_675 [label="hashline"]


hashline_675 -> { hashtag_676}
{rank=same; hashtag_676}

hashtag_676 [label="hashtag"]


hashtag_676 -> leaf_677
leaf_677  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_663 -> { raw_678}
{rank=same; raw_678}

raw_678 [label="raw"]


raw_678 -> leaf_679
leaf_679  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
any transformation we may take. If you load up last Wednesday's
version of something, it will be in last Wednesday's fold state.
"]
prose_664 -> { raw_680}
{rank=same; raw_680}

raw_680 [label="raw"]


raw_680 -> leaf_681
leaf_681  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This lets us have richer folding semantics, like \"don't unfold when
cycling\". It lets us have richer drawer semantics, and so on.
"]
prose_665 -> { raw_682}
{rank=same; raw_682}

raw_682 [label="raw"]


raw_682 -> leaf_683
leaf_683  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We will reserve a number of characters for this purpose, at least
"]
prose_666 -> { raw_684}
{rank=same; raw_684}

raw_684 [label="raw"]


raw_684 -> leaf_685
leaf_685  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
| ▼ |  ► | ⦿ |
    |
"]
prose_667 -> { raw_686}
{rank=same; raw_686}

raw_686 [label="raw"]


raw_686 -> leaf_687
leaf_687  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's legal to delete runes, like anything else. It's also legal to
insert them manually. Neither of these paradigms is typical;
deleting into a rune may or may not cause it to disappear in
normal edit mode.
"]
prose_668 -> { raw_688}
{rank=same; raw_688}

raw_688 [label="raw"]


raw_688 -> leaf_689
leaf_689  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Runes, like absolutely everything in Grimoire, are prose if encountered
in a context where they aren't valid structure.
"]
prose_669 -> { raw_690}
{rank=same; raw_690}

raw_690 [label="raw"]


raw_690 -> leaf_691
leaf_691  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We will most likely reuse runes inside cookies, though it's just as valid
and quite typical to use normal letters or words.
"]
section_670 -> { header_692 prose_693 prose_694 structure_695 prose_696 prose_697 structure_698 structure_699}
{rank=same; header_692 prose_693 prose_694 structure_695 prose_696 prose_697 structure_698 structure_699}

header_692 [label="3 : Lists"]

prose_693 [label="prose"]

prose_694 [label="prose"]

structure_695 [label="structure"]

prose_696 [label="prose"]

prose_697 [label="prose"]

structure_698 [label="structure"]

structure_699 [label="structure"]


prose_693 -> { raw_700}
{rank=same; raw_700}

raw_700 [label="raw"]


raw_700 -> leaf_701
leaf_701  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Something that irks me about Org is basically historic. It was a TODO
list first, and became a heiarchical document editor later. As a result,
the functions that let you tag, track, and so on, are in the wrong place;
an Org file has to choose whether or not it's a task list or a document,
which doesn't fit the metalanguage paradigm cleanly.
"]
prose_694 -> { raw_702}
{rank=same; raw_702}

raw_702 [label="raw"]


raw_702 -> leaf_703
leaf_703  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A list looks like this:
"]
structure_695 -> { hashline_704}
{rank=same; hashline_704}

hashline_704 [label="hashline"]


hashline_704 -> { hashtag_705}
{rank=same; hashtag_705}

hashtag_705 [label="hashtag"]


hashtag_705 -> leaf_706
leaf_706  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_696 -> { raw_707}
{rank=same; raw_707}

raw_707 [label="raw"]


raw_707 -> leaf_708
leaf_708  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
and we have radio buttons.
"]
prose_697 -> { raw_709}
{rank=same; raw_709}

raw_709 [label="raw"]


raw_709 -> leaf_710
leaf_710  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We also have whitespace lists:
"]
structure_698 -> { hashline_711}
{rank=same; hashline_711}

hashline_711 [label="hashline"]


hashline_711 -> { hashtag_712}
{rank=same; hashtag_712}

hashtag_712 [label="hashtag"]


hashtag_712 -> leaf_713
leaf_713  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_699 -> { hashline_714}
{rank=same; hashline_714}

hashline_714 [label="hashline"]


hashline_714 -> { hashtag_715}
{rank=same; hashtag_715}

hashtag_715 [label="hashtag"]


hashtag_715 -> leaf_716
leaf_716  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_671 -> { header_717 prose_718 prose_719 prose_720 prose_721 prose_722}
{rank=same; header_717 prose_718 prose_719 prose_720 prose_721 prose_722}

header_717 [label="3 : Embedded Data"]

prose_718 [label="prose"]

prose_719 [label="prose"]

prose_720 [label="prose"]

prose_721 [label="prose"]

prose_722 [label="prose"]


prose_718 -> { raw_723}
{rank=same; raw_723}

raw_723 [label="raw"]


raw_723 -> leaf_724
leaf_724  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Anything found in prose between ={= and =}= is EDN. Note that the
outermost pair of curlies denotes a boundary. ={ foo }= is the symbol
foo, ={ foo bar }= is the symbol *foo* and the symbol *bar*, ={{foo bar}}= is
a map with key *foo* and value *bar*.
"]
prose_719 -> { raw_725}
{rank=same; raw_725}

raw_725 [label="raw"]


raw_725 -> leaf_726
leaf_726  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To quote the [[https://github.com/edn-format/edn][spec]], \"There is no enclosing element at the top level\". The
braces mark the boundaries of the data region.
"]
prose_720 -> { raw_727}
{rank=same; raw_727}

raw_727 [label="raw"]


raw_727 -> leaf_728
leaf_728  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is a mapping between lists and EDN, the basics of which will be clear
to the astute reader. The non-basics are unclear to the author as well.
"]
prose_721 -> { raw_729}
{rank=same; raw_729}

raw_729 [label="raw"]


raw_729 -> leaf_730
leaf_730  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Unresolved: may data be inlined into prose? What would that even mean?
slap some colors on it in the document? If we want to provide a 'this is
code but not for interpretation' mark, we will, it won't be EDN specific.
Inlining colorized code is not high on my todo list.
"]
prose_722 -> { raw_731}
{rank=same; raw_731}

raw_731 [label="raw"]


raw_731 -> leaf_732
leaf_732  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't think you can. Embeds are down here with lists and
tables in 'things you can't inline', for now.
"]
section_672 -> { header_733 prose_734 prose_735 prose_736 prose_737 structure_738 structure_739 structure_740 structure_741 prose_742 prose_743 structure_744 structure_745 structure_746 prose_747 prose_748 prose_749}
{rank=same; header_733 prose_734 prose_735 prose_736 prose_737 structure_738 structure_739 structure_740 structure_741 prose_742 prose_743 structure_744 structure_745 structure_746 prose_747 prose_748 prose_749}

header_733 [label="3 : Tables"]

prose_734 [label="prose"]

prose_735 [label="prose"]

prose_736 [label="prose"]

prose_737 [label="prose"]

structure_738 [label="structure"]

structure_739 [label="structure"]

structure_740 [label="structure"]

structure_741 [label="structure"]

prose_742 [label="prose"]

prose_743 [label="prose"]

structure_744 [label="structure"]

structure_745 [label="structure"]

structure_746 [label="structure"]

prose_747 [label="prose"]

prose_748 [label="prose"]

prose_749 [label="prose"]


prose_734 -> { raw_750}
{rank=same; raw_750}

raw_750 [label="raw"]


raw_750 -> leaf_751
leaf_751  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The way tables work in Babel is fine and needs little polish. Any modest
improvements we make will be in the face of considerable experience.
"]
prose_735 -> { raw_752}
{rank=same; raw_752}

raw_752 [label="raw"]


raw_752 -> leaf_753
leaf_753  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For example, I expect there's a way to make multiple literal rows serve
as a single row in existing Org, but I don't know what it is. I'll be
playing around a lot in the coming weeks, I hope.
"]
prose_736 -> { raw_754}
{rank=same; raw_754}

raw_754 [label="raw"]


raw_754 -> leaf_755
leaf_755  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Composability being an overarching goal, we can embed anything in a table
that we would put elsewhere.
"]
prose_737 -> { raw_756}
{rank=same; raw_756}

raw_756 [label="raw"]


raw_756 -> leaf_757
leaf_757  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Looks something like this:
"]
structure_738 -> { hashline_758}
{rank=same; hashline_758}

hashline_758 [label="hashline"]


hashline_758 -> { hashtag_759}
{rank=same; hashtag_759}

hashtag_759 [label="hashtag"]


hashtag_759 -> leaf_760
leaf_760  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_739 -> { hashline_761}
{rank=same; hashline_761}

hashline_761 [label="hashline"]


hashline_761 -> { hashtag_762}
{rank=same; hashtag_762}

hashtag_762 [label="hashtag"]


hashtag_762 -> leaf_763
leaf_763  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_740 -> { hashline_764}
{rank=same; hashline_764}

hashline_764 [label="hashline"]


hashline_764 -> { hashtag_765}
{rank=same; hashtag_765}

hashtag_765 [label="hashtag"]


hashtag_765 -> leaf_766
leaf_766  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_741 -> { hashline_767}
{rank=same; hashline_767}

hashline_767 [label="hashline"]


hashline_767 -> { hashtag_768}
{rank=same; hashtag_768}

hashtag_768 [label="hashtag"]


hashtag_768 -> leaf_769
leaf_769  [color=Gray,shape=rectangle,fontname=Inconsolata,label="formulas"]
prose_742 -> { raw_770}
{rank=same; raw_770}

raw_770 [label="raw"]


raw_770 -> leaf_771
leaf_771  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A subtle point of parsing I'm not sure is correct is =#formulas -=
or =- #formulas=. I feel like by normal associativity the latter
attaches the tag to the list, then nothing to the tag,
since the rule is a tag preceded only by whitespace owns the line
after it and indentations below it. The tag doesn't affect the indentation level
of the =-=, which could be confusing but won't be.
"]
prose_743 -> { raw_772}
{rank=same; raw_772}

raw_772 [label="raw"]


raw_772 -> leaf_773
leaf_773  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We should be able to tag tables like this:
"]
structure_744 -> { hashline_774}
{rank=same; hashline_774}

hashline_774 [label="hashline"]


hashline_774 -> { hashtag_775}
{rank=same; hashtag_775}

hashtag_775 [label="hashtag"]


hashtag_775 -> leaf_776
leaf_776  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_745 -> { hashline_777}
{rank=same; hashline_777}

hashline_777 [label="hashline"]


hashline_777 -> { hashtag_778}
{rank=same; hashtag_778}

hashtag_778 [label="hashtag"]


hashtag_778 -> leaf_779
leaf_779  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_746 -> { hashline_780}
{rank=same; hashline_780}

hashline_780 [label="hashline"]


hashline_780 -> { hashtag_781}
{rank=same; hashtag_781}

hashtag_781 [label="hashtag"]


hashtag_781 -> leaf_782
leaf_782  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_747 -> { raw_783}
{rank=same; raw_783}

raw_783 [label="raw"]


raw_783 -> leaf_784
leaf_784  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Totally okay in this context, doesn't trigger Nim rules because the table
associates to the tag anyway.
"]
prose_748 -> { raw_785}
{rank=same; raw_785}

raw_785 [label="raw"]


raw_785 -> leaf_786
leaf_786  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This gives us a nice left gutter which I propose we can use in various ways.
"]
prose_749 -> { raw_787}
{rank=same; raw_787}

raw_787 [label="raw"]


raw_787 -> leaf_788
leaf_788  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This section can get much longer. Generalizing how tables work is incredibly
powerful. My dream is to embed APL into Grimoire. Give me an excuse to
finally learn it!
"]
section_673 -> { header_789 prose_790 prose_791 prose_792 prose_793 prose_794}
{rank=same; header_789 prose_790 prose_791 prose_792 prose_793 prose_794}

header_789 [label="3 : Clocks"]

prose_790 [label="prose"]

prose_791 [label="prose"]

prose_792 [label="prose"]

prose_793 [label="prose"]

prose_794 [label="prose"]


prose_790 -> { raw_795}
{rank=same; raw_795}

raw_795 [label="raw"]


raw_795 -> leaf_796
leaf_796  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I think timestamps are just a drawer you put a timestamp in.
"]
prose_791 -> { raw_797}
{rank=same; raw_797}

raw_797 [label="raw"]


raw_797 -> leaf_798
leaf_798  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That drawer can collapse and look like ⏱.
"]
prose_792 -> { raw_799}
{rank=same; raw_799}

raw_799 [label="raw"]


raw_799 -> leaf_800
leaf_800  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Or we can collapse it into something from the set containing 🕞.
"]
prose_793 -> { raw_801}
{rank=same; raw_801}

raw_801 [label="raw"]


raw_801 -> leaf_802
leaf_802  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which normal Emacs doesn't display. I really need to go Japanese soon.
"]
prose_794 -> { raw_803}
{rank=same; raw_803}

raw_803 [label="raw"]


raw_803 -> leaf_804
leaf_804  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
But it would be just adorable to have a little clock representing the timestamp.
Emoji are quirky but the set contains useful icons, and it's Unicode.
Grimoire supports Unicode.
"]
section_674 -> { header_805 prose_806 prose_807 prose_808 prose_809 section_810 section_811}
{rank=same; header_805 prose_806 prose_807 prose_808 prose_809 section_810 section_811}

header_805 [label="3 : Code"]

prose_806 [label="prose"]

prose_807 [label="prose"]

prose_808 [label="prose"]

prose_809 [label="prose"]

section_810 [label="section: 946-963"]

section_811 [label="section: 964-1084"]


prose_806 -> { raw_812}
{rank=same; raw_812}

raw_812 [label="raw"]


raw_812 -> leaf_813
leaf_813  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The place where it all comes together.
"]
prose_807 -> { raw_814}
{rank=same; raw_814}

raw_814 [label="raw"]


raw_814 -> leaf_815
leaf_815  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire has a servant language, Lua by default, but this
is of course configurable. Eventually we'll write Clu,
it's a race to see which project is finished first but they
have common dependencies, surprise, surprise.
"]
prose_808 -> { raw_816}
{rank=same; raw_816}

raw_816 [label="raw"]


raw_816 -> leaf_817
leaf_817  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code and data are yin and yang in Grimoire. Code embedded in
documents is executed in various ways and times; comments within
code blocks are themselves in Grimoire data format, and so on.
"]
prose_809 -> { raw_818}
{rank=same; raw_818}

raw_818 [label="raw"]


raw_818 -> leaf_819
leaf_819  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Given a single language Grimoire text, we can perform a mechanical
figure-ground reversal, such that data blocks become comments and
code blocks become live. We have many more sophisticated weave and
tangle operations, but this is a designed-in property that will prove
handy: sometimes you want to take code, org it up, and then flip it
into a literate context. Upgrade path for existing codebases.

"]
section_810 -> { header_820 prose_821 structure_822 prose_823 prose_824}
{rank=same; header_820 prose_821 structure_822 prose_823 prose_824}

header_820 [label="4 : Inline Code"]

prose_821 [label="prose"]

structure_822 [label="structure"]

prose_823 [label="prose"]

prose_824 [label="prose"]


prose_821 -> { raw_825}
{rank=same; raw_825}

raw_825 [label="raw"]


raw_825 -> leaf_826
leaf_826  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Inline code is written =`4 + 5`=. It executes in something similar to
:function mode in Babel, the call is as though it were wrapped in a function
call that looks like:
"]
structure_822 -> { hashline_827}
{rank=same; hashline_827}

hashline_827 [label="hashline"]


hashline_827 -> { hashtag_828}
{rank=same; hashtag_828}

hashtag_828 [label="hashtag"]


hashtag_828 -> leaf_829
leaf_829  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_823 -> { raw_830}
{rank=same; raw_830}

raw_830 [label="raw"]


raw_830 -> leaf_831
leaf_831  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
maintaining state between calls.
"]
prose_824 -> { raw_832}
{rank=same; raw_832}

raw_832 [label="raw"]


raw_832 -> leaf_833
leaf_833  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Anything named exists as a data structure in the helper language. This makes it easy to
refer to a block that contains a self-reference, so these are stored in a cycle-safe way.
"]
section_811 -> { header_834 prose_835 prose_836 structure_837 structure_838 prose_839 structure_840 structure_841 prose_842 codeblock_843 structure_844 prose_845 prose_846 prose_847 codeblock_848 codeblock_849 codeblock_850 structure_851 structure_852 codeblock_853 structure_854 structure_855 prose_856 prose_857 prose_858 prose_859 structure_860 prose_861 prose_862 prose_863 codeblock_864 section_865}
{rank=same; header_834 prose_835 prose_836 structure_837 structure_838 prose_839 structure_840 structure_841 prose_842 codeblock_843 structure_844 prose_845 prose_846 prose_847 codeblock_848 codeblock_849 codeblock_850 structure_851 structure_852 codeblock_853 structure_854 structure_855 prose_856 prose_857 prose_858 prose_859 structure_860 prose_861 prose_862 prose_863 codeblock_864 section_865}

header_834 [label="4 : Code Blocks"]

prose_835 [label="prose"]

prose_836 [label="prose"]

structure_837 [label="structure"]

structure_838 [label="structure"]

prose_839 [label="prose"]

structure_840 [label="structure"]

structure_841 [label="structure"]

prose_842 [label="prose"]

codeblock_843 [label="code block 993-995"]

structure_844 [label="structure"]

prose_845 [label="prose"]

prose_846 [label="prose"]

prose_847 [label="prose"]

codeblock_848 [label="code block 1009-1011"]

codeblock_849 [label="code block 1017-1019"]

codeblock_850 [label="code block 1023-1025"]

structure_851 [label="structure"]

structure_852 [label="structure"]

codeblock_853 [label="code block 1033-1035"]

structure_854 [label="structure"]

structure_855 [label="structure"]

prose_856 [label="prose"]

prose_857 [label="prose"]

prose_858 [label="prose"]

prose_859 [label="prose"]

structure_860 [label="structure"]

prose_861 [label="prose"]

prose_862 [label="prose"]

prose_863 [label="prose"]

codeblock_864 [label="code block 1078-1080"]

section_865 [label="section: 1085-1155"]


prose_835 -> { raw_866}
{rank=same; raw_866}

raw_866 [label="raw"]


raw_866 -> leaf_867
leaf_867  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The =`inline`= syntax works like the rest, you may use any number of backticks to enclose a form.
"]
prose_836 -> { raw_868}
{rank=same; raw_868}

raw_868 [label="raw"]


raw_868 -> leaf_869
leaf_869  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something like:
"]
structure_837 -> { hashline_870}
{rank=same; hashline_870}

hashline_870 [label="hashline"]


hashline_870 -> { hashtag_871}
{rank=same; hashtag_871}

hashtag_871 [label="hashtag"]


hashtag_871 -> leaf_872
leaf_872  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_838 -> { hashline_873}
{rank=same; hashline_873}

hashline_873 [label="hashline"]


hashline_873 -> { hashtag_874}
{rank=same; hashtag_874}

hashtag_874 [label="hashtag"]


hashtag_874 -> leaf_875
leaf_875  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_839 -> { raw_876}
{rank=same; raw_876}

raw_876 [label="raw"]


raw_876 -> leaf_877
leaf_877  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
it is evaluated when referenced. This:
"]
structure_840 -> { hashline_878}
{rank=same; hashline_878}

hashline_878 [label="hashline"]


hashline_878 -> { hashtag_879}
{rank=same; hashtag_879}

hashtag_879 [label="hashtag"]


hashtag_879 -> leaf_880
leaf_880  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_841 -> { hashline_881}
{rank=same; hashline_881}

hashline_881 [label="hashline"]


hashline_881 -> { hashtag_882}
{rank=same; hashtag_882}

hashtag_882 [label="hashtag"]


hashtag_882 -> leaf_883
leaf_883  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_842 -> { raw_884}
{rank=same; raw_884}

raw_884 [label="raw"]


raw_884 -> leaf_885
leaf_885  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Separated code blocks use special tags:
"]
codeblock_843 -> leaf_886
leaf_886  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
structure_844 -> { hashline_887}
{rank=same; hashline_887}

hashline_887 [label="hashline"]


hashline_887 -> { hashtag_888}
{rank=same; hashtag_888}

hashtag_888 [label="hashtag"]


hashtag_888 -> leaf_889
leaf_889  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_845 -> { raw_890}
{rank=same; raw_890}

raw_890 [label="raw"]


raw_890 -> leaf_891
leaf_891  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
nesting apply. As indeed they might in a Grimoire code block.
"]
prose_846 -> { raw_892}
{rank=same; raw_892}

raw_892 [label="raw"]


raw_892 -> leaf_893
leaf_893  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We need a good runtime. Playing the Inception game
with Grimoire should be an amusing headache, not a dog-slow
system killer.
"]
prose_847 -> { raw_894}
{rank=same; raw_894}

raw_894 [label="raw"]


raw_894 -> leaf_895
leaf_895  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They may be named like anything else:
"]
codeblock_848 -> leaf_896
leaf_896  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
codeblock_849 -> leaf_897
leaf_897  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
codeblock_850 -> leaf_898
leaf_898  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 4 + 5"]
structure_851 -> { hashline_899}
{rank=same; hashline_899}

hashline_899 [label="hashline"]


hashline_899 -> { hashtag_900}
{rank=same; hashtag_900}

hashtag_900 [label="hashtag"]


hashtag_900 -> leaf_901
leaf_901  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_852 -> { handleline_902}
{rank=same; handleline_902}

handleline_902 [label="handleline"]


handleline_902 -> { handle_903}
{rank=same; handle_903}

handle_903 [label="handle"]


handle_903 -> leaf_904
leaf_904  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nine"]
codeblock_853 -> leaf_905
leaf_905  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 4 + 5"]
structure_854 -> { hashline_906}
{rank=same; hashline_906}

hashline_906 [label="hashline"]


hashline_906 -> { hashtag_907}
{rank=same; hashtag_907}

hashtag_907 [label="hashtag"]


hashtag_907 -> leaf_908
leaf_908  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_855 -> { hashline_909}
{rank=same; hashline_909}

hashline_909 [label="hashline"]


hashline_909 -> { hashtag_910}
{rank=same; hashtag_910}

hashtag_910 [label="hashtag"]


hashtag_910 -> leaf_911
leaf_911  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_856 -> { raw_912}
{rank=same; raw_912}

raw_912 [label="raw"]


raw_912 -> leaf_913
leaf_913  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
marks an anonymous result. =#@nine->= is the automatically generated tag for
the return value of the block named =@nine=, adding =@nine()= to a prose block will
add the number 9 to the weave at that location. *bridge* will either display the result,
the call, or both, configurably, when editing the source, with syntax-highlighting to 
enforce the distinction. 
"]
prose_857 -> { raw_914}
{rank=same; raw_914}

raw_914 [label="raw"]


raw_914 -> leaf_915
leaf_915  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code blocks may be indented as any other blocks, with the associated owership
rules. Code blocks so indented have a logical start equal to their level of
indentation, which is to say the program being called will not see indentation
that is proper to the Grimoire document.
"]
prose_858 -> { raw_916}
{rank=same; raw_916}

raw_916 [label="raw"]


raw_916 -> leaf_917
leaf_917  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code blocks may be placed inside lists, as tables may be, but may not be
explicitly placed inside tables.
"]
prose_859 -> { raw_918}
{rank=same; raw_918}

raw_918 [label="raw"]


raw_918 -> leaf_919
leaf_919  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You may insert the result of a named code block in the data context
by simply saying =@a-named-block()=. If there are variables, you may pass
them, =@a-named-block(23, true)= or if you wish, by name:
"]
structure_860 -> { hashline_920}
{rank=same; hashline_920}

hashline_920 [label="hashline"]


hashline_920 -> { hashtag_921}
{rank=same; hashtag_921}

hashtag_921 [label="hashtag"]


hashtag_921 -> leaf_922
leaf_922  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_861 -> { raw_923}
{rank=same; raw_923}

raw_923 [label="raw"]


raw_923 -> leaf_924
leaf_924  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Within a formula applied to a table, it is valid to use the description
syntax for a variable to supply an argument to a function.
"]
prose_862 -> { raw_925}
{rank=same; raw_925}

raw_925 [label="raw"]


raw_925 -> leaf_926
leaf_926  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There will be further syntax involved in building up the line that
begins a code block. It's considered good form to assign complex
code block headers into distinct tags, and use those, rather than
being explicit and repeating yourself or hiding file-local defaults
in drawers.
"]
prose_863 -> { raw_927}
{rank=same; raw_927}

raw_927 [label="raw"]


raw_927 -> leaf_928
leaf_928  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So we prefer something like
"]
codeblock_864 -> leaf_929
leaf_929  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
section_865 -> { header_930 prose_931 section_932 section_933}
{rank=same; header_930 prose_931 section_932 section_933}

header_930 [label="1 : Runtime"]

prose_931 [label="prose"]

section_932 [label="section: 1089-1123"]

section_933 [label="section: 1156-1200"]


prose_931 -> { raw_934}
{rank=same; raw_934}

raw_934 [label="raw"]


raw_934 -> leaf_935
leaf_935  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Here, we begin to explore the interactions Grimoire is capable of.
"]
section_932 -> { header_936 prose_937 prose_938 prose_939 prose_940 prose_941 prose_942 prose_943 prose_944 section_945}
{rank=same; header_936 prose_937 prose_938 prose_939 prose_940 prose_941 prose_942 prose_943 prose_944 section_945}

header_936 [label="2 : Literate or Live?"]

prose_937 [label="prose"]

prose_938 [label="prose"]

prose_939 [label="prose"]

prose_940 [label="prose"]

prose_941 [label="prose"]

prose_942 [label="prose"]

prose_943 [label="prose"]

prose_944 [label="prose"]

section_945 [label="section: 1124-1155"]


prose_937 -> { raw_946}
{rank=same; raw_946}

raw_946 [label="raw"]


raw_946 -> leaf_947
leaf_947  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Babel is descended from the tradition of [[http://en.wikipedia.org/wiki/Literate_programming][literate programming]], and
Grimoire inherits this from Babel.
"]
prose_938 -> { raw_948}
{rank=same; raw_948}

raw_948 [label="raw"]


raw_948 -> leaf_949
leaf_949  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is capable of producing code and documentation in the
classic literate style. This is not the aim of Grimoire: it is
a metalanguage, for working with prose, data, and code in an
integrated fashion.
"]
prose_939 -> { raw_950}
{rank=same; raw_950}

raw_950 [label="raw"]


raw_950 -> leaf_951
leaf_951  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
What a compiler is to a REPL, literate programming is to living
documents.
"]
prose_940 -> { raw_952}
{rank=same; raw_952}

raw_952 [label="raw"]


raw_952 -> leaf_953
leaf_953  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In a literate programming context, we have source, which integrates
code and documentation. The source is then woven into documentation,
and tangled into code. Both are compiled, one is printed, one is run.
"]
prose_941 -> { raw_954}
{rank=same; raw_954}

raw_954 [label="raw"]


raw_954 -> leaf_955
leaf_955  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The word 'printed' sounds somewhat archaic, no? The number of tools
Donald Knuth had to write just to write the tools he wanted to write,
and tool the writings he wanted to tool, is simply staggering.
"]
prose_942 -> { raw_956}
{rank=same; raw_956}

raw_956 [label="raw"]


raw_956 -> leaf_957
leaf_957  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Traces of that legacy remain in Grimoire. Like Babel, we allow for
LaTeX embedding, with the sugar =`\\latex`=. Starting Lua code with
a backslash is illegal, starting Clu code with a backslash is also
illegal.
"]
prose_943 -> { raw_958}
{rank=same; raw_958}

raw_958 [label="raw"]


raw_958 -> leaf_959
leaf_959  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For a Grimoire document to be printed, realistically, in today's world,
it will be translated to LaTeX, hence to PDF, sent off to a print
on demand company, and drop shipped. Some documents may in fact
make this journey, because why not? We aren't oriented around it.
"]
prose_944 -> { raw_960}
{rank=same; raw_960}

raw_960 [label="raw"]


raw_960 -> leaf_961
leaf_961  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The basic flow in a Grimoire context is one of excursion and return.
We have tangling and weaving, but also unraveling, where actions taken
within the weave or tangle are integrated back into the source document.
"]
section_945 -> { header_962 prose_963 prose_964 prose_965 prose_966 prose_967 prose_968}
{rank=same; header_962 prose_963 prose_964 prose_965 prose_966 prose_967 prose_968}

header_962 [label="3 : Unraveling the Mystery"]

prose_963 [label="prose"]

prose_964 [label="prose"]

prose_965 [label="prose"]

prose_966 [label="prose"]

prose_967 [label="prose"]

prose_968 [label="prose"]


prose_963 -> { raw_969}
{rank=same; raw_969}

raw_969 [label="raw"]


raw_969 -> leaf_970
leaf_970  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

What's unraveling? When I picture Donald Knuth writing literate code,
I picture him with a notebook, writing free-flowing algorithms in a
fashion he refined his entire career. I imagine him carefully transcribing
into Web, running the compiler, going for a stroll around the Stanford
campus, and examining the changes upon his return.
"]
prose_964 -> { raw_971}
{rank=same; raw_971}

raw_971 [label="raw"]


raw_971 -> leaf_972
leaf_972  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
On the days, and they did happen, when his program was in a state of error,
I picture him returning to his notebook first. While thinking. Perhaps
playing the organ for an hour or two, to relax. He would then correct the
notebook, then the code, then the program, which would be correct now,
most of the time.
"]
prose_965 -> { raw_973}
{rank=same; raw_973}

raw_973 [label="raw"]


raw_973 -> leaf_974
leaf_974  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm making that all up. But I'd wager I'm not far off the mark. We
don't work like that and most of us can't.
"]
prose_966 -> { raw_975}
{rank=same; raw_975}

raw_975 [label="raw"]


raw_975 -> leaf_976
leaf_976  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A tangle is named that because the mapping between it and the source
can be non-trivial. It's quite possible to make it undecidable what to
do with edits to the tangle. it's also possible to move edits from the tangle
back into the source, in most cases, if we structure things well.
"]
prose_967 -> { raw_977}
{rank=same; raw_977}

raw_977 [label="raw"]


raw_977 -> leaf_978
leaf_978  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Donald Knuth was unable to print a book that would alter his code. I'm
sure he'd have been delighted to have the ability. Our weaves can easily
be living documents, through in-browser and server side empowerment.
Those changes, too, should make it back into the source.
"]
prose_968 -> { raw_979}
{rank=same; raw_979}

raw_979 [label="raw"]


raw_979 -> leaf_980
leaf_980  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Ultimately I imagine many people will prefer to edit and run their
Grimoire documents entirely from a weave that provides a bit of the
ol' WYSIWYG to the experience. Well and good for them, I have my own
view of Heaven, and it isn't Heaven if we don't all fit.
"]
section_933 -> { header_981 prose_982 prose_983 prose_984 prose_985 section_986 section_987}
{rank=same; header_981 prose_982 prose_983 prose_984 prose_985 section_986 section_987}

header_981 [label="2 : Source, Tangle and Weave"]

prose_982 [label="prose"]

prose_983 [label="prose"]

prose_984 [label="prose"]

prose_985 [label="prose"]

section_986 [label="section: 1173-1200"]

section_987 [label="section: 1201-1219"]


prose_982 -> { raw_988}
{rank=same; raw_988}

raw_988 [label="raw"]


raw_988 -> leaf_989
leaf_989  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

These classic concepts from literate programming are central to
the Grimoire paradigm.
"]
prose_983 -> { raw_990}
{rank=same; raw_990}

raw_990 [label="raw"]


raw_990 -> leaf_991
leaf_991  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In Grimoire, something like a PDF is not a true weave. It is a product;
much like an image or data derived from a simulation, it is regenerated
when necessary but has no further connection to the Grimoire environment.
"]
prose_984 -> { raw_992}
{rank=same; raw_992}

raw_992 [label="raw"]


raw_992 -> leaf_993
leaf_993  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Our first section discusses the format of Grimoire source code. Like Babel,
unlike Web and descendants, it is self-tangling. Grimoire will be tightly
integrated and purpose-built for this task, operating at a REPL+ level.
"]
prose_985 -> { raw_994}
{rank=same; raw_994}

raw_994 [label="raw"]


raw_994 -> leaf_995
leaf_995  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We still wish to use it to compile programs written in appropriate languages.
These languages needn't be educated in the ways of Grimoire, imposing this
requirement would be so onerous as to block adoption.
"]
section_986 -> { header_996 prose_997 prose_998 prose_999 prose_1000 prose_1001}
{rank=same; header_996 prose_997 prose_998 prose_999 prose_1000 prose_1001}

header_996 [label="3 : Unraveling the Tangle"]

prose_997 [label="prose"]

prose_998 [label="prose"]

prose_999 [label="prose"]

prose_1000 [label="prose"]

prose_1001 [label="prose"]


prose_997 -> { raw_1002}
{rank=same; raw_1002}

raw_1002 [label="raw"]


raw_1002 -> leaf_1003
leaf_1003  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Babel offers limited facilities for working within source blocks. What it
doesn't offer is the critical 'unravel' operation, which takes changes to
the tangle and integrates them back into the weave.
"]
prose_998 -> { raw_1004}
{rank=same; raw_1004}

raw_1004 [label="raw"]


raw_1004 -> leaf_1005
leaf_1005  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is a partially-solved problem, with Babel able to put comment tags into
the source which allow Emacs to jump back into your actual source from
errors in the tangle.
"]
prose_999 -> { raw_1006}
{rank=same; raw_1006}

raw_1006 [label="raw"]


raw_1006 -> leaf_1007
leaf_1007  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is just not good enough. For any number of reasons, we need to be able
to unravel. I'll cite one: Converting existing codebases over to literacy.
The first step is to recreate the existing program on a source-line-identical
level. The entire existing developer base is familiar with the program already
and isn't going to want to start editing a bunch of Grimoire. They can most
likely be induced to accept readable metadata, and that's it.
"]
prose_1000 -> { raw_1008}
{rank=same; raw_1008}

raw_1008 [label="raw"]


raw_1008 -> leaf_1009
leaf_1009  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That's all we need. Code is in one of three categories: either it is a single
literal copy from source, it's one of several copies from source, or
it's generated code that's dependent on information in the source.
"]
prose_1001 -> { raw_1010}
{rank=same; raw_1010}

raw_1010 [label="raw"]


raw_1010 -> leaf_1011
leaf_1011  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We incorporate all changes to the former automatically when we unravel.
Changes to a single version of multiple copies prompts user interaction: do
you want to embed the change as its own source block, propagate it to each
instance, or decline the merge? Changes to generated code are simply
forbidden. If one is doing generation on the code base, working from
the weave is the more comfortable approach.
"]
section_987 -> { header_1012 prose_1013 prose_1014 prose_1015 prose_1016}
{rank=same; header_1012 prose_1013 prose_1014 prose_1015 prose_1016}

header_1012 [label="3 : Backweaving"]

prose_1013 [label="prose"]

prose_1014 [label="prose"]

prose_1015 [label="prose"]

prose_1016 [label="prose"]


prose_1013 -> { raw_1017}
{rank=same; raw_1017}

raw_1017 [label="raw"]


raw_1017 -> leaf_1018
leaf_1018  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

An analogous operation is backweaving.
"]
prose_1014 -> { raw_1019}
{rank=same; raw_1019}

raw_1019 [label="raw"]


raw_1019 -> leaf_1020
leaf_1020  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A weave in Grimoire is an HTML/CSS/JS document. In other words, a program.
The weave is much closer akin to the source than any tangle. Any Grimoire
program can have a weave view, though it isn't necessary; many will have
no tangle at all, containing the functionality within Grimoire.
"]
prose_1015 -> { raw_1021}
{rank=same; raw_1021}

raw_1021 [label="raw"]


raw_1021 -> leaf_1022
leaf_1022  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The weave may therefore be manipulated, and we need some way to reflect
those changes back into the source. This can't be automated in a general
way. What we're left with is an EDN protocol for exchanging information
to update the weave in cooperation with some server logic and git.
"]
prose_1016 -> { raw_1023}
{rank=same; raw_1023}

raw_1023 [label="raw"]


raw_1023 -> leaf_1024
leaf_1024  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So, could you write the server logic for a site as a literate program,
push it to a server that tangles and weaves it, and use the source
and Grimoire/bridge as the sysadmin view? I bet you could, it might
even be fairly popular.
"]
section_315 -> { header_1025 prose_1026 prose_1027 prose_1028 section_1029}
{rank=same; header_1025 prose_1026 prose_1027 prose_1028 section_1029}

header_1025 [label="4 : Zero-header tag"]

prose_1026 [label="prose"]

prose_1027 [label="prose"]

prose_1028 [label="prose"]

section_1029 [label="section: 420-421"]


prose_1026 -> { raw_1030}
{rank=same; raw_1030}

raw_1030 [label="raw"]


raw_1030 -> leaf_1031
leaf_1031  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The special [[*Tags][tag]] =#*=, which is only meaningful at the top of a document,
 indicates a 'zero header'. This lets you use the one-star level as a
series within a single document.
"]
prose_1027 -> { raw_1032}
{rank=same; raw_1032}

raw_1032 [label="raw"]


raw_1032 -> leaf_1033
leaf_1033  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The related tag =#meta*= must be followed by a space and any number of
stars. This indicates a meta-level for the entire under-tree, that
exists somewhere else. Further semantics may be provided.
"]
prose_1028 -> { raw_1034}
{rank=same; raw_1034}

raw_1034 [label="raw"]


raw_1034 -> leaf_1035
leaf_1035  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This section belongs in some further API section.
"]
section_1029 -> { header_1036 prose_1037}
{rank=same; header_1036 prose_1037}

header_1036 [label="5 : TODO Move to API Section"]

prose_1037 [label="prose"]


prose_1037 -> { raw_1038}
{rank=same; raw_1038}

raw_1038 [label="raw"]


raw_1038 -> leaf_1039
leaf_1039  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]

}
