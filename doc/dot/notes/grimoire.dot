digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 1219"]


doc_0 -> { section_1 section_2}
{rank=same; section_1 section_2}

section_1 [label="section: 1-3"]

section_2 [label="section: 34-338"]


section_1 -> { header_3 prose_4 structure_5 section_6}
{rank=same; header_3 prose_4 structure_5 section_6}

header_3 [label="0 : "]

prose_4 [label="prose"]

structure_5 [label="structure"]

section_6 [label="section: 4-33"]


header_3 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#+title: Grimoire: a metalanguage for magic spells."]
prose_4 -> { raw_8}
{rank=same; raw_8}

raw_8 [label="raw"]


raw_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_5 -> { hashline_10}
{rank=same; hashline_10}

hashline_10 [label="hashline"]


hashline_10 -> { hashtag_11}
{rank=same; hashtag_11}

hashtag_11 [label="hashtag"]


hashtag_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_6 -> { header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 prose_21 prose_22}
{rank=same; header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 prose_21 prose_22}

header_13 [label="1 : Introduction"]

prose_14 [label="prose"]

prose_15 [label="prose"]

prose_16 [label="prose"]

prose_17 [label="prose"]

prose_18 [label="prose"]

prose_19 [label="prose"]

prose_20 [label="prose"]

prose_21 [label="prose"]

prose_22 [label="prose"]


header_13 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Introduction"]
prose_14 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is a response to Babel.
"]
prose_15 -> { raw_26}
{rank=same; raw_26}

raw_26 [label="raw"]


raw_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Babel is simultaneously a kludge and the most potentially powerful language in existence.
"]
prose_16 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Babel is a metalanguage. The structure of Org mode lets the user weave together code into a
living document, in a flexible, powerful way.
"]
prose_17 -> { raw_30}
{rank=same; raw_30}

raw_30 [label="raw"]


raw_30 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The name is charmingly apt. Babel exists at the top of a tower of abstractions that is teetering
on the verge of collapse. Org-mode is an extension of outline mode, which was a simple tree
editor task list.
"]
prose_18 -> { raw_32}
{rank=same; raw_32}

raw_32 [label="raw"]


raw_32 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Various users bolted stuff on, because that's how emacs grows, you bolt stuff onto it and it
continues to function because it's [[http://lispers.org/][made with alien technology]].
"]
prose_19 -> { raw_34}
{rank=same; raw_34}

raw_34 [label="raw"]


raw_34 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The problem with Babel is more than the syntax being clunky, though that's a problem. The issue is
more profoundly that Babel is built on Org, which is built on emacs. It's a language, yes,
parsers exist for other platforms. But as a runtime, it isn't portable without a lot of effort.
"]
prose_20 -> { raw_36}
{rank=same; raw_36}

raw_36 [label="raw"]


raw_36 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So much so, that we get a chance to start over. It's roughly as difficult to write Grimoire as it would be to
reimplement Babel in, say, Sublime.
"]
prose_21 -> { raw_38}
{rank=same; raw_38}

raw_38 [label="raw"]


raw_38 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the process, we can:
"]
prose_22 -> { raw_40}
{rank=same; raw_40}

raw_40 [label="raw"]


raw_40 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - streamline concepts, making them more orthogonal
  - clean up the clunkiness in the grammar
  - build a toolchain that will let us write magic spells in any number of languages, amassing a powerful
    collection of same. A grimoire, if you will: a living book in which magic is both written and performed.
"]
section_2 -> { header_42 prose_43 section_44 section_45 section_46}
{rank=same; header_42 prose_43 section_44 section_45 section_46}

header_42 [label="1 : Musings on Metasyntax"]

prose_43 [label="prose"]

section_44 [label="section: 35-82"]

section_45 [label="section: 105-311"]

section_46 [label="section: 339-343"]


header_42 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Musings on Metasyntax"]
prose_43 -> { raw_48}
{rank=same; raw_48}

raw_48 [label="raw"]


raw_48 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_44 -> { header_50 prose_51 prose_52 section_53 section_54 section_55}
{rank=same; header_50 prose_51 prose_52 section_53 section_54 section_55}

header_50 [label="2 : Constraints"]

prose_51 [label="prose"]

prose_52 [label="prose"]

section_53 [label="section: 42-68"]

section_54 [label="section: 69-82"]

section_55 [label="section: 83-104"]


header_50 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Constraints"]
prose_51 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

There is a difference between a metalanguage and a literate programming language. Babel is a metalanguage,
as Grimoire is intended to be.
"]
prose_52 -> { raw_59}
{rank=same; raw_59}

raw_59 [label="raw"]


raw_59 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An effective metalanguage balances three concerns. It must be usable, readable, and parsable.
"]
section_53 -> { header_61 prose_62 prose_63 prose_64 prose_65 prose_66 prose_67 prose_68}
{rank=same; header_61 prose_62 prose_63 prose_64 prose_65 prose_66 prose_67 prose_68}

header_61 [label="3 : Usable"]

prose_62 [label="prose"]

prose_63 [label="prose"]

prose_64 [label="prose"]

prose_65 [label="prose"]

prose_66 [label="prose"]

prose_67 [label="prose"]

prose_68 [label="prose"]


header_61 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Usable"]
prose_62 -> { raw_70}
{rank=same; raw_70}

raw_70 [label="raw"]


raw_70 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A metalanguage is used interactively, on a deeper level than REPLs.
"]
prose_63 -> { raw_72 prespace_73 literal_74 raw_75}
{rank=same; raw_72 prespace_73 literal_74 raw_75}

raw_72 [label="raw"]

prespace_73 [label="prespace"]

literal_74 [label="literal"]

raw_75 [label="raw"]


raw_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is what makes working with Org so amazing. The first purpose of what became Babel
was simply editing outlines. This was outline mode, which dates back to the era when
using asterisks and"]
prespace_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="- [ ]"]
raw_75 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" checkboxes in a plain ASCII text file was fairly futuristic
behavior.
"]
prose_64 -> { raw_80}
{rank=same; raw_80}

raw_80 [label="raw"]


raw_80 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You can't really call that a language either, though it's a syntax. More and more features
were attached until we have modern Babel. But because each feature was build as an extension
to the editing/runtime environment, Babel is fairly smooth to work with.
"]
prose_65 -> { raw_82}
{rank=same; raw_82}

raw_82 [label="raw"]


raw_82 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If you can handle Emacs. I can, some can't. A metalanguage is tightly coupled to its runtime,
because its runtime is its editing environment. Not much of a metalanguage if this isn't the
case.
"]
prose_66 -> { raw_84}
{rank=same; raw_84}

raw_84 [label="raw"]


raw_84 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is the culmination of a considerable dependency chain. We need a data structure, a
parser to work with the data structure, and an editing environment that builds on these. For
maximum enjoyment, we'll want a custom terminal that enhances the xterm protocol with a few
features, most notably graphics.
"]
prose_67 -> { raw_86}
{rank=same; raw_86}

raw_86 [label="raw"]


raw_86 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Just like I have trouble writing Lua without burning huge amounts of time planning out Clu, I
can't use Org without doing the same for Grimoire. It's all related: I need a really good parser.
"]
prose_68 -> { raw_88}
{rank=same; raw_88}

raw_88 [label="raw"]


raw_88 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[[https://github.com/UpstandingHackers/hammer][hammer]] is the leading contender. But back to Grimoire.
"]
section_54 -> { header_90 prose_91 prose_92 prose_93}
{rank=same; header_90 prose_91 prose_92 prose_93}

header_90 [label="3 : Readable"]

prose_91 [label="prose"]

prose_92 [label="prose"]

prose_93 [label="prose"]


header_90 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Readable"]
prose_91 -> { raw_95}
{rank=same; raw_95}

raw_95 [label="raw"]


raw_95 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is designed to be read.  It's important that the raw syntax not
 break the reader's flow.  A good metalanguage lets the user employ just
 as much magic as she's comfortable with, without imposing more.
"]
prose_92 -> { raw_97}
{rank=same; raw_97}

raw_97 [label="raw"]


raw_97 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Our syntax is  designed to support this. As such  it is deeply concerned
with matters  such as indentation  and whitespacing, which are  basic to
readability.
"]
prose_93 -> { raw_99}
{rank=same; raw_99}

raw_99 [label="raw"]


raw_99 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It will be quite possible and indeed comfortable to write pure documents
such  as blog  posts in  Grimoire form.  In that  use case  it resembles
Markdown.
"]
section_55 -> { header_101 prose_102 prose_103 prose_104 prose_105 prose_106}
{rank=same; header_101 prose_102 prose_103 prose_104 prose_105 prose_106}

header_101 [label="3 : Parsable"]

prose_102 [label="prose"]

prose_103 [label="prose"]

prose_104 [label="prose"]

prose_105 [label="prose"]

prose_106 [label="prose"]


header_101 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Parsable"]
prose_102 -> { raw_108}
{rank=same; raw_108}

raw_108 [label="raw"]


raw_108 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire  documents are  intended  to be  highly  convoluted. The  basic
editing operation  is the fold. The  Grimoire editor must be  capable of
handling documents in the tens of megabytes with a complex and preserved
folding structure.
"]
prose_103 -> { raw_110}
{rank=same; raw_110}

raw_110 [label="raw"]


raw_110 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This requires  a ground-up  editing environment  rewrite to  employ data
structures   with   correct   big-O    complexity   and   an   efficient
implementation.
"]
prose_104 -> { raw_112}
{rank=same; raw_112}

raw_112 [label="raw"]


raw_112 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This  also  requires  that  the   language  be  well-designed  for  easy
recognition of the structural elements. As this document evolves, I will
be defining a grammar in the syntax preferred by barbarian.
"]
prose_105 -> { raw_114}
{rank=same; raw_114}

raw_114 [label="raw"]


raw_114 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is  an error-free  language. There  are several  concepts which
interact to  create this, namely  structure, prose, well-  and malformed
structure, and validity.
"]
prose_106 -> { raw_116}
{rank=same; raw_116}

raw_116 [label="raw"]


raw_116 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A parser for Grimoire which doesn't  succeed without error for any utf-8
string is not valid.
"]
section_45 -> { header_118 prose_119 section_120 section_121 section_122 section_123 section_124 section_125}
{rank=same; header_118 prose_119 section_120 section_121 section_122 section_123 section_124 section_125}

header_118 [label="2 : Structure"]

prose_119 [label="prose"]

section_120 [label="section: 109-149"]

section_121 [label="section: 161-190"]

section_122 [label="section: 191-200"]

section_123 [label="section: 253-285"]

section_124 [label="section: 295-311"]

section_125 [label="section: 312-338"]


header_118 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Structure"]
prose_119 -> { raw_127}
{rank=same; raw_127}

raw_127 [label="raw"]


raw_127 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a top-down look at Grimoire's proposed syntax.
"]
section_120 -> { header_129 prose_130 prose_131 prose_132 prose_133 prose_134 prose_135 prose_136 prose_137 prose_138 section_139}
{rank=same; header_129 prose_130 prose_131 prose_132 prose_133 prose_134 prose_135 prose_136 prose_137 prose_138 section_139}

header_129 [label="3 : Encoding"]

prose_130 [label="prose"]

prose_131 [label="prose"]

prose_132 [label="prose"]

prose_133 [label="prose"]

prose_134 [label="prose"]

prose_135 [label="prose"]

prose_136 [label="prose"]

prose_137 [label="prose"]

prose_138 [label="prose"]

section_139 [label="section: 150-160"]


header_129 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Encoding"]
prose_130 -> { raw_141}
{rank=same; raw_141}

raw_141 [label="raw"]


raw_141 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is defined in terms of utf-8.
"]
prose_131 -> { raw_143}
{rank=same; raw_143}

raw_143 [label="raw"]


raw_143 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The core syntax is defined in terms of the reachable keys on a US keyboard.
This tradition is firmly entrenched in the mid teens, and I have no
designs on budging that at present. The miser in me likes that they're
a byte each. The lawyer in me insists that this isn't ASCII, which is a
seven-bit legacy encoding. All aspects of utf-8 are equally meaningful.
"]
prose_132 -> { raw_145}
{rank=same; raw_145}

raw_145 [label="raw"]


raw_145 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We aren't at all afraid to use Unicode characters to display aspects
of the runtime. In fact we favor this, as it marks those operations
as distinctive. Most people can't type ⦿ without effort (I can't)
and it's easy to recognize as a folded drawer once you've seen a couple.
"]
prose_133 -> { raw_147}
{rank=same; raw_147}

raw_147 [label="raw"]


raw_147 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is case sensitive and uses lower-snake-case for built-in English
phrases. There is a convention (see classes) that uses capitalization of
user words to affect semantics. This may be overridden with other rules
for languages that lack the majuscule-miniscule distinction.
"]
prose_134 -> { raw_149}
{rank=same; raw_149}

raw_149 [label="raw"]


raw_149 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I want Grimoire to have correct Unicode handling, for some value of
correct. It can't be considered 1.0 without this.
"]
prose_135 -> { raw_151}
{rank=same; raw_151}

raw_151 [label="raw"]


raw_151 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Bidirectional handling in a context that's indentation sensitive is
an example of something subtle. Grimoire uses indentation in various
ways, so here's the rule:
"]
prose_136 -> { raw_153}
{rank=same; raw_153}

raw_153 [label="raw"]


raw_153 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Any newline that has a reversed direction ends indentation. So if
you are going ltr, issue an rtl marker, and a newline, your indentation
level is zero. If you reverse direction twice in a line, you keep
your indentation level. Three times, you lose it.
"]
prose_137 -> { raw_155}
{rank=same; raw_155}

raw_155 [label="raw"]


raw_155 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'd love to get a Hebrew and/or Arabic fluent hacker on the project
early, to make sure this works correctly.
"]
prose_138 -> { raw_157}
{rank=same; raw_157}

raw_157 [label="raw"]


raw_157 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Another thing I want to get right is equivalence. If you have a
variable called \"Glück\" the compiler shouldn't complain if it's
rendered in either of the valid ways. For some sequences that's
\"any of the valid ways\". If we normalized your prose, you might
have problems later, so we don't want to solve it that way.
"]
section_139 -> { header_159 prose_160 prose_161}
{rank=same; header_159 prose_160 prose_161}

header_159 [label="4 : Internationalization"]

prose_160 [label="prose"]

prose_161 [label="prose"]


header_159 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Internationalization"]
prose_160 -> { raw_163 prespace_164 literal_165 raw_166}
{rank=same; raw_163 prespace_164 literal_165 raw_166}

raw_163 [label="raw"]

prespace_164 [label="prespace"]

literal_165 [label="literal"]

raw_166 [label="raw"]


raw_163 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

All parts of Grimoire defined in English will be namespaced
as"]
prespace_164 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_165 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="en:/"]
raw_166 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and loaded by default. Other languages will be added
when there is a fluent maintainer available.
"]
prose_161 -> { raw_171 prespace_172 literal_173 raw_174 prespace_175 literal_176 raw_177 prespace_178 literal_179 raw_180}
{rank=same; raw_171 prespace_172 literal_173 raw_174 prespace_175 literal_176 raw_177 prespace_178 literal_179 raw_180}

raw_171 [label="raw"]

prespace_172 [label="prespace"]

literal_173 [label="literal"]

raw_174 [label="raw"]

prespace_175 [label="prespace"]

literal_176 [label="literal"]

raw_177 [label="raw"]

prespace_178 [label="prespace"]

literal_179 [label="literal"]

raw_180 [label="raw"]


raw_171 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note  that  many  words  aren't  truly English.  Notably  the  names  of
programming languages are  the same in all human languages.   A tag like
=#author= can be namespaced"]
prespace_172 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_173 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#fr:/auteur"]
raw_174 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and will be, but"]
prespace_175 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_176 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!python"]
raw_177 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not
in the"]
prespace_178 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_179 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label="en:/"]
raw_180 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" namespace.
"]
section_121 -> { header_191 prose_192 prose_193 prose_194 prose_195 prose_196 prose_197 prose_198}
{rank=same; header_191 prose_192 prose_193 prose_194 prose_195 prose_196 prose_197 prose_198}

header_191 [label="3 : Prose and Structure"]

prose_192 [label="prose"]

prose_193 [label="prose"]

prose_194 [label="prose"]

prose_195 [label="prose"]

prose_196 [label="prose"]

prose_197 [label="prose"]

prose_198 [label="prose"]


header_191 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Prose and Structure"]
prose_192 -> { raw_200}
{rank=same; raw_200}

raw_200 [label="raw"]


raw_200 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The major distinction Grimoire draws is between prose and structure.
"]
prose_193 -> { raw_202}
{rank=same; raw_202}

raw_202 [label="raw"]


raw_202 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose is the default parsing state. It is far from unstructured from the
runtime  perspective. Although  this needn't  be embedded  in the  parse
tree,  Grimoire   understands  concepts   such  as   paragraphs,  words,
punctuation,  capital letters,  languages, and  anything else  proper to
prose.
"]
prose_194 -> { raw_204}
{rank=same; raw_204}

raw_204 [label="raw"]


raw_204 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I refer to human languages, but Grimoire understands programming languages
also. In principle, all of them, it shouldn't be harder to add them than
it is to call them from shell, though getting a runtime rigged up to
another runtime always calls for some finesse to derive a good experience.
"]
prose_195 -> { raw_206}
{rank=same; raw_206}

raw_206 [label="raw"]


raw_206 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
\"Programming languages\" is overly specific. Grimoire draws a distinction
between prose and structure. Blocks may contain either, or both.
"]
prose_196 -> { raw_208 prespace_209 bold_210 raw_211}
{rank=same; raw_208 prespace_209 bold_210 raw_211}

raw_208 [label="raw"]

prespace_209 [label="prespace"]

bold_210 [label="bold"]

raw_211 [label="raw"]


raw_208 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something that's nice about a language build on a prose/structure
relationship is that it can be error free. Anything"]
prespace_209 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
bold_210 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym"]
raw_211 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" can't build into
a structure is just prose.
"]
prose_197 -> { raw_216}
{rank=same; raw_216}

raw_216 [label="raw"]


raw_216 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Markdown has this property. Sometimes you run into crappy parsers which
build errors into Markdown, which is just obnoxious. If you [[http://daringfireball.net/projects/markdown/syntax][RTFM]],
you'll find the word \"error\" once. Helpfully explaining how Markdown
keeps you from making one.
"]
prose_198 -> { raw_218}
{rank=same; raw_218}

raw_218 [label="raw"]


raw_218 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do what we can to make the document look the same as it is
in fact structured. Syntax highlighting handles the edge cases.
"]
section_122 -> { header_220 prose_221 prose_222 prose_223 section_224}
{rank=same; header_220 prose_221 prose_222 prose_223 section_224}

header_220 [label="3 : Ownership"]

prose_221 [label="prose"]

prose_222 [label="prose"]

prose_223 [label="prose"]

section_224 [label="section: 201-252"]


header_220 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Ownership"]
prose_221 -> { raw_226}
{rank=same; raw_226}

raw_226 [label="raw"]


raw_226 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The basic structural relationship in Grimoire is ownership.
"]
prose_222 -> { raw_228}
{rank=same; raw_228}

raw_228 [label="raw"]


raw_228 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Root elements of a heirarchy own their children, blocks own
lines that refer to that block. Indentation has a subtle but
regular interaction with ownership; it does what you expect.
"]
prose_223 -> { raw_230}
{rank=same; raw_230}

raw_230 [label="raw"]


raw_230 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Edge cases are resolved using the cling rule.
"]
section_224 -> { header_232 prose_233 prose_234 prose_235 prose_236 structure_237 structure_238 structure_239 structure_240 structure_241 prose_242 structure_243 structure_244 structure_245 prose_246}
{rank=same; header_232 prose_233 prose_234 prose_235 prose_236 structure_237 structure_238 structure_239 structure_240 structure_241 prose_242 structure_243 structure_244 structure_245 prose_246}

header_232 [label="4 : The Cling Rule"]

prose_233 [label="prose"]

prose_234 [label="prose"]

prose_235 [label="prose"]

prose_236 [label="prose"]

structure_237 [label="structure"]

structure_238 [label="structure"]

structure_239 [label="structure"]

structure_240 [label="structure"]

structure_241 [label="structure"]

prose_242 [label="prose"]

structure_243 [label="structure"]

structure_244 [label="structure"]

structure_245 [label="structure"]

prose_246 [label="prose"]


header_232 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** The Cling Rule"]
prose_233 -> { raw_248}
{rank=same; raw_248}

raw_248 [label="raw"]


raw_248 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The cling rule specifies that a group 'clings' to another group when
it is closer to that group than the other group. Ties resolve down.
"]
prose_234 -> { raw_250}
{rank=same; raw_250}

raw_250 [label="raw"]


raw_250 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This should make it intuitive to group elements that aren't grouping the
way you expect: put in whitespace until the block is visually distinguished
from the surroundings.
"]
prose_235 -> { raw_252}
{rank=same; raw_252}

raw_252 [label="raw"]


raw_252 -> leaf_253
leaf_253  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cling applies between blocks which are at the same level of ownership.
Ownership has precedence over cling: all blocks underneath e.g. a header
line are owned by that line, newlines notwithstanding.
"]
prose_236 -> { raw_254}
{rank=same; raw_254}

raw_254 [label="raw"]


raw_254 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that indentation of e.g. lists invokes the cling rule within the
indentation level.

"]
structure_237 -> { hashline_256}
{rank=same; hashline_256}

hashline_256 [label="hashline"]


hashline_256 -> { hashtag_257}
{rank=same; hashtag_257}

hashtag_257 [label="hashtag"]


hashtag_257 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_238 -> { hashline_259}
{rank=same; hashline_259}

hashline_259 [label="hashline"]


hashline_259 -> { hashtag_260}
{rank=same; hashtag_260}

hashtag_260 [label="hashtag"]


hashtag_260 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_239 -> { hashline_262}
{rank=same; hashline_262}

hashline_262 [label="hashline"]


hashline_262 -> { hashtag_263}
{rank=same; hashtag_263}

hashtag_263 [label="hashtag"]


hashtag_263 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_240 -> { hashline_265}
{rank=same; hashline_265}

hashline_265 [label="hashline"]


hashline_265 -> { hashtag_266}
{rank=same; hashtag_266}

hashtag_266 [label="hashtag"]


hashtag_266 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
structure_241 -> { hashline_268}
{rank=same; hashline_268}

hashline_268 [label="hashline"]


hashline_268 -> { hashtag_269}
{rank=same; hashtag_269}

hashtag_269 [label="hashtag"]


hashtag_269 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_242 -> { raw_271}
{rank=same; raw_271}

raw_271 [label="raw"]


raw_271 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Even clings are resolved forwards:
"]
structure_243 -> { hashline_273}
{rank=same; hashline_273}

hashline_273 [label="hashline"]


hashline_273 -> { hashtag_274}
{rank=same; hashtag_274}

hashtag_274 [label="hashtag"]


hashtag_274 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_244 -> { hashline_276}
{rank=same; hashline_276}

hashline_276 [label="hashline"]


hashline_276 -> { hashtag_277}
{rank=same; hashtag_277}

hashtag_277 [label="hashtag"]


hashtag_277 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
structure_245 -> { hashline_279}
{rank=same; hashline_279}

hashline_279 [label="hashline"]


hashline_279 -> { hashtag_280}
{rank=same; hashtag_280}

hashtag_280 [label="hashtag"]


hashtag_280 -> leaf_281
leaf_281  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_246 -> { raw_282}
{rank=same; raw_282}

raw_282 [label="raw"]


raw_282 -> leaf_283
leaf_283  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
be considered bad style.
"]
section_123 -> { header_284 prose_285 section_286 section_287 section_288}
{rank=same; header_284 prose_285 section_286 section_287 section_288}

header_284 [label="3 : Whitespace, Lines, and Indentation."]

prose_285 [label="prose"]

section_286 [label="section: 258-279"]

section_287 [label="section: 280-285"]

section_288 [label="section: 286-294"]


header_284 -> leaf_289
leaf_289  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Whitespace, Lines, and Indentation."]
prose_285 -> { raw_290}
{rank=same; raw_290}

raw_290 [label="raw"]


raw_290 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is a structured document format. There are semantics associated
with every character we encode.
"]
section_286 -> { header_292 prose_293 prose_294 prose_295 prose_296 prose_297}
{rank=same; header_292 prose_293 prose_294 prose_295 prose_296 prose_297}

header_292 [label="4 : Whitespace"]

prose_293 [label="prose"]

prose_294 [label="prose"]

prose_295 [label="prose"]

prose_296 [label="prose"]

prose_297 [label="prose"]


header_292 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Whitespace"]
prose_293 -> { raw_299}
{rank=same; raw_299}

raw_299 [label="raw"]


raw_299 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Whitespace is either the space or newline character. Returns are removed,
tabs resolved to two spaces by the formatter, the latter is warned against.
"]
prose_294 -> { raw_301}
{rank=same; raw_301}

raw_301 [label="raw"]


raw_301 -> leaf_302
leaf_302  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Most of the token-like categories we refer to must be surrounded by
whitespace. Newlines have semantics more often than they do not.
"]
prose_295 -> { raw_303 prespace_304 literal_305 raw_306}
{rank=same; raw_303 prespace_304 literal_305 raw_306}

raw_303 [label="raw"]

prespace_304 [label="prespace"]

literal_305 [label="literal"]

raw_306 [label="raw"]


raw_303 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Unicode actually contains quite a number of whitespace characters. They are
all treated as a single ordinary space. If that space is semantically meaningful,
as in the space between"]
prespace_304 -> leaf_308
leaf_308  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_305 -> leaf_309
leaf_309  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** A Headline"]
raw_306 -> leaf_310
leaf_310  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", it is filtered into an ordinary space.
Otherwise it's considered prose, the only filtration prose receives is tab->space
conversion.
"]
prose_296 -> { raw_311}
{rank=same; raw_311}

raw_311 [label="raw"]


raw_311 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire mercilessly enforces tab-space conversion, even on your code blocks.
I will cling to this tenet as long as I can, the tab character needs to die,
the world has decided, that key is special and shouldn't insert a special
dropping that looks like n spaces.
"]
prose_297 -> { raw_313}
{rank=same; raw_313}

raw_313 [label="raw"]


raw_313 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
*make*? Outta my face with make. Yes, we'll have a make syntax, yes, it will
put the tabs back in.
"]
section_287 -> { header_315 prose_316}
{rank=same; header_315 prose_316}

header_315 [label="4 : Lines"]

prose_316 [label="prose"]


header_315 -> leaf_317
leaf_317  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Lines"]
prose_316 -> { raw_318}
{rank=same; raw_318}

raw_318 [label="raw"]


raw_318 -> leaf_319
leaf_319  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

When we refer to the beginning of a line, this allows for spaces before the
reference point. We call the absolute beginning of a line the first
position.
"]
section_288 -> { header_320 prose_321 prose_322 prose_323}
{rank=same; header_320 prose_321 prose_322 prose_323}

header_320 [label="4 : Indentation"]

prose_321 [label="prose"]

prose_322 [label="prose"]

prose_323 [label="prose"]


header_320 -> leaf_324
leaf_324  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Indentation"]
prose_321 -> { raw_325}
{rank=same; raw_325}

raw_325 [label="raw"]


raw_325 -> leaf_326
leaf_326  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is an indentation-aware language. Most kinds of block can be
arcically[fn:1] ordered by means of indentation.
"]
prose_322 -> { raw_327}
{rank=same; raw_327}

raw_327 [label="raw"]


raw_327 -> leaf_328
leaf_328  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indentation follows [[http://nim-lang.org/manual.html#indentation][Nim rules]].
"]
prose_323 -> { raw_329}
{rank=same; raw_329}

raw_329 [label="raw"]


raw_329 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[fn:1] There's nothing sacred about ordered subrules, and if we're making up
a new word, let's drop the silent h. Webster was a cool guy."]
section_124 -> { header_331 prose_332 prose_333 prose_334 prose_335}
{rank=same; header_331 prose_332 prose_333 prose_334 prose_335}

header_331 [label="3 : Order of Recognition"]

prose_332 [label="prose"]

prose_333 [label="prose"]

prose_334 [label="prose"]

prose_335 [label="prose"]


header_331 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Order of Recognition"]
prose_332 -> { raw_337}
{rank=same; raw_337}

raw_337 [label="raw"]


raw_337 -> leaf_338
leaf_338  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Starting from the neutral context, which is always at a newline, Grimoire
tries to make one of its initializing special forms. Failing that, it will
begin a prose block.
"]
prose_333 -> { raw_339}
{rank=same; raw_339}

raw_339 [label="raw"]


raw_339 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If there is whitespace, it affects indentation level in indicated ways.
They will not directly affect the semantics of the following form, that is,
these rules apply after any potentially block-ending newline, apart from
spaces that may be found between the newline and the character.
"]
prose_334 -> { raw_341 prespace_342 literal_343 raw_344 prespace_345 literal_346 raw_347 prespace_348 literal_349 raw_350 prespace_351 literal_352 raw_353 prespace_354 literal_355 raw_356 prespace_357 literal_358 raw_359 prespace_360 literal_361 raw_362 prespace_363 literal_364 raw_365}
{rank=same; raw_341 prespace_342 literal_343 raw_344 prespace_345 literal_346 raw_347 prespace_348 literal_349 raw_350 prespace_351 literal_352 raw_353 prespace_354 literal_355 raw_356 prespace_357 literal_358 raw_359 prespace_360 literal_361 raw_362 prespace_363 literal_364 raw_365}

raw_341 [label="raw"]

prespace_342 [label="prespace"]

literal_343 [label="literal"]

raw_344 [label="raw"]

prespace_345 [label="prespace"]

literal_346 [label="literal"]

raw_347 [label="raw"]

prespace_348 [label="prespace"]

literal_349 [label="literal"]

raw_350 [label="raw"]

prespace_351 [label="prespace"]

literal_352 [label="literal"]

raw_353 [label="raw"]

prespace_354 [label="prespace"]

literal_355 [label="literal"]

raw_356 [label="raw"]

prespace_357 [label="prespace"]

literal_358 [label="literal"]

raw_359 [label="raw"]

prespace_360 [label="prespace"]

literal_361 [label="literal"]

raw_362 [label="raw"]

prespace_363 [label="prespace"]

literal_364 [label="literal"]

raw_365 [label="raw"]


raw_341 -> leaf_366
leaf_366  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
At present, "]
prespace_342 -> leaf_367
leaf_367  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_343 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_344 -> leaf_369
leaf_369  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
prespace_345 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_346 -> leaf_371
leaf_371  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#"]
raw_347 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
prespace_348 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_349 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label="|"]
raw_350 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
prespace_351 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_352 -> leaf_377
leaf_377  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-"]
raw_353 -> leaf_378
leaf_378  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",  ,"]
prespace_354 -> leaf_379
leaf_379  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_355 -> leaf_380
leaf_380  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~"]
raw_356 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
prespace_357 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_358 -> leaf_383
leaf_383  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@"]
raw_359 -> leaf_384
leaf_384  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
prespace_360 -> leaf_385
leaf_385  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_361 -> leaf_386
leaf_386  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":"]
raw_362 -> leaf_387
leaf_387  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  and"]
prespace_363 -> leaf_388
leaf_388  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_364 -> leaf_389
leaf_389  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{"]
raw_365 -> leaf_390
leaf_390  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  all create
special  contexts.  A  special  context  creates a  block  in a  context
specific way.
"]
prose_335 -> { raw_391}
{rank=same; raw_391}

raw_391 [label="raw"]


raw_391 -> leaf_392
leaf_392  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Blocks have a left associativity which can be recursive.
"]
section_125 -> { header_393 prose_394 prose_395 prose_396 prose_397 prose_398}
{rank=same; header_393 prose_394 prose_395 prose_396 prose_397 prose_398}

header_393 [label="3 : Blocks"]

prose_394 [label="prose"]

prose_395 [label="prose"]

prose_396 [label="prose"]

prose_397 [label="prose"]

prose_398 [label="prose"]


header_393 -> leaf_399
leaf_399  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Blocks"]
prose_394 -> { raw_400}
{rank=same; raw_400}

raw_400 [label="raw"]


raw_400 -> leaf_401
leaf_401  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is oriented around blocks.
"]
prose_395 -> { raw_402}
{rank=same; raw_402}

raw_402 [label="raw"]


raw_402 -> leaf_403
leaf_403  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Blocks are at least one line long,  all restarts are on a new line.  Any
syntactic structure smaller than a block we call an element.
"]
prose_396 -> { raw_404}
{rank=same; raw_404}

raw_404 [label="raw"]


raw_404 -> leaf_405
leaf_405  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Some types of blocks nest.  A document is a single  block.  There may be
other semantic units such as directories, I'd think a language that uses
strict  nested heirarchy  as powerfully  as Grimoire  could dictate  the
semantics of a file system, but that's currently out of scope.
"]
prose_397 -> { raw_406 prespace_407 literal_408 raw_409 prespace_410 literal_411 raw_412}
{rank=same; raw_406 prespace_407 literal_408 raw_409 prespace_410 literal_411 raw_412}

raw_406 [label="raw"]

prespace_407 [label="prespace"]

literal_408 [label="literal"]

raw_409 [label="raw"]

prespace_410 [label="prespace"]

literal_411 [label="literal"]

raw_412 [label="raw"]


raw_406 -> leaf_413
leaf_413  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indentation is relevant to some  kinds of blocks. In general, whitespace
matters quite a  bit in a Grimoire  document. We keep some  of the warts
out because the tab character is  illegal, and there will be a mandatory
formatter,"]
prespace_407 -> leaf_414
leaf_414  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_408 -> leaf_415
leaf_415  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym  fmt"]
raw_409 -> leaf_416
leaf_416  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if  you will, that  does everything  from turning
=**bold**=  into"]
prespace_410 -> leaf_417
leaf_417  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_411 -> leaf_418
leaf_418  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*bold*"]
raw_412 -> leaf_419
leaf_419  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  (because the  extra stars  weren't used),  to
newline stripping, and so on.  This is normally applied incrementally by
the runtime editing environment.
"]
prose_398 -> { raw_420}
{rank=same; raw_420}

raw_420 [label="raw"]


raw_420 -> leaf_421
leaf_421  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indentation is human  readable and, with some care, a  computer may come
to the  same conclusions a  human would. I'm  still wary of  Python, but
there's no good  reason, unless the headache of most  Python not working
correctly  on my  computer, for  reasons I  can't track  down that  seem
related to  there being two languages  invoked as 'python', counts  as a
good reason.
"]
section_46 -> { header_422 prose_423 section_424}
{rank=same; header_422 prose_423 section_424}

header_422 [label="2 : Syntax"]

prose_423 [label="prose"]

section_424 [label="section: 344-407"]


header_422 -> leaf_425
leaf_425  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Syntax"]
prose_423 -> { raw_426}
{rank=same; raw_426}

raw_426 [label="raw"]


raw_426 -> leaf_427
leaf_427  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Now that we've established the basic constraints, let's
start our recursive descent into the parse.
"]
section_424 -> { header_428 prose_429 prose_430 prose_431 prose_432 prose_433 prose_434 structure_435 section_436 section_437}
{rank=same; header_428 prose_429 prose_430 prose_431 prose_432 prose_433 prose_434 structure_435 section_436 section_437}

header_428 [label="3 : Headers"]

prose_429 [label="prose"]

prose_430 [label="prose"]

prose_431 [label="prose"]

prose_432 [label="prose"]

prose_433 [label="prose"]

prose_434 [label="prose"]

structure_435 [label="structure"]

section_436 [label="section: 368-368"]

section_437 [label="section: 408-419"]


header_428 -> leaf_438
leaf_438  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Headers"]
prose_429 -> { raw_439}
{rank=same; raw_439}

raw_439 [label="raw"]


raw_439 -> leaf_440
leaf_440  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is arcically constrained by structure groups,
called headers.
"]
prose_430 -> { raw_441 prespace_442 literal_443 raw_444}
{rank=same; raw_441 prespace_442 literal_443 raw_444}

raw_441 [label="raw"]

prespace_442 [label="prespace"]

literal_443 [label="literal"]

raw_444 [label="raw"]


raw_441 -> leaf_445
leaf_445  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These start on a new line and begin with any number of "]
prespace_442 -> leaf_446
leaf_446  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_443 -> leaf_447
leaf_447  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_444 -> leaf_448
leaf_448  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". These must
be followed by a space mark to be valid. Contra Babel, you may
have a content-free header line, provided a space is found before the
newline.
"]
prose_431 -> { raw_449}
{rank=same; raw_449}

raw_449 [label="raw"]


raw_449 -> leaf_450
leaf_450  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In weaves and the like, headers represent document structure. Their
intention is structural: they support the same syntax as lists,
but the user is expected to use lists for list purposes. Putting
[TODO] in a header line should mean you have a document-specific
task to perform in that block.
"]
prose_432 -> { raw_451}
{rank=same; raw_451}

raw_451 [label="raw"]


raw_451 -> leaf_452
leaf_452  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Contra Babel, you may put spaces before the beginning of a header line.
"]
prose_433 -> { raw_453}
{rank=same; raw_453}

raw_453 [label="raw"]


raw_453 -> leaf_454
leaf_454  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The semantics of header lines are entirely determined by
the number of stars.
"]
prose_434 -> { raw_455}
{rank=same; raw_455}

raw_455 [label="raw"]


raw_455 -> leaf_456
leaf_456  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If you write
"]
structure_435 -> { hashline_457}
{rank=same; hashline_457}

hashline_457 [label="hashline"]


hashline_457 -> { hashtag_458}
{rank=same; hashtag_458}

hashtag_458 [label="hashtag"]


hashtag_458 -> leaf_459
leaf_459  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_436 -> { header_460 prose_461 section_462}
{rank=same; header_460 prose_461 section_462}

header_460 [label="1 : Top Header"]

prose_461 [label="prose"]

section_462 [label="section: 369-380"]


header_460 -> leaf_463
leaf_463  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  * Top Header"]
prose_461 -> { raw_464}
{rank=same; raw_464}

raw_464 [label="raw"]


raw_464 -> leaf_465
leaf_465  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_462 -> { header_466 structure_467 structure_468 section_469}
{rank=same; header_466 structure_467 structure_468 section_469}

header_466 [label="2 : Second Header"]

structure_467 [label="structure"]

structure_468 [label="structure"]

section_469 [label="section: 381-381"]


header_466 -> leaf_470
leaf_470  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    ** Second Header"]
structure_467 -> { hashline_471}
{rank=same; hashline_471}

hashline_471 [label="hashline"]


hashline_471 -> { hashtag_472}
{rank=same; hashtag_472}

hashtag_472 [label="hashtag"]


hashtag_472 -> leaf_473
leaf_473  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_468 -> { hashline_474}
{rank=same; hashline_474}

hashline_474 [label="hashline"]


hashline_474 -> { hashtag_475}
{rank=same; hashtag_475}

hashtag_475 [label="hashtag"]


hashtag_475 -> leaf_476
leaf_476  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_469 -> { header_477 prose_478 section_479}
{rank=same; header_477 prose_478 section_479}

header_477 [label="1 : Top Header ▼"]

prose_478 [label="prose"]

section_479 [label="section: 382-731"]


header_477 -> leaf_480
leaf_480  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Top Header ▼"]
prose_478 -> { raw_481}
{rank=same; raw_481}

raw_481 [label="raw"]


raw_481 -> leaf_482
leaf_482  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_479 -> { header_483 structure_484 prose_485 prose_486 prose_487 section_488 section_489 section_490 section_491 section_492 section_493 section_494 section_495 section_496 section_497}
{rank=same; header_483 structure_484 prose_485 prose_486 prose_487 section_488 section_489 section_490 section_491 section_492 section_493 section_494 section_495 section_496 section_497}

header_483 [label="2 : Second Header ►"]

structure_484 [label="structure"]

prose_485 [label="prose"]

prose_486 [label="prose"]

prose_487 [label="prose"]

section_488 [label="section: 398-407"]

section_489 [label="section: 422-440"]

section_490 [label="section: 441-481"]

section_491 [label="section: 489-501"]

section_492 [label="section: 502-558"]

section_493 [label="section: 567-593"]

section_494 [label="section: 594-611"]

section_495 [label="section: 612-672"]

section_496 [label="section: 691-731"]

section_497 [label="section: 732-741"]


header_483 -> leaf_498
leaf_498  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   ** Second Header ►"]
structure_484 -> { hashline_499}
{rank=same; hashline_499}

hashline_499 [label="hashline"]


hashline_499 -> { hashtag_500}
{rank=same; hashtag_500}

hashtag_500 [label="hashtag"]


hashtag_500 -> leaf_501
leaf_501  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_485 -> { raw_502}
{rank=same; raw_502}

raw_502 [label="raw"]


raw_502 -> leaf_503
leaf_503  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
may contain any number of blocks.
"]
prose_486 -> { raw_504}
{rank=same; raw_504}

raw_504 [label="raw"]


raw_504 -> leaf_505
leaf_505  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
\"begins\" means first non-whitespace character. Indentation levels are tracked by
Nim rules, obviously a Grimoire document can contain no tab marks
and if any wander in they become four spaces.
"]
prose_487 -> { raw_506}
{rank=same; raw_506}

raw_506 [label="raw"]


raw_506 -> leaf_507
leaf_507  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Contra other block forms, tags may not precede a headline.
"]
section_488 -> { header_508 prose_509 prose_510 prose_511}
{rank=same; header_508 prose_509 prose_510 prose_511}

header_508 [label="4 : Header Lines"]

prose_509 [label="prose"]

prose_510 [label="prose"]

prose_511 [label="prose"]


header_508 -> leaf_512
leaf_512  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Header Lines"]
prose_509 -> { raw_513 prespace_514 literal_515 raw_516}
{rank=same; raw_513 prespace_514 literal_515 raw_516}

raw_513 [label="raw"]

prespace_514 [label="prespace"]

literal_515 [label="literal"]

raw_516 [label="raw"]


raw_513 -> leaf_517
leaf_517  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Anything after a run of"]
prespace_514 -> leaf_518
leaf_518  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_515 -> leaf_519
leaf_519  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_516 -> leaf_520
leaf_520  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and a space, and before a newline, is
a header line.
"]
prose_510 -> { raw_521}
{rank=same; raw_521}

raw_521 [label="raw"]


raw_521 -> leaf_522
leaf_522  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Header lines and list lines are structured identically. If I discover
a necessary exception, I'll note it.
"]
prose_511 -> { raw_523}
{rank=same; raw_523}

raw_523 [label="raw"]


raw_523 -> leaf_524
leaf_524  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That structure is discussed under [[*Lists][lists]].
"]
section_489 -> { header_525 prose_526 prose_527 structure_528 prose_529 prose_530 structure_531}
{rank=same; header_525 prose_526 prose_527 structure_528 prose_529 prose_530 structure_531}

header_525 [label="3 : Prose blocks"]

prose_526 [label="prose"]

prose_527 [label="prose"]

structure_528 [label="structure"]

prose_529 [label="prose"]

prose_530 [label="prose"]

structure_531 [label="structure"]


header_525 -> leaf_532
leaf_532  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Prose blocks"]
prose_526 -> { raw_533}
{rank=same; raw_533}

raw_533 [label="raw"]


raw_533 -> leaf_534
leaf_534  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A prose block is preceded and followed by a single newline. Extraneous
whitespace on the bare line is filtered.
"]
prose_527 -> { raw_535}
{rank=same; raw_535}

raw_535 [label="raw"]


raw_535 -> leaf_536
leaf_536  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose blocks may not be indented in a semantically meaningful way.
"]
structure_528 -> { hashline_537}
{rank=same; hashline_537}

hashline_537 [label="hashline"]


hashline_537 -> { hashtag_538}
{rank=same; hashtag_538}

hashtag_538 [label="hashtag"]


hashtag_538 -> leaf_539
leaf_539  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_529 -> { raw_540}
{rank=same; raw_540}

raw_540 [label="raw"]


raw_540 -> leaf_541
leaf_541  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
    prose
"]
prose_530 -> { raw_542}
{rank=same; raw_542}

raw_542 [label="raw"]


raw_542 -> leaf_543
leaf_543  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
        prose
"]
structure_531 -> { hashline_544}
{rank=same; hashline_544}

hashline_544 [label="hashline"]


hashline_544 -> { hashtag_545}
{rank=same; hashtag_545}

hashtag_545 [label="hashtag"]


hashtag_545 -> leaf_546
leaf_546  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_490 -> { header_547 prose_548 prose_549 prose_550 prose_551 prose_552 prose_553 prose_554 structure_555 prose_556 prose_557 prose_558 section_559}
{rank=same; header_547 prose_548 prose_549 prose_550 prose_551 prose_552 prose_553 prose_554 structure_555 prose_556 prose_557 prose_558 section_559}

header_547 [label="3 : Prose markup"]

prose_548 [label="prose"]

prose_549 [label="prose"]

prose_550 [label="prose"]

prose_551 [label="prose"]

prose_552 [label="prose"]

prose_553 [label="prose"]

prose_554 [label="prose"]

structure_555 [label="structure"]

prose_556 [label="prose"]

prose_557 [label="prose"]

prose_558 [label="prose"]

section_559 [label="section: 482-488"]


header_547 -> leaf_560
leaf_560  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Prose markup"]
prose_548 -> { raw_561}
{rank=same; raw_561}

raw_561 [label="raw"]


raw_561 -> leaf_562
leaf_562  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Prose markup rules apply in any prose contexts, not just for prose blocks.
"]
prose_549 -> { raw_563 prespace_564 literal_565 raw_566 prespace_567 literal_568 raw_569 prespace_570 literal_571 raw_572 prespace_573 literal_574 raw_575 prespace_576 literal_577 raw_578 prespace_579 literal_580 raw_581}
{rank=same; raw_563 prespace_564 literal_565 raw_566 prespace_567 literal_568 raw_569 prespace_570 literal_571 raw_572 prespace_573 literal_574 raw_575 prespace_576 literal_577 raw_578 prespace_579 literal_580 raw_581}

raw_563 [label="raw"]

prespace_564 [label="prespace"]

literal_565 [label="literal"]

raw_566 [label="raw"]

prespace_567 [label="prespace"]

literal_568 [label="literal"]

raw_569 [label="raw"]

prespace_570 [label="prespace"]

literal_571 [label="literal"]

raw_572 [label="raw"]

prespace_573 [label="prespace"]

literal_574 [label="literal"]

raw_575 [label="raw"]

prespace_576 [label="prespace"]

literal_577 [label="literal"]

raw_578 [label="raw"]

prespace_579 [label="prespace"]

literal_580 [label="literal"]

raw_581 [label="raw"]


raw_563 -> leaf_582
leaf_582  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We mark"]
prespace_564 -> leaf_583
leaf_583  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_565 -> leaf_584
leaf_584  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*bold*"]
raw_566 -> leaf_585
leaf_585  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
prespace_567 -> leaf_586
leaf_586  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_568 -> leaf_587
leaf_587  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/italic/"]
raw_569 -> leaf_588
leaf_588  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
prespace_570 -> leaf_589
leaf_589  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_571 -> leaf_590
leaf_590  [color=Gray,shape=rectangle,fontname=Inconsolata,label="_underline_"]
raw_572 -> leaf_591
leaf_591  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
prespace_573 -> leaf_592
leaf_592  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_574 -> leaf_593
leaf_593  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~strikethrough~"]
raw_575 -> leaf_594
leaf_594  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", 
and"]
prespace_576 -> leaf_595
leaf_595  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_577 -> leaf_596
leaf_596  [color=Gray,shape=rectangle,fontname=Inconsolata,label="​"]
raw_578 -> leaf_597
leaf_597  [color=Gray,shape=rectangle,fontname=Inconsolata,label="literal=​=, using the indicated marks. They must not be separated 
with whitespace from the connecting prose. Any number may be used and matched,
whitespace is allowed, so"]
prespace_579 -> leaf_598
leaf_598  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_580 -> leaf_599
leaf_599  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**bold math: 4 * 5**"]
raw_581 -> leaf_600
leaf_600  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will highlight
correctly.
"]
prose_550 -> { raw_601 prespace_602 literal_603 raw_604}
{rank=same; raw_601 prespace_602 literal_603 raw_604}

raw_601 [label="raw"]

prespace_602 [label="prespace"]

literal_603 [label="literal"]

raw_604 [label="raw"]


raw_601 -> leaf_605
leaf_605  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is also [[*Inline%20Code][Inline Code]], which is formatted"]
prespace_602 -> leaf_606
leaf_606  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_603 -> leaf_607
leaf_607  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`code`"]
raw_604 -> leaf_608
leaf_608  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_551 -> { raw_609}
{rank=same; raw_609}

raw_609 [label="raw"]


raw_609 -> leaf_610
leaf_610  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These all follow the prose markup rule: any number of the starting
character matches the same number of the ending character in the
document string.
"]
prose_552 -> { raw_611 prespace_612 literal_613 raw_614 prespace_615 literal_616 raw_617 prespace_618 literal_619 raw_620 prespace_621 literal_622 raw_623}
{rank=same; raw_611 prespace_612 literal_613 raw_614 prespace_615 literal_616 raw_617 prespace_618 literal_619 raw_620 prespace_621 literal_622 raw_623}

raw_611 [label="raw"]

prespace_612 [label="prespace"]

literal_613 [label="literal"]

raw_614 [label="raw"]

prespace_615 [label="prespace"]

literal_616 [label="literal"]

raw_617 [label="raw"]

prespace_618 [label="prespace"]

literal_619 [label="literal"]

raw_620 [label="raw"]

prespace_621 [label="prespace"]

literal_622 [label="literal"]

raw_623 [label="raw"]


raw_611 -> leaf_624
leaf_624  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We make subscripts mildly annoying,"]
prespace_612 -> leaf_625
leaf_625  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_613 -> leaf_626
leaf_626  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sub__script"]
raw_614 -> leaf_627
leaf_627  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
prespace_615 -> leaf_628
leaf_628  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_616 -> leaf_629
leaf_629  [color=Gray,shape=rectangle,fontname=Inconsolata,label="super^^script"]
raw_617 -> leaf_630
leaf_630  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", 
to avoid colliding the former with"]
prespace_618 -> leaf_631
leaf_631  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_619 -> leaf_632
leaf_632  [color=Gray,shape=rectangle,fontname=Inconsolata,label="snake_case"]
raw_620 -> leaf_633
leaf_633  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". That's a lot of ways 
to parse the"]
prespace_621 -> leaf_634
leaf_634  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_622 -> leaf_635
leaf_635  [color=Gray,shape=rectangle,fontname=Inconsolata,label="_"]
raw_623 -> leaf_636
leaf_636  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" character...
"]
prose_553 -> { raw_637 prespace_638 literal_639 raw_640}
{rank=same; raw_637 prespace_638 literal_639 raw_640}

raw_637 [label="raw"]

prespace_638 [label="prespace"]

literal_639 [label="literal"]

raw_640 [label="raw"]


raw_637 -> leaf_641
leaf_641  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In general, prose is more 'active'  than in Babel. There are more things
you can't say without triggering a parsed data structure.  Due to quirks
of Org  involving string  escaping,"]
prespace_638 -> leaf_642
leaf_642  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_639 -> leaf_643
leaf_643  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`\\\"\\\"`"]
raw_640 -> leaf_644
leaf_644  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  can't be  literally quoted
without repercussions. Check  out the source if you enjoy pounding your
head in frustration at the nastiness of escaped strings.
"]
prose_554 -> { raw_645}
{rank=same; raw_645}

raw_645 [label="raw"]


raw_645 -> leaf_646
leaf_646  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Let's just use a code block:
"]
structure_555 -> { hashline_647}
{rank=same; hashline_647}

hashline_647 [label="hashline"]


hashline_647 -> { hashtag_648}
{rank=same; hashtag_648}

hashtag_648 [label="hashtag"]


hashtag_648 -> leaf_649
leaf_649  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_556 -> { raw_650 prespace_651 literal_652 raw_653 prespace_654 bold_655 raw_656}
{rank=same; raw_650 prespace_651 literal_652 raw_653 prespace_654 bold_655 raw_656}

raw_650 [label="raw"]

prespace_651 [label="prespace"]

literal_652 [label="literal"]

raw_653 [label="raw"]

prespace_654 [label="prespace"]

bold_655 [label="bold"]

raw_656 [label="raw"]


raw_650 -> leaf_657
leaf_657  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
one, of the \" character. This is pretty-printed in edit mode as"]
prespace_651 -> leaf_658
leaf_658  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_652 -> leaf_659
leaf_659  [color=Gray,shape=rectangle,fontname=Inconsolata,label="‟literal”"]
raw_653 -> leaf_660
leaf_660  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
but such a string does"]
prespace_654 -> leaf_661
leaf_661  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
bold_655 -> leaf_662
leaf_662  [color=Gray,shape=rectangle,fontname=Inconsolata,label="not"]
raw_656 -> leaf_663
leaf_663  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" create escaping, we rely on semantic highlighting
to make the distinction clear.
"]
prose_557 -> { raw_664}
{rank=same; raw_664}

raw_664 [label="raw"]


raw_664 -> leaf_665
leaf_665  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Any number of \"\"\"\" collapse into one set of such balanced quites.
"]
prose_558 -> { raw_666}
{rank=same; raw_666}

raw_666 [label="raw"]


raw_666 -> leaf_667
leaf_667  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the woven documentation, no quotation marks appear, just the string.
"]
section_559 -> { header_668 prose_669}
{rank=same; header_668 prose_669}

header_668 [label="4 : Latex"]

prose_669 [label="prose"]


header_668 -> leaf_670
leaf_670  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Latex"]
prose_669 -> { raw_671 prespace_672 literal_673 raw_674}
{rank=same; raw_671 prespace_672 literal_673 raw_674}

raw_671 [label="raw"]

prespace_672 [label="prespace"]

literal_673 [label="literal"]

raw_674 [label="raw"]


raw_671 -> leaf_675
leaf_675  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

For further markup purposes in a prose context, we escape to LaTeX. The
syntax is"]
prespace_672 -> leaf_676
leaf_676  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_673 -> leaf_677
leaf_677  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`\\latex`"]
raw_674 -> leaf_678
leaf_678  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", where the backslash causes us to use LaTeX instead
of Lua. Our TeX backend is LuaTeX, giving arbitrary levels of control from
within a Grimoire-native language.
"]
section_491 -> { header_679 prose_680 prose_681 prose_682}
{rank=same; header_679 prose_680 prose_681 prose_682}

header_679 [label="3 : Comments"]

prose_680 [label="prose"]

prose_681 [label="prose"]

prose_682 [label="prose"]


header_679 -> leaf_683
leaf_683  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Comments"]
prose_680 -> { raw_684 prespace_685 literal_686 raw_687}
{rank=same; raw_684 prespace_685 literal_686 raw_687}

raw_684 [label="raw"]

prespace_685 [label="prespace"]

literal_686 [label="literal"]

raw_687 [label="raw"]


raw_684 -> leaf_688
leaf_688  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

In a structure context, you may place line comments. These begin with"]
prespace_685 -> leaf_689
leaf_689  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_686 -> leaf_690
leaf_690  [color=Gray,shape=rectangle,fontname=Inconsolata,label="--"]
raw_687 -> leaf_691
leaf_691  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
and continue to the end of a line.
"]
prose_681 -> { raw_692 prespace_693 bold_694 raw_695}
{rank=same; raw_692 prespace_693 bold_694 raw_695}

raw_692 [label="raw"]

prespace_693 [label="prespace"]

bold_694 [label="bold"]

raw_695 [label="raw"]


raw_692 -> leaf_696
leaf_696  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Commenting out a header line, or anything else, causes it to be ignored.
It does"]
prespace_693 -> leaf_697
leaf_697  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
bold_694 -> leaf_698
leaf_698  [color=Gray,shape=rectangle,fontname=Inconsolata,label="not"]
raw_695 -> leaf_699
leaf_699  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" result in any subdata being commented out, though it will
in the case of a headline change the ownership of the owned blocks.
"]
prose_682 -> { raw_700 prespace_701 literal_702 raw_703}
{rank=same; raw_700 prespace_701 literal_702 raw_703}

raw_700 [label="raw"]

prespace_701 [label="prespace"]

literal_702 [label="literal"]

raw_703 [label="raw"]


raw_700 -> leaf_704
leaf_704  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The  tag"]
prespace_701 -> leaf_705
leaf_705  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_702 -> leaf_706
leaf_706  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#comment"]
raw_703 -> leaf_707
leaf_707  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  in a  valid tag  content position  marks the  owned
region  of  the tagged  block  as  a  comment.  Nothing within  will  be
evaluated or exported, though it will be parsed.
"]
section_492 -> { header_708 prose_709 prose_710 prose_711 prose_712 prose_713 prose_714 prose_715 prose_716 prose_717 prose_718 prose_719 prose_720 prose_721 prose_722 prose_723 prose_724 section_725}
{rank=same; header_708 prose_709 prose_710 prose_711 prose_712 prose_713 prose_714 prose_715 prose_716 prose_717 prose_718 prose_719 prose_720 prose_721 prose_722 prose_723 prose_724 section_725}

header_708 [label="3 : Marks"]

prose_709 [label="prose"]

prose_710 [label="prose"]

prose_711 [label="prose"]

prose_712 [label="prose"]

prose_713 [label="prose"]

prose_714 [label="prose"]

prose_715 [label="prose"]

prose_716 [label="prose"]

prose_717 [label="prose"]

prose_718 [label="prose"]

prose_719 [label="prose"]

prose_720 [label="prose"]

prose_721 [label="prose"]

prose_722 [label="prose"]

prose_723 [label="prose"]

prose_724 [label="prose"]

section_725 [label="section: 559-566"]


header_708 -> leaf_726
leaf_726  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Marks"]
prose_709 -> { raw_727}
{rank=same; raw_727}

raw_727 [label="raw"]


raw_727 -> leaf_728
leaf_728  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Marks provide global semantic categories for Grimoire. They may appear
anywhere, including a prose context, whitespace is required on both sides.
"]
prose_710 -> { raw_729 prespace_730 literal_731 raw_732 prespace_733 literal_734 raw_735}
{rank=same; raw_729 prespace_730 literal_731 raw_732 prespace_733 literal_734 raw_735}

raw_729 [label="raw"]

prespace_730 [label="prespace"]

literal_731 [label="literal"]

raw_732 [label="raw"]

prespace_733 [label="prespace"]

literal_734 [label="literal"]

raw_735 [label="raw"]


raw_729 -> leaf_736
leaf_736  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We use  a couple kinds  of marks: "]
prespace_730 -> leaf_737
leaf_737  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_731 -> leaf_738
leaf_738  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@names"]
raw_732 -> leaf_739
leaf_739  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" name things,  and"]
prespace_733 -> leaf_740
leaf_740  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_734 -> leaf_741
leaf_741  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#tags"]
raw_735 -> leaf_742
leaf_742  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
categorize them. Tags are semantics, while names are nominal. 
"]
prose_711 -> { raw_743 prespace_744 literal_745 raw_746 prespace_747 literal_748 raw_749}
{rank=same; raw_743 prespace_744 literal_745 raw_746 prespace_747 literal_748 raw_749}

raw_743 [label="raw"]

prespace_744 [label="prespace"]

literal_745 [label="literal"]

raw_746 [label="raw"]

prespace_747 [label="prespace"]

literal_748 [label="literal"]

raw_749 [label="raw"]


raw_743 -> leaf_750
leaf_750  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags that  are boundaries are  paired as "]
prespace_744 -> leaf_751
leaf_751  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_745 -> leaf_752
leaf_752  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#tag"]
raw_746 -> leaf_753
leaf_753  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
prespace_747 -> leaf_754
leaf_754  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_748 -> leaf_755
leaf_755  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#/tag"]
raw_749 -> leaf_756
leaf_756  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",  plus some
light sugaring. Names are never bounded
"]
prose_712 -> { raw_757}
{rank=same; raw_757}

raw_757 [label="raw"]


raw_757 -> leaf_758
leaf_758  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Marks in the first position own the following line. If there is indentation
below that line, they own that too. This doesn't affect the associativity.
"]
prose_713 -> { raw_759 prespace_760 literal_761 raw_762 prespace_763 literal_764 raw_765}
{rank=same; raw_759 prespace_760 literal_761 raw_762 prespace_763 literal_764 raw_765}

raw_759 [label="raw"]

prespace_760 [label="prespace"]

literal_761 [label="literal"]

raw_762 [label="raw"]

prespace_763 [label="prespace"]

literal_764 [label="literal"]

raw_765 [label="raw"]


raw_759 -> leaf_766
leaf_766  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Marks may be namespaced, as"]
prespace_760 -> leaf_767
leaf_767  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_761 -> leaf_768
leaf_768  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@name.subname"]
raw_762 -> leaf_769
leaf_769  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
prespace_763 -> leaf_770
leaf_770  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_764 -> leaf_771
leaf_771  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#tag.sub-tag.sub-tag"]
raw_765 -> leaf_772
leaf_772  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_714 -> { raw_773 prespace_774 literal_775 raw_776}
{rank=same; raw_773 prespace_774 literal_775 raw_776}

raw_773 [label="raw"]

prespace_774 [label="prespace"]

literal_775 [label="literal"]

raw_776 [label="raw"]


raw_773 -> leaf_777
leaf_777  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If  you  require   further  namespacing, "]
prespace_774 -> leaf_778
leaf_778  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_775 -> leaf_779
leaf_779  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@many/levels/java.class"]
raw_776 -> leaf_780
leaf_780  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  and
=#mojo/nation.space/station=  is your  friend. Codices (that is, projects
following the bridge conventions for organization) will use namespacing
in a consistent way. 
"]
prose_715 -> { raw_781}
{rank=same; raw_781}

raw_781 [label="raw"]


raw_781 -> leaf_782
leaf_782  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
As I continue to muse on it, I  can think of no reason why marks couldn't follow
URI syntax,  or at  least mirror  it closely.  Chaining marks  is not  valid, so
=@named@example.com= could be a valid name. 
"]
prose_716 -> { raw_783 prespace_784 literal_785 raw_786}
{rank=same; raw_783 prespace_784 literal_785 raw_786}

raw_783 [label="raw"]

prespace_784 [label="prespace"]

literal_785 [label="literal"]

raw_786 [label="raw"]


raw_783 -> leaf_787
leaf_787  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This would mean we could say something like"]
prespace_784 -> leaf_788
leaf_788  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_785 -> leaf_789
leaf_789  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@file://~/usr/blah"]
raw_786 -> leaf_790
leaf_790  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_717 -> { raw_791 prespace_792 literal_793 raw_794}
{rank=same; raw_791 prespace_792 literal_793 raw_794}

raw_791 [label="raw"]

prespace_792 [label="prespace"]

literal_793 [label="literal"]

raw_794 [label="raw"]


raw_791 -> leaf_795
leaf_795  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Or"]
prespace_792 -> leaf_796
leaf_796  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_793 -> leaf_797
leaf_797  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!/usr/bin/perl/"]
raw_794 -> leaf_798
leaf_798  [color=Gray,shape=rectangle,fontname=Inconsolata,label="...
"]
prose_718 -> { raw_799}
{rank=same; raw_799}

raw_799 [label="raw"]


raw_799 -> leaf_800
leaf_800  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Yes. This  is a good idea.  Let's do this.  It doesn't displace [[*Links][link]]  syntax, it
enhances it. A  URI [[http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax][may not begin with  a slash]] so this is  parse-clean for tags
and names both. Tags aren't intended to  be user extensible in the narrow sense,
but uniformity is a virtue.
"]
prose_719 -> { raw_801}
{rank=same; raw_801}

raw_801 [label="raw"]


raw_801 -> leaf_802
leaf_802  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't know why you might want to stick a query in a tag. It's not my
place to know. We just slap a parser on that puppy and continue.
"]
prose_720 -> { raw_803}
{rank=same; raw_803}

raw_803 [label="raw"]


raw_803 -> leaf_804
leaf_804  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Implication: The hash or at should be syntax highlighted a different color
from the tag. I'd say hash and at get the same color, with categories and
symbols getting different ones.
"]
prose_721 -> { raw_805}
{rank=same; raw_805}

raw_805 [label="raw"]


raw_805 -> leaf_806
leaf_806  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Apparently, [[http://blog.nig.gl/post/48802013022/although-parentheses-are-technically-allowed-in][parentheses are allowed in URLs]], but follow the link, they
suck and you should never use them. They play badly with our calling
convention for named structures, and aren't allowed in our schema.
"]
prose_722 -> { raw_807 prespace_808 literal_809 raw_810}
{rank=same; raw_807 prespace_808 literal_809 raw_810}

raw_807 [label="raw"]

prespace_808 [label="prespace"]

literal_809 [label="literal"]

raw_810 [label="raw"]


raw_807 -> leaf_811
leaf_811  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not a real URI anyway, or it can be but it's also allowed to be a legal
fragment without the handle. In our case the assumed handle is"]
prespace_808 -> leaf_812
leaf_812  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_809 -> leaf_813
leaf_813  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grimoire://"]
raw_810 -> leaf_814
leaf_814  [color=Gray,shape=rectangle,fontname=Inconsolata,label="?
"]
prose_723 -> { raw_815}
{rank=same; raw_815}

raw_815 [label="raw"]


raw_815 -> leaf_816
leaf_816  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Not a real URI. But an acceptable fake one.
"]
prose_724 -> { raw_817 prespace_818 literal_819 raw_820 prespace_821 literal_822 raw_823}
{rank=same; raw_817 prespace_818 literal_819 raw_820 prespace_821 literal_822 raw_823}

raw_817 [label="raw"]

prespace_818 [label="prespace"]

literal_819 [label="literal"]

raw_820 [label="raw"]

prespace_821 [label="prespace"]

literal_822 [label="literal"]

raw_823 [label="raw"]


raw_817 -> leaf_824
leaf_824  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The actual rule for a mark is that it begins with"]
prespace_818 -> leaf_825
leaf_825  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_819 -> leaf_826
leaf_826  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@"]
raw_820 -> leaf_827
leaf_827  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
prespace_821 -> leaf_828
leaf_828  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_822 -> leaf_829
leaf_829  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#"]
raw_823 -> leaf_830
leaf_830  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and is surrounded
by whitespace. Internal parsing of the mark is part of recognition, anything 
not recognized is subsequently ignored. It's still considered a mark for e.g. 
weaving purposes. 


"]
section_725 -> { header_831 prose_832 prose_833}
{rank=same; header_831 prose_832 prose_833}

header_831 [label="4 : Plural Hashtags"]

prose_832 [label="prose"]

prose_833 [label="prose"]


header_831 -> leaf_834
leaf_834  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Plural Hashtags"]
prose_832 -> { raw_835 prespace_836 literal_837 raw_838 prespace_839 literal_840 raw_841}
{rank=same; raw_835 prespace_836 literal_837 raw_838 prespace_839 literal_840 raw_841}

raw_835 [label="raw"]

prespace_836 [label="prespace"]

literal_837 [label="literal"]

raw_838 [label="raw"]

prespace_839 [label="prespace"]

literal_840 [label="literal"]

raw_841 [label="raw"]


raw_835 -> leaf_842
leaf_842  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

In some cases, such as"]
prespace_836 -> leaf_843
leaf_843  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_837 -> leaf_844
leaf_844  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#formula"]
raw_838 -> leaf_845
leaf_845  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
prespace_839 -> leaf_846
leaf_846  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_840 -> leaf_847
leaf_847  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#formulas"]
raw_841 -> leaf_848
leaf_848  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", a tag may have a
singular or plural form. These are equivalent from the runtimes perspective.
"]
prose_833 -> { raw_849 prespace_850 literal_851 raw_852 prespace_853 literal_854 raw_855}
{rank=same; raw_849 prespace_850 literal_851 raw_852 prespace_853 literal_854 raw_855}

raw_849 [label="raw"]

prespace_850 [label="prespace"]

literal_851 [label="literal"]

raw_852 [label="raw"]

prespace_853 [label="prespace"]

literal_854 [label="literal"]

raw_855 [label="raw"]


raw_849 -> leaf_856
leaf_856  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The same concept applies to pairs such as"]
prespace_850 -> leaf_857
leaf_857  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_851 -> leaf_858
leaf_858  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#export"]
raw_852 -> leaf_859
leaf_859  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
prespace_853 -> leaf_860
leaf_860  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_854 -> leaf_861
leaf_861  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#exports"]
raw_855 -> leaf_862
leaf_862  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", though
the linguistic distinction is not that of plurality.
"]
section_493 -> { header_863 prose_864 prose_865 prose_866 prose_867 prose_868 prose_869}
{rank=same; header_863 prose_864 prose_865 prose_866 prose_867 prose_868 prose_869}

header_863 [label="3 : Classes"]

prose_864 [label="prose"]

prose_865 [label="prose"]

prose_866 [label="prose"]

prose_867 [label="prose"]

prose_868 [label="prose"]

prose_869 [label="prose"]


header_863 -> leaf_870
leaf_870  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Classes"]
prose_864 -> { raw_871}
{rank=same; raw_871}

raw_871 [label="raw"]


raw_871 -> leaf_872
leaf_872  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Tags are for Grimoire. A category provides runtime semantics,
cooperating with structure groups to provide the API. Names
play the role of a value in languages which provide a
value-variable distinction: every name within a documents reachable
namespace must be globally unique.
"]
prose_865 -> { raw_873}
{rank=same; raw_873}

raw_873 [label="raw"]


raw_873 -> leaf_874
leaf_874  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Specifically names are globally hyperstatic: any redefinition affects
the referent from the moment the parser receives it forward. Redefinitions
are warned against and have no utility, don't do it.
"]
prose_866 -> { raw_875}
{rank=same; raw_875}

raw_875 [label="raw"]


raw_875 -> leaf_876
leaf_876  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Classes are roughly equivalent to categories/hashtags, but
for the user. They have a light semantics similar to their
function in Org.
"]
prose_867 -> { raw_877 prespace_878 literal_879 raw_880 prespace_881 literal_882 raw_883}
{rank=same; raw_877 prespace_878 literal_879 raw_880 prespace_881 literal_882 raw_883}

raw_877 [label="raw"]

prespace_878 [label="prespace"]

literal_879 [label="literal"]

raw_880 [label="raw"]

prespace_881 [label="prespace"]

literal_882 [label="literal"]

raw_883 [label="raw"]


raw_877 -> leaf_884
leaf_884  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A class is defined as"]
prespace_878 -> leaf_885
leaf_885  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_879 -> leaf_886
leaf_886  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":Class:"]
raw_880 -> leaf_887
leaf_887  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
prespace_881 -> leaf_888
leaf_888  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_882 -> leaf_889
leaf_889  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":class:"]
raw_883 -> leaf_890
leaf_890  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" including
=:several:Classes:chained:=.
"]
prose_868 -> { raw_891}
{rank=same; raw_891}

raw_891 [label="raw"]


raw_891 -> leaf_892
leaf_892  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A capital letter means the class inherits onto all subgroups of the block,
a miniscule means the class is associated with the indentation level it is
found within.
"]
prose_869 -> { raw_893}
{rank=same; raw_893}

raw_893 [label="raw"]


raw_893 -> leaf_894
leaf_894  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You know you're programming a computer when class and category have distinct
semantics. At least there are no objects, and only two primitive types,
structure and prose.
"]
section_494 -> { header_895 prose_896 prose_897 structure_898 prose_899 prose_900}
{rank=same; header_895 prose_896 prose_897 structure_898 prose_899 prose_900}

header_895 [label="3 : Links"]

prose_896 [label="prose"]

prose_897 [label="prose"]

structure_898 [label="structure"]

prose_899 [label="prose"]

prose_900 [label="prose"]


header_895 -> leaf_901
leaf_901  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Links"]
prose_896 -> { raw_902}
{rank=same; raw_902}

raw_902 [label="raw"]


raw_902 -> leaf_903
leaf_903  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

There's nothing at all wrong with the syntax or behavior of Babel links.
"]
prose_897 -> { raw_904}
{rank=same; raw_904}

raw_904 [label="raw"]


raw_904 -> leaf_905
leaf_905  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which look like this:
"]
structure_898 -> { hashline_906}
{rank=same; hashline_906}

hashline_906 [label="hashline"]


hashline_906 -> { hashtag_907}
{rank=same; hashtag_907}

hashtag_907 [label="hashtag"]


hashtag_907 -> leaf_908
leaf_908  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_899 -> { raw_909 prespace_910 literal_911 raw_912}
{rank=same; raw_909 prespace_910 literal_911 raw_912}

raw_909 [label="raw"]

prespace_910 [label="prespace"]

literal_911 [label="literal"]

raw_912 [label="raw"]


raw_909 -> leaf_913
leaf_913  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We won't support legacy forms of footnoting, such as"]
prespace_910 -> leaf_914
leaf_914  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_911 -> leaf_915
leaf_915  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[1]"]
raw_912 -> leaf_916
leaf_916  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". This applies
to legacy versions of table formulas and list syntax also.
"]
prose_900 -> { raw_917}
{rank=same; raw_917}

raw_917 [label="raw"]


raw_917 -> leaf_918
leaf_918  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In Grimoire  there's one way  to do things.  At least, we  avoid variant
syntax with identical semantics.
"]
section_495 -> { header_919 prose_920 prose_921 prose_922 prose_923 prose_924 structure_925 prose_926 prose_927 prose_928 prose_929 prose_930 prose_931 prose_932 prose_933 section_934}
{rank=same; header_919 prose_920 prose_921 prose_922 prose_923 prose_924 structure_925 prose_926 prose_927 prose_928 prose_929 prose_930 prose_931 prose_932 prose_933 section_934}

header_919 [label="3 : Cookies"]

prose_920 [label="prose"]

prose_921 [label="prose"]

prose_922 [label="prose"]

prose_923 [label="prose"]

prose_924 [label="prose"]

structure_925 [label="structure"]

prose_926 [label="prose"]

prose_927 [label="prose"]

prose_928 [label="prose"]

prose_929 [label="prose"]

prose_930 [label="prose"]

prose_931 [label="prose"]

prose_932 [label="prose"]

prose_933 [label="prose"]

section_934 [label="section: 673-690"]


header_919 -> leaf_935
leaf_935  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Cookies"]
prose_920 -> { raw_936 prespace_937 literal_938 raw_939}
{rank=same; raw_936 prespace_937 literal_938 raw_939}

raw_936 [label="raw"]

prespace_937 [label="prespace"]

literal_938 [label="literal"]

raw_939 [label="raw"]


raw_936 -> leaf_940
leaf_940  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

List line contexts (header lines and list lines) may have cookies. A
cookie looks like"]
prespace_937 -> leaf_941
leaf_941  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_938 -> leaf_942
leaf_942  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[ ]"]
raw_939 -> leaf_943
leaf_943  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", it must have contents and a space on both sides.
"]
prose_921 -> { raw_944}
{rank=same; raw_944}

raw_944 [label="raw"]


raw_944 -> leaf_945
leaf_945  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies are valid after the symbol that defines the list line, but before
anything else. They are also valid at the end of a list line, in which
case they are preceded by a space and followed by a newline.
"]
prose_922 -> { raw_946}
{rank=same; raw_946}

raw_946 [label="raw"]


raw_946 -> leaf_947
leaf_947  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies are distinctive in that they may only be applied to list lines.
Most other token-like groups, specifically tags, classes, and inline drawers,
may be embedded into all prose contexts excepting literal strings.
"]
prose_923 -> { raw_948}
{rank=same; raw_948}

raw_948 [label="raw"]


raw_948 -> leaf_949
leaf_949  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies are used similarly to cookies in Org, but with consistent semantics.
A simple cookie set is \"X\" and \" \", the user cycles through them. TODO and
DONE are another option.
"]
prose_924 -> { raw_950}
{rank=same; raw_950}

raw_950 [label="raw"]


raw_950 -> leaf_951
leaf_951  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't want cookies to turn into lightweight tables. Still, saying to
the user \"you may have precisely two cookies a line\" is restrictive.
It's not a violation of the [[http://c2.com/cgi/wiki?TwoIsAnImpossibleNumber][\"Two is an Impossible Number\"]] principle,
because they're head and tail. I think this is ugly:
"]
structure_925 -> { hashline_952}
{rank=same; hashline_952}

hashline_952 [label="hashline"]


hashline_952 -> { hashtag_953}
{rank=same; hashtag_953}

hashtag_953 [label="hashtag"]


hashtag_953 -> leaf_954
leaf_954  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_926 -> { raw_955}
{rank=same; raw_955}

raw_955 [label="raw"]


raw_955 -> leaf_956
leaf_956  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You can stick a table in a list. I don't know if I mentioned, it's kind
of an obvious thing, I'll write a unit for it at some point.
"]
prose_927 -> { raw_957}
{rank=same; raw_957}

raw_957 [label="raw"]


raw_957 -> leaf_958
leaf_958  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Still. I can see a case for two on the left. Once you allow two, you allow
n, without excellent reason.
"]
prose_928 -> { raw_959}
{rank=same; raw_959}

raw_959 [label="raw"]


raw_959 -> leaf_960
leaf_960  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[[*Radio%20cookies][Radio cookies]] must be the leftmost cookie on a line, only one is of course allowed.
I could allow a single-line short form multi-radio-button interface but what
is it, a fancy text slider for some value? No. Any number of ordinary cookies
can follow. Knock yourself out.
"]
prose_929 -> { raw_961}
{rank=same; raw_961}

raw_961 [label="raw"]


raw_961 -> leaf_962
leaf_962  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Anything more than a couple and one should consider a class or a table.
Handrolling data structures is perverse in a markup language, and I'm
still tempted to forbid it.
"]
prose_930 -> { raw_963 prespace_964 literal_965 raw_966 prespace_967 literal_968 raw_969}
{rank=same; raw_963 prespace_964 literal_965 raw_966 prespace_967 literal_968 raw_969}

raw_963 [label="raw"]

prespace_964 [label="prespace"]

literal_965 [label="literal"]

raw_966 [label="raw"]

prespace_967 [label="prespace"]

literal_968 [label="literal"]

raw_969 [label="raw"]


raw_963 -> leaf_970
leaf_970  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't like distinctions without difference. A cookie at the end of a
line is filled by Grimoire, not the user. This mirrors Org's use, which is
to display either a percent or a n/m marker for completion of list items.
The user seeds the cookie, in these cases with"]
prespace_964 -> leaf_971
leaf_971  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_965 -> leaf_972
leaf_972  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%"]
raw_966 -> leaf_973
leaf_973  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
prespace_967 -> leaf_974
leaf_974  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_968 -> leaf_975
leaf_975  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/"]
raw_969 -> leaf_976
leaf_976  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and the runtime
does the rest.
"]
prose_931 -> { raw_977}
{rank=same; raw_977}

raw_977 [label="raw"]


raw_977 -> leaf_978
leaf_978  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Adding more than one such structure to the tail list would complicate the
reference syntax, which I haven't designed, and again, it's just not necessary.
Grimoire can fill in any data structure, \"n-dimensional end cookie array\"
isn't one we have a compelling need for.
"]
prose_932 -> { raw_979}
{rank=same; raw_979}

raw_979 [label="raw"]


raw_979 -> leaf_980
leaf_980  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies could interact badly with link syntax. I don't think a [bare box]
qualifies as a link in Org, clearly it doesn't, we can follow that notion
and disallow \"[]\" as a filling for cookies.
"]
prose_933 -> { raw_981}
{rank=same; raw_981}

raw_981 [label="raw"]


raw_981 -> leaf_982
leaf_982  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I also think they should be allowed in table cells, which have their own
context which is mostly handwaved right now but is prose++.
"]
section_934 -> { header_983 prose_984 prose_985 prose_986 prose_987}
{rank=same; header_983 prose_984 prose_985 prose_986 prose_987}

header_983 [label="4 : Radio cookies"]

prose_984 [label="prose"]

prose_985 [label="prose"]

prose_986 [label="prose"]

prose_987 [label="prose"]


header_983 -> leaf_988
leaf_988  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Radio cookies"]
prose_984 -> { raw_989 prespace_990 literal_991 raw_992}
{rank=same; raw_989 prespace_990 literal_991 raw_992}

raw_989 [label="raw"]

prespace_990 [label="prespace"]

literal_991 [label="literal"]

raw_992 [label="raw"]


raw_989 -> leaf_993
leaf_993  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We have one 'weird cookie'. A radio cookie, which looks like"]
prespace_990 -> leaf_994
leaf_994  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_991 -> leaf_995
leaf_995  [color=Gray,shape=rectangle,fontname=Inconsolata,label="( )"]
raw_992 -> leaf_996
leaf_996  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
must be present at the head position of list line contexts. All
list lines at the same level of indentation must have one, if one does.
"]
prose_985 -> { raw_997}
{rank=same; raw_997}

raw_997 [label="raw"]


raw_997 -> leaf_998
leaf_998  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Only one is selected at any given time. These would be awkward to add
into tables, to little gain.
"]
prose_986 -> { raw_999}
{rank=same; raw_999}

raw_999 [label="raw"]


raw_999 -> leaf_1000
leaf_1000  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This comes perilously close to pushing us into the realm of error.
The formatter adds buttons to an entire subtree if one member has it,
and if more than one is ticked off, it warns if possible or removes
all but the first mark encountered. If none are present the first
option is selected.
"]
prose_987 -> { raw_1001}
{rank=same; raw_1001}

raw_1001 [label="raw"]


raw_1001 -> leaf_1002
leaf_1002  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The runtime will not normally build an invalid radio list, but
Grimoire must import plain text.
"]
section_496 -> { header_1003 prose_1004 structure_1005 prose_1006 prose_1007 prose_1008 structure_1009 prose_1010 prose_1011 prose_1012}
{rank=same; header_1003 prose_1004 structure_1005 prose_1006 prose_1007 prose_1008 structure_1009 prose_1010 prose_1011 prose_1012}

header_1003 [label="3 : Drawers"]

prose_1004 [label="prose"]

structure_1005 [label="structure"]

prose_1006 [label="prose"]

prose_1007 [label="prose"]

prose_1008 [label="prose"]

structure_1009 [label="structure"]

prose_1010 [label="prose"]

prose_1011 [label="prose"]

prose_1012 [label="prose"]


header_1003 -> leaf_1013
leaf_1013  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Drawers"]
prose_1004 -> { raw_1014}
{rank=same; raw_1014}

raw_1014 [label="raw"]


raw_1014 -> leaf_1015
leaf_1015  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A drawer is a block that's hidden by default. The computer sees it,
the user sees ⦿, or a similar rune.
"]
structure_1005 -> { hashline_1016}
{rank=same; hashline_1016}

hashline_1016 [label="hashline"]


hashline_1016 -> { hashtag_1017}
{rank=same; hashtag_1017}

hashtag_1017 [label="hashtag"]


hashtag_1017 -> leaf_1018
leaf_1018  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1006 -> { raw_1019}
{rank=same; raw_1019}

raw_1019 [label="raw"]


raw_1019 -> leaf_1020
leaf_1020  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
without opening it. Deleting into an ordinary fold marker opens the fold,
deleting towards a drawer marker skips past it.
"]
prose_1007 -> { raw_1021 prespace_1022 literal_1023 raw_1024 prespace_1025 literal_1026 raw_1027 prespace_1028 literal_1029 raw_1030}
{rank=same; raw_1021 prespace_1022 literal_1023 raw_1024 prespace_1025 literal_1026 raw_1027 prespace_1028 literal_1029 raw_1030}

raw_1021 [label="raw"]

prespace_1022 [label="prespace"]

literal_1023 [label="literal"]

raw_1024 [label="raw"]

prespace_1025 [label="prespace"]

literal_1026 [label="literal"]

raw_1027 [label="raw"]

prespace_1028 [label="prespace"]

literal_1029 [label="literal"]

raw_1030 [label="raw"]


raw_1021 -> leaf_1031
leaf_1031  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
=a-drawer=  is  a type,  not  a  name, something  like "]
prespace_1022 -> leaf_1032
leaf_1032  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1023 -> leaf_1033
leaf_1033  [color=Gray,shape=rectangle,fontname=Inconsolata,label="weave"]
raw_1024 -> leaf_1034
leaf_1034  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  or"]
prespace_1025 -> leaf_1035
leaf_1035  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1026 -> leaf_1036
leaf_1036  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tangle"]
raw_1027 -> leaf_1037
leaf_1037  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  in
practice. This may or  may not be supported with a"]
prespace_1028 -> leaf_1038
leaf_1038  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1029 -> leaf_1039
leaf_1039  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#weave"]
raw_1030 -> leaf_1040
leaf_1040  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  tag. 
"]
prose_1008 -> { raw_1041}
{rank=same; raw_1041}

raw_1041 [label="raw"]


raw_1041 -> leaf_1042
leaf_1042  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm not entirely sure how to interact names with drawers, perhaps like this:
"]
structure_1009 -> { hashline_1043}
{rank=same; hashline_1043}

hashline_1043 [label="hashline"]


hashline_1043 -> { hashtag_1044}
{rank=same; hashtag_1044}

hashtag_1044 [label="hashtag"]


hashtag_1044 -> leaf_1045
leaf_1045  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1010 -> { raw_1046}
{rank=same; raw_1046}

raw_1046 [label="raw"]


raw_1046 -> leaf_1047
leaf_1047  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
should keep it closed unless it's  open, those are the only additional semantics
associated.
"]
prose_1011 -> { raw_1048}
{rank=same; raw_1048}

raw_1048 [label="raw"]


raw_1048 -> leaf_1049
leaf_1049  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This lets master wizards embed unobtrusive magic into documents for apprentice
wizards to spell with.
"]
prose_1012 -> { raw_1050 prespace_1051 literal_1052 raw_1053}
{rank=same; raw_1050 prespace_1051 literal_1052 raw_1053}

raw_1050 [label="raw"]

prespace_1051 [label="prespace"]

literal_1052 [label="literal"]

raw_1053 [label="raw"]


raw_1050 -> leaf_1054
leaf_1054  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An inline drawer looks like"]
prespace_1051 -> leaf_1055
leaf_1055  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1052 -> leaf_1056
leaf_1056  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[[some contents]]:"]
raw_1053 -> leaf_1057
leaf_1057  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  As usual when we say \"inline\" it
can be as long as you want. Being anonymous, because untagged, the only semantics
of such a drawer are to hide the contents in source mode. 
"]
section_497 -> { header_1058 prose_1059 prose_1060 prose_1061 structure_1062 section_1063}
{rank=same; header_1058 prose_1059 prose_1060 prose_1061 structure_1062 section_1063}

header_1058 [label="3 : Runes"]

prose_1059 [label="prose"]

prose_1060 [label="prose"]

prose_1061 [label="prose"]

structure_1062 [label="structure"]

section_1063 [label="section: 742-742"]


header_1058 -> leaf_1064
leaf_1064  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Runes"]
prose_1059 -> { raw_1065}
{rank=same; raw_1065}

raw_1065 [label="raw"]


raw_1065 -> leaf_1066
leaf_1066  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

After drawers is as good a place to put runes as any.
"]
prose_1060 -> { raw_1067}
{rank=same; raw_1067}

raw_1067 [label="raw"]


raw_1067 -> leaf_1068
leaf_1068  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Runes are characters drawn from the pictographic zones of Unicode,
which describe semantic activity within a document.
"]
prose_1061 -> { raw_1069}
{rank=same; raw_1069}

raw_1069 [label="raw"]


raw_1069 -> leaf_1070
leaf_1070  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Contra Org, when we have something like the aformentioned:
"]
structure_1062 -> { hashline_1071}
{rank=same; hashline_1071}

hashline_1071 [label="hashline"]


hashline_1071 -> { hashtag_1072}
{rank=same; hashtag_1072}

hashtag_1072 [label="hashtag"]


hashtag_1072 -> leaf_1073
leaf_1073  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_1063 -> { header_1074 prose_1075 section_1076}
{rank=same; header_1074 prose_1075 section_1076}

header_1074 [label="1 : Top Header ▼"]

prose_1075 [label="prose"]

section_1076 [label="section: 743-924"]


header_1074 -> leaf_1077
leaf_1077  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Top Header ▼"]
prose_1075 -> { raw_1078}
{rank=same; raw_1078}

raw_1078 [label="raw"]


raw_1078 -> leaf_1079
leaf_1079  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_1076 -> { header_1080 structure_1081 prose_1082 prose_1083 prose_1084 prose_1085 prose_1086 prose_1087 prose_1088 section_1089 section_1090 section_1091 section_1092 section_1093}
{rank=same; header_1080 structure_1081 prose_1082 prose_1083 prose_1084 prose_1085 prose_1086 prose_1087 prose_1088 section_1089 section_1090 section_1091 section_1092 section_1093}

header_1080 [label="2 : Second Header ►"]

structure_1081 [label="structure"]

prose_1082 [label="prose"]

prose_1083 [label="prose"]

prose_1084 [label="prose"]

prose_1085 [label="prose"]

prose_1086 [label="prose"]

prose_1087 [label="prose"]

prose_1088 [label="prose"]

section_1089 [label="section: 772-822"]

section_1090 [label="section: 823-843"]

section_1091 [label="section: 844-910"]

section_1092 [label="section: 911-924"]

section_1093 [label="section: 925-963"]


header_1080 -> leaf_1094
leaf_1094  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   ** Second Header ►"]
structure_1081 -> { hashline_1095}
{rank=same; hashline_1095}

hashline_1095 [label="hashline"]


hashline_1095 -> { hashtag_1096}
{rank=same; hashtag_1096}

hashtag_1096 [label="hashtag"]


hashtag_1096 -> leaf_1097
leaf_1097  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1082 -> { raw_1098}
{rank=same; raw_1098}

raw_1098 [label="raw"]


raw_1098 -> leaf_1099
leaf_1099  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
any transformation we may take. If you load up last Wednesday's
version of something, it will be in last Wednesday's fold state.
"]
prose_1083 -> { raw_1100}
{rank=same; raw_1100}

raw_1100 [label="raw"]


raw_1100 -> leaf_1101
leaf_1101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This lets us have richer folding semantics, like \"don't unfold when
cycling\". It lets us have richer drawer semantics, and so on.
"]
prose_1084 -> { raw_1102}
{rank=same; raw_1102}

raw_1102 [label="raw"]


raw_1102 -> leaf_1103
leaf_1103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We will reserve a number of characters for this purpose, at least
"]
prose_1085 -> { raw_1104}
{rank=same; raw_1104}

raw_1104 [label="raw"]


raw_1104 -> leaf_1105
leaf_1105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
| ▼ |  ► | ⦿ |
    |
"]
prose_1086 -> { raw_1106}
{rank=same; raw_1106}

raw_1106 [label="raw"]


raw_1106 -> leaf_1107
leaf_1107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's legal to delete runes, like anything else. It's also legal to
insert them manually. Neither of these paradigms is typical;
deleting into a rune may or may not cause it to disappear in
normal edit mode.
"]
prose_1087 -> { raw_1108}
{rank=same; raw_1108}

raw_1108 [label="raw"]


raw_1108 -> leaf_1109
leaf_1109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Runes, like absolutely everything in Grimoire, are prose if encountered
in a context where they aren't valid structure.
"]
prose_1088 -> { raw_1110}
{rank=same; raw_1110}

raw_1110 [label="raw"]


raw_1110 -> leaf_1111
leaf_1111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We will most likely reuse runes inside cookies, though it's just as valid
and quite typical to use normal letters or words.
"]
section_1089 -> { header_1112 prose_1113 prose_1114 structure_1115 prose_1116 prose_1117 structure_1118 structure_1119}
{rank=same; header_1112 prose_1113 prose_1114 structure_1115 prose_1116 prose_1117 structure_1118 structure_1119}

header_1112 [label="3 : Lists"]

prose_1113 [label="prose"]

prose_1114 [label="prose"]

structure_1115 [label="structure"]

prose_1116 [label="prose"]

prose_1117 [label="prose"]

structure_1118 [label="structure"]

structure_1119 [label="structure"]


header_1112 -> leaf_1120
leaf_1120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Lists"]
prose_1113 -> { raw_1121}
{rank=same; raw_1121}

raw_1121 [label="raw"]


raw_1121 -> leaf_1122
leaf_1122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Something that irks me about Org is basically historic. It was a TODO
list first, and became a heiarchical document editor later. As a result,
the functions that let you tag, track, and so on, are in the wrong place;
an Org file has to choose whether or not it's a task list or a document,
which doesn't fit the metalanguage paradigm cleanly.
"]
prose_1114 -> { raw_1123}
{rank=same; raw_1123}

raw_1123 [label="raw"]


raw_1123 -> leaf_1124
leaf_1124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A list looks like this:
"]
structure_1115 -> { hashline_1125}
{rank=same; hashline_1125}

hashline_1125 [label="hashline"]


hashline_1125 -> { hashtag_1126}
{rank=same; hashtag_1126}

hashtag_1126 [label="hashtag"]


hashtag_1126 -> leaf_1127
leaf_1127  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1116 -> { raw_1128}
{rank=same; raw_1128}

raw_1128 [label="raw"]


raw_1128 -> leaf_1129
leaf_1129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
and we have radio buttons.
"]
prose_1117 -> { raw_1130}
{rank=same; raw_1130}

raw_1130 [label="raw"]


raw_1130 -> leaf_1131
leaf_1131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We also have whitespace lists:
"]
structure_1118 -> { hashline_1132}
{rank=same; hashline_1132}

hashline_1132 [label="hashline"]


hashline_1132 -> { hashtag_1133}
{rank=same; hashtag_1133}

hashtag_1133 [label="hashtag"]


hashtag_1133 -> leaf_1134
leaf_1134  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1119 -> { hashline_1135}
{rank=same; hashline_1135}

hashline_1135 [label="hashline"]


hashline_1135 -> { hashtag_1136}
{rank=same; hashtag_1136}

hashtag_1136 [label="hashtag"]


hashtag_1136 -> leaf_1137
leaf_1137  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_1090 -> { header_1138 prose_1139 prose_1140 prose_1141 prose_1142 prose_1143}
{rank=same; header_1138 prose_1139 prose_1140 prose_1141 prose_1142 prose_1143}

header_1138 [label="3 : Embedded Data"]

prose_1139 [label="prose"]

prose_1140 [label="prose"]

prose_1141 [label="prose"]

prose_1142 [label="prose"]

prose_1143 [label="prose"]


header_1138 -> leaf_1144
leaf_1144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Embedded Data"]
prose_1139 -> { raw_1145 prespace_1146 literal_1147 raw_1148 prespace_1149 literal_1150 raw_1151 prespace_1152 literal_1153 raw_1154 prespace_1155 literal_1156 raw_1157 prespace_1158 bold_1159 raw_1160 prespace_1161 bold_1162 raw_1163 prespace_1164 literal_1165 raw_1166 prespace_1167 bold_1168 raw_1169 prespace_1170 bold_1171 raw_1172}
{rank=same; raw_1145 prespace_1146 literal_1147 raw_1148 prespace_1149 literal_1150 raw_1151 prespace_1152 literal_1153 raw_1154 prespace_1155 literal_1156 raw_1157 prespace_1158 bold_1159 raw_1160 prespace_1161 bold_1162 raw_1163 prespace_1164 literal_1165 raw_1166 prespace_1167 bold_1168 raw_1169 prespace_1170 bold_1171 raw_1172}

raw_1145 [label="raw"]

prespace_1146 [label="prespace"]

literal_1147 [label="literal"]

raw_1148 [label="raw"]

prespace_1149 [label="prespace"]

literal_1150 [label="literal"]

raw_1151 [label="raw"]

prespace_1152 [label="prespace"]

literal_1153 [label="literal"]

raw_1154 [label="raw"]

prespace_1155 [label="prespace"]

literal_1156 [label="literal"]

raw_1157 [label="raw"]

prespace_1158 [label="prespace"]

bold_1159 [label="bold"]

raw_1160 [label="raw"]

prespace_1161 [label="prespace"]

bold_1162 [label="bold"]

raw_1163 [label="raw"]

prespace_1164 [label="prespace"]

literal_1165 [label="literal"]

raw_1166 [label="raw"]

prespace_1167 [label="prespace"]

bold_1168 [label="bold"]

raw_1169 [label="raw"]

prespace_1170 [label="prespace"]

bold_1171 [label="bold"]

raw_1172 [label="raw"]


raw_1145 -> leaf_1173
leaf_1173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Anything found in prose between"]
prespace_1146 -> leaf_1174
leaf_1174  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1147 -> leaf_1175
leaf_1175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{"]
raw_1148 -> leaf_1176
leaf_1176  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
prespace_1149 -> leaf_1177
leaf_1177  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1150 -> leaf_1178
leaf_1178  [color=Gray,shape=rectangle,fontname=Inconsolata,label="}"]
raw_1151 -> leaf_1179
leaf_1179  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is EDN. Note that the
outermost pair of curlies denotes a boundary."]
prespace_1152 -> leaf_1180
leaf_1180  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1153 -> leaf_1181
leaf_1181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{ foo }"]
raw_1154 -> leaf_1182
leaf_1182  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the symbol
foo,"]
prespace_1155 -> leaf_1183
leaf_1183  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1156 -> leaf_1184
leaf_1184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{ foo bar }"]
raw_1157 -> leaf_1185
leaf_1185  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the symbol"]
prespace_1158 -> leaf_1186
leaf_1186  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
bold_1159 -> leaf_1187
leaf_1187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="foo"]
raw_1160 -> leaf_1188
leaf_1188  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and the symbol"]
prespace_1161 -> leaf_1189
leaf_1189  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
bold_1162 -> leaf_1190
leaf_1190  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bar"]
raw_1163 -> leaf_1191
leaf_1191  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
prespace_1164 -> leaf_1192
leaf_1192  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1165 -> leaf_1193
leaf_1193  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{{foo bar}}"]
raw_1166 -> leaf_1194
leaf_1194  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is
a map with key"]
prespace_1167 -> leaf_1195
leaf_1195  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
bold_1168 -> leaf_1196
leaf_1196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="foo"]
raw_1169 -> leaf_1197
leaf_1197  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and value"]
prespace_1170 -> leaf_1198
leaf_1198  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
bold_1171 -> leaf_1199
leaf_1199  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bar"]
raw_1172 -> leaf_1200
leaf_1200  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_1140 -> { raw_1201}
{rank=same; raw_1201}

raw_1201 [label="raw"]


raw_1201 -> leaf_1202
leaf_1202  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To quote the [[https://github.com/edn-format/edn][spec]], \"There is no enclosing element at the top level\". The
braces mark the boundaries of the data region.
"]
prose_1141 -> { raw_1203}
{rank=same; raw_1203}

raw_1203 [label="raw"]


raw_1203 -> leaf_1204
leaf_1204  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is a mapping between lists and EDN, the basics of which will be clear
to the astute reader. The non-basics are unclear to the author as well.
"]
prose_1142 -> { raw_1205}
{rank=same; raw_1205}

raw_1205 [label="raw"]


raw_1205 -> leaf_1206
leaf_1206  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Unresolved: may data be inlined into prose? What would that even mean?
slap some colors on it in the document? If we want to provide a 'this is
code but not for interpretation' mark, we will, it won't be EDN specific.
Inlining colorized code is not high on my todo list.
"]
prose_1143 -> { raw_1207}
{rank=same; raw_1207}

raw_1207 [label="raw"]


raw_1207 -> leaf_1208
leaf_1208  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't think you can. Embeds are down here with lists and
tables in 'things you can't inline', for now.
"]
section_1091 -> { header_1209 prose_1210 prose_1211 prose_1212 prose_1213 structure_1214 structure_1215 structure_1216 structure_1217 prose_1218 prose_1219 structure_1220 structure_1221 structure_1222 prose_1223 prose_1224 prose_1225}
{rank=same; header_1209 prose_1210 prose_1211 prose_1212 prose_1213 structure_1214 structure_1215 structure_1216 structure_1217 prose_1218 prose_1219 structure_1220 structure_1221 structure_1222 prose_1223 prose_1224 prose_1225}

header_1209 [label="3 : Tables"]

prose_1210 [label="prose"]

prose_1211 [label="prose"]

prose_1212 [label="prose"]

prose_1213 [label="prose"]

structure_1214 [label="structure"]

structure_1215 [label="structure"]

structure_1216 [label="structure"]

structure_1217 [label="structure"]

prose_1218 [label="prose"]

prose_1219 [label="prose"]

structure_1220 [label="structure"]

structure_1221 [label="structure"]

structure_1222 [label="structure"]

prose_1223 [label="prose"]

prose_1224 [label="prose"]

prose_1225 [label="prose"]


header_1209 -> leaf_1226
leaf_1226  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Tables"]
prose_1210 -> { raw_1227}
{rank=same; raw_1227}

raw_1227 [label="raw"]


raw_1227 -> leaf_1228
leaf_1228  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The way tables work in Babel is fine and needs little polish. Any modest
improvements we make will be in the face of considerable experience.
"]
prose_1211 -> { raw_1229}
{rank=same; raw_1229}

raw_1229 [label="raw"]


raw_1229 -> leaf_1230
leaf_1230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For example, I expect there's a way to make multiple literal rows serve
as a single row in existing Org, but I don't know what it is. I'll be
playing around a lot in the coming weeks, I hope.
"]
prose_1212 -> { raw_1231}
{rank=same; raw_1231}

raw_1231 [label="raw"]


raw_1231 -> leaf_1232
leaf_1232  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Composability being an overarching goal, we can embed anything in a table
that we would put elsewhere.
"]
prose_1213 -> { raw_1233}
{rank=same; raw_1233}

raw_1233 [label="raw"]


raw_1233 -> leaf_1234
leaf_1234  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Looks something like this:
"]
structure_1214 -> { hashline_1235}
{rank=same; hashline_1235}

hashline_1235 [label="hashline"]


hashline_1235 -> { hashtag_1236}
{rank=same; hashtag_1236}

hashtag_1236 [label="hashtag"]


hashtag_1236 -> leaf_1237
leaf_1237  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1215 -> { hashline_1238}
{rank=same; hashline_1238}

hashline_1238 [label="hashline"]


hashline_1238 -> { hashtag_1239}
{rank=same; hashtag_1239}

hashtag_1239 [label="hashtag"]


hashtag_1239 -> leaf_1240
leaf_1240  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1216 -> { hashline_1241}
{rank=same; hashline_1241}

hashline_1241 [label="hashline"]


hashline_1241 -> { hashtag_1242}
{rank=same; hashtag_1242}

hashtag_1242 [label="hashtag"]


hashtag_1242 -> leaf_1243
leaf_1243  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1217 -> { hashline_1244}
{rank=same; hashline_1244}

hashline_1244 [label="hashline"]


hashline_1244 -> { hashtag_1245}
{rank=same; hashtag_1245}

hashtag_1245 [label="hashtag"]


hashtag_1245 -> leaf_1246
leaf_1246  [color=Gray,shape=rectangle,fontname=Inconsolata,label="formulas"]
prose_1218 -> { raw_1247 prespace_1248 literal_1249 raw_1250 prespace_1251 literal_1252 raw_1253 prespace_1254 literal_1255 raw_1256}
{rank=same; raw_1247 prespace_1248 literal_1249 raw_1250 prespace_1251 literal_1252 raw_1253 prespace_1254 literal_1255 raw_1256}

raw_1247 [label="raw"]

prespace_1248 [label="prespace"]

literal_1249 [label="literal"]

raw_1250 [label="raw"]

prespace_1251 [label="prespace"]

literal_1252 [label="literal"]

raw_1253 [label="raw"]

prespace_1254 [label="prespace"]

literal_1255 [label="literal"]

raw_1256 [label="raw"]


raw_1247 -> leaf_1257
leaf_1257  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A subtle point of parsing I'm not sure is correct is"]
prespace_1248 -> leaf_1258
leaf_1258  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1249 -> leaf_1259
leaf_1259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#formulas -"]
raw_1250 -> leaf_1260
leaf_1260  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
or"]
prespace_1251 -> leaf_1261
leaf_1261  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1252 -> leaf_1262
leaf_1262  [color=Gray,shape=rectangle,fontname=Inconsolata,label="- #formulas"]
raw_1253 -> leaf_1263
leaf_1263  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". I feel like by normal associativity the latter
attaches the tag to the list, then nothing to the tag,
since the rule is a tag preceded only by whitespace owns the line
after it and indentations below it. The tag doesn't affect the indentation level
of the"]
prespace_1254 -> leaf_1264
leaf_1264  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1255 -> leaf_1265
leaf_1265  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-"]
raw_1256 -> leaf_1266
leaf_1266  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which could be confusing but won't be.
"]
prose_1219 -> { raw_1267}
{rank=same; raw_1267}

raw_1267 [label="raw"]


raw_1267 -> leaf_1268
leaf_1268  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We should be able to tag tables like this:
"]
structure_1220 -> { hashline_1269}
{rank=same; hashline_1269}

hashline_1269 [label="hashline"]


hashline_1269 -> { hashtag_1270}
{rank=same; hashtag_1270}

hashtag_1270 [label="hashtag"]


hashtag_1270 -> leaf_1271
leaf_1271  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1221 -> { hashline_1272}
{rank=same; hashline_1272}

hashline_1272 [label="hashline"]


hashline_1272 -> { hashtag_1273}
{rank=same; hashtag_1273}

hashtag_1273 [label="hashtag"]


hashtag_1273 -> leaf_1274
leaf_1274  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1222 -> { hashline_1275}
{rank=same; hashline_1275}

hashline_1275 [label="hashline"]


hashline_1275 -> { hashtag_1276}
{rank=same; hashtag_1276}

hashtag_1276 [label="hashtag"]


hashtag_1276 -> leaf_1277
leaf_1277  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1223 -> { raw_1278}
{rank=same; raw_1278}

raw_1278 [label="raw"]


raw_1278 -> leaf_1279
leaf_1279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Totally okay in this context, doesn't trigger Nim rules because the table
associates to the tag anyway.
"]
prose_1224 -> { raw_1280}
{rank=same; raw_1280}

raw_1280 [label="raw"]


raw_1280 -> leaf_1281
leaf_1281  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This gives us a nice left gutter which I propose we can use in various ways.
"]
prose_1225 -> { raw_1282}
{rank=same; raw_1282}

raw_1282 [label="raw"]


raw_1282 -> leaf_1283
leaf_1283  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This section can get much longer. Generalizing how tables work is incredibly
powerful. My dream is to embed APL into Grimoire. Give me an excuse to
finally learn it!
"]
section_1092 -> { header_1284 prose_1285 prose_1286 prose_1287 prose_1288 prose_1289}
{rank=same; header_1284 prose_1285 prose_1286 prose_1287 prose_1288 prose_1289}

header_1284 [label="3 : Clocks"]

prose_1285 [label="prose"]

prose_1286 [label="prose"]

prose_1287 [label="prose"]

prose_1288 [label="prose"]

prose_1289 [label="prose"]


header_1284 -> leaf_1290
leaf_1290  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Clocks"]
prose_1285 -> { raw_1291}
{rank=same; raw_1291}

raw_1291 [label="raw"]


raw_1291 -> leaf_1292
leaf_1292  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I think timestamps are just a drawer you put a timestamp in.
"]
prose_1286 -> { raw_1293}
{rank=same; raw_1293}

raw_1293 [label="raw"]


raw_1293 -> leaf_1294
leaf_1294  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That drawer can collapse and look like ⏱.
"]
prose_1287 -> { raw_1295}
{rank=same; raw_1295}

raw_1295 [label="raw"]


raw_1295 -> leaf_1296
leaf_1296  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Or we can collapse it into something from the set containing 🕞.
"]
prose_1288 -> { raw_1297}
{rank=same; raw_1297}

raw_1297 [label="raw"]


raw_1297 -> leaf_1298
leaf_1298  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which normal Emacs doesn't display. I really need to go Japanese soon.
"]
prose_1289 -> { raw_1299}
{rank=same; raw_1299}

raw_1299 [label="raw"]


raw_1299 -> leaf_1300
leaf_1300  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
But it would be just adorable to have a little clock representing the timestamp.
Emoji are quirky but the set contains useful icons, and it's Unicode.
Grimoire supports Unicode.
"]
section_1093 -> { header_1301 prose_1302 prose_1303 prose_1304 prose_1305 section_1306 section_1307}
{rank=same; header_1301 prose_1302 prose_1303 prose_1304 prose_1305 section_1306 section_1307}

header_1301 [label="3 : Code"]

prose_1302 [label="prose"]

prose_1303 [label="prose"]

prose_1304 [label="prose"]

prose_1305 [label="prose"]

section_1306 [label="section: 946-963"]

section_1307 [label="section: 964-1084"]


header_1301 -> leaf_1308
leaf_1308  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Code"]
prose_1302 -> { raw_1309}
{rank=same; raw_1309}

raw_1309 [label="raw"]


raw_1309 -> leaf_1310
leaf_1310  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The place where it all comes together.
"]
prose_1303 -> { raw_1311}
{rank=same; raw_1311}

raw_1311 [label="raw"]


raw_1311 -> leaf_1312
leaf_1312  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire has a servant language, Lua by default, but this
is of course configurable. Eventually we'll write Clu,
it's a race to see which project is finished first but they
have common dependencies, surprise, surprise.
"]
prose_1304 -> { raw_1313}
{rank=same; raw_1313}

raw_1313 [label="raw"]


raw_1313 -> leaf_1314
leaf_1314  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code and data are yin and yang in Grimoire. Code embedded in
documents is executed in various ways and times; comments within
code blocks are themselves in Grimoire data format, and so on.
"]
prose_1305 -> { raw_1315}
{rank=same; raw_1315}

raw_1315 [label="raw"]


raw_1315 -> leaf_1316
leaf_1316  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Given a single language Grimoire text, we can perform a mechanical
figure-ground reversal, such that data blocks become comments and
code blocks become live. We have many more sophisticated weave and
tangle operations, but this is a designed-in property that will prove
handy: sometimes you want to take code, org it up, and then flip it
into a literate context. Upgrade path for existing codebases.

"]
section_1306 -> { header_1317 prose_1318 structure_1319 prose_1320 prose_1321}
{rank=same; header_1317 prose_1318 structure_1319 prose_1320 prose_1321}

header_1317 [label="4 : Inline Code"]

prose_1318 [label="prose"]

structure_1319 [label="structure"]

prose_1320 [label="prose"]

prose_1321 [label="prose"]


header_1317 -> leaf_1322
leaf_1322  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Inline Code"]
prose_1318 -> { raw_1323 prespace_1324 literal_1325 raw_1326}
{rank=same; raw_1323 prespace_1324 literal_1325 raw_1326}

raw_1323 [label="raw"]

prespace_1324 [label="prespace"]

literal_1325 [label="literal"]

raw_1326 [label="raw"]


raw_1323 -> leaf_1327
leaf_1327  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Inline code is written"]
prespace_1324 -> leaf_1328
leaf_1328  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1325 -> leaf_1329
leaf_1329  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`4 + 5`"]
raw_1326 -> leaf_1330
leaf_1330  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". It executes in something similar to
:function mode in Babel, the call is as though it were wrapped in a function
call that looks like:
"]
structure_1319 -> { hashline_1331}
{rank=same; hashline_1331}

hashline_1331 [label="hashline"]


hashline_1331 -> { hashtag_1332}
{rank=same; hashtag_1332}

hashtag_1332 [label="hashtag"]


hashtag_1332 -> leaf_1333
leaf_1333  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1320 -> { raw_1334}
{rank=same; raw_1334}

raw_1334 [label="raw"]


raw_1334 -> leaf_1335
leaf_1335  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
maintaining state between calls.
"]
prose_1321 -> { raw_1336}
{rank=same; raw_1336}

raw_1336 [label="raw"]


raw_1336 -> leaf_1337
leaf_1337  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Anything named exists as a data structure in the helper language. This makes it easy to
refer to a block that contains a self-reference, so these are stored in a cycle-safe way.
"]
section_1307 -> { header_1338 prose_1339 prose_1340 structure_1341 structure_1342 prose_1343 structure_1344 structure_1345 prose_1346 codeblock_1347 structure_1348 prose_1349 prose_1350 prose_1351 codeblock_1352 codeblock_1353 codeblock_1354 structure_1355 structure_1356 codeblock_1357 structure_1358 structure_1359 prose_1360 prose_1361 prose_1362 prose_1363 structure_1364 prose_1365 prose_1366 prose_1367 codeblock_1368 section_1369}
{rank=same; header_1338 prose_1339 prose_1340 structure_1341 structure_1342 prose_1343 structure_1344 structure_1345 prose_1346 codeblock_1347 structure_1348 prose_1349 prose_1350 prose_1351 codeblock_1352 codeblock_1353 codeblock_1354 structure_1355 structure_1356 codeblock_1357 structure_1358 structure_1359 prose_1360 prose_1361 prose_1362 prose_1363 structure_1364 prose_1365 prose_1366 prose_1367 codeblock_1368 section_1369}

header_1338 [label="4 : Code Blocks"]

prose_1339 [label="prose"]

prose_1340 [label="prose"]

structure_1341 [label="structure"]

structure_1342 [label="structure"]

prose_1343 [label="prose"]

structure_1344 [label="structure"]

structure_1345 [label="structure"]

prose_1346 [label="prose"]

codeblock_1347 [label="code block 993-995"]

structure_1348 [label="structure"]

prose_1349 [label="prose"]

prose_1350 [label="prose"]

prose_1351 [label="prose"]

codeblock_1352 [label="code block 1009-1011"]

codeblock_1353 [label="code block 1017-1019"]

codeblock_1354 [label="code block 1023-1025"]

structure_1355 [label="structure"]

structure_1356 [label="structure"]

codeblock_1357 [label="code block 1033-1035"]

structure_1358 [label="structure"]

structure_1359 [label="structure"]

prose_1360 [label="prose"]

prose_1361 [label="prose"]

prose_1362 [label="prose"]

prose_1363 [label="prose"]

structure_1364 [label="structure"]

prose_1365 [label="prose"]

prose_1366 [label="prose"]

prose_1367 [label="prose"]

codeblock_1368 [label="code block 1078-1080"]

section_1369 [label="section: 1085-1155"]


header_1338 -> leaf_1370
leaf_1370  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Code Blocks"]
prose_1339 -> { raw_1371 prespace_1372 literal_1373 raw_1374}
{rank=same; raw_1371 prespace_1372 literal_1373 raw_1374}

raw_1371 [label="raw"]

prespace_1372 [label="prespace"]

literal_1373 [label="literal"]

raw_1374 [label="raw"]


raw_1371 -> leaf_1375
leaf_1375  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The"]
prespace_1372 -> leaf_1376
leaf_1376  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1373 -> leaf_1377
leaf_1377  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`inline`"]
raw_1374 -> leaf_1378
leaf_1378  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" syntax works like the rest, you may use any number of backticks to enclose a form.
"]
prose_1340 -> { raw_1379}
{rank=same; raw_1379}

raw_1379 [label="raw"]


raw_1379 -> leaf_1380
leaf_1380  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something like:
"]
structure_1341 -> { hashline_1381}
{rank=same; hashline_1381}

hashline_1381 [label="hashline"]


hashline_1381 -> { hashtag_1382}
{rank=same; hashtag_1382}

hashtag_1382 [label="hashtag"]


hashtag_1382 -> leaf_1383
leaf_1383  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1342 -> { hashline_1384}
{rank=same; hashline_1384}

hashline_1384 [label="hashline"]


hashline_1384 -> { hashtag_1385}
{rank=same; hashtag_1385}

hashtag_1385 [label="hashtag"]


hashtag_1385 -> leaf_1386
leaf_1386  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1343 -> { raw_1387}
{rank=same; raw_1387}

raw_1387 [label="raw"]


raw_1387 -> leaf_1388
leaf_1388  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
it is evaluated when referenced. This:
"]
structure_1344 -> { hashline_1389}
{rank=same; hashline_1389}

hashline_1389 [label="hashline"]


hashline_1389 -> { hashtag_1390}
{rank=same; hashtag_1390}

hashtag_1390 [label="hashtag"]


hashtag_1390 -> leaf_1391
leaf_1391  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1345 -> { hashline_1392}
{rank=same; hashline_1392}

hashline_1392 [label="hashline"]


hashline_1392 -> { hashtag_1393}
{rank=same; hashtag_1393}

hashtag_1393 [label="hashtag"]


hashtag_1393 -> leaf_1394
leaf_1394  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1346 -> { raw_1395}
{rank=same; raw_1395}

raw_1395 [label="raw"]


raw_1395 -> leaf_1396
leaf_1396  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Separated code blocks use special tags:
"]
codeblock_1347 -> leaf_1397
leaf_1397  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
structure_1348 -> { hashline_1398}
{rank=same; hashline_1398}

hashline_1398 [label="hashline"]


hashline_1398 -> { hashtag_1399}
{rank=same; hashtag_1399}

hashtag_1399 [label="hashtag"]


hashtag_1399 -> leaf_1400
leaf_1400  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1349 -> { raw_1401}
{rank=same; raw_1401}

raw_1401 [label="raw"]


raw_1401 -> leaf_1402
leaf_1402  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
nesting apply. As indeed they might in a Grimoire code block.
"]
prose_1350 -> { raw_1403}
{rank=same; raw_1403}

raw_1403 [label="raw"]


raw_1403 -> leaf_1404
leaf_1404  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We need a good runtime. Playing the Inception game
with Grimoire should be an amusing headache, not a dog-slow
system killer.
"]
prose_1351 -> { raw_1405}
{rank=same; raw_1405}

raw_1405 [label="raw"]


raw_1405 -> leaf_1406
leaf_1406  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They may be named like anything else:
"]
codeblock_1352 -> leaf_1407
leaf_1407  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
codeblock_1353 -> leaf_1408
leaf_1408  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
codeblock_1354 -> leaf_1409
leaf_1409  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 4 + 5"]
structure_1355 -> { hashline_1410}
{rank=same; hashline_1410}

hashline_1410 [label="hashline"]


hashline_1410 -> { hashtag_1411}
{rank=same; hashtag_1411}

hashtag_1411 [label="hashtag"]


hashtag_1411 -> leaf_1412
leaf_1412  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1356 -> { handleline_1413}
{rank=same; handleline_1413}

handleline_1413 [label="handleline"]


handleline_1413 -> { handle_1414}
{rank=same; handle_1414}

handle_1414 [label="handle"]


handle_1414 -> leaf_1415
leaf_1415  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nine"]
codeblock_1357 -> leaf_1416
leaf_1416  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 4 + 5"]
structure_1358 -> { hashline_1417}
{rank=same; hashline_1417}

hashline_1417 [label="hashline"]


hashline_1417 -> { hashtag_1418}
{rank=same; hashtag_1418}

hashtag_1418 [label="hashtag"]


hashtag_1418 -> leaf_1419
leaf_1419  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1359 -> { hashline_1420}
{rank=same; hashline_1420}

hashline_1420 [label="hashline"]


hashline_1420 -> { hashtag_1421}
{rank=same; hashtag_1421}

hashtag_1421 [label="hashtag"]


hashtag_1421 -> leaf_1422
leaf_1422  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1360 -> { raw_1423 prespace_1424 literal_1425 raw_1426 prespace_1427 literal_1428 raw_1429 prespace_1430 literal_1431 raw_1432 prespace_1433 bold_1434 raw_1435}
{rank=same; raw_1423 prespace_1424 literal_1425 raw_1426 prespace_1427 literal_1428 raw_1429 prespace_1430 literal_1431 raw_1432 prespace_1433 bold_1434 raw_1435}

raw_1423 [label="raw"]

prespace_1424 [label="prespace"]

literal_1425 [label="literal"]

raw_1426 [label="raw"]

prespace_1427 [label="prespace"]

literal_1428 [label="literal"]

raw_1429 [label="raw"]

prespace_1430 [label="prespace"]

literal_1431 [label="literal"]

raw_1432 [label="raw"]

prespace_1433 [label="prespace"]

bold_1434 [label="bold"]

raw_1435 [label="raw"]


raw_1423 -> leaf_1436
leaf_1436  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
marks an anonymous result."]
prespace_1424 -> leaf_1437
leaf_1437  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1425 -> leaf_1438
leaf_1438  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#@nine->"]
raw_1426 -> leaf_1439
leaf_1439  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the automatically generated tag for
the return value of the block named"]
prespace_1427 -> leaf_1440
leaf_1440  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1428 -> leaf_1441
leaf_1441  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@nine"]
raw_1429 -> leaf_1442
leaf_1442  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", adding"]
prespace_1430 -> leaf_1443
leaf_1443  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1431 -> leaf_1444
leaf_1444  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@nine()"]
raw_1432 -> leaf_1445
leaf_1445  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to a prose block will
add the number 9 to the weave at that location."]
prespace_1433 -> leaf_1446
leaf_1446  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
bold_1434 -> leaf_1447
leaf_1447  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
raw_1435 -> leaf_1448
leaf_1448  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will either display the result,
the call, or both, configurably, when editing the source, with syntax-highlighting to 
enforce the distinction. 
"]
prose_1361 -> { raw_1449}
{rank=same; raw_1449}

raw_1449 [label="raw"]


raw_1449 -> leaf_1450
leaf_1450  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code blocks may be indented as any other blocks, with the associated owership
rules. Code blocks so indented have a logical start equal to their level of
indentation, which is to say the program being called will not see indentation
that is proper to the Grimoire document.
"]
prose_1362 -> { raw_1451}
{rank=same; raw_1451}

raw_1451 [label="raw"]


raw_1451 -> leaf_1452
leaf_1452  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code blocks may be placed inside lists, as tables may be, but may not be
explicitly placed inside tables.
"]
prose_1363 -> { raw_1453 prespace_1454 literal_1455 raw_1456 prespace_1457 literal_1458 raw_1459}
{rank=same; raw_1453 prespace_1454 literal_1455 raw_1456 prespace_1457 literal_1458 raw_1459}

raw_1453 [label="raw"]

prespace_1454 [label="prespace"]

literal_1455 [label="literal"]

raw_1456 [label="raw"]

prespace_1457 [label="prespace"]

literal_1458 [label="literal"]

raw_1459 [label="raw"]


raw_1453 -> leaf_1460
leaf_1460  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You may insert the result of a named code block in the data context
by simply saying"]
prespace_1454 -> leaf_1461
leaf_1461  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1455 -> leaf_1462
leaf_1462  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@a-named-block()"]
raw_1456 -> leaf_1463
leaf_1463  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". If there are variables, you may pass
them,"]
prespace_1457 -> leaf_1464
leaf_1464  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1458 -> leaf_1465
leaf_1465  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@a-named-block(23, true)"]
raw_1459 -> leaf_1466
leaf_1466  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or if you wish, by name:
"]
structure_1364 -> { hashline_1467}
{rank=same; hashline_1467}

hashline_1467 [label="hashline"]


hashline_1467 -> { hashtag_1468}
{rank=same; hashtag_1468}

hashtag_1468 [label="hashtag"]


hashtag_1468 -> leaf_1469
leaf_1469  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1365 -> { raw_1470}
{rank=same; raw_1470}

raw_1470 [label="raw"]


raw_1470 -> leaf_1471
leaf_1471  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Within a formula applied to a table, it is valid to use the description
syntax for a variable to supply an argument to a function.
"]
prose_1366 -> { raw_1472}
{rank=same; raw_1472}

raw_1472 [label="raw"]


raw_1472 -> leaf_1473
leaf_1473  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There will be further syntax involved in building up the line that
begins a code block. It's considered good form to assign complex
code block headers into distinct tags, and use those, rather than
being explicit and repeating yourself or hiding file-local defaults
in drawers.
"]
prose_1367 -> { raw_1474}
{rank=same; raw_1474}

raw_1474 [label="raw"]


raw_1474 -> leaf_1475
leaf_1475  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So we prefer something like
"]
codeblock_1368 -> leaf_1476
leaf_1476  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
section_1369 -> { header_1477 prose_1478 section_1479 section_1480}
{rank=same; header_1477 prose_1478 section_1479 section_1480}

header_1477 [label="1 : Runtime"]

prose_1478 [label="prose"]

section_1479 [label="section: 1089-1123"]

section_1480 [label="section: 1156-1200"]


header_1477 -> leaf_1481
leaf_1481  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Runtime"]
prose_1478 -> { raw_1482}
{rank=same; raw_1482}

raw_1482 [label="raw"]


raw_1482 -> leaf_1483
leaf_1483  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Here, we begin to explore the interactions Grimoire is capable of.
"]
section_1479 -> { header_1484 prose_1485 prose_1486 prose_1487 prose_1488 prose_1489 prose_1490 prose_1491 prose_1492 section_1493}
{rank=same; header_1484 prose_1485 prose_1486 prose_1487 prose_1488 prose_1489 prose_1490 prose_1491 prose_1492 section_1493}

header_1484 [label="2 : Literate or Live?"]

prose_1485 [label="prose"]

prose_1486 [label="prose"]

prose_1487 [label="prose"]

prose_1488 [label="prose"]

prose_1489 [label="prose"]

prose_1490 [label="prose"]

prose_1491 [label="prose"]

prose_1492 [label="prose"]

section_1493 [label="section: 1124-1155"]


header_1484 -> leaf_1494
leaf_1494  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Literate or Live?"]
prose_1485 -> { raw_1495}
{rank=same; raw_1495}

raw_1495 [label="raw"]


raw_1495 -> leaf_1496
leaf_1496  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Babel is descended from the tradition of [[http://en.wikipedia.org/wiki/Literate_programming][literate programming]], and
Grimoire inherits this from Babel.
"]
prose_1486 -> { raw_1497}
{rank=same; raw_1497}

raw_1497 [label="raw"]


raw_1497 -> leaf_1498
leaf_1498  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is capable of producing code and documentation in the
classic literate style. This is not the aim of Grimoire: it is
a metalanguage, for working with prose, data, and code in an
integrated fashion.
"]
prose_1487 -> { raw_1499}
{rank=same; raw_1499}

raw_1499 [label="raw"]


raw_1499 -> leaf_1500
leaf_1500  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
What a compiler is to a REPL, literate programming is to living
documents.
"]
prose_1488 -> { raw_1501}
{rank=same; raw_1501}

raw_1501 [label="raw"]


raw_1501 -> leaf_1502
leaf_1502  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In a literate programming context, we have source, which integrates
code and documentation. The source is then woven into documentation,
and tangled into code. Both are compiled, one is printed, one is run.
"]
prose_1489 -> { raw_1503}
{rank=same; raw_1503}

raw_1503 [label="raw"]


raw_1503 -> leaf_1504
leaf_1504  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The word 'printed' sounds somewhat archaic, no? The number of tools
Donald Knuth had to write just to write the tools he wanted to write,
and tool the writings he wanted to tool, is simply staggering.
"]
prose_1490 -> { raw_1505 prespace_1506 literal_1507 raw_1508}
{rank=same; raw_1505 prespace_1506 literal_1507 raw_1508}

raw_1505 [label="raw"]

prespace_1506 [label="prespace"]

literal_1507 [label="literal"]

raw_1508 [label="raw"]


raw_1505 -> leaf_1509
leaf_1509  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Traces of that legacy remain in Grimoire. Like Babel, we allow for
LaTeX embedding, with the sugar"]
prespace_1506 -> leaf_1510
leaf_1510  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1507 -> leaf_1511
leaf_1511  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`\\latex`"]
raw_1508 -> leaf_1512
leaf_1512  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". Starting Lua code with
a backslash is illegal, starting Clu code with a backslash is also
illegal.
"]
prose_1491 -> { raw_1513}
{rank=same; raw_1513}

raw_1513 [label="raw"]


raw_1513 -> leaf_1514
leaf_1514  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For a Grimoire document to be printed, realistically, in today's world,
it will be translated to LaTeX, hence to PDF, sent off to a print
on demand company, and drop shipped. Some documents may in fact
make this journey, because why not? We aren't oriented around it.
"]
prose_1492 -> { raw_1515}
{rank=same; raw_1515}

raw_1515 [label="raw"]


raw_1515 -> leaf_1516
leaf_1516  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The basic flow in a Grimoire context is one of excursion and return.
We have tangling and weaving, but also unraveling, where actions taken
within the weave or tangle are integrated back into the source document.
"]
section_1493 -> { header_1517 prose_1518 prose_1519 prose_1520 prose_1521 prose_1522 prose_1523}
{rank=same; header_1517 prose_1518 prose_1519 prose_1520 prose_1521 prose_1522 prose_1523}

header_1517 [label="3 : Unraveling the Mystery"]

prose_1518 [label="prose"]

prose_1519 [label="prose"]

prose_1520 [label="prose"]

prose_1521 [label="prose"]

prose_1522 [label="prose"]

prose_1523 [label="prose"]


header_1517 -> leaf_1524
leaf_1524  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Unraveling the Mystery"]
prose_1518 -> { raw_1525}
{rank=same; raw_1525}

raw_1525 [label="raw"]


raw_1525 -> leaf_1526
leaf_1526  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

What's unraveling? When I picture Donald Knuth writing literate code,
I picture him with a notebook, writing free-flowing algorithms in a
fashion he refined his entire career. I imagine him carefully transcribing
into Web, running the compiler, going for a stroll around the Stanford
campus, and examining the changes upon his return.
"]
prose_1519 -> { raw_1527}
{rank=same; raw_1527}

raw_1527 [label="raw"]


raw_1527 -> leaf_1528
leaf_1528  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
On the days, and they did happen, when his program was in a state of error,
I picture him returning to his notebook first. While thinking. Perhaps
playing the organ for an hour or two, to relax. He would then correct the
notebook, then the code, then the program, which would be correct now,
most of the time.
"]
prose_1520 -> { raw_1529}
{rank=same; raw_1529}

raw_1529 [label="raw"]


raw_1529 -> leaf_1530
leaf_1530  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm making that all up. But I'd wager I'm not far off the mark. We
don't work like that and most of us can't.
"]
prose_1521 -> { raw_1531}
{rank=same; raw_1531}

raw_1531 [label="raw"]


raw_1531 -> leaf_1532
leaf_1532  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A tangle is named that because the mapping between it and the source
can be non-trivial. It's quite possible to make it undecidable what to
do with edits to the tangle. it's also possible to move edits from the tangle
back into the source, in most cases, if we structure things well.
"]
prose_1522 -> { raw_1533}
{rank=same; raw_1533}

raw_1533 [label="raw"]


raw_1533 -> leaf_1534
leaf_1534  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Donald Knuth was unable to print a book that would alter his code. I'm
sure he'd have been delighted to have the ability. Our weaves can easily
be living documents, through in-browser and server side empowerment.
Those changes, too, should make it back into the source.
"]
prose_1523 -> { raw_1535}
{rank=same; raw_1535}

raw_1535 [label="raw"]


raw_1535 -> leaf_1536
leaf_1536  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Ultimately I imagine many people will prefer to edit and run their
Grimoire documents entirely from a weave that provides a bit of the
ol' WYSIWYG to the experience. Well and good for them, I have my own
view of Heaven, and it isn't Heaven if we don't all fit.
"]
section_1480 -> { header_1537 prose_1538 prose_1539 prose_1540 prose_1541 section_1542 section_1543}
{rank=same; header_1537 prose_1538 prose_1539 prose_1540 prose_1541 section_1542 section_1543}

header_1537 [label="2 : Source, Tangle and Weave"]

prose_1538 [label="prose"]

prose_1539 [label="prose"]

prose_1540 [label="prose"]

prose_1541 [label="prose"]

section_1542 [label="section: 1173-1200"]

section_1543 [label="section: 1201-1219"]


header_1537 -> leaf_1544
leaf_1544  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Source, Tangle and Weave"]
prose_1538 -> { raw_1545}
{rank=same; raw_1545}

raw_1545 [label="raw"]


raw_1545 -> leaf_1546
leaf_1546  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

These classic concepts from literate programming are central to
the Grimoire paradigm.
"]
prose_1539 -> { raw_1547}
{rank=same; raw_1547}

raw_1547 [label="raw"]


raw_1547 -> leaf_1548
leaf_1548  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In Grimoire, something like a PDF is not a true weave. It is a product;
much like an image or data derived from a simulation, it is regenerated
when necessary but has no further connection to the Grimoire environment.
"]
prose_1540 -> { raw_1549}
{rank=same; raw_1549}

raw_1549 [label="raw"]


raw_1549 -> leaf_1550
leaf_1550  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Our first section discusses the format of Grimoire source code. Like Babel,
unlike Web and descendants, it is self-tangling. Grimoire will be tightly
integrated and purpose-built for this task, operating at a REPL+ level.
"]
prose_1541 -> { raw_1551}
{rank=same; raw_1551}

raw_1551 [label="raw"]


raw_1551 -> leaf_1552
leaf_1552  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We still wish to use it to compile programs written in appropriate languages.
These languages needn't be educated in the ways of Grimoire, imposing this
requirement would be so onerous as to block adoption.
"]
section_1542 -> { header_1553 prose_1554 prose_1555 prose_1556 prose_1557 prose_1558}
{rank=same; header_1553 prose_1554 prose_1555 prose_1556 prose_1557 prose_1558}

header_1553 [label="3 : Unraveling the Tangle"]

prose_1554 [label="prose"]

prose_1555 [label="prose"]

prose_1556 [label="prose"]

prose_1557 [label="prose"]

prose_1558 [label="prose"]


header_1553 -> leaf_1559
leaf_1559  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Unraveling the Tangle"]
prose_1554 -> { raw_1560}
{rank=same; raw_1560}

raw_1560 [label="raw"]


raw_1560 -> leaf_1561
leaf_1561  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Babel offers limited facilities for working within source blocks. What it
doesn't offer is the critical 'unravel' operation, which takes changes to
the tangle and integrates them back into the weave.
"]
prose_1555 -> { raw_1562}
{rank=same; raw_1562}

raw_1562 [label="raw"]


raw_1562 -> leaf_1563
leaf_1563  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is a partially-solved problem, with Babel able to put comment tags into
the source which allow Emacs to jump back into your actual source from
errors in the tangle.
"]
prose_1556 -> { raw_1564}
{rank=same; raw_1564}

raw_1564 [label="raw"]


raw_1564 -> leaf_1565
leaf_1565  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is just not good enough. For any number of reasons, we need to be able
to unravel. I'll cite one: Converting existing codebases over to literacy.
The first step is to recreate the existing program on a source-line-identical
level. The entire existing developer base is familiar with the program already
and isn't going to want to start editing a bunch of Grimoire. They can most
likely be induced to accept readable metadata, and that's it.
"]
prose_1557 -> { raw_1566}
{rank=same; raw_1566}

raw_1566 [label="raw"]


raw_1566 -> leaf_1567
leaf_1567  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That's all we need. Code is in one of three categories: either it is a single
literal copy from source, it's one of several copies from source, or
it's generated code that's dependent on information in the source.
"]
prose_1558 -> { raw_1568}
{rank=same; raw_1568}

raw_1568 [label="raw"]


raw_1568 -> leaf_1569
leaf_1569  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We incorporate all changes to the former automatically when we unravel.
Changes to a single version of multiple copies prompts user interaction: do
you want to embed the change as its own source block, propagate it to each
instance, or decline the merge? Changes to generated code are simply
forbidden. If one is doing generation on the code base, working from
the weave is the more comfortable approach.
"]
section_1543 -> { header_1570 prose_1571 prose_1572 prose_1573 prose_1574}
{rank=same; header_1570 prose_1571 prose_1572 prose_1573 prose_1574}

header_1570 [label="3 : Backweaving"]

prose_1571 [label="prose"]

prose_1572 [label="prose"]

prose_1573 [label="prose"]

prose_1574 [label="prose"]


header_1570 -> leaf_1575
leaf_1575  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Backweaving"]
prose_1571 -> { raw_1576}
{rank=same; raw_1576}

raw_1576 [label="raw"]


raw_1576 -> leaf_1577
leaf_1577  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

An analogous operation is backweaving.
"]
prose_1572 -> { raw_1578}
{rank=same; raw_1578}

raw_1578 [label="raw"]


raw_1578 -> leaf_1579
leaf_1579  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A weave in Grimoire is an HTML/CSS/JS document. In other words, a program.
The weave is much closer akin to the source than any tangle. Any Grimoire
program can have a weave view, though it isn't necessary; many will have
no tangle at all, containing the functionality within Grimoire.
"]
prose_1573 -> { raw_1580}
{rank=same; raw_1580}

raw_1580 [label="raw"]


raw_1580 -> leaf_1581
leaf_1581  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The weave may therefore be manipulated, and we need some way to reflect
those changes back into the source. This can't be automated in a general
way. What we're left with is an EDN protocol for exchanging information
to update the weave in cooperation with some server logic and git.
"]
prose_1574 -> { raw_1582}
{rank=same; raw_1582}

raw_1582 [label="raw"]


raw_1582 -> leaf_1583
leaf_1583  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So, could you write the server logic for a site as a literate program,
push it to a server that tangles and weaves it, and use the source
and Grimoire/bridge as the sysadmin view? I bet you could, it might
even be fairly popular.
"]
section_437 -> { header_1584 prose_1585 prose_1586 prose_1587 section_1588}
{rank=same; header_1584 prose_1585 prose_1586 prose_1587 section_1588}

header_1584 [label="4 : Zero-header tag"]

prose_1585 [label="prose"]

prose_1586 [label="prose"]

prose_1587 [label="prose"]

section_1588 [label="section: 420-421"]


header_1584 -> leaf_1589
leaf_1589  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Zero-header tag"]
prose_1585 -> { raw_1590 prespace_1591 literal_1592 raw_1593}
{rank=same; raw_1590 prespace_1591 literal_1592 raw_1593}

raw_1590 [label="raw"]

prespace_1591 [label="prespace"]

literal_1592 [label="literal"]

raw_1593 [label="raw"]


raw_1590 -> leaf_1594
leaf_1594  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The special [[*Tags][tag]]"]
prespace_1591 -> leaf_1595
leaf_1595  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1592 -> leaf_1596
leaf_1596  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#*"]
raw_1593 -> leaf_1597
leaf_1597  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which is only meaningful at the top of a document,
 indicates a 'zero header'. This lets you use the one-star level as a
series within a single document.
"]
prose_1586 -> { raw_1598 prespace_1599 literal_1600 raw_1601}
{rank=same; raw_1598 prespace_1599 literal_1600 raw_1601}

raw_1598 [label="raw"]

prespace_1599 [label="prespace"]

literal_1600 [label="literal"]

raw_1601 [label="raw"]


raw_1598 -> leaf_1602
leaf_1602  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The related tag"]
prespace_1599 -> leaf_1603
leaf_1603  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_1600 -> leaf_1604
leaf_1604  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#meta*"]
raw_1601 -> leaf_1605
leaf_1605  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" must be followed by a space and any number of
stars. This indicates a meta-level for the entire under-tree, that
exists somewhere else. Further semantics may be provided.
"]
prose_1587 -> { raw_1606}
{rank=same; raw_1606}

raw_1606 [label="raw"]


raw_1606 -> leaf_1607
leaf_1607  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This section belongs in some further API section.
"]
section_1588 -> { header_1608 prose_1609}
{rank=same; header_1608 prose_1609}

header_1608 [label="5 : TODO Move to API Section"]

prose_1609 [label="prose"]


header_1608 -> leaf_1610
leaf_1610  [color=Gray,shape=rectangle,fontname=Inconsolata,label="***** TODO Move to API Section"]
prose_1609 -> { raw_1611}
{rank=same; raw_1611}

raw_1611 [label="raw"]


raw_1611 -> leaf_1612
leaf_1612  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]

}
