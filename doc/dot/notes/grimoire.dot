digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 1219"]


doc_0 -> { section_1 section_2}
{rank=same; section_1 section_2}

section_1 [label="section: 1-3"]

section_2 [label="section: 34-338"]


section_1 -> { header_3 prose_4 structure_5 section_6}
{rank=same; header_3 prose_4 structure_5 section_6}

header_3 [label="0 : "]

prose_4 [label="prose"]

structure_5 [label="structure"]

section_6 [label="section: 4-33"]


header_3 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#+title: Grimoire: a metalanguage for magic spells."]
prose_4 -> { raw_8}
{rank=same; raw_8}

raw_8 [label="raw"]


raw_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_5 -> { hashline_10}
{rank=same; hashline_10}

hashline_10 [label="hashline"]


hashline_10 -> { hashtag_11}
{rank=same; hashtag_11}

hashtag_11 [label="hashtag"]


hashtag_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_6 -> { header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 prose_21 prose_22}
{rank=same; header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 prose_21 prose_22}

header_13 [label="1 : Introduction"]

prose_14 [label="prose"]

prose_15 [label="prose"]

prose_16 [label="prose"]

prose_17 [label="prose"]

prose_18 [label="prose"]

prose_19 [label="prose"]

prose_20 [label="prose"]

prose_21 [label="prose"]

prose_22 [label="prose"]


header_13 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Introduction"]
prose_14 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is a response to Babel.
"]
prose_15 -> { raw_26}
{rank=same; raw_26}

raw_26 [label="raw"]


raw_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Babel is simultaneously a kludge and the most potentially powerful language in existence.
"]
prose_16 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Babel is a metalanguage. The structure of Org mode lets the user weave together code into a
living document, in a flexible, powerful way.
"]
prose_17 -> { raw_30}
{rank=same; raw_30}

raw_30 [label="raw"]


raw_30 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The name is charmingly apt. Babel exists at the top of a tower of abstractions that is teetering
on the verge of collapse. Org-mode is an extension of outline mode, which was a simple tree
editor task list.
"]
prose_18 -> { raw_32 italic_33 raw_34}
{rank=same; raw_32 italic_33 raw_34}

raw_32 [label="raw"]

italic_33 [label="italic"]

raw_34 [label="raw"]


raw_32 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Various users bolted stuff on, because that's how emacs grows, you bolt stuff onto it and it
continues to function because it's [[http:/"]
italic_33 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="lispers.org"]
raw_34 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="][made with alien technology]].
"]
prose_19 -> { raw_38}
{rank=same; raw_38}

raw_38 [label="raw"]


raw_38 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The problem with Babel is more than the syntax being clunky, though that's a problem. The issue is
more profoundly that Babel is built on Org, which is built on emacs. It's a language, yes,
parsers exist for other platforms. But as a runtime, it isn't portable without a lot of effort.
"]
prose_20 -> { raw_40}
{rank=same; raw_40}

raw_40 [label="raw"]


raw_40 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So much so, that we get a chance to start over. It's roughly as difficult to write Grimoire as it would be to
reimplement Babel in, say, Sublime.
"]
prose_21 -> { raw_42}
{rank=same; raw_42}

raw_42 [label="raw"]


raw_42 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the process, we can:
"]
prose_22 -> { raw_44}
{rank=same; raw_44}

raw_44 [label="raw"]


raw_44 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - streamline concepts, making them more orthogonal
  - clean up the clunkiness in the grammar
  - build a toolchain that will let us write magic spells in any number of languages, amassing a powerful
    collection of same. A grimoire, if you will: a living book in which magic is both written and performed.
"]
section_2 -> { header_46 prose_47 section_48 section_49 section_50}
{rank=same; header_46 prose_47 section_48 section_49 section_50}

header_46 [label="1 : Musings on Metasyntax"]

prose_47 [label="prose"]

section_48 [label="section: 35-82"]

section_49 [label="section: 105-311"]

section_50 [label="section: 339-343"]


header_46 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Musings on Metasyntax"]
prose_47 -> { raw_52}
{rank=same; raw_52}

raw_52 [label="raw"]


raw_52 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_48 -> { header_54 prose_55 prose_56 section_57 section_58 section_59}
{rank=same; header_54 prose_55 prose_56 section_57 section_58 section_59}

header_54 [label="2 : Constraints"]

prose_55 [label="prose"]

prose_56 [label="prose"]

section_57 [label="section: 42-68"]

section_58 [label="section: 69-82"]

section_59 [label="section: 83-104"]


header_54 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Constraints"]
prose_55 -> { raw_61}
{rank=same; raw_61}

raw_61 [label="raw"]


raw_61 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

There is a difference between a metalanguage and a literate programming language. Babel is a metalanguage,
as Grimoire is intended to be.
"]
prose_56 -> { raw_63}
{rank=same; raw_63}

raw_63 [label="raw"]


raw_63 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An effective metalanguage balances three concerns. It must be usable, readable, and parsable.
"]
section_57 -> { header_65 prose_66 prose_67 prose_68 prose_69 prose_70 prose_71 prose_72}
{rank=same; header_65 prose_66 prose_67 prose_68 prose_69 prose_70 prose_71 prose_72}

header_65 [label="3 : Usable"]

prose_66 [label="prose"]

prose_67 [label="prose"]

prose_68 [label="prose"]

prose_69 [label="prose"]

prose_70 [label="prose"]

prose_71 [label="prose"]

prose_72 [label="prose"]


header_65 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Usable"]
prose_66 -> { raw_74}
{rank=same; raw_74}

raw_74 [label="raw"]


raw_74 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A metalanguage is used interactively, on a deeper level than REPLs.
"]
prose_67 -> { raw_76 literal_77 raw_78}
{rank=same; raw_76 literal_77 raw_78}

raw_76 [label="raw"]

literal_77 [label="literal"]

raw_78 [label="raw"]


raw_76 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is what makes working with Org so amazing. The first purpose of what became Babel
was simply editing outlines. This was outline mode, which dates back to the era when
using asterisks and "]
literal_77 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="- [ ]"]
raw_78 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" checkboxes in a plain ASCII text file was fairly futuristic
behavior.
"]
prose_68 -> { raw_82}
{rank=same; raw_82}

raw_82 [label="raw"]


raw_82 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You can't really call that a language either, though it's a syntax. More and more features
were attached until we have modern Babel. But because each feature was build as an extension
to the editing/runtime environment, Babel is fairly smooth to work with.
"]
prose_69 -> { raw_84}
{rank=same; raw_84}

raw_84 [label="raw"]


raw_84 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If you can handle Emacs. I can, some can't. A metalanguage is tightly coupled to its runtime,
because its runtime is its editing environment. Not much of a metalanguage if this isn't the
case.
"]
prose_70 -> { raw_86}
{rank=same; raw_86}

raw_86 [label="raw"]


raw_86 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is the culmination of a considerable dependency chain. We need a data structure, a
parser to work with the data structure, and an editing environment that builds on these. For
maximum enjoyment, we'll want a custom terminal that enhances the xterm protocol with a few
features, most notably graphics.
"]
prose_71 -> { raw_88}
{rank=same; raw_88}

raw_88 [label="raw"]


raw_88 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Just like I have trouble writing Lua without burning huge amounts of time planning out Clu, I
can't use Org without doing the same for Grimoire. It's all related: I need a really good parser.
"]
prose_72 -> { raw_90 italic_91 raw_92}
{rank=same; raw_90 italic_91 raw_92}

raw_90 [label="raw"]

italic_91 [label="italic"]

raw_92 [label="raw"]


raw_90 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[[https:/"]
italic_91 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="github.com"]
raw_92 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="UpstandingHackers/hammer][hammer]] is the leading contender. But back to Grimoire.
"]
section_58 -> { header_96 prose_97 prose_98 prose_99}
{rank=same; header_96 prose_97 prose_98 prose_99}

header_96 [label="3 : Readable"]

prose_97 [label="prose"]

prose_98 [label="prose"]

prose_99 [label="prose"]


header_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Readable"]
prose_97 -> { raw_101}
{rank=same; raw_101}

raw_101 [label="raw"]


raw_101 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is designed to be read.  It's important that the raw syntax not
 break the reader's flow.  A good metalanguage lets the user employ just
 as much magic as she's comfortable with, without imposing more.
"]
prose_98 -> { raw_103}
{rank=same; raw_103}

raw_103 [label="raw"]


raw_103 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Our syntax is  designed to support this. As such  it is deeply concerned
with matters  such as indentation  and whitespacing, which are  basic to
readability.
"]
prose_99 -> { raw_105}
{rank=same; raw_105}

raw_105 [label="raw"]


raw_105 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It will be quite possible and indeed comfortable to write pure documents
such  as blog  posts in  Grimoire form.  In that  use case  it resembles
Markdown.
"]
section_59 -> { header_107 prose_108 prose_109 prose_110 prose_111 prose_112}
{rank=same; header_107 prose_108 prose_109 prose_110 prose_111 prose_112}

header_107 [label="3 : Parsable"]

prose_108 [label="prose"]

prose_109 [label="prose"]

prose_110 [label="prose"]

prose_111 [label="prose"]

prose_112 [label="prose"]


header_107 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Parsable"]
prose_108 -> { raw_114}
{rank=same; raw_114}

raw_114 [label="raw"]


raw_114 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire  documents are  intended  to be  highly  convoluted. The  basic
editing operation  is the fold. The  Grimoire editor must be  capable of
handling documents in the tens of megabytes with a complex and preserved
folding structure.
"]
prose_109 -> { raw_116}
{rank=same; raw_116}

raw_116 [label="raw"]


raw_116 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This requires  a ground-up  editing environment  rewrite to  employ data
structures   with   correct   big-O    complexity   and   an   efficient
implementation.
"]
prose_110 -> { raw_118}
{rank=same; raw_118}

raw_118 [label="raw"]


raw_118 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This  also  requires  that  the   language  be  well-designed  for  easy
recognition of the structural elements. As this document evolves, I will
be defining a grammar in the syntax preferred by barbarian.
"]
prose_111 -> { raw_120}
{rank=same; raw_120}

raw_120 [label="raw"]


raw_120 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is  an error-free  language. There  are several  concepts which
interact to  create this, namely  structure, prose, well-  and malformed
structure, and validity.
"]
prose_112 -> { raw_122}
{rank=same; raw_122}

raw_122 [label="raw"]


raw_122 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A parser for Grimoire which doesn't  succeed without error for any utf-8
string is not valid.
"]
section_49 -> { header_124 prose_125 section_126 section_127 section_128 section_129 section_130 section_131}
{rank=same; header_124 prose_125 section_126 section_127 section_128 section_129 section_130 section_131}

header_124 [label="2 : Structure"]

prose_125 [label="prose"]

section_126 [label="section: 109-149"]

section_127 [label="section: 161-190"]

section_128 [label="section: 191-200"]

section_129 [label="section: 253-285"]

section_130 [label="section: 295-311"]

section_131 [label="section: 312-338"]


header_124 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Structure"]
prose_125 -> { raw_133}
{rank=same; raw_133}

raw_133 [label="raw"]


raw_133 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a top-down look at Grimoire's proposed syntax.
"]
section_126 -> { header_135 prose_136 prose_137 prose_138 prose_139 prose_140 prose_141 prose_142 prose_143 prose_144 section_145}
{rank=same; header_135 prose_136 prose_137 prose_138 prose_139 prose_140 prose_141 prose_142 prose_143 prose_144 section_145}

header_135 [label="3 : Encoding"]

prose_136 [label="prose"]

prose_137 [label="prose"]

prose_138 [label="prose"]

prose_139 [label="prose"]

prose_140 [label="prose"]

prose_141 [label="prose"]

prose_142 [label="prose"]

prose_143 [label="prose"]

prose_144 [label="prose"]

section_145 [label="section: 150-160"]


header_135 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Encoding"]
prose_136 -> { raw_147}
{rank=same; raw_147}

raw_147 [label="raw"]


raw_147 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is defined in terms of utf-8.
"]
prose_137 -> { raw_149}
{rank=same; raw_149}

raw_149 [label="raw"]


raw_149 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The core syntax is defined in terms of the reachable keys on a US keyboard.
This tradition is firmly entrenched in the mid teens, and I have no
designs on budging that at present. The miser in me likes that they're
a byte each. The lawyer in me insists that this isn't ASCII, which is a
seven-bit legacy encoding. All aspects of utf-8 are equally meaningful.
"]
prose_138 -> { raw_151}
{rank=same; raw_151}

raw_151 [label="raw"]


raw_151 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We aren't at all afraid to use Unicode characters to display aspects
of the runtime. In fact we favor this, as it marks those operations
as distinctive. Most people can't type ⦿ without effort (I can't)
and it's easy to recognize as a folded drawer once you've seen a couple.
"]
prose_139 -> { raw_153}
{rank=same; raw_153}

raw_153 [label="raw"]


raw_153 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is case sensitive and uses lower-snake-case for built-in English
phrases. There is a convention (see classes) that uses capitalization of
user words to affect semantics. This may be overridden with other rules
for languages that lack the majuscule-miniscule distinction.
"]
prose_140 -> { raw_155}
{rank=same; raw_155}

raw_155 [label="raw"]


raw_155 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I want Grimoire to have correct Unicode handling, for some value of
correct. It can't be considered 1.0 without this.
"]
prose_141 -> { raw_157}
{rank=same; raw_157}

raw_157 [label="raw"]


raw_157 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Bidirectional handling in a context that's indentation sensitive is
an example of something subtle. Grimoire uses indentation in various
ways, so here's the rule:
"]
prose_142 -> { raw_159}
{rank=same; raw_159}

raw_159 [label="raw"]


raw_159 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Any newline that has a reversed direction ends indentation. So if
you are going ltr, issue an rtl marker, and a newline, your indentation
level is zero. If you reverse direction twice in a line, you keep
your indentation level. Three times, you lose it.
"]
prose_143 -> { raw_161}
{rank=same; raw_161}

raw_161 [label="raw"]


raw_161 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'd love to get a Hebrew and/or Arabic fluent hacker on the project
early, to make sure this works correctly.
"]
prose_144 -> { raw_163}
{rank=same; raw_163}

raw_163 [label="raw"]


raw_163 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Another thing I want to get right is equivalence. If you have a
variable called \"Glück\" the compiler shouldn't complain if it's
rendered in either of the valid ways. For some sequences that's
\"any of the valid ways\". If we normalized your prose, you might
have problems later, so we don't want to solve it that way.
"]
section_145 -> { header_165 prose_166 prose_167}
{rank=same; header_165 prose_166 prose_167}

header_165 [label="4 : Internationalization"]

prose_166 [label="prose"]

prose_167 [label="prose"]


header_165 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Internationalization"]
prose_166 -> { raw_169 literal_170 raw_171}
{rank=same; raw_169 literal_170 raw_171}

raw_169 [label="raw"]

literal_170 [label="literal"]

raw_171 [label="raw"]


raw_169 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

All parts of Grimoire defined in English will be namespaced
as "]
literal_170 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="en:/"]
raw_171 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and loaded by default. Other languages will be added
when there is a fluent maintainer available.
"]
prose_167 -> { raw_175 literal_176 raw_177 literal_178 raw_179 literal_180 raw_181 literal_182 raw_183}
{rank=same; raw_175 literal_176 raw_177 literal_178 raw_179 literal_180 raw_181 literal_182 raw_183}

raw_175 [label="raw"]

literal_176 [label="literal"]

raw_177 [label="raw"]

literal_178 [label="literal"]

raw_179 [label="raw"]

literal_180 [label="literal"]

raw_181 [label="raw"]

literal_182 [label="literal"]

raw_183 [label="raw"]


raw_175 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note  that  many  words  aren't  truly English.  Notably  the  names  of
programming languages are  the same in all human languages.   A tag like"]
literal_176 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#author"]
raw_177 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" can be namespaced "]
literal_178 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#fr:/auteur"]
raw_179 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and will be, but "]
literal_180 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!python"]
raw_181 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not
in the "]
literal_182 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label="en:/"]
raw_183 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" namespace.
"]
section_127 -> { header_193 prose_194 prose_195 prose_196 prose_197 prose_198 prose_199 prose_200}
{rank=same; header_193 prose_194 prose_195 prose_196 prose_197 prose_198 prose_199 prose_200}

header_193 [label="3 : Prose and Structure"]

prose_194 [label="prose"]

prose_195 [label="prose"]

prose_196 [label="prose"]

prose_197 [label="prose"]

prose_198 [label="prose"]

prose_199 [label="prose"]

prose_200 [label="prose"]


header_193 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Prose and Structure"]
prose_194 -> { raw_202}
{rank=same; raw_202}

raw_202 [label="raw"]


raw_202 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The major distinction Grimoire draws is between prose and structure.
"]
prose_195 -> { raw_204}
{rank=same; raw_204}

raw_204 [label="raw"]


raw_204 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose is the default parsing state. It is far from unstructured from the
runtime  perspective. Although  this needn't  be embedded  in the  parse
tree,  Grimoire   understands  concepts   such  as   paragraphs,  words,
punctuation,  capital letters,  languages, and  anything else  proper to
prose.
"]
prose_196 -> { raw_206}
{rank=same; raw_206}

raw_206 [label="raw"]


raw_206 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I refer to human languages, but Grimoire understands programming languages
also. In principle, all of them, it shouldn't be harder to add them than
it is to call them from shell, though getting a runtime rigged up to
another runtime always calls for some finesse to derive a good experience.
"]
prose_197 -> { raw_208}
{rank=same; raw_208}

raw_208 [label="raw"]


raw_208 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
\"Programming languages\" is overly specific. Grimoire draws a distinction
between prose and structure. Blocks may contain either, or both.
"]
prose_198 -> { raw_210 bold_211 raw_212}
{rank=same; raw_210 bold_211 raw_212}

raw_210 [label="raw"]

bold_211 [label="bold"]

raw_212 [label="raw"]


raw_210 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something that's nice about a language build on a prose/structure
relationship is that it can be error free. Anything "]
bold_211 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym"]
raw_212 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" can't build into
a structure is just prose.
"]
prose_199 -> { raw_216 italic_217 raw_218 italic_219 raw_220}
{rank=same; raw_216 italic_217 raw_218 italic_219 raw_220}

raw_216 [label="raw"]

italic_217 [label="italic"]

raw_218 [label="raw"]

italic_219 [label="italic"]

raw_220 [label="raw"]


raw_216 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Markdown has this property. Sometimes you run into crappy parsers which
build errors into Markdown, which is just obnoxious. If you [[http:/"]
italic_217 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="daringfireball.net"]
raw_218 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="projects"]
italic_219 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="markdown"]
raw_220 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label="syntax][RTFM]],
you'll find the word \"error\" once. Helpfully explaining how Markdown
keeps you from making one.
"]
prose_200 -> { raw_226}
{rank=same; raw_226}

raw_226 [label="raw"]


raw_226 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do what we can to make the document look the same as it is
in fact structured. Syntax highlighting handles the edge cases.
"]
section_128 -> { header_228 prose_229 prose_230 prose_231 section_232}
{rank=same; header_228 prose_229 prose_230 prose_231 section_232}

header_228 [label="3 : Ownership"]

prose_229 [label="prose"]

prose_230 [label="prose"]

prose_231 [label="prose"]

section_232 [label="section: 201-252"]


header_228 -> leaf_233
leaf_233  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Ownership"]
prose_229 -> { raw_234}
{rank=same; raw_234}

raw_234 [label="raw"]


raw_234 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The basic structural relationship in Grimoire is ownership.
"]
prose_230 -> { raw_236}
{rank=same; raw_236}

raw_236 [label="raw"]


raw_236 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Root elements of a heirarchy own their children, blocks own
lines that refer to that block. Indentation has a subtle but
regular interaction with ownership; it does what you expect.
"]
prose_231 -> { raw_238}
{rank=same; raw_238}

raw_238 [label="raw"]


raw_238 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Edge cases are resolved using the cling rule.
"]
section_232 -> { header_240 prose_241 prose_242 prose_243 prose_244 structure_245 structure_246 structure_247 structure_248 structure_249 prose_250 structure_251 structure_252 structure_253 prose_254}
{rank=same; header_240 prose_241 prose_242 prose_243 prose_244 structure_245 structure_246 structure_247 structure_248 structure_249 prose_250 structure_251 structure_252 structure_253 prose_254}

header_240 [label="4 : The Cling Rule"]

prose_241 [label="prose"]

prose_242 [label="prose"]

prose_243 [label="prose"]

prose_244 [label="prose"]

structure_245 [label="structure"]

structure_246 [label="structure"]

structure_247 [label="structure"]

structure_248 [label="structure"]

structure_249 [label="structure"]

prose_250 [label="prose"]

structure_251 [label="structure"]

structure_252 [label="structure"]

structure_253 [label="structure"]

prose_254 [label="prose"]


header_240 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** The Cling Rule"]
prose_241 -> { raw_256}
{rank=same; raw_256}

raw_256 [label="raw"]


raw_256 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The cling rule specifies that a group 'clings' to another group when
it is closer to that group than the other group. Ties resolve down.
"]
prose_242 -> { raw_258}
{rank=same; raw_258}

raw_258 [label="raw"]


raw_258 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This should make it intuitive to group elements that aren't grouping the
way you expect: put in whitespace until the block is visually distinguished
from the surroundings.
"]
prose_243 -> { raw_260}
{rank=same; raw_260}

raw_260 [label="raw"]


raw_260 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cling applies between blocks which are at the same level of ownership.
Ownership has precedence over cling: all blocks underneath e.g. a header
line are owned by that line, newlines notwithstanding.
"]
prose_244 -> { raw_262}
{rank=same; raw_262}

raw_262 [label="raw"]


raw_262 -> leaf_263
leaf_263  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that indentation of e.g. lists invokes the cling rule within the
indentation level.

"]
structure_245 -> { hashline_264}
{rank=same; hashline_264}

hashline_264 [label="hashline"]


hashline_264 -> { hashtag_265}
{rank=same; hashtag_265}

hashtag_265 [label="hashtag"]


hashtag_265 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_246 -> { hashline_267}
{rank=same; hashline_267}

hashline_267 [label="hashline"]


hashline_267 -> { hashtag_268}
{rank=same; hashtag_268}

hashtag_268 [label="hashtag"]


hashtag_268 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_247 -> { hashline_270}
{rank=same; hashline_270}

hashline_270 [label="hashline"]


hashline_270 -> { hashtag_271}
{rank=same; hashtag_271}

hashtag_271 [label="hashtag"]


hashtag_271 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_248 -> { hashline_273}
{rank=same; hashline_273}

hashline_273 [label="hashline"]


hashline_273 -> { hashtag_274}
{rank=same; hashtag_274}

hashtag_274 [label="hashtag"]


hashtag_274 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
structure_249 -> { hashline_276}
{rank=same; hashline_276}

hashline_276 [label="hashline"]


hashline_276 -> { hashtag_277}
{rank=same; hashtag_277}

hashtag_277 [label="hashtag"]


hashtag_277 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_250 -> { raw_279}
{rank=same; raw_279}

raw_279 [label="raw"]


raw_279 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Even clings are resolved forwards:
"]
structure_251 -> { hashline_281}
{rank=same; hashline_281}

hashline_281 [label="hashline"]


hashline_281 -> { hashtag_282}
{rank=same; hashtag_282}

hashtag_282 [label="hashtag"]


hashtag_282 -> leaf_283
leaf_283  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_252 -> { hashline_284}
{rank=same; hashline_284}

hashline_284 [label="hashline"]


hashline_284 -> { hashtag_285}
{rank=same; hashtag_285}

hashtag_285 [label="hashtag"]


hashtag_285 -> leaf_286
leaf_286  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
structure_253 -> { hashline_287}
{rank=same; hashline_287}

hashline_287 [label="hashline"]


hashline_287 -> { hashtag_288}
{rank=same; hashtag_288}

hashtag_288 [label="hashtag"]


hashtag_288 -> leaf_289
leaf_289  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_254 -> { raw_290}
{rank=same; raw_290}

raw_290 [label="raw"]


raw_290 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
be considered bad style.
"]
section_129 -> { header_292 prose_293 section_294 section_295 section_296}
{rank=same; header_292 prose_293 section_294 section_295 section_296}

header_292 [label="3 : Whitespace, Lines, and Indentation."]

prose_293 [label="prose"]

section_294 [label="section: 258-279"]

section_295 [label="section: 280-285"]

section_296 [label="section: 286-294"]


header_292 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Whitespace, Lines, and Indentation."]
prose_293 -> { raw_298}
{rank=same; raw_298}

raw_298 [label="raw"]


raw_298 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is a structured document format. There are semantics associated
with every character we encode.
"]
section_294 -> { header_300 prose_301 prose_302 prose_303 prose_304 prose_305}
{rank=same; header_300 prose_301 prose_302 prose_303 prose_304 prose_305}

header_300 [label="4 : Whitespace"]

prose_301 [label="prose"]

prose_302 [label="prose"]

prose_303 [label="prose"]

prose_304 [label="prose"]

prose_305 [label="prose"]


header_300 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Whitespace"]
prose_301 -> { raw_307}
{rank=same; raw_307}

raw_307 [label="raw"]


raw_307 -> leaf_308
leaf_308  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Whitespace is either the space or newline character. Returns are removed,
tabs resolved to two spaces by the formatter, the latter is warned against.
"]
prose_302 -> { raw_309}
{rank=same; raw_309}

raw_309 [label="raw"]


raw_309 -> leaf_310
leaf_310  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Most of the token-like categories we refer to must be surrounded by
whitespace. Newlines have semantics more often than they do not.
"]
prose_303 -> { raw_311 literal_312 raw_313}
{rank=same; raw_311 literal_312 raw_313}

raw_311 [label="raw"]

literal_312 [label="literal"]

raw_313 [label="raw"]


raw_311 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Unicode actually contains quite a number of whitespace characters. They are
all treated as a single ordinary space. If that space is semantically meaningful,
as in the space between "]
literal_312 -> leaf_315
leaf_315  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** A Headline"]
raw_313 -> leaf_316
leaf_316  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", it is filtered into an ordinary space.
Otherwise it's considered prose, the only filtration prose receives is tab->space
conversion.
"]
prose_304 -> { raw_317}
{rank=same; raw_317}

raw_317 [label="raw"]


raw_317 -> leaf_318
leaf_318  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire mercilessly enforces tab-space conversion, even on your code blocks.
I will cling to this tenet as long as I can, the tab character needs to die,
the world has decided, that key is special and shouldn't insert a special
dropping that looks like n spaces.
"]
prose_305 -> { raw_319 bold_320 raw_321}
{rank=same; raw_319 bold_320 raw_321}

raw_319 [label="raw"]

bold_320 [label="bold"]

raw_321 [label="raw"]


raw_319 -> leaf_322
leaf_322  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
bold_320 -> leaf_323
leaf_323  [color=Gray,shape=rectangle,fontname=Inconsolata,label="make"]
raw_321 -> leaf_324
leaf_324  [color=Gray,shape=rectangle,fontname=Inconsolata,label="? Outta my face with make. Yes, we'll have a make syntax, yes, it will
put the tabs back in.
"]
section_295 -> { header_325 prose_326}
{rank=same; header_325 prose_326}

header_325 [label="4 : Lines"]

prose_326 [label="prose"]


header_325 -> leaf_327
leaf_327  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Lines"]
prose_326 -> { raw_328}
{rank=same; raw_328}

raw_328 [label="raw"]


raw_328 -> leaf_329
leaf_329  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

When we refer to the beginning of a line, this allows for spaces before the
reference point. We call the absolute beginning of a line the first
position.
"]
section_296 -> { header_330 prose_331 prose_332 prose_333}
{rank=same; header_330 prose_331 prose_332 prose_333}

header_330 [label="4 : Indentation"]

prose_331 [label="prose"]

prose_332 [label="prose"]

prose_333 [label="prose"]


header_330 -> leaf_334
leaf_334  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Indentation"]
prose_331 -> { raw_335}
{rank=same; raw_335}

raw_335 [label="raw"]


raw_335 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is an indentation-aware language. Most kinds of block can be
arcically[fn:1] ordered by means of indentation.
"]
prose_332 -> { raw_337 italic_338 raw_339}
{rank=same; raw_337 italic_338 raw_339}

raw_337 [label="raw"]

italic_338 [label="italic"]

raw_339 [label="raw"]


raw_337 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indentation follows [[http:/"]
italic_338 -> leaf_341
leaf_341  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nim-lang.org"]
raw_339 -> leaf_342
leaf_342  [color=Gray,shape=rectangle,fontname=Inconsolata,label="manual.html#indentation][Nim rules]].
"]
prose_333 -> { raw_343}
{rank=same; raw_343}

raw_343 [label="raw"]


raw_343 -> leaf_344
leaf_344  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[fn:1] There's nothing sacred about ordered subrules, and if we're making up
a new word, let's drop the silent h. Webster was a cool guy."]
section_130 -> { header_345 prose_346 prose_347 prose_348 prose_349}
{rank=same; header_345 prose_346 prose_347 prose_348 prose_349}

header_345 [label="3 : Order of Recognition"]

prose_346 [label="prose"]

prose_347 [label="prose"]

prose_348 [label="prose"]

prose_349 [label="prose"]


header_345 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Order of Recognition"]
prose_346 -> { raw_351}
{rank=same; raw_351}

raw_351 [label="raw"]


raw_351 -> leaf_352
leaf_352  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Starting from the neutral context, which is always at a newline, Grimoire
tries to make one of its initializing special forms. Failing that, it will
begin a prose block.
"]
prose_347 -> { raw_353}
{rank=same; raw_353}

raw_353 [label="raw"]


raw_353 -> leaf_354
leaf_354  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If there is whitespace, it affects indentation level in indicated ways.
They will not directly affect the semantics of the following form, that is,
these rules apply after any potentially block-ending newline, apart from
spaces that may be found between the newline and the character.
"]
prose_348 -> { raw_355 literal_356 raw_357 literal_358 raw_359 literal_360 raw_361 literal_362 raw_363 literal_364 raw_365 literal_366 raw_367 literal_368 raw_369 literal_370 raw_371}
{rank=same; raw_355 literal_356 raw_357 literal_358 raw_359 literal_360 raw_361 literal_362 raw_363 literal_364 raw_365 literal_366 raw_367 literal_368 raw_369 literal_370 raw_371}

raw_355 [label="raw"]

literal_356 [label="literal"]

raw_357 [label="raw"]

literal_358 [label="literal"]

raw_359 [label="raw"]

literal_360 [label="literal"]

raw_361 [label="raw"]

literal_362 [label="literal"]

raw_363 [label="raw"]

literal_364 [label="literal"]

raw_365 [label="raw"]

literal_366 [label="literal"]

raw_367 [label="raw"]

literal_368 [label="literal"]

raw_369 [label="raw"]

literal_370 [label="literal"]

raw_371 [label="raw"]


raw_355 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
At present,  "]
literal_356 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_357 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_358 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#"]
raw_359 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",  "]
literal_360 -> leaf_377
leaf_377  [color=Gray,shape=rectangle,fontname=Inconsolata,label="|"]
raw_361 -> leaf_378
leaf_378  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_362 -> leaf_379
leaf_379  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-"]
raw_363 -> leaf_380
leaf_380  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",  , "]
literal_364 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~"]
raw_365 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",  "]
literal_366 -> leaf_383
leaf_383  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@"]
raw_367 -> leaf_384
leaf_384  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_368 -> leaf_385
leaf_385  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":"]
raw_369 -> leaf_386
leaf_386  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  and "]
literal_370 -> leaf_387
leaf_387  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{"]
raw_371 -> leaf_388
leaf_388  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  all create
special  contexts.  A  special  context  creates a  block  in a  context
specific way.
"]
prose_349 -> { raw_389}
{rank=same; raw_389}

raw_389 [label="raw"]


raw_389 -> leaf_390
leaf_390  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Blocks have a left associativity which can be recursive.
"]
section_131 -> { header_391 prose_392 prose_393 prose_394 prose_395 prose_396}
{rank=same; header_391 prose_392 prose_393 prose_394 prose_395 prose_396}

header_391 [label="3 : Blocks"]

prose_392 [label="prose"]

prose_393 [label="prose"]

prose_394 [label="prose"]

prose_395 [label="prose"]

prose_396 [label="prose"]


header_391 -> leaf_397
leaf_397  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Blocks"]
prose_392 -> { raw_398}
{rank=same; raw_398}

raw_398 [label="raw"]


raw_398 -> leaf_399
leaf_399  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is oriented around blocks.
"]
prose_393 -> { raw_400}
{rank=same; raw_400}

raw_400 [label="raw"]


raw_400 -> leaf_401
leaf_401  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Blocks are at least one line long,  all restarts are on a new line.  Any
syntactic structure smaller than a block we call an element.
"]
prose_394 -> { raw_402}
{rank=same; raw_402}

raw_402 [label="raw"]


raw_402 -> leaf_403
leaf_403  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Some types of blocks nest.  A document is a single  block.  There may be
other semantic units such as directories, I'd think a language that uses
strict  nested heirarchy  as powerfully  as Grimoire  could dictate  the
semantics of a file system, but that's currently out of scope.
"]
prose_395 -> { raw_404 literal_405 raw_406 literal_407 raw_408 literal_409 raw_410}
{rank=same; raw_404 literal_405 raw_406 literal_407 raw_408 literal_409 raw_410}

raw_404 [label="raw"]

literal_405 [label="literal"]

raw_406 [label="raw"]

literal_407 [label="literal"]

raw_408 [label="raw"]

literal_409 [label="literal"]

raw_410 [label="raw"]


raw_404 -> leaf_411
leaf_411  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indentation is relevant to some  kinds of blocks. In general, whitespace
matters quite a  bit in a Grimoire  document. We keep some  of the warts
out because the tab character is  illegal, and there will be a mandatory
formatter, "]
literal_405 -> leaf_412
leaf_412  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym  fmt"]
raw_406 -> leaf_413
leaf_413  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if  you will, that  does everything  from turning"]
literal_407 -> leaf_414
leaf_414  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**bold**"]
raw_408 -> leaf_415
leaf_415  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  into "]
literal_409 -> leaf_416
leaf_416  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*bold*"]
raw_410 -> leaf_417
leaf_417  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  (because the  extra stars  weren't used),  to
newline stripping, and so on.  This is normally applied incrementally by
the runtime editing environment.
"]
prose_396 -> { raw_418}
{rank=same; raw_418}

raw_418 [label="raw"]


raw_418 -> leaf_419
leaf_419  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indentation is human  readable and, with some care, a  computer may come
to the  same conclusions a  human would. I'm  still wary of  Python, but
there's no good  reason, unless the headache of most  Python not working
correctly  on my  computer, for  reasons I  can't track  down that  seem
related to  there being two languages  invoked as 'python', counts  as a
good reason.
"]
section_50 -> { header_420 prose_421 section_422}
{rank=same; header_420 prose_421 section_422}

header_420 [label="2 : Syntax"]

prose_421 [label="prose"]

section_422 [label="section: 344-407"]


header_420 -> leaf_423
leaf_423  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Syntax"]
prose_421 -> { raw_424}
{rank=same; raw_424}

raw_424 [label="raw"]


raw_424 -> leaf_425
leaf_425  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Now that we've established the basic constraints, let's
start our recursive descent into the parse.
"]
section_422 -> { header_426 prose_427 prose_428 prose_429 prose_430 prose_431 prose_432 structure_433 section_434 section_435}
{rank=same; header_426 prose_427 prose_428 prose_429 prose_430 prose_431 prose_432 structure_433 section_434 section_435}

header_426 [label="3 : Headers"]

prose_427 [label="prose"]

prose_428 [label="prose"]

prose_429 [label="prose"]

prose_430 [label="prose"]

prose_431 [label="prose"]

prose_432 [label="prose"]

structure_433 [label="structure"]

section_434 [label="section: 368-368"]

section_435 [label="section: 408-419"]


header_426 -> leaf_436
leaf_436  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Headers"]
prose_427 -> { raw_437}
{rank=same; raw_437}

raw_437 [label="raw"]


raw_437 -> leaf_438
leaf_438  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is arcically constrained by structure groups,
called headers.
"]
prose_428 -> { raw_439 literal_440 raw_441}
{rank=same; raw_439 literal_440 raw_441}

raw_439 [label="raw"]

literal_440 [label="literal"]

raw_441 [label="raw"]


raw_439 -> leaf_442
leaf_442  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These start on a new line and begin with any number of  "]
literal_440 -> leaf_443
leaf_443  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_441 -> leaf_444
leaf_444  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". These must
be followed by a space mark to be valid. Contra Babel, you may
have a content-free header line, provided a space is found before the
newline.
"]
prose_429 -> { raw_445}
{rank=same; raw_445}

raw_445 [label="raw"]


raw_445 -> leaf_446
leaf_446  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In weaves and the like, headers represent document structure. Their
intention is structural: they support the same syntax as lists,
but the user is expected to use lists for list purposes. Putting
[TODO] in a header line should mean you have a document-specific
task to perform in that block.
"]
prose_430 -> { raw_447}
{rank=same; raw_447}

raw_447 [label="raw"]


raw_447 -> leaf_448
leaf_448  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Contra Babel, you may put spaces before the beginning of a header line.
"]
prose_431 -> { raw_449}
{rank=same; raw_449}

raw_449 [label="raw"]


raw_449 -> leaf_450
leaf_450  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The semantics of header lines are entirely determined by
the number of stars.
"]
prose_432 -> { raw_451}
{rank=same; raw_451}

raw_451 [label="raw"]


raw_451 -> leaf_452
leaf_452  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If you write
"]
structure_433 -> { hashline_453}
{rank=same; hashline_453}

hashline_453 [label="hashline"]


hashline_453 -> { hashtag_454}
{rank=same; hashtag_454}

hashtag_454 [label="hashtag"]


hashtag_454 -> leaf_455
leaf_455  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_434 -> { header_456 prose_457 section_458}
{rank=same; header_456 prose_457 section_458}

header_456 [label="1 : Top Header"]

prose_457 [label="prose"]

section_458 [label="section: 369-380"]


header_456 -> leaf_459
leaf_459  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  * Top Header"]
prose_457 -> { raw_460}
{rank=same; raw_460}

raw_460 [label="raw"]


raw_460 -> leaf_461
leaf_461  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_458 -> { header_462 structure_463 structure_464 section_465}
{rank=same; header_462 structure_463 structure_464 section_465}

header_462 [label="2 : Second Header"]

structure_463 [label="structure"]

structure_464 [label="structure"]

section_465 [label="section: 381-381"]


header_462 -> leaf_466
leaf_466  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    ** Second Header"]
structure_463 -> { hashline_467}
{rank=same; hashline_467}

hashline_467 [label="hashline"]


hashline_467 -> { hashtag_468}
{rank=same; hashtag_468}

hashtag_468 [label="hashtag"]


hashtag_468 -> leaf_469
leaf_469  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_464 -> { hashline_470}
{rank=same; hashline_470}

hashline_470 [label="hashline"]


hashline_470 -> { hashtag_471}
{rank=same; hashtag_471}

hashtag_471 [label="hashtag"]


hashtag_471 -> leaf_472
leaf_472  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_465 -> { header_473 prose_474 section_475}
{rank=same; header_473 prose_474 section_475}

header_473 [label="1 : Top Header ▼"]

prose_474 [label="prose"]

section_475 [label="section: 382-731"]


header_473 -> leaf_476
leaf_476  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Top Header ▼"]
prose_474 -> { raw_477}
{rank=same; raw_477}

raw_477 [label="raw"]


raw_477 -> leaf_478
leaf_478  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_475 -> { header_479 structure_480 prose_481 prose_482 prose_483 section_484 section_485 section_486 section_487 section_488 section_489 section_490 section_491 section_492 section_493}
{rank=same; header_479 structure_480 prose_481 prose_482 prose_483 section_484 section_485 section_486 section_487 section_488 section_489 section_490 section_491 section_492 section_493}

header_479 [label="2 : Second Header ►"]

structure_480 [label="structure"]

prose_481 [label="prose"]

prose_482 [label="prose"]

prose_483 [label="prose"]

section_484 [label="section: 398-407"]

section_485 [label="section: 422-440"]

section_486 [label="section: 441-481"]

section_487 [label="section: 489-501"]

section_488 [label="section: 502-558"]

section_489 [label="section: 567-593"]

section_490 [label="section: 594-611"]

section_491 [label="section: 612-672"]

section_492 [label="section: 691-731"]

section_493 [label="section: 732-741"]


header_479 -> leaf_494
leaf_494  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   ** Second Header ►"]
structure_480 -> { hashline_495}
{rank=same; hashline_495}

hashline_495 [label="hashline"]


hashline_495 -> { hashtag_496}
{rank=same; hashtag_496}

hashtag_496 [label="hashtag"]


hashtag_496 -> leaf_497
leaf_497  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_481 -> { raw_498}
{rank=same; raw_498}

raw_498 [label="raw"]


raw_498 -> leaf_499
leaf_499  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
may contain any number of blocks.
"]
prose_482 -> { raw_500}
{rank=same; raw_500}

raw_500 [label="raw"]


raw_500 -> leaf_501
leaf_501  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
\"begins\" means first non-whitespace character. Indentation levels are tracked by
Nim rules, obviously a Grimoire document can contain no tab marks
and if any wander in they become four spaces.
"]
prose_483 -> { raw_502}
{rank=same; raw_502}

raw_502 [label="raw"]


raw_502 -> leaf_503
leaf_503  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Contra other block forms, tags may not precede a headline.
"]
section_484 -> { header_504 prose_505 prose_506 prose_507}
{rank=same; header_504 prose_505 prose_506 prose_507}

header_504 [label="4 : Header Lines"]

prose_505 [label="prose"]

prose_506 [label="prose"]

prose_507 [label="prose"]


header_504 -> leaf_508
leaf_508  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Header Lines"]
prose_505 -> { raw_509 literal_510 raw_511}
{rank=same; raw_509 literal_510 raw_511}

raw_509 [label="raw"]

literal_510 [label="literal"]

raw_511 [label="raw"]


raw_509 -> leaf_512
leaf_512  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Anything after a run of "]
literal_510 -> leaf_513
leaf_513  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_511 -> leaf_514
leaf_514  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and a space, and before a newline, is
a header line.
"]
prose_506 -> { raw_515}
{rank=same; raw_515}

raw_515 [label="raw"]


raw_515 -> leaf_516
leaf_516  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Header lines and list lines are structured identically. If I discover
a necessary exception, I'll note it.
"]
prose_507 -> { raw_517}
{rank=same; raw_517}

raw_517 [label="raw"]


raw_517 -> leaf_518
leaf_518  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That structure is discussed under [[*Lists][lists]].
"]
section_485 -> { header_519 prose_520 prose_521 structure_522 prose_523 prose_524 structure_525}
{rank=same; header_519 prose_520 prose_521 structure_522 prose_523 prose_524 structure_525}

header_519 [label="3 : Prose blocks"]

prose_520 [label="prose"]

prose_521 [label="prose"]

structure_522 [label="structure"]

prose_523 [label="prose"]

prose_524 [label="prose"]

structure_525 [label="structure"]


header_519 -> leaf_526
leaf_526  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Prose blocks"]
prose_520 -> { raw_527}
{rank=same; raw_527}

raw_527 [label="raw"]


raw_527 -> leaf_528
leaf_528  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A prose block is preceded and followed by a single newline. Extraneous
whitespace on the bare line is filtered.
"]
prose_521 -> { raw_529}
{rank=same; raw_529}

raw_529 [label="raw"]


raw_529 -> leaf_530
leaf_530  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose blocks may not be indented in a semantically meaningful way.
"]
structure_522 -> { hashline_531}
{rank=same; hashline_531}

hashline_531 [label="hashline"]


hashline_531 -> { hashtag_532}
{rank=same; hashtag_532}

hashtag_532 [label="hashtag"]


hashtag_532 -> leaf_533
leaf_533  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_523 -> { raw_534}
{rank=same; raw_534}

raw_534 [label="raw"]


raw_534 -> leaf_535
leaf_535  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
    prose
"]
prose_524 -> { raw_536}
{rank=same; raw_536}

raw_536 [label="raw"]


raw_536 -> leaf_537
leaf_537  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
        prose
"]
structure_525 -> { hashline_538}
{rank=same; hashline_538}

hashline_538 [label="hashline"]


hashline_538 -> { hashtag_539}
{rank=same; hashtag_539}

hashtag_539 [label="hashtag"]


hashtag_539 -> leaf_540
leaf_540  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_486 -> { header_541 prose_542 prose_543 prose_544 prose_545 prose_546 prose_547 prose_548 structure_549 prose_550 prose_551 prose_552 section_553}
{rank=same; header_541 prose_542 prose_543 prose_544 prose_545 prose_546 prose_547 prose_548 structure_549 prose_550 prose_551 prose_552 section_553}

header_541 [label="3 : Prose markup"]

prose_542 [label="prose"]

prose_543 [label="prose"]

prose_544 [label="prose"]

prose_545 [label="prose"]

prose_546 [label="prose"]

prose_547 [label="prose"]

prose_548 [label="prose"]

structure_549 [label="structure"]

prose_550 [label="prose"]

prose_551 [label="prose"]

prose_552 [label="prose"]

section_553 [label="section: 482-488"]


header_541 -> leaf_554
leaf_554  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Prose markup"]
prose_542 -> { raw_555}
{rank=same; raw_555}

raw_555 [label="raw"]


raw_555 -> leaf_556
leaf_556  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Prose markup rules apply in any prose contexts, not just for prose blocks.
"]
prose_543 -> { raw_557 literal_558 raw_559 literal_560 raw_561 literal_562 raw_563 literal_564 raw_565 literal_566 raw_567 literal_568 raw_569 literal_570 raw_571}
{rank=same; raw_557 literal_558 raw_559 literal_560 raw_561 literal_562 raw_563 literal_564 raw_565 literal_566 raw_567 literal_568 raw_569 literal_570 raw_571}

raw_557 [label="raw"]

literal_558 [label="literal"]

raw_559 [label="raw"]

literal_560 [label="literal"]

raw_561 [label="raw"]

literal_562 [label="literal"]

raw_563 [label="raw"]

literal_564 [label="literal"]

raw_565 [label="raw"]

literal_566 [label="literal"]

raw_567 [label="raw"]

literal_568 [label="literal"]

raw_569 [label="raw"]

literal_570 [label="literal"]

raw_571 [label="raw"]


raw_557 -> leaf_572
leaf_572  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We mark "]
literal_558 -> leaf_573
leaf_573  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*bold*"]
raw_559 -> leaf_574
leaf_574  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_560 -> leaf_575
leaf_575  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/italic/"]
raw_561 -> leaf_576
leaf_576  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_562 -> leaf_577
leaf_577  [color=Gray,shape=rectangle,fontname=Inconsolata,label="_underline_"]
raw_563 -> leaf_578
leaf_578  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_564 -> leaf_579
leaf_579  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~strikethrough~"]
raw_565 -> leaf_580
leaf_580  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", 
and "]
literal_566 -> leaf_581
leaf_581  [color=Gray,shape=rectangle,fontname=Inconsolata,label="​"]
raw_567 -> leaf_582
leaf_582  [color=Gray,shape=rectangle,fontname=Inconsolata,label="literal"]
literal_568 -> leaf_583
leaf_583  [color=Gray,shape=rectangle,fontname=Inconsolata,label="​"]
raw_569 -> leaf_584
leaf_584  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", using the indicated marks. They must not be separated 
with whitespace from the connecting prose. Any number may be used and matched,
whitespace is allowed, so "]
literal_570 -> leaf_585
leaf_585  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**bold math: 4 * 5**"]
raw_571 -> leaf_586
leaf_586  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will highlight
correctly.
"]
prose_544 -> { raw_587 literal_588 raw_589}
{rank=same; raw_587 literal_588 raw_589}

raw_587 [label="raw"]

literal_588 [label="literal"]

raw_589 [label="raw"]


raw_587 -> leaf_590
leaf_590  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is also [[*Inline%20Code][Inline Code]], which is formatted "]
literal_588 -> leaf_591
leaf_591  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`code`"]
raw_589 -> leaf_592
leaf_592  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_545 -> { raw_593}
{rank=same; raw_593}

raw_593 [label="raw"]


raw_593 -> leaf_594
leaf_594  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These all follow the prose markup rule: any number of the starting
character matches the same number of the ending character in the
document string.
"]
prose_546 -> { raw_595 literal_596 raw_597 literal_598 raw_599 literal_600 raw_601 literal_602 raw_603}
{rank=same; raw_595 literal_596 raw_597 literal_598 raw_599 literal_600 raw_601 literal_602 raw_603}

raw_595 [label="raw"]

literal_596 [label="literal"]

raw_597 [label="raw"]

literal_598 [label="literal"]

raw_599 [label="raw"]

literal_600 [label="literal"]

raw_601 [label="raw"]

literal_602 [label="literal"]

raw_603 [label="raw"]


raw_595 -> leaf_604
leaf_604  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We make subscripts mildly annoying, "]
literal_596 -> leaf_605
leaf_605  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sub__script"]
raw_597 -> leaf_606
leaf_606  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
literal_598 -> leaf_607
leaf_607  [color=Gray,shape=rectangle,fontname=Inconsolata,label="super^^script"]
raw_599 -> leaf_608
leaf_608  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", 
to avoid colliding the former with "]
literal_600 -> leaf_609
leaf_609  [color=Gray,shape=rectangle,fontname=Inconsolata,label="snake_case"]
raw_601 -> leaf_610
leaf_610  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". That's a lot of ways 
to parse the "]
literal_602 -> leaf_611
leaf_611  [color=Gray,shape=rectangle,fontname=Inconsolata,label="_"]
raw_603 -> leaf_612
leaf_612  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" character...
"]
prose_547 -> { raw_613 literal_614 raw_615}
{rank=same; raw_613 literal_614 raw_615}

raw_613 [label="raw"]

literal_614 [label="literal"]

raw_615 [label="raw"]


raw_613 -> leaf_616
leaf_616  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In general, prose is more 'active'  than in Babel. There are more things
you can't say without triggering a parsed data structure.  Due to quirks
of Org  involving string  escaping, "]
literal_614 -> leaf_617
leaf_617  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`\\\"\\\"`"]
raw_615 -> leaf_618
leaf_618  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  can't be  literally quoted
without repercussions. Check  out the source if you enjoy pounding your
head in frustration at the nastiness of escaped strings.
"]
prose_548 -> { raw_619}
{rank=same; raw_619}

raw_619 [label="raw"]


raw_619 -> leaf_620
leaf_620  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Let's just use a code block:
"]
structure_549 -> { hashline_621}
{rank=same; hashline_621}

hashline_621 [label="hashline"]


hashline_621 -> { hashtag_622}
{rank=same; hashtag_622}

hashtag_622 [label="hashtag"]


hashtag_622 -> leaf_623
leaf_623  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_550 -> { raw_624 literal_625 raw_626 bold_627 raw_628}
{rank=same; raw_624 literal_625 raw_626 bold_627 raw_628}

raw_624 [label="raw"]

literal_625 [label="literal"]

raw_626 [label="raw"]

bold_627 [label="bold"]

raw_628 [label="raw"]


raw_624 -> leaf_629
leaf_629  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
one, of the \" character. This is pretty-printed in edit mode as "]
literal_625 -> leaf_630
leaf_630  [color=Gray,shape=rectangle,fontname=Inconsolata,label="‟literal”"]
raw_626 -> leaf_631
leaf_631  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
but such a string does "]
bold_627 -> leaf_632
leaf_632  [color=Gray,shape=rectangle,fontname=Inconsolata,label="not"]
raw_628 -> leaf_633
leaf_633  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" create escaping, we rely on semantic highlighting
to make the distinction clear.
"]
prose_551 -> { raw_634}
{rank=same; raw_634}

raw_634 [label="raw"]


raw_634 -> leaf_635
leaf_635  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Any number of \"\"\"\" collapse into one set of such balanced quites.
"]
prose_552 -> { raw_636}
{rank=same; raw_636}

raw_636 [label="raw"]


raw_636 -> leaf_637
leaf_637  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the woven documentation, no quotation marks appear, just the string.
"]
section_553 -> { header_638 prose_639}
{rank=same; header_638 prose_639}

header_638 [label="4 : Latex"]

prose_639 [label="prose"]


header_638 -> leaf_640
leaf_640  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Latex"]
prose_639 -> { raw_641 literal_642 raw_643}
{rank=same; raw_641 literal_642 raw_643}

raw_641 [label="raw"]

literal_642 [label="literal"]

raw_643 [label="raw"]


raw_641 -> leaf_644
leaf_644  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

For further markup purposes in a prose context, we escape to LaTeX. The
syntax is "]
literal_642 -> leaf_645
leaf_645  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`\\latex`"]
raw_643 -> leaf_646
leaf_646  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", where the backslash causes us to use LaTeX instead
of Lua. Our TeX backend is LuaTeX, giving arbitrary levels of control from
within a Grimoire-native language.
"]
section_487 -> { header_647 prose_648 prose_649 prose_650}
{rank=same; header_647 prose_648 prose_649 prose_650}

header_647 [label="3 : Comments"]

prose_648 [label="prose"]

prose_649 [label="prose"]

prose_650 [label="prose"]


header_647 -> leaf_651
leaf_651  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Comments"]
prose_648 -> { raw_652 literal_653 raw_654}
{rank=same; raw_652 literal_653 raw_654}

raw_652 [label="raw"]

literal_653 [label="literal"]

raw_654 [label="raw"]


raw_652 -> leaf_655
leaf_655  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

In a structure context, you may place line comments. These begin with "]
literal_653 -> leaf_656
leaf_656  [color=Gray,shape=rectangle,fontname=Inconsolata,label="--"]
raw_654 -> leaf_657
leaf_657  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
and continue to the end of a line.
"]
prose_649 -> { raw_658 bold_659 raw_660}
{rank=same; raw_658 bold_659 raw_660}

raw_658 [label="raw"]

bold_659 [label="bold"]

raw_660 [label="raw"]


raw_658 -> leaf_661
leaf_661  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Commenting out a header line, or anything else, causes it to be ignored.
It does "]
bold_659 -> leaf_662
leaf_662  [color=Gray,shape=rectangle,fontname=Inconsolata,label="not"]
raw_660 -> leaf_663
leaf_663  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" result in any subdata being commented out, though it will
in the case of a headline change the ownership of the owned blocks.
"]
prose_650 -> { raw_664 literal_665 raw_666}
{rank=same; raw_664 literal_665 raw_666}

raw_664 [label="raw"]

literal_665 [label="literal"]

raw_666 [label="raw"]


raw_664 -> leaf_667
leaf_667  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The  tag "]
literal_665 -> leaf_668
leaf_668  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#comment"]
raw_666 -> leaf_669
leaf_669  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  in a  valid tag  content position  marks the  owned
region  of  the tagged  block  as  a  comment.  Nothing within  will  be
evaluated or exported, though it will be parsed.
"]
section_488 -> { header_670 prose_671 prose_672 prose_673 prose_674 prose_675 prose_676 prose_677 prose_678 prose_679 prose_680 prose_681 prose_682 prose_683 prose_684 prose_685 prose_686 section_687}
{rank=same; header_670 prose_671 prose_672 prose_673 prose_674 prose_675 prose_676 prose_677 prose_678 prose_679 prose_680 prose_681 prose_682 prose_683 prose_684 prose_685 prose_686 section_687}

header_670 [label="3 : Marks"]

prose_671 [label="prose"]

prose_672 [label="prose"]

prose_673 [label="prose"]

prose_674 [label="prose"]

prose_675 [label="prose"]

prose_676 [label="prose"]

prose_677 [label="prose"]

prose_678 [label="prose"]

prose_679 [label="prose"]

prose_680 [label="prose"]

prose_681 [label="prose"]

prose_682 [label="prose"]

prose_683 [label="prose"]

prose_684 [label="prose"]

prose_685 [label="prose"]

prose_686 [label="prose"]

section_687 [label="section: 559-566"]


header_670 -> leaf_688
leaf_688  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Marks"]
prose_671 -> { raw_689}
{rank=same; raw_689}

raw_689 [label="raw"]


raw_689 -> leaf_690
leaf_690  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Marks provide global semantic categories for Grimoire. They may appear
anywhere, including a prose context, whitespace is required on both sides.
"]
prose_672 -> { raw_691 literal_692 raw_693 literal_694 raw_695}
{rank=same; raw_691 literal_692 raw_693 literal_694 raw_695}

raw_691 [label="raw"]

literal_692 [label="literal"]

raw_693 [label="raw"]

literal_694 [label="literal"]

raw_695 [label="raw"]


raw_691 -> leaf_696
leaf_696  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We use  a couple kinds  of marks:  "]
literal_692 -> leaf_697
leaf_697  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@names"]
raw_693 -> leaf_698
leaf_698  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" name things,  and "]
literal_694 -> leaf_699
leaf_699  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#tags"]
raw_695 -> leaf_700
leaf_700  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
categorize them. Tags are semantics, while names are nominal. 
"]
prose_673 -> { raw_701 literal_702 raw_703 literal_704 raw_705}
{rank=same; raw_701 literal_702 raw_703 literal_704 raw_705}

raw_701 [label="raw"]

literal_702 [label="literal"]

raw_703 [label="raw"]

literal_704 [label="literal"]

raw_705 [label="raw"]


raw_701 -> leaf_706
leaf_706  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags that  are boundaries are  paired as  "]
literal_702 -> leaf_707
leaf_707  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#tag"]
raw_703 -> leaf_708
leaf_708  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
literal_704 -> leaf_709
leaf_709  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#/tag"]
raw_705 -> leaf_710
leaf_710  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",  plus some
light sugaring. Names are never bounded
"]
prose_674 -> { raw_711}
{rank=same; raw_711}

raw_711 [label="raw"]


raw_711 -> leaf_712
leaf_712  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Marks in the first position own the following line. If there is indentation
below that line, they own that too. This doesn't affect the associativity.
"]
prose_675 -> { raw_713 literal_714 raw_715 literal_716 raw_717}
{rank=same; raw_713 literal_714 raw_715 literal_716 raw_717}

raw_713 [label="raw"]

literal_714 [label="literal"]

raw_715 [label="raw"]

literal_716 [label="literal"]

raw_717 [label="raw"]


raw_713 -> leaf_718
leaf_718  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Marks may be namespaced, as "]
literal_714 -> leaf_719
leaf_719  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@name.subname"]
raw_715 -> leaf_720
leaf_720  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or "]
literal_716 -> leaf_721
leaf_721  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#tag.sub-tag.sub-tag"]
raw_717 -> leaf_722
leaf_722  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_676 -> { raw_723 literal_724 raw_725 literal_726 raw_727}
{rank=same; raw_723 literal_724 raw_725 literal_726 raw_727}

raw_723 [label="raw"]

literal_724 [label="literal"]

raw_725 [label="raw"]

literal_726 [label="literal"]

raw_727 [label="raw"]


raw_723 -> leaf_728
leaf_728  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If  you  require   further  namespacing,  "]
literal_724 -> leaf_729
leaf_729  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@many/levels/java.class"]
raw_725 -> leaf_730
leaf_730  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  and"]
literal_726 -> leaf_731
leaf_731  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#mojo/nation.space/station"]
raw_727 -> leaf_732
leaf_732  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  is your  friend. Codices (that is, projects
following the bridge conventions for organization) will use namespacing
in a consistent way. 
"]
prose_677 -> { raw_733 literal_734 raw_735}
{rank=same; raw_733 literal_734 raw_735}

raw_733 [label="raw"]

literal_734 [label="literal"]

raw_735 [label="raw"]


raw_733 -> leaf_736
leaf_736  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
As I continue to muse on it, I  can think of no reason why marks couldn't follow
URI syntax,  or at  least mirror  it closely.  Chaining marks  is not  valid, so"]
literal_734 -> leaf_737
leaf_737  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@named@example.com"]
raw_735 -> leaf_738
leaf_738  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" could be a valid name. 
"]
prose_678 -> { raw_739 literal_740 raw_741}
{rank=same; raw_739 literal_740 raw_741}

raw_739 [label="raw"]

literal_740 [label="literal"]

raw_741 [label="raw"]


raw_739 -> leaf_742
leaf_742  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This would mean we could say something like "]
literal_740 -> leaf_743
leaf_743  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@file://~/usr/blah"]
raw_741 -> leaf_744
leaf_744  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_679 -> { raw_745 literal_746 raw_747}
{rank=same; raw_745 literal_746 raw_747}

raw_745 [label="raw"]

literal_746 [label="literal"]

raw_747 [label="raw"]


raw_745 -> leaf_748
leaf_748  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Or "]
literal_746 -> leaf_749
leaf_749  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!/usr/bin/perl/"]
raw_747 -> leaf_750
leaf_750  [color=Gray,shape=rectangle,fontname=Inconsolata,label="...
"]
prose_680 -> { raw_751 italic_752 raw_753}
{rank=same; raw_751 italic_752 raw_753}

raw_751 [label="raw"]

italic_752 [label="italic"]

raw_753 [label="raw"]


raw_751 -> leaf_754
leaf_754  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Yes. This  is a good idea.  Let's do this.  It doesn't displace [[*Links][link]]  syntax, it
enhances it. A  URI [[http:/"]
italic_752 -> leaf_755
leaf_755  [color=Gray,shape=rectangle,fontname=Inconsolata,label="en.wikipedia.org"]
raw_753 -> leaf_756
leaf_756  [color=Gray,shape=rectangle,fontname=Inconsolata,label="wiki/URI_scheme#Generic_syntax][may not begin with  a slash]] so this is  parse-clean for tags
and names both. Tags aren't intended to  be user extensible in the narrow sense,
but uniformity is a virtue.
"]
prose_681 -> { raw_757}
{rank=same; raw_757}

raw_757 [label="raw"]


raw_757 -> leaf_758
leaf_758  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't know why you might want to stick a query in a tag. It's not my
place to know. We just slap a parser on that puppy and continue.
"]
prose_682 -> { raw_759}
{rank=same; raw_759}

raw_759 [label="raw"]


raw_759 -> leaf_760
leaf_760  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Implication: The hash or at should be syntax highlighted a different color
from the tag. I'd say hash and at get the same color, with categories and
symbols getting different ones.
"]
prose_683 -> { raw_761 italic_762 raw_763 italic_764 raw_765}
{rank=same; raw_761 italic_762 raw_763 italic_764 raw_765}

raw_761 [label="raw"]

italic_762 [label="italic"]

raw_763 [label="raw"]

italic_764 [label="italic"]

raw_765 [label="raw"]


raw_761 -> leaf_766
leaf_766  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Apparently, [[http:/"]
italic_762 -> leaf_767
leaf_767  [color=Gray,shape=rectangle,fontname=Inconsolata,label="blog.nig.gl"]
raw_763 -> leaf_768
leaf_768  [color=Gray,shape=rectangle,fontname=Inconsolata,label="post"]
italic_764 -> leaf_769
leaf_769  [color=Gray,shape=rectangle,fontname=Inconsolata,label="48802013022"]
raw_765 -> leaf_770
leaf_770  [color=Gray,shape=rectangle,fontname=Inconsolata,label="although-parentheses-are-technically-allowed-in][parentheses are allowed in URLs]], but follow the link, they
suck and you should never use them. They play badly with our calling
convention for named structures, and aren't allowed in our schema.
"]
prose_684 -> { raw_771 literal_772 raw_773}
{rank=same; raw_771 literal_772 raw_773}

raw_771 [label="raw"]

literal_772 [label="literal"]

raw_773 [label="raw"]


raw_771 -> leaf_774
leaf_774  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not a real URI anyway, or it can be but it's also allowed to be a legal
fragment without the handle. In our case the assumed handle is "]
literal_772 -> leaf_775
leaf_775  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grimoire://"]
raw_773 -> leaf_776
leaf_776  [color=Gray,shape=rectangle,fontname=Inconsolata,label="?
"]
prose_685 -> { raw_777}
{rank=same; raw_777}

raw_777 [label="raw"]


raw_777 -> leaf_778
leaf_778  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Not a real URI. But an acceptable fake one.
"]
prose_686 -> { raw_779 literal_780 raw_781 literal_782 raw_783}
{rank=same; raw_779 literal_780 raw_781 literal_782 raw_783}

raw_779 [label="raw"]

literal_780 [label="literal"]

raw_781 [label="raw"]

literal_782 [label="literal"]

raw_783 [label="raw"]


raw_779 -> leaf_784
leaf_784  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The actual rule for a mark is that it begins with "]
literal_780 -> leaf_785
leaf_785  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@"]
raw_781 -> leaf_786
leaf_786  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or "]
literal_782 -> leaf_787
leaf_787  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#"]
raw_783 -> leaf_788
leaf_788  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and is surrounded
by whitespace. Internal parsing of the mark is part of recognition, anything 
not recognized is subsequently ignored. It's still considered a mark for e.g. 
weaving purposes. 


"]
section_687 -> { header_789 prose_790 prose_791}
{rank=same; header_789 prose_790 prose_791}

header_789 [label="4 : Plural Hashtags"]

prose_790 [label="prose"]

prose_791 [label="prose"]


header_789 -> leaf_792
leaf_792  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Plural Hashtags"]
prose_790 -> { raw_793 literal_794 raw_795 literal_796 raw_797}
{rank=same; raw_793 literal_794 raw_795 literal_796 raw_797}

raw_793 [label="raw"]

literal_794 [label="literal"]

raw_795 [label="raw"]

literal_796 [label="literal"]

raw_797 [label="raw"]


raw_793 -> leaf_798
leaf_798  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

In some cases, such as "]
literal_794 -> leaf_799
leaf_799  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#formula"]
raw_795 -> leaf_800
leaf_800  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
literal_796 -> leaf_801
leaf_801  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#formulas"]
raw_797 -> leaf_802
leaf_802  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", a tag may have a
singular or plural form. These are equivalent from the runtimes perspective.
"]
prose_791 -> { raw_803 literal_804 raw_805 literal_806 raw_807}
{rank=same; raw_803 literal_804 raw_805 literal_806 raw_807}

raw_803 [label="raw"]

literal_804 [label="literal"]

raw_805 [label="raw"]

literal_806 [label="literal"]

raw_807 [label="raw"]


raw_803 -> leaf_808
leaf_808  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The same concept applies to pairs such as "]
literal_804 -> leaf_809
leaf_809  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#export"]
raw_805 -> leaf_810
leaf_810  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
literal_806 -> leaf_811
leaf_811  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#exports"]
raw_807 -> leaf_812
leaf_812  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", though
the linguistic distinction is not that of plurality.
"]
section_489 -> { header_813 prose_814 prose_815 prose_816 prose_817 prose_818 prose_819}
{rank=same; header_813 prose_814 prose_815 prose_816 prose_817 prose_818 prose_819}

header_813 [label="3 : Classes"]

prose_814 [label="prose"]

prose_815 [label="prose"]

prose_816 [label="prose"]

prose_817 [label="prose"]

prose_818 [label="prose"]

prose_819 [label="prose"]


header_813 -> leaf_820
leaf_820  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Classes"]
prose_814 -> { raw_821}
{rank=same; raw_821}

raw_821 [label="raw"]


raw_821 -> leaf_822
leaf_822  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Tags are for Grimoire. A category provides runtime semantics,
cooperating with structure groups to provide the API. Names
play the role of a value in languages which provide a
value-variable distinction: every name within a documents reachable
namespace must be globally unique.
"]
prose_815 -> { raw_823}
{rank=same; raw_823}

raw_823 [label="raw"]


raw_823 -> leaf_824
leaf_824  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Specifically names are globally hyperstatic: any redefinition affects
the referent from the moment the parser receives it forward. Redefinitions
are warned against and have no utility, don't do it.
"]
prose_816 -> { raw_825}
{rank=same; raw_825}

raw_825 [label="raw"]


raw_825 -> leaf_826
leaf_826  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Classes are roughly equivalent to categories/hashtags, but
for the user. They have a light semantics similar to their
function in Org.
"]
prose_817 -> { raw_827 literal_828 raw_829 literal_830 raw_831 literal_832 raw_833}
{rank=same; raw_827 literal_828 raw_829 literal_830 raw_831 literal_832 raw_833}

raw_827 [label="raw"]

literal_828 [label="literal"]

raw_829 [label="raw"]

literal_830 [label="literal"]

raw_831 [label="raw"]

literal_832 [label="literal"]

raw_833 [label="raw"]


raw_827 -> leaf_834
leaf_834  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A class is defined as "]
literal_828 -> leaf_835
leaf_835  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":Class:"]
raw_829 -> leaf_836
leaf_836  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or "]
literal_830 -> leaf_837
leaf_837  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":class:"]
raw_831 -> leaf_838
leaf_838  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" including"]
literal_832 -> leaf_839
leaf_839  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":several:Classes:chained:"]
raw_833 -> leaf_840
leaf_840  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_818 -> { raw_841}
{rank=same; raw_841}

raw_841 [label="raw"]


raw_841 -> leaf_842
leaf_842  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A capital letter means the class inherits onto all subgroups of the block,
a miniscule means the class is associated with the indentation level it is
found within.
"]
prose_819 -> { raw_843}
{rank=same; raw_843}

raw_843 [label="raw"]


raw_843 -> leaf_844
leaf_844  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You know you're programming a computer when class and category have distinct
semantics. At least there are no objects, and only two primitive types,
structure and prose.
"]
section_490 -> { header_845 prose_846 prose_847 structure_848 prose_849 prose_850}
{rank=same; header_845 prose_846 prose_847 structure_848 prose_849 prose_850}

header_845 [label="3 : Links"]

prose_846 [label="prose"]

prose_847 [label="prose"]

structure_848 [label="structure"]

prose_849 [label="prose"]

prose_850 [label="prose"]


header_845 -> leaf_851
leaf_851  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Links"]
prose_846 -> { raw_852}
{rank=same; raw_852}

raw_852 [label="raw"]


raw_852 -> leaf_853
leaf_853  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

There's nothing at all wrong with the syntax or behavior of Babel links.
"]
prose_847 -> { raw_854}
{rank=same; raw_854}

raw_854 [label="raw"]


raw_854 -> leaf_855
leaf_855  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which look like this:
"]
structure_848 -> { hashline_856}
{rank=same; hashline_856}

hashline_856 [label="hashline"]


hashline_856 -> { hashtag_857}
{rank=same; hashtag_857}

hashtag_857 [label="hashtag"]


hashtag_857 -> leaf_858
leaf_858  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_849 -> { raw_859 literal_860 raw_861}
{rank=same; raw_859 literal_860 raw_861}

raw_859 [label="raw"]

literal_860 [label="literal"]

raw_861 [label="raw"]


raw_859 -> leaf_862
leaf_862  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We won't support legacy forms of footnoting, such as "]
literal_860 -> leaf_863
leaf_863  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[1]"]
raw_861 -> leaf_864
leaf_864  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". This applies
to legacy versions of table formulas and list syntax also.
"]
prose_850 -> { raw_865}
{rank=same; raw_865}

raw_865 [label="raw"]


raw_865 -> leaf_866
leaf_866  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In Grimoire  there's one way  to do things.  At least, we  avoid variant
syntax with identical semantics.
"]
section_491 -> { header_867 prose_868 prose_869 prose_870 prose_871 prose_872 structure_873 prose_874 prose_875 prose_876 prose_877 prose_878 prose_879 prose_880 prose_881 section_882}
{rank=same; header_867 prose_868 prose_869 prose_870 prose_871 prose_872 structure_873 prose_874 prose_875 prose_876 prose_877 prose_878 prose_879 prose_880 prose_881 section_882}

header_867 [label="3 : Cookies"]

prose_868 [label="prose"]

prose_869 [label="prose"]

prose_870 [label="prose"]

prose_871 [label="prose"]

prose_872 [label="prose"]

structure_873 [label="structure"]

prose_874 [label="prose"]

prose_875 [label="prose"]

prose_876 [label="prose"]

prose_877 [label="prose"]

prose_878 [label="prose"]

prose_879 [label="prose"]

prose_880 [label="prose"]

prose_881 [label="prose"]

section_882 [label="section: 673-690"]


header_867 -> leaf_883
leaf_883  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Cookies"]
prose_868 -> { raw_884 literal_885 raw_886}
{rank=same; raw_884 literal_885 raw_886}

raw_884 [label="raw"]

literal_885 [label="literal"]

raw_886 [label="raw"]


raw_884 -> leaf_887
leaf_887  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

List line contexts (header lines and list lines) may have cookies. A
cookie looks like "]
literal_885 -> leaf_888
leaf_888  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[ ]"]
raw_886 -> leaf_889
leaf_889  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", it must have contents and a space on both sides.
"]
prose_869 -> { raw_890}
{rank=same; raw_890}

raw_890 [label="raw"]


raw_890 -> leaf_891
leaf_891  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies are valid after the symbol that defines the list line, but before
anything else. They are also valid at the end of a list line, in which
case they are preceded by a space and followed by a newline.
"]
prose_870 -> { raw_892}
{rank=same; raw_892}

raw_892 [label="raw"]


raw_892 -> leaf_893
leaf_893  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies are distinctive in that they may only be applied to list lines.
Most other token-like groups, specifically tags, classes, and inline drawers,
may be embedded into all prose contexts excepting literal strings.
"]
prose_871 -> { raw_894}
{rank=same; raw_894}

raw_894 [label="raw"]


raw_894 -> leaf_895
leaf_895  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies are used similarly to cookies in Org, but with consistent semantics.
A simple cookie set is \"X\" and \" \", the user cycles through them. TODO and
DONE are another option.
"]
prose_872 -> { raw_896 italic_897 raw_898}
{rank=same; raw_896 italic_897 raw_898}

raw_896 [label="raw"]

italic_897 [label="italic"]

raw_898 [label="raw"]


raw_896 -> leaf_899
leaf_899  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't want cookies to turn into lightweight tables. Still, saying to
the user \"you may have precisely two cookies a line\" is restrictive.
It's not a violation of the [[http:/"]
italic_897 -> leaf_900
leaf_900  [color=Gray,shape=rectangle,fontname=Inconsolata,label="c2.com"]
raw_898 -> leaf_901
leaf_901  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cgi/wiki?TwoIsAnImpossibleNumber][\"Two is an Impossible Number\"]] principle,
because they're head and tail. I think this is ugly:
"]
structure_873 -> { hashline_902}
{rank=same; hashline_902}

hashline_902 [label="hashline"]


hashline_902 -> { hashtag_903}
{rank=same; hashtag_903}

hashtag_903 [label="hashtag"]


hashtag_903 -> leaf_904
leaf_904  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_874 -> { raw_905}
{rank=same; raw_905}

raw_905 [label="raw"]


raw_905 -> leaf_906
leaf_906  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You can stick a table in a list. I don't know if I mentioned, it's kind
of an obvious thing, I'll write a unit for it at some point.
"]
prose_875 -> { raw_907}
{rank=same; raw_907}

raw_907 [label="raw"]


raw_907 -> leaf_908
leaf_908  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Still. I can see a case for two on the left. Once you allow two, you allow
n, without excellent reason.
"]
prose_876 -> { raw_909}
{rank=same; raw_909}

raw_909 [label="raw"]


raw_909 -> leaf_910
leaf_910  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[[*Radio%20cookies][Radio cookies]] must be the leftmost cookie on a line, only one is of course allowed.
I could allow a single-line short form multi-radio-button interface but what
is it, a fancy text slider for some value? No. Any number of ordinary cookies
can follow. Knock yourself out.
"]
prose_877 -> { raw_911}
{rank=same; raw_911}

raw_911 [label="raw"]


raw_911 -> leaf_912
leaf_912  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Anything more than a couple and one should consider a class or a table.
Handrolling data structures is perverse in a markup language, and I'm
still tempted to forbid it.
"]
prose_878 -> { raw_913 italic_914 raw_915}
{rank=same; raw_913 italic_914 raw_915}

raw_913 [label="raw"]

italic_914 [label="italic"]

raw_915 [label="raw"]


raw_913 -> leaf_916
leaf_916  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't like distinctions without difference. A cookie at the end of a
line is filled by Grimoire, not the user. This mirrors Org's use, which is
to display either a percent or a n"]
italic_914 -> leaf_917
leaf_917  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m marker for completion of list items.
The user seeds the cookie, in these cases with =%= or ="]
raw_915 -> leaf_918
leaf_918  [color=Gray,shape=rectangle,fontname=Inconsolata,label="=, and the runtime
does the rest.
"]
prose_879 -> { raw_919}
{rank=same; raw_919}

raw_919 [label="raw"]


raw_919 -> leaf_920
leaf_920  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Adding more than one such structure to the tail list would complicate the
reference syntax, which I haven't designed, and again, it's just not necessary.
Grimoire can fill in any data structure, \"n-dimensional end cookie array\"
isn't one we have a compelling need for.
"]
prose_880 -> { raw_921}
{rank=same; raw_921}

raw_921 [label="raw"]


raw_921 -> leaf_922
leaf_922  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies could interact badly with link syntax. I don't think a [bare box]
qualifies as a link in Org, clearly it doesn't, we can follow that notion
and disallow \"[]\" as a filling for cookies.
"]
prose_881 -> { raw_923}
{rank=same; raw_923}

raw_923 [label="raw"]


raw_923 -> leaf_924
leaf_924  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I also think they should be allowed in table cells, which have their own
context which is mostly handwaved right now but is prose++.
"]
section_882 -> { header_925 prose_926 prose_927 prose_928 prose_929}
{rank=same; header_925 prose_926 prose_927 prose_928 prose_929}

header_925 [label="4 : Radio cookies"]

prose_926 [label="prose"]

prose_927 [label="prose"]

prose_928 [label="prose"]

prose_929 [label="prose"]


header_925 -> leaf_930
leaf_930  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Radio cookies"]
prose_926 -> { raw_931 literal_932 raw_933}
{rank=same; raw_931 literal_932 raw_933}

raw_931 [label="raw"]

literal_932 [label="literal"]

raw_933 [label="raw"]


raw_931 -> leaf_934
leaf_934  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We have one 'weird cookie'. A radio cookie, which looks like "]
literal_932 -> leaf_935
leaf_935  [color=Gray,shape=rectangle,fontname=Inconsolata,label="( )"]
raw_933 -> leaf_936
leaf_936  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
must be present at the head position of list line contexts. All
list lines at the same level of indentation must have one, if one does.
"]
prose_927 -> { raw_937}
{rank=same; raw_937}

raw_937 [label="raw"]


raw_937 -> leaf_938
leaf_938  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Only one is selected at any given time. These would be awkward to add
into tables, to little gain.
"]
prose_928 -> { raw_939}
{rank=same; raw_939}

raw_939 [label="raw"]


raw_939 -> leaf_940
leaf_940  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This comes perilously close to pushing us into the realm of error.
The formatter adds buttons to an entire subtree if one member has it,
and if more than one is ticked off, it warns if possible or removes
all but the first mark encountered. If none are present the first
option is selected.
"]
prose_929 -> { raw_941}
{rank=same; raw_941}

raw_941 [label="raw"]


raw_941 -> leaf_942
leaf_942  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The runtime will not normally build an invalid radio list, but
Grimoire must import plain text.
"]
section_492 -> { header_943 prose_944 structure_945 prose_946 prose_947 prose_948 structure_949 prose_950 prose_951 prose_952}
{rank=same; header_943 prose_944 structure_945 prose_946 prose_947 prose_948 structure_949 prose_950 prose_951 prose_952}

header_943 [label="3 : Drawers"]

prose_944 [label="prose"]

structure_945 [label="structure"]

prose_946 [label="prose"]

prose_947 [label="prose"]

prose_948 [label="prose"]

structure_949 [label="structure"]

prose_950 [label="prose"]

prose_951 [label="prose"]

prose_952 [label="prose"]


header_943 -> leaf_953
leaf_953  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Drawers"]
prose_944 -> { raw_954}
{rank=same; raw_954}

raw_954 [label="raw"]


raw_954 -> leaf_955
leaf_955  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A drawer is a block that's hidden by default. The computer sees it,
the user sees ⦿, or a similar rune.
"]
structure_945 -> { hashline_956}
{rank=same; hashline_956}

hashline_956 [label="hashline"]


hashline_956 -> { hashtag_957}
{rank=same; hashtag_957}

hashtag_957 [label="hashtag"]


hashtag_957 -> leaf_958
leaf_958  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_946 -> { raw_959}
{rank=same; raw_959}

raw_959 [label="raw"]


raw_959 -> leaf_960
leaf_960  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
without opening it. Deleting into an ordinary fold marker opens the fold,
deleting towards a drawer marker skips past it.
"]
prose_947 -> { raw_961 literal_962 raw_963 literal_964 raw_965 literal_966 raw_967 literal_968 raw_969}
{rank=same; raw_961 literal_962 raw_963 literal_964 raw_965 literal_966 raw_967 literal_968 raw_969}

raw_961 [label="raw"]

literal_962 [label="literal"]

raw_963 [label="raw"]

literal_964 [label="literal"]

raw_965 [label="raw"]

literal_966 [label="literal"]

raw_967 [label="raw"]

literal_968 [label="literal"]

raw_969 [label="raw"]


raw_961 -> leaf_970
leaf_970  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
literal_962 -> leaf_971
leaf_971  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a-drawer"]
raw_963 -> leaf_972
leaf_972  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  is  a type,  not  a  name, something  like  "]
literal_964 -> leaf_973
leaf_973  [color=Gray,shape=rectangle,fontname=Inconsolata,label="weave"]
raw_965 -> leaf_974
leaf_974  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  or "]
literal_966 -> leaf_975
leaf_975  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tangle"]
raw_967 -> leaf_976
leaf_976  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  in
practice. This may or  may not be supported with a "]
literal_968 -> leaf_977
leaf_977  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#weave"]
raw_969 -> leaf_978
leaf_978  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  tag. 
"]
prose_948 -> { raw_979}
{rank=same; raw_979}

raw_979 [label="raw"]


raw_979 -> leaf_980
leaf_980  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm not entirely sure how to interact names with drawers, perhaps like this:
"]
structure_949 -> { hashline_981}
{rank=same; hashline_981}

hashline_981 [label="hashline"]


hashline_981 -> { hashtag_982}
{rank=same; hashtag_982}

hashtag_982 [label="hashtag"]


hashtag_982 -> leaf_983
leaf_983  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_950 -> { raw_984}
{rank=same; raw_984}

raw_984 [label="raw"]


raw_984 -> leaf_985
leaf_985  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
should keep it closed unless it's  open, those are the only additional semantics
associated.
"]
prose_951 -> { raw_986}
{rank=same; raw_986}

raw_986 [label="raw"]


raw_986 -> leaf_987
leaf_987  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This lets master wizards embed unobtrusive magic into documents for apprentice
wizards to spell with.
"]
prose_952 -> { raw_988 literal_989 raw_990}
{rank=same; raw_988 literal_989 raw_990}

raw_988 [label="raw"]

literal_989 [label="literal"]

raw_990 [label="raw"]


raw_988 -> leaf_991
leaf_991  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An inline drawer looks like "]
literal_989 -> leaf_992
leaf_992  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[[some contents]]:"]
raw_990 -> leaf_993
leaf_993  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  As usual when we say \"inline\" it
can be as long as you want. Being anonymous, because untagged, the only semantics
of such a drawer are to hide the contents in source mode. 
"]
section_493 -> { header_994 prose_995 prose_996 prose_997 structure_998 section_999}
{rank=same; header_994 prose_995 prose_996 prose_997 structure_998 section_999}

header_994 [label="3 : Runes"]

prose_995 [label="prose"]

prose_996 [label="prose"]

prose_997 [label="prose"]

structure_998 [label="structure"]

section_999 [label="section: 742-742"]


header_994 -> leaf_1000
leaf_1000  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Runes"]
prose_995 -> { raw_1001}
{rank=same; raw_1001}

raw_1001 [label="raw"]


raw_1001 -> leaf_1002
leaf_1002  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

After drawers is as good a place to put runes as any.
"]
prose_996 -> { raw_1003}
{rank=same; raw_1003}

raw_1003 [label="raw"]


raw_1003 -> leaf_1004
leaf_1004  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Runes are characters drawn from the pictographic zones of Unicode,
which describe semantic activity within a document.
"]
prose_997 -> { raw_1005}
{rank=same; raw_1005}

raw_1005 [label="raw"]


raw_1005 -> leaf_1006
leaf_1006  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Contra Org, when we have something like the aformentioned:
"]
structure_998 -> { hashline_1007}
{rank=same; hashline_1007}

hashline_1007 [label="hashline"]


hashline_1007 -> { hashtag_1008}
{rank=same; hashtag_1008}

hashtag_1008 [label="hashtag"]


hashtag_1008 -> leaf_1009
leaf_1009  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_999 -> { header_1010 prose_1011 section_1012}
{rank=same; header_1010 prose_1011 section_1012}

header_1010 [label="1 : Top Header ▼"]

prose_1011 [label="prose"]

section_1012 [label="section: 743-924"]


header_1010 -> leaf_1013
leaf_1013  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Top Header ▼"]
prose_1011 -> { raw_1014}
{rank=same; raw_1014}

raw_1014 [label="raw"]


raw_1014 -> leaf_1015
leaf_1015  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_1012 -> { header_1016 structure_1017 prose_1018 prose_1019 prose_1020 prose_1021 prose_1022 prose_1023 prose_1024 section_1025 section_1026 section_1027 section_1028 section_1029}
{rank=same; header_1016 structure_1017 prose_1018 prose_1019 prose_1020 prose_1021 prose_1022 prose_1023 prose_1024 section_1025 section_1026 section_1027 section_1028 section_1029}

header_1016 [label="2 : Second Header ►"]

structure_1017 [label="structure"]

prose_1018 [label="prose"]

prose_1019 [label="prose"]

prose_1020 [label="prose"]

prose_1021 [label="prose"]

prose_1022 [label="prose"]

prose_1023 [label="prose"]

prose_1024 [label="prose"]

section_1025 [label="section: 772-822"]

section_1026 [label="section: 823-843"]

section_1027 [label="section: 844-910"]

section_1028 [label="section: 911-924"]

section_1029 [label="section: 925-963"]


header_1016 -> leaf_1030
leaf_1030  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   ** Second Header ►"]
structure_1017 -> { hashline_1031}
{rank=same; hashline_1031}

hashline_1031 [label="hashline"]


hashline_1031 -> { hashtag_1032}
{rank=same; hashtag_1032}

hashtag_1032 [label="hashtag"]


hashtag_1032 -> leaf_1033
leaf_1033  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1018 -> { raw_1034}
{rank=same; raw_1034}

raw_1034 [label="raw"]


raw_1034 -> leaf_1035
leaf_1035  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
any transformation we may take. If you load up last Wednesday's
version of something, it will be in last Wednesday's fold state.
"]
prose_1019 -> { raw_1036}
{rank=same; raw_1036}

raw_1036 [label="raw"]


raw_1036 -> leaf_1037
leaf_1037  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This lets us have richer folding semantics, like \"don't unfold when
cycling\". It lets us have richer drawer semantics, and so on.
"]
prose_1020 -> { raw_1038}
{rank=same; raw_1038}

raw_1038 [label="raw"]


raw_1038 -> leaf_1039
leaf_1039  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We will reserve a number of characters for this purpose, at least
"]
prose_1021 -> { raw_1040}
{rank=same; raw_1040}

raw_1040 [label="raw"]


raw_1040 -> leaf_1041
leaf_1041  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
| ▼ |  ► | ⦿ |
    |
"]
prose_1022 -> { raw_1042}
{rank=same; raw_1042}

raw_1042 [label="raw"]


raw_1042 -> leaf_1043
leaf_1043  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's legal to delete runes, like anything else. It's also legal to
insert them manually. Neither of these paradigms is typical;
deleting into a rune may or may not cause it to disappear in
normal edit mode.
"]
prose_1023 -> { raw_1044}
{rank=same; raw_1044}

raw_1044 [label="raw"]


raw_1044 -> leaf_1045
leaf_1045  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Runes, like absolutely everything in Grimoire, are prose if encountered
in a context where they aren't valid structure.
"]
prose_1024 -> { raw_1046}
{rank=same; raw_1046}

raw_1046 [label="raw"]


raw_1046 -> leaf_1047
leaf_1047  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We will most likely reuse runes inside cookies, though it's just as valid
and quite typical to use normal letters or words.
"]
section_1025 -> { header_1048 prose_1049 prose_1050 structure_1051 prose_1052 prose_1053 structure_1054 structure_1055}
{rank=same; header_1048 prose_1049 prose_1050 structure_1051 prose_1052 prose_1053 structure_1054 structure_1055}

header_1048 [label="3 : Lists"]

prose_1049 [label="prose"]

prose_1050 [label="prose"]

structure_1051 [label="structure"]

prose_1052 [label="prose"]

prose_1053 [label="prose"]

structure_1054 [label="structure"]

structure_1055 [label="structure"]


header_1048 -> leaf_1056
leaf_1056  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Lists"]
prose_1049 -> { raw_1057}
{rank=same; raw_1057}

raw_1057 [label="raw"]


raw_1057 -> leaf_1058
leaf_1058  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Something that irks me about Org is basically historic. It was a TODO
list first, and became a heiarchical document editor later. As a result,
the functions that let you tag, track, and so on, are in the wrong place;
an Org file has to choose whether or not it's a task list or a document,
which doesn't fit the metalanguage paradigm cleanly.
"]
prose_1050 -> { raw_1059}
{rank=same; raw_1059}

raw_1059 [label="raw"]


raw_1059 -> leaf_1060
leaf_1060  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A list looks like this:
"]
structure_1051 -> { hashline_1061}
{rank=same; hashline_1061}

hashline_1061 [label="hashline"]


hashline_1061 -> { hashtag_1062}
{rank=same; hashtag_1062}

hashtag_1062 [label="hashtag"]


hashtag_1062 -> leaf_1063
leaf_1063  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1052 -> { raw_1064}
{rank=same; raw_1064}

raw_1064 [label="raw"]


raw_1064 -> leaf_1065
leaf_1065  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
and we have radio buttons.
"]
prose_1053 -> { raw_1066}
{rank=same; raw_1066}

raw_1066 [label="raw"]


raw_1066 -> leaf_1067
leaf_1067  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We also have whitespace lists:
"]
structure_1054 -> { hashline_1068}
{rank=same; hashline_1068}

hashline_1068 [label="hashline"]


hashline_1068 -> { hashtag_1069}
{rank=same; hashtag_1069}

hashtag_1069 [label="hashtag"]


hashtag_1069 -> leaf_1070
leaf_1070  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1055 -> { hashline_1071}
{rank=same; hashline_1071}

hashline_1071 [label="hashline"]


hashline_1071 -> { hashtag_1072}
{rank=same; hashtag_1072}

hashtag_1072 [label="hashtag"]


hashtag_1072 -> leaf_1073
leaf_1073  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_1026 -> { header_1074 prose_1075 prose_1076 prose_1077 prose_1078 prose_1079}
{rank=same; header_1074 prose_1075 prose_1076 prose_1077 prose_1078 prose_1079}

header_1074 [label="3 : Embedded Data"]

prose_1075 [label="prose"]

prose_1076 [label="prose"]

prose_1077 [label="prose"]

prose_1078 [label="prose"]

prose_1079 [label="prose"]


header_1074 -> leaf_1080
leaf_1080  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Embedded Data"]
prose_1075 -> { raw_1081 literal_1082 raw_1083 literal_1084 raw_1085 literal_1086 raw_1087 literal_1088 raw_1089 bold_1090 raw_1091 bold_1092 raw_1093 literal_1094 raw_1095 bold_1096 raw_1097 bold_1098 raw_1099}
{rank=same; raw_1081 literal_1082 raw_1083 literal_1084 raw_1085 literal_1086 raw_1087 literal_1088 raw_1089 bold_1090 raw_1091 bold_1092 raw_1093 literal_1094 raw_1095 bold_1096 raw_1097 bold_1098 raw_1099}

raw_1081 [label="raw"]

literal_1082 [label="literal"]

raw_1083 [label="raw"]

literal_1084 [label="literal"]

raw_1085 [label="raw"]

literal_1086 [label="literal"]

raw_1087 [label="raw"]

literal_1088 [label="literal"]

raw_1089 [label="raw"]

bold_1090 [label="bold"]

raw_1091 [label="raw"]

bold_1092 [label="bold"]

raw_1093 [label="raw"]

literal_1094 [label="literal"]

raw_1095 [label="raw"]

bold_1096 [label="bold"]

raw_1097 [label="raw"]

bold_1098 [label="bold"]

raw_1099 [label="raw"]


raw_1081 -> leaf_1100
leaf_1100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Anything found in prose between "]
literal_1082 -> leaf_1101
leaf_1101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{"]
raw_1083 -> leaf_1102
leaf_1102  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
literal_1084 -> leaf_1103
leaf_1103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="}"]
raw_1085 -> leaf_1104
leaf_1104  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is EDN. Note that the
outermost pair of curlies denotes a boundary. "]
literal_1086 -> leaf_1105
leaf_1105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{ foo }"]
raw_1087 -> leaf_1106
leaf_1106  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the symbol
foo, "]
literal_1088 -> leaf_1107
leaf_1107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{ foo bar }"]
raw_1089 -> leaf_1108
leaf_1108  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the symbol "]
bold_1090 -> leaf_1109
leaf_1109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="foo"]
raw_1091 -> leaf_1110
leaf_1110  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and the symbol "]
bold_1092 -> leaf_1111
leaf_1111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bar"]
raw_1093 -> leaf_1112
leaf_1112  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_1094 -> leaf_1113
leaf_1113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{{foo bar}}"]
raw_1095 -> leaf_1114
leaf_1114  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is
a map with key "]
bold_1096 -> leaf_1115
leaf_1115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="foo"]
raw_1097 -> leaf_1116
leaf_1116  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and value "]
bold_1098 -> leaf_1117
leaf_1117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bar"]
raw_1099 -> leaf_1118
leaf_1118  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_1076 -> { raw_1119 italic_1120 raw_1121}
{rank=same; raw_1119 italic_1120 raw_1121}

raw_1119 [label="raw"]

italic_1120 [label="italic"]

raw_1121 [label="raw"]


raw_1119 -> leaf_1122
leaf_1122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To quote the [[https:/"]
italic_1120 -> leaf_1123
leaf_1123  [color=Gray,shape=rectangle,fontname=Inconsolata,label="github.com"]
raw_1121 -> leaf_1124
leaf_1124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="edn-format/edn][spec]], \"There is no enclosing element at the top level\". The
braces mark the boundaries of the data region.
"]
prose_1077 -> { raw_1125}
{rank=same; raw_1125}

raw_1125 [label="raw"]


raw_1125 -> leaf_1126
leaf_1126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is a mapping between lists and EDN, the basics of which will be clear
to the astute reader. The non-basics are unclear to the author as well.
"]
prose_1078 -> { raw_1127}
{rank=same; raw_1127}

raw_1127 [label="raw"]


raw_1127 -> leaf_1128
leaf_1128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Unresolved: may data be inlined into prose? What would that even mean?
slap some colors on it in the document? If we want to provide a 'this is
code but not for interpretation' mark, we will, it won't be EDN specific.
Inlining colorized code is not high on my todo list.
"]
prose_1079 -> { raw_1129}
{rank=same; raw_1129}

raw_1129 [label="raw"]


raw_1129 -> leaf_1130
leaf_1130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't think you can. Embeds are down here with lists and
tables in 'things you can't inline', for now.
"]
section_1027 -> { header_1131 prose_1132 prose_1133 prose_1134 prose_1135 structure_1136 structure_1137 structure_1138 structure_1139 prose_1140 prose_1141 structure_1142 structure_1143 structure_1144 prose_1145 prose_1146 prose_1147}
{rank=same; header_1131 prose_1132 prose_1133 prose_1134 prose_1135 structure_1136 structure_1137 structure_1138 structure_1139 prose_1140 prose_1141 structure_1142 structure_1143 structure_1144 prose_1145 prose_1146 prose_1147}

header_1131 [label="3 : Tables"]

prose_1132 [label="prose"]

prose_1133 [label="prose"]

prose_1134 [label="prose"]

prose_1135 [label="prose"]

structure_1136 [label="structure"]

structure_1137 [label="structure"]

structure_1138 [label="structure"]

structure_1139 [label="structure"]

prose_1140 [label="prose"]

prose_1141 [label="prose"]

structure_1142 [label="structure"]

structure_1143 [label="structure"]

structure_1144 [label="structure"]

prose_1145 [label="prose"]

prose_1146 [label="prose"]

prose_1147 [label="prose"]


header_1131 -> leaf_1148
leaf_1148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Tables"]
prose_1132 -> { raw_1149}
{rank=same; raw_1149}

raw_1149 [label="raw"]


raw_1149 -> leaf_1150
leaf_1150  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The way tables work in Babel is fine and needs little polish. Any modest
improvements we make will be in the face of considerable experience.
"]
prose_1133 -> { raw_1151}
{rank=same; raw_1151}

raw_1151 [label="raw"]


raw_1151 -> leaf_1152
leaf_1152  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For example, I expect there's a way to make multiple literal rows serve
as a single row in existing Org, but I don't know what it is. I'll be
playing around a lot in the coming weeks, I hope.
"]
prose_1134 -> { raw_1153}
{rank=same; raw_1153}

raw_1153 [label="raw"]


raw_1153 -> leaf_1154
leaf_1154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Composability being an overarching goal, we can embed anything in a table
that we would put elsewhere.
"]
prose_1135 -> { raw_1155}
{rank=same; raw_1155}

raw_1155 [label="raw"]


raw_1155 -> leaf_1156
leaf_1156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Looks something like this:
"]
structure_1136 -> { hashline_1157}
{rank=same; hashline_1157}

hashline_1157 [label="hashline"]


hashline_1157 -> { hashtag_1158}
{rank=same; hashtag_1158}

hashtag_1158 [label="hashtag"]


hashtag_1158 -> leaf_1159
leaf_1159  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1137 -> { hashline_1160}
{rank=same; hashline_1160}

hashline_1160 [label="hashline"]


hashline_1160 -> { hashtag_1161}
{rank=same; hashtag_1161}

hashtag_1161 [label="hashtag"]


hashtag_1161 -> leaf_1162
leaf_1162  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1138 -> { hashline_1163}
{rank=same; hashline_1163}

hashline_1163 [label="hashline"]


hashline_1163 -> { hashtag_1164}
{rank=same; hashtag_1164}

hashtag_1164 [label="hashtag"]


hashtag_1164 -> leaf_1165
leaf_1165  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1139 -> { hashline_1166}
{rank=same; hashline_1166}

hashline_1166 [label="hashline"]


hashline_1166 -> { hashtag_1167}
{rank=same; hashtag_1167}

hashtag_1167 [label="hashtag"]


hashtag_1167 -> leaf_1168
leaf_1168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="formulas"]
prose_1140 -> { raw_1169 literal_1170 raw_1171 literal_1172 raw_1173 literal_1174 raw_1175}
{rank=same; raw_1169 literal_1170 raw_1171 literal_1172 raw_1173 literal_1174 raw_1175}

raw_1169 [label="raw"]

literal_1170 [label="literal"]

raw_1171 [label="raw"]

literal_1172 [label="literal"]

raw_1173 [label="raw"]

literal_1174 [label="literal"]

raw_1175 [label="raw"]


raw_1169 -> leaf_1176
leaf_1176  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A subtle point of parsing I'm not sure is correct is "]
literal_1170 -> leaf_1177
leaf_1177  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#formulas -"]
raw_1171 -> leaf_1178
leaf_1178  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
or "]
literal_1172 -> leaf_1179
leaf_1179  [color=Gray,shape=rectangle,fontname=Inconsolata,label="- #formulas"]
raw_1173 -> leaf_1180
leaf_1180  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". I feel like by normal associativity the latter
attaches the tag to the list, then nothing to the tag,
since the rule is a tag preceded only by whitespace owns the line
after it and indentations below it. The tag doesn't affect the indentation level
of the "]
literal_1174 -> leaf_1181
leaf_1181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-"]
raw_1175 -> leaf_1182
leaf_1182  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which could be confusing but won't be.
"]
prose_1141 -> { raw_1183}
{rank=same; raw_1183}

raw_1183 [label="raw"]


raw_1183 -> leaf_1184
leaf_1184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We should be able to tag tables like this:
"]
structure_1142 -> { hashline_1185}
{rank=same; hashline_1185}

hashline_1185 [label="hashline"]


hashline_1185 -> { hashtag_1186}
{rank=same; hashtag_1186}

hashtag_1186 [label="hashtag"]


hashtag_1186 -> leaf_1187
leaf_1187  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1143 -> { hashline_1188}
{rank=same; hashline_1188}

hashline_1188 [label="hashline"]


hashline_1188 -> { hashtag_1189}
{rank=same; hashtag_1189}

hashtag_1189 [label="hashtag"]


hashtag_1189 -> leaf_1190
leaf_1190  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1144 -> { hashline_1191}
{rank=same; hashline_1191}

hashline_1191 [label="hashline"]


hashline_1191 -> { hashtag_1192}
{rank=same; hashtag_1192}

hashtag_1192 [label="hashtag"]


hashtag_1192 -> leaf_1193
leaf_1193  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1145 -> { raw_1194}
{rank=same; raw_1194}

raw_1194 [label="raw"]


raw_1194 -> leaf_1195
leaf_1195  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Totally okay in this context, doesn't trigger Nim rules because the table
associates to the tag anyway.
"]
prose_1146 -> { raw_1196}
{rank=same; raw_1196}

raw_1196 [label="raw"]


raw_1196 -> leaf_1197
leaf_1197  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This gives us a nice left gutter which I propose we can use in various ways.
"]
prose_1147 -> { raw_1198}
{rank=same; raw_1198}

raw_1198 [label="raw"]


raw_1198 -> leaf_1199
leaf_1199  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This section can get much longer. Generalizing how tables work is incredibly
powerful. My dream is to embed APL into Grimoire. Give me an excuse to
finally learn it!
"]
section_1028 -> { header_1200 prose_1201 prose_1202 prose_1203 prose_1204 prose_1205}
{rank=same; header_1200 prose_1201 prose_1202 prose_1203 prose_1204 prose_1205}

header_1200 [label="3 : Clocks"]

prose_1201 [label="prose"]

prose_1202 [label="prose"]

prose_1203 [label="prose"]

prose_1204 [label="prose"]

prose_1205 [label="prose"]


header_1200 -> leaf_1206
leaf_1206  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Clocks"]
prose_1201 -> { raw_1207}
{rank=same; raw_1207}

raw_1207 [label="raw"]


raw_1207 -> leaf_1208
leaf_1208  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I think timestamps are just a drawer you put a timestamp in.
"]
prose_1202 -> { raw_1209}
{rank=same; raw_1209}

raw_1209 [label="raw"]


raw_1209 -> leaf_1210
leaf_1210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That drawer can collapse and look like ⏱.
"]
prose_1203 -> { raw_1211}
{rank=same; raw_1211}

raw_1211 [label="raw"]


raw_1211 -> leaf_1212
leaf_1212  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Or we can collapse it into something from the set containing 🕞.
"]
prose_1204 -> { raw_1213}
{rank=same; raw_1213}

raw_1213 [label="raw"]


raw_1213 -> leaf_1214
leaf_1214  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which normal Emacs doesn't display. I really need to go Japanese soon.
"]
prose_1205 -> { raw_1215}
{rank=same; raw_1215}

raw_1215 [label="raw"]


raw_1215 -> leaf_1216
leaf_1216  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
But it would be just adorable to have a little clock representing the timestamp.
Emoji are quirky but the set contains useful icons, and it's Unicode.
Grimoire supports Unicode.
"]
section_1029 -> { header_1217 prose_1218 prose_1219 prose_1220 prose_1221 section_1222 section_1223}
{rank=same; header_1217 prose_1218 prose_1219 prose_1220 prose_1221 section_1222 section_1223}

header_1217 [label="3 : Code"]

prose_1218 [label="prose"]

prose_1219 [label="prose"]

prose_1220 [label="prose"]

prose_1221 [label="prose"]

section_1222 [label="section: 946-963"]

section_1223 [label="section: 964-1084"]


header_1217 -> leaf_1224
leaf_1224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Code"]
prose_1218 -> { raw_1225}
{rank=same; raw_1225}

raw_1225 [label="raw"]


raw_1225 -> leaf_1226
leaf_1226  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The place where it all comes together.
"]
prose_1219 -> { raw_1227}
{rank=same; raw_1227}

raw_1227 [label="raw"]


raw_1227 -> leaf_1228
leaf_1228  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire has a servant language, Lua by default, but this
is of course configurable. Eventually we'll write Clu,
it's a race to see which project is finished first but they
have common dependencies, surprise, surprise.
"]
prose_1220 -> { raw_1229}
{rank=same; raw_1229}

raw_1229 [label="raw"]


raw_1229 -> leaf_1230
leaf_1230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code and data are yin and yang in Grimoire. Code embedded in
documents is executed in various ways and times; comments within
code blocks are themselves in Grimoire data format, and so on.
"]
prose_1221 -> { raw_1231}
{rank=same; raw_1231}

raw_1231 [label="raw"]


raw_1231 -> leaf_1232
leaf_1232  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Given a single language Grimoire text, we can perform a mechanical
figure-ground reversal, such that data blocks become comments and
code blocks become live. We have many more sophisticated weave and
tangle operations, but this is a designed-in property that will prove
handy: sometimes you want to take code, org it up, and then flip it
into a literate context. Upgrade path for existing codebases.

"]
section_1222 -> { header_1233 prose_1234 structure_1235 prose_1236 prose_1237}
{rank=same; header_1233 prose_1234 structure_1235 prose_1236 prose_1237}

header_1233 [label="4 : Inline Code"]

prose_1234 [label="prose"]

structure_1235 [label="structure"]

prose_1236 [label="prose"]

prose_1237 [label="prose"]


header_1233 -> leaf_1238
leaf_1238  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Inline Code"]
prose_1234 -> { raw_1239 literal_1240 raw_1241}
{rank=same; raw_1239 literal_1240 raw_1241}

raw_1239 [label="raw"]

literal_1240 [label="literal"]

raw_1241 [label="raw"]


raw_1239 -> leaf_1242
leaf_1242  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Inline code is written "]
literal_1240 -> leaf_1243
leaf_1243  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`4 + 5`"]
raw_1241 -> leaf_1244
leaf_1244  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". It executes in something similar to
:function mode in Babel, the call is as though it were wrapped in a function
call that looks like:
"]
structure_1235 -> { hashline_1245}
{rank=same; hashline_1245}

hashline_1245 [label="hashline"]


hashline_1245 -> { hashtag_1246}
{rank=same; hashtag_1246}

hashtag_1246 [label="hashtag"]


hashtag_1246 -> leaf_1247
leaf_1247  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1236 -> { raw_1248}
{rank=same; raw_1248}

raw_1248 [label="raw"]


raw_1248 -> leaf_1249
leaf_1249  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
maintaining state between calls.
"]
prose_1237 -> { raw_1250}
{rank=same; raw_1250}

raw_1250 [label="raw"]


raw_1250 -> leaf_1251
leaf_1251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Anything named exists as a data structure in the helper language. This makes it easy to
refer to a block that contains a self-reference, so these are stored in a cycle-safe way.
"]
section_1223 -> { header_1252 prose_1253 prose_1254 structure_1255 structure_1256 prose_1257 structure_1258 structure_1259 prose_1260 codeblock_1261 structure_1262 prose_1263 prose_1264 prose_1265 codeblock_1266 codeblock_1267 codeblock_1268 structure_1269 structure_1270 codeblock_1271 structure_1272 structure_1273 prose_1274 prose_1275 prose_1276 prose_1277 structure_1278 prose_1279 prose_1280 prose_1281 codeblock_1282 section_1283}
{rank=same; header_1252 prose_1253 prose_1254 structure_1255 structure_1256 prose_1257 structure_1258 structure_1259 prose_1260 codeblock_1261 structure_1262 prose_1263 prose_1264 prose_1265 codeblock_1266 codeblock_1267 codeblock_1268 structure_1269 structure_1270 codeblock_1271 structure_1272 structure_1273 prose_1274 prose_1275 prose_1276 prose_1277 structure_1278 prose_1279 prose_1280 prose_1281 codeblock_1282 section_1283}

header_1252 [label="4 : Code Blocks"]

prose_1253 [label="prose"]

prose_1254 [label="prose"]

structure_1255 [label="structure"]

structure_1256 [label="structure"]

prose_1257 [label="prose"]

structure_1258 [label="structure"]

structure_1259 [label="structure"]

prose_1260 [label="prose"]

codeblock_1261 [label="code block 993-995"]

structure_1262 [label="structure"]

prose_1263 [label="prose"]

prose_1264 [label="prose"]

prose_1265 [label="prose"]

codeblock_1266 [label="code block 1009-1011"]

codeblock_1267 [label="code block 1017-1019"]

codeblock_1268 [label="code block 1023-1025"]

structure_1269 [label="structure"]

structure_1270 [label="structure"]

codeblock_1271 [label="code block 1033-1035"]

structure_1272 [label="structure"]

structure_1273 [label="structure"]

prose_1274 [label="prose"]

prose_1275 [label="prose"]

prose_1276 [label="prose"]

prose_1277 [label="prose"]

structure_1278 [label="structure"]

prose_1279 [label="prose"]

prose_1280 [label="prose"]

prose_1281 [label="prose"]

codeblock_1282 [label="code block 1078-1080"]

section_1283 [label="section: 1085-1155"]


header_1252 -> leaf_1284
leaf_1284  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Code Blocks"]
prose_1253 -> { raw_1285 literal_1286 raw_1287}
{rank=same; raw_1285 literal_1286 raw_1287}

raw_1285 [label="raw"]

literal_1286 [label="literal"]

raw_1287 [label="raw"]


raw_1285 -> leaf_1288
leaf_1288  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The "]
literal_1286 -> leaf_1289
leaf_1289  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`inline`"]
raw_1287 -> leaf_1290
leaf_1290  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" syntax works like the rest, you may use any number of backticks to enclose a form.
"]
prose_1254 -> { raw_1291}
{rank=same; raw_1291}

raw_1291 [label="raw"]


raw_1291 -> leaf_1292
leaf_1292  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something like:
"]
structure_1255 -> { hashline_1293}
{rank=same; hashline_1293}

hashline_1293 [label="hashline"]


hashline_1293 -> { hashtag_1294}
{rank=same; hashtag_1294}

hashtag_1294 [label="hashtag"]


hashtag_1294 -> leaf_1295
leaf_1295  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1256 -> { hashline_1296}
{rank=same; hashline_1296}

hashline_1296 [label="hashline"]


hashline_1296 -> { hashtag_1297}
{rank=same; hashtag_1297}

hashtag_1297 [label="hashtag"]


hashtag_1297 -> leaf_1298
leaf_1298  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1257 -> { raw_1299}
{rank=same; raw_1299}

raw_1299 [label="raw"]


raw_1299 -> leaf_1300
leaf_1300  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
it is evaluated when referenced. This:
"]
structure_1258 -> { hashline_1301}
{rank=same; hashline_1301}

hashline_1301 [label="hashline"]


hashline_1301 -> { hashtag_1302}
{rank=same; hashtag_1302}

hashtag_1302 [label="hashtag"]


hashtag_1302 -> leaf_1303
leaf_1303  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1259 -> { hashline_1304}
{rank=same; hashline_1304}

hashline_1304 [label="hashline"]


hashline_1304 -> { hashtag_1305}
{rank=same; hashtag_1305}

hashtag_1305 [label="hashtag"]


hashtag_1305 -> leaf_1306
leaf_1306  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1260 -> { raw_1307}
{rank=same; raw_1307}

raw_1307 [label="raw"]


raw_1307 -> leaf_1308
leaf_1308  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Separated code blocks use special tags:
"]
codeblock_1261 -> leaf_1309
leaf_1309  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
structure_1262 -> { hashline_1310}
{rank=same; hashline_1310}

hashline_1310 [label="hashline"]


hashline_1310 -> { hashtag_1311}
{rank=same; hashtag_1311}

hashtag_1311 [label="hashtag"]


hashtag_1311 -> leaf_1312
leaf_1312  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1263 -> { raw_1313}
{rank=same; raw_1313}

raw_1313 [label="raw"]


raw_1313 -> leaf_1314
leaf_1314  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
nesting apply. As indeed they might in a Grimoire code block.
"]
prose_1264 -> { raw_1315}
{rank=same; raw_1315}

raw_1315 [label="raw"]


raw_1315 -> leaf_1316
leaf_1316  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We need a good runtime. Playing the Inception game
with Grimoire should be an amusing headache, not a dog-slow
system killer.
"]
prose_1265 -> { raw_1317}
{rank=same; raw_1317}

raw_1317 [label="raw"]


raw_1317 -> leaf_1318
leaf_1318  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They may be named like anything else:
"]
codeblock_1266 -> leaf_1319
leaf_1319  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
codeblock_1267 -> leaf_1320
leaf_1320  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
codeblock_1268 -> leaf_1321
leaf_1321  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 4 + 5"]
structure_1269 -> { hashline_1322}
{rank=same; hashline_1322}

hashline_1322 [label="hashline"]


hashline_1322 -> { hashtag_1323}
{rank=same; hashtag_1323}

hashtag_1323 [label="hashtag"]


hashtag_1323 -> leaf_1324
leaf_1324  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1270 -> { handleline_1325}
{rank=same; handleline_1325}

handleline_1325 [label="handleline"]


handleline_1325 -> { handle_1326}
{rank=same; handle_1326}

handle_1326 [label="handle"]


handle_1326 -> leaf_1327
leaf_1327  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nine"]
codeblock_1271 -> leaf_1328
leaf_1328  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 4 + 5"]
structure_1272 -> { hashline_1329}
{rank=same; hashline_1329}

hashline_1329 [label="hashline"]


hashline_1329 -> { hashtag_1330}
{rank=same; hashtag_1330}

hashtag_1330 [label="hashtag"]


hashtag_1330 -> leaf_1331
leaf_1331  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1273 -> { hashline_1332}
{rank=same; hashline_1332}

hashline_1332 [label="hashline"]


hashline_1332 -> { hashtag_1333}
{rank=same; hashtag_1333}

hashtag_1333 [label="hashtag"]


hashtag_1333 -> leaf_1334
leaf_1334  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1274 -> { raw_1335 literal_1336 raw_1337 literal_1338 raw_1339 literal_1340 raw_1341 bold_1342 raw_1343}
{rank=same; raw_1335 literal_1336 raw_1337 literal_1338 raw_1339 literal_1340 raw_1341 bold_1342 raw_1343}

raw_1335 [label="raw"]

literal_1336 [label="literal"]

raw_1337 [label="raw"]

literal_1338 [label="literal"]

raw_1339 [label="raw"]

literal_1340 [label="literal"]

raw_1341 [label="raw"]

bold_1342 [label="bold"]

raw_1343 [label="raw"]


raw_1335 -> leaf_1344
leaf_1344  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
marks an anonymous result. "]
literal_1336 -> leaf_1345
leaf_1345  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#@nine->"]
raw_1337 -> leaf_1346
leaf_1346  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the automatically generated tag for
the return value of the block named "]
literal_1338 -> leaf_1347
leaf_1347  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@nine"]
raw_1339 -> leaf_1348
leaf_1348  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", adding "]
literal_1340 -> leaf_1349
leaf_1349  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@nine()"]
raw_1341 -> leaf_1350
leaf_1350  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to a prose block will
add the number 9 to the weave at that location. "]
bold_1342 -> leaf_1351
leaf_1351  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
raw_1343 -> leaf_1352
leaf_1352  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will either display the result,
the call, or both, configurably, when editing the source, with syntax-highlighting to 
enforce the distinction. 
"]
prose_1275 -> { raw_1353}
{rank=same; raw_1353}

raw_1353 [label="raw"]


raw_1353 -> leaf_1354
leaf_1354  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code blocks may be indented as any other blocks, with the associated owership
rules. Code blocks so indented have a logical start equal to their level of
indentation, which is to say the program being called will not see indentation
that is proper to the Grimoire document.
"]
prose_1276 -> { raw_1355}
{rank=same; raw_1355}

raw_1355 [label="raw"]


raw_1355 -> leaf_1356
leaf_1356  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code blocks may be placed inside lists, as tables may be, but may not be
explicitly placed inside tables.
"]
prose_1277 -> { raw_1357 literal_1358 raw_1359 literal_1360 raw_1361}
{rank=same; raw_1357 literal_1358 raw_1359 literal_1360 raw_1361}

raw_1357 [label="raw"]

literal_1358 [label="literal"]

raw_1359 [label="raw"]

literal_1360 [label="literal"]

raw_1361 [label="raw"]


raw_1357 -> leaf_1362
leaf_1362  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You may insert the result of a named code block in the data context
by simply saying "]
literal_1358 -> leaf_1363
leaf_1363  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@a-named-block()"]
raw_1359 -> leaf_1364
leaf_1364  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". If there are variables, you may pass
them, "]
literal_1360 -> leaf_1365
leaf_1365  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@a-named-block(23, true)"]
raw_1361 -> leaf_1366
leaf_1366  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or if you wish, by name:
"]
structure_1278 -> { hashline_1367}
{rank=same; hashline_1367}

hashline_1367 [label="hashline"]


hashline_1367 -> { hashtag_1368}
{rank=same; hashtag_1368}

hashtag_1368 [label="hashtag"]


hashtag_1368 -> leaf_1369
leaf_1369  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1279 -> { raw_1370}
{rank=same; raw_1370}

raw_1370 [label="raw"]


raw_1370 -> leaf_1371
leaf_1371  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Within a formula applied to a table, it is valid to use the description
syntax for a variable to supply an argument to a function.
"]
prose_1280 -> { raw_1372}
{rank=same; raw_1372}

raw_1372 [label="raw"]


raw_1372 -> leaf_1373
leaf_1373  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There will be further syntax involved in building up the line that
begins a code block. It's considered good form to assign complex
code block headers into distinct tags, and use those, rather than
being explicit and repeating yourself or hiding file-local defaults
in drawers.
"]
prose_1281 -> { raw_1374}
{rank=same; raw_1374}

raw_1374 [label="raw"]


raw_1374 -> leaf_1375
leaf_1375  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So we prefer something like
"]
codeblock_1282 -> leaf_1376
leaf_1376  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
section_1283 -> { header_1377 prose_1378 section_1379 section_1380}
{rank=same; header_1377 prose_1378 section_1379 section_1380}

header_1377 [label="1 : Runtime"]

prose_1378 [label="prose"]

section_1379 [label="section: 1089-1123"]

section_1380 [label="section: 1156-1200"]


header_1377 -> leaf_1381
leaf_1381  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Runtime"]
prose_1378 -> { raw_1382}
{rank=same; raw_1382}

raw_1382 [label="raw"]


raw_1382 -> leaf_1383
leaf_1383  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Here, we begin to explore the interactions Grimoire is capable of.
"]
section_1379 -> { header_1384 prose_1385 prose_1386 prose_1387 prose_1388 prose_1389 prose_1390 prose_1391 prose_1392 section_1393}
{rank=same; header_1384 prose_1385 prose_1386 prose_1387 prose_1388 prose_1389 prose_1390 prose_1391 prose_1392 section_1393}

header_1384 [label="2 : Literate or Live?"]

prose_1385 [label="prose"]

prose_1386 [label="prose"]

prose_1387 [label="prose"]

prose_1388 [label="prose"]

prose_1389 [label="prose"]

prose_1390 [label="prose"]

prose_1391 [label="prose"]

prose_1392 [label="prose"]

section_1393 [label="section: 1124-1155"]


header_1384 -> leaf_1394
leaf_1394  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Literate or Live?"]
prose_1385 -> { raw_1395 italic_1396 raw_1397}
{rank=same; raw_1395 italic_1396 raw_1397}

raw_1395 [label="raw"]

italic_1396 [label="italic"]

raw_1397 [label="raw"]


raw_1395 -> leaf_1398
leaf_1398  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Babel is descended from the tradition of [[http:/"]
italic_1396 -> leaf_1399
leaf_1399  [color=Gray,shape=rectangle,fontname=Inconsolata,label="en.wikipedia.org"]
raw_1397 -> leaf_1400
leaf_1400  [color=Gray,shape=rectangle,fontname=Inconsolata,label="wiki/Literate_programming][literate programming]], and
Grimoire inherits this from Babel.
"]
prose_1386 -> { raw_1401}
{rank=same; raw_1401}

raw_1401 [label="raw"]


raw_1401 -> leaf_1402
leaf_1402  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is capable of producing code and documentation in the
classic literate style. This is not the aim of Grimoire: it is
a metalanguage, for working with prose, data, and code in an
integrated fashion.
"]
prose_1387 -> { raw_1403}
{rank=same; raw_1403}

raw_1403 [label="raw"]


raw_1403 -> leaf_1404
leaf_1404  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
What a compiler is to a REPL, literate programming is to living
documents.
"]
prose_1388 -> { raw_1405}
{rank=same; raw_1405}

raw_1405 [label="raw"]


raw_1405 -> leaf_1406
leaf_1406  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In a literate programming context, we have source, which integrates
code and documentation. The source is then woven into documentation,
and tangled into code. Both are compiled, one is printed, one is run.
"]
prose_1389 -> { raw_1407}
{rank=same; raw_1407}

raw_1407 [label="raw"]


raw_1407 -> leaf_1408
leaf_1408  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The word 'printed' sounds somewhat archaic, no? The number of tools
Donald Knuth had to write just to write the tools he wanted to write,
and tool the writings he wanted to tool, is simply staggering.
"]
prose_1390 -> { raw_1409 literal_1410 raw_1411}
{rank=same; raw_1409 literal_1410 raw_1411}

raw_1409 [label="raw"]

literal_1410 [label="literal"]

raw_1411 [label="raw"]


raw_1409 -> leaf_1412
leaf_1412  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Traces of that legacy remain in Grimoire. Like Babel, we allow for
LaTeX embedding, with the sugar "]
literal_1410 -> leaf_1413
leaf_1413  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`\\latex`"]
raw_1411 -> leaf_1414
leaf_1414  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". Starting Lua code with
a backslash is illegal, starting Clu code with a backslash is also
illegal.
"]
prose_1391 -> { raw_1415}
{rank=same; raw_1415}

raw_1415 [label="raw"]


raw_1415 -> leaf_1416
leaf_1416  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For a Grimoire document to be printed, realistically, in today's world,
it will be translated to LaTeX, hence to PDF, sent off to a print
on demand company, and drop shipped. Some documents may in fact
make this journey, because why not? We aren't oriented around it.
"]
prose_1392 -> { raw_1417}
{rank=same; raw_1417}

raw_1417 [label="raw"]


raw_1417 -> leaf_1418
leaf_1418  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The basic flow in a Grimoire context is one of excursion and return.
We have tangling and weaving, but also unraveling, where actions taken
within the weave or tangle are integrated back into the source document.
"]
section_1393 -> { header_1419 prose_1420 prose_1421 prose_1422 prose_1423 prose_1424 prose_1425}
{rank=same; header_1419 prose_1420 prose_1421 prose_1422 prose_1423 prose_1424 prose_1425}

header_1419 [label="3 : Unraveling the Mystery"]

prose_1420 [label="prose"]

prose_1421 [label="prose"]

prose_1422 [label="prose"]

prose_1423 [label="prose"]

prose_1424 [label="prose"]

prose_1425 [label="prose"]


header_1419 -> leaf_1426
leaf_1426  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Unraveling the Mystery"]
prose_1420 -> { raw_1427}
{rank=same; raw_1427}

raw_1427 [label="raw"]


raw_1427 -> leaf_1428
leaf_1428  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

What's unraveling? When I picture Donald Knuth writing literate code,
I picture him with a notebook, writing free-flowing algorithms in a
fashion he refined his entire career. I imagine him carefully transcribing
into Web, running the compiler, going for a stroll around the Stanford
campus, and examining the changes upon his return.
"]
prose_1421 -> { raw_1429}
{rank=same; raw_1429}

raw_1429 [label="raw"]


raw_1429 -> leaf_1430
leaf_1430  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
On the days, and they did happen, when his program was in a state of error,
I picture him returning to his notebook first. While thinking. Perhaps
playing the organ for an hour or two, to relax. He would then correct the
notebook, then the code, then the program, which would be correct now,
most of the time.
"]
prose_1422 -> { raw_1431}
{rank=same; raw_1431}

raw_1431 [label="raw"]


raw_1431 -> leaf_1432
leaf_1432  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm making that all up. But I'd wager I'm not far off the mark. We
don't work like that and most of us can't.
"]
prose_1423 -> { raw_1433}
{rank=same; raw_1433}

raw_1433 [label="raw"]


raw_1433 -> leaf_1434
leaf_1434  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A tangle is named that because the mapping between it and the source
can be non-trivial. It's quite possible to make it undecidable what to
do with edits to the tangle. it's also possible to move edits from the tangle
back into the source, in most cases, if we structure things well.
"]
prose_1424 -> { raw_1435}
{rank=same; raw_1435}

raw_1435 [label="raw"]


raw_1435 -> leaf_1436
leaf_1436  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Donald Knuth was unable to print a book that would alter his code. I'm
sure he'd have been delighted to have the ability. Our weaves can easily
be living documents, through in-browser and server side empowerment.
Those changes, too, should make it back into the source.
"]
prose_1425 -> { raw_1437}
{rank=same; raw_1437}

raw_1437 [label="raw"]


raw_1437 -> leaf_1438
leaf_1438  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Ultimately I imagine many people will prefer to edit and run their
Grimoire documents entirely from a weave that provides a bit of the
ol' WYSIWYG to the experience. Well and good for them, I have my own
view of Heaven, and it isn't Heaven if we don't all fit.
"]
section_1380 -> { header_1439 prose_1440 prose_1441 prose_1442 prose_1443 section_1444 section_1445}
{rank=same; header_1439 prose_1440 prose_1441 prose_1442 prose_1443 section_1444 section_1445}

header_1439 [label="2 : Source, Tangle and Weave"]

prose_1440 [label="prose"]

prose_1441 [label="prose"]

prose_1442 [label="prose"]

prose_1443 [label="prose"]

section_1444 [label="section: 1173-1200"]

section_1445 [label="section: 1201-1219"]


header_1439 -> leaf_1446
leaf_1446  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Source, Tangle and Weave"]
prose_1440 -> { raw_1447}
{rank=same; raw_1447}

raw_1447 [label="raw"]


raw_1447 -> leaf_1448
leaf_1448  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

These classic concepts from literate programming are central to
the Grimoire paradigm.
"]
prose_1441 -> { raw_1449}
{rank=same; raw_1449}

raw_1449 [label="raw"]


raw_1449 -> leaf_1450
leaf_1450  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In Grimoire, something like a PDF is not a true weave. It is a product;
much like an image or data derived from a simulation, it is regenerated
when necessary but has no further connection to the Grimoire environment.
"]
prose_1442 -> { raw_1451}
{rank=same; raw_1451}

raw_1451 [label="raw"]


raw_1451 -> leaf_1452
leaf_1452  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Our first section discusses the format of Grimoire source code. Like Babel,
unlike Web and descendants, it is self-tangling. Grimoire will be tightly
integrated and purpose-built for this task, operating at a REPL+ level.
"]
prose_1443 -> { raw_1453}
{rank=same; raw_1453}

raw_1453 [label="raw"]


raw_1453 -> leaf_1454
leaf_1454  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We still wish to use it to compile programs written in appropriate languages.
These languages needn't be educated in the ways of Grimoire, imposing this
requirement would be so onerous as to block adoption.
"]
section_1444 -> { header_1455 prose_1456 prose_1457 prose_1458 prose_1459 prose_1460}
{rank=same; header_1455 prose_1456 prose_1457 prose_1458 prose_1459 prose_1460}

header_1455 [label="3 : Unraveling the Tangle"]

prose_1456 [label="prose"]

prose_1457 [label="prose"]

prose_1458 [label="prose"]

prose_1459 [label="prose"]

prose_1460 [label="prose"]


header_1455 -> leaf_1461
leaf_1461  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Unraveling the Tangle"]
prose_1456 -> { raw_1462}
{rank=same; raw_1462}

raw_1462 [label="raw"]


raw_1462 -> leaf_1463
leaf_1463  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Babel offers limited facilities for working within source blocks. What it
doesn't offer is the critical 'unravel' operation, which takes changes to
the tangle and integrates them back into the weave.
"]
prose_1457 -> { raw_1464}
{rank=same; raw_1464}

raw_1464 [label="raw"]


raw_1464 -> leaf_1465
leaf_1465  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is a partially-solved problem, with Babel able to put comment tags into
the source which allow Emacs to jump back into your actual source from
errors in the tangle.
"]
prose_1458 -> { raw_1466}
{rank=same; raw_1466}

raw_1466 [label="raw"]


raw_1466 -> leaf_1467
leaf_1467  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is just not good enough. For any number of reasons, we need to be able
to unravel. I'll cite one: Converting existing codebases over to literacy.
The first step is to recreate the existing program on a source-line-identical
level. The entire existing developer base is familiar with the program already
and isn't going to want to start editing a bunch of Grimoire. They can most
likely be induced to accept readable metadata, and that's it.
"]
prose_1459 -> { raw_1468}
{rank=same; raw_1468}

raw_1468 [label="raw"]


raw_1468 -> leaf_1469
leaf_1469  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That's all we need. Code is in one of three categories: either it is a single
literal copy from source, it's one of several copies from source, or
it's generated code that's dependent on information in the source.
"]
prose_1460 -> { raw_1470}
{rank=same; raw_1470}

raw_1470 [label="raw"]


raw_1470 -> leaf_1471
leaf_1471  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We incorporate all changes to the former automatically when we unravel.
Changes to a single version of multiple copies prompts user interaction: do
you want to embed the change as its own source block, propagate it to each
instance, or decline the merge? Changes to generated code are simply
forbidden. If one is doing generation on the code base, working from
the weave is the more comfortable approach.
"]
section_1445 -> { header_1472 prose_1473 prose_1474 prose_1475 prose_1476}
{rank=same; header_1472 prose_1473 prose_1474 prose_1475 prose_1476}

header_1472 [label="3 : Backweaving"]

prose_1473 [label="prose"]

prose_1474 [label="prose"]

prose_1475 [label="prose"]

prose_1476 [label="prose"]


header_1472 -> leaf_1477
leaf_1477  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Backweaving"]
prose_1473 -> { raw_1478}
{rank=same; raw_1478}

raw_1478 [label="raw"]


raw_1478 -> leaf_1479
leaf_1479  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

An analogous operation is backweaving.
"]
prose_1474 -> { raw_1480 italic_1481 raw_1482}
{rank=same; raw_1480 italic_1481 raw_1482}

raw_1480 [label="raw"]

italic_1481 [label="italic"]

raw_1482 [label="raw"]


raw_1480 -> leaf_1483
leaf_1483  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A weave in Grimoire is an HTML"]
italic_1481 -> leaf_1484
leaf_1484  [color=Gray,shape=rectangle,fontname=Inconsolata,label="CSS"]
raw_1482 -> leaf_1485
leaf_1485  [color=Gray,shape=rectangle,fontname=Inconsolata,label="JS document. In other words, a program.
The weave is much closer akin to the source than any tangle. Any Grimoire
program can have a weave view, though it isn't necessary; many will have
no tangle at all, containing the functionality within Grimoire.
"]
prose_1475 -> { raw_1486}
{rank=same; raw_1486}

raw_1486 [label="raw"]


raw_1486 -> leaf_1487
leaf_1487  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The weave may therefore be manipulated, and we need some way to reflect
those changes back into the source. This can't be automated in a general
way. What we're left with is an EDN protocol for exchanging information
to update the weave in cooperation with some server logic and git.
"]
prose_1476 -> { raw_1488}
{rank=same; raw_1488}

raw_1488 [label="raw"]


raw_1488 -> leaf_1489
leaf_1489  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So, could you write the server logic for a site as a literate program,
push it to a server that tangles and weaves it, and use the source
and Grimoire/bridge as the sysadmin view? I bet you could, it might
even be fairly popular.
"]
section_435 -> { header_1490 prose_1491 prose_1492 prose_1493 section_1494}
{rank=same; header_1490 prose_1491 prose_1492 prose_1493 section_1494}

header_1490 [label="4 : Zero-header tag"]

prose_1491 [label="prose"]

prose_1492 [label="prose"]

prose_1493 [label="prose"]

section_1494 [label="section: 420-421"]


header_1490 -> leaf_1495
leaf_1495  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Zero-header tag"]
prose_1491 -> { raw_1496 bold_1497 raw_1498}
{rank=same; raw_1496 bold_1497 raw_1498}

raw_1496 [label="raw"]

bold_1497 [label="bold"]

raw_1498 [label="raw"]


raw_1496 -> leaf_1499
leaf_1499  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The special [["]
bold_1497 -> leaf_1500
leaf_1500  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Tags][tag]] =#"]
raw_1498 -> leaf_1501
leaf_1501  [color=Gray,shape=rectangle,fontname=Inconsolata,label="=, which is only meaningful at the top of a document,
 indicates a 'zero header'. This lets you use the one-star level as a
series within a single document.
"]
prose_1492 -> { raw_1502 literal_1503 raw_1504}
{rank=same; raw_1502 literal_1503 raw_1504}

raw_1502 [label="raw"]

literal_1503 [label="literal"]

raw_1504 [label="raw"]


raw_1502 -> leaf_1505
leaf_1505  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The related tag "]
literal_1503 -> leaf_1506
leaf_1506  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#meta*"]
raw_1504 -> leaf_1507
leaf_1507  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" must be followed by a space and any number of
stars. This indicates a meta-level for the entire under-tree, that
exists somewhere else. Further semantics may be provided.
"]
prose_1493 -> { raw_1508}
{rank=same; raw_1508}

raw_1508 [label="raw"]


raw_1508 -> leaf_1509
leaf_1509  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This section belongs in some further API section.
"]
section_1494 -> { header_1510 prose_1511}
{rank=same; header_1510 prose_1511}

header_1510 [label="5 : TODO Move to API Section"]

prose_1511 [label="prose"]


header_1510 -> leaf_1512
leaf_1512  [color=Gray,shape=rectangle,fontname=Inconsolata,label="***** TODO Move to API Section"]
prose_1511 -> { raw_1513}
{rank=same; raw_1513}

raw_1513 [label="raw"]


raw_1513 -> leaf_1514
leaf_1514  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]

}
