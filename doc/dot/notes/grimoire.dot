digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 1219"]


doc_0 -> { section_1 section_2}
{rank=same; section_1 section_2}

section_1 [label="section: 1-3"]

section_2 [label="section: 34-338"]


// END RANK doc_0

section_1 -> { header_3 prose_4 structure_5 section_6}
{rank=same; header_3 prose_4 structure_5 section_6}

header_3 [label="0 : "]

prose_4 [label="prose"]

structure_5 [label="structure"]

section_6 [label="section: 4-33"]


// END RANK section_1

header_3 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#+title: Grimoire: a metalanguage for magic spells."]
// END RANK header_3

prose_4 -> { raw_8}
{rank=same; raw_8}

raw_8 [label="raw"]


// END RANK prose_4

raw_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_8

structure_5 -> { hashline_10}
{rank=same; hashline_10}

hashline_10 [label="hashline"]


// END RANK structure_5

hashline_10 -> { hashtag_11}
{rank=same; hashtag_11}

hashtag_11 [label="hashtag"]


// END RANK hashline_10

hashtag_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_11

section_6 -> { header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 prose_21 prose_22}
{rank=same; header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 prose_21 prose_22}

header_13 [label="1 : Introduction"]

prose_14 [label="prose"]

prose_15 [label="prose"]

prose_16 [label="prose"]

prose_17 [label="prose"]

prose_18 [label="prose"]

prose_19 [label="prose"]

prose_20 [label="prose"]

prose_21 [label="prose"]

prose_22 [label="prose"]


// END RANK section_6

header_13 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Introduction"]
// END RANK header_13

prose_14 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


// END RANK prose_14

raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is a response to Babel.
"]
// END RANK raw_24

prose_15 -> { raw_26}
{rank=same; raw_26}

raw_26 [label="raw"]


// END RANK prose_15

raw_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Babel is simultaneously a kludge and the most potentially powerful language in existence.
"]
// END RANK raw_26

prose_16 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


// END RANK prose_16

raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Babel is a metalanguage. The structure of Org mode lets the user weave together code into a
living document, in a flexible, powerful way.
"]
// END RANK raw_28

prose_17 -> { raw_30}
{rank=same; raw_30}

raw_30 [label="raw"]


// END RANK prose_17

raw_30 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The name is charmingly apt. Babel exists at the top of a tower of abstractions that is teetering
on the verge of collapse. Org-mode is an extension of outline mode, which was a simple tree
editor task list.
"]
// END RANK raw_30

prose_18 -> { raw_32}
{rank=same; raw_32}

raw_32 [label="raw"]


// END RANK prose_18

raw_32 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Various users bolted stuff on, because that's how emacs grows, you bolt stuff onto it and it
continues to function because it's [[http://lispers.org/][made with alien technology]].
"]
// END RANK raw_32

prose_19 -> { raw_34}
{rank=same; raw_34}

raw_34 [label="raw"]


// END RANK prose_19

raw_34 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The problem with Babel is more than the syntax being clunky, though that's a problem. The issue is
more profoundly that Babel is built on Org, which is built on emacs. It's a language, yes,
parsers exist for other platforms. But as a runtime, it isn't portable without a lot of effort.
"]
// END RANK raw_34

prose_20 -> { raw_36}
{rank=same; raw_36}

raw_36 [label="raw"]


// END RANK prose_20

raw_36 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So much so, that we get a chance to start over. It's roughly as difficult to write Grimoire as it would be to
reimplement Babel in, say, Sublime.
"]
// END RANK raw_36

prose_21 -> { raw_38}
{rank=same; raw_38}

raw_38 [label="raw"]


// END RANK prose_21

raw_38 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the process, we can:
"]
// END RANK raw_38

prose_22 -> { raw_40}
{rank=same; raw_40}

raw_40 [label="raw"]


// END RANK prose_22

raw_40 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - streamline concepts, making them more orthogonal
  - clean up the clunkiness in the grammar
  - build a toolchain that will let us write magic spells in any number of languages, amassing a powerful
    collection of same. A grimoire, if you will: a living book in which magic is both written and performed.
"]
// END RANK raw_40

section_2 -> { header_42 prose_43 section_44 section_45 section_46}
{rank=same; header_42 prose_43 section_44 section_45 section_46}

header_42 [label="1 : Musings on Metasyntax"]

prose_43 [label="prose"]

section_44 [label="section: 35-82"]

section_45 [label="section: 105-311"]

section_46 [label="section: 339-343"]


// END RANK section_2

header_42 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Musings on Metasyntax"]
// END RANK header_42

prose_43 -> { raw_48}
{rank=same; raw_48}

raw_48 [label="raw"]


// END RANK prose_43

raw_48 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_48

section_44 -> { header_50 prose_51 prose_52 section_53 section_54 section_55}
{rank=same; header_50 prose_51 prose_52 section_53 section_54 section_55}

header_50 [label="2 : Constraints"]

prose_51 [label="prose"]

prose_52 [label="prose"]

section_53 [label="section: 42-68"]

section_54 [label="section: 69-82"]

section_55 [label="section: 83-104"]


// END RANK section_44

header_50 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Constraints"]
// END RANK header_50

prose_51 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


// END RANK prose_51

raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

There is a difference between a metalanguage and a literate programming language. Babel is a metalanguage,
as Grimoire is intended to be.
"]
// END RANK raw_57

prose_52 -> { raw_59}
{rank=same; raw_59}

raw_59 [label="raw"]


// END RANK prose_52

raw_59 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An effective metalanguage balances three concerns. It must be usable, readable, and parsable.
"]
// END RANK raw_59

section_53 -> { header_61 prose_62 prose_63 prose_64 prose_65 prose_66 prose_67 prose_68}
{rank=same; header_61 prose_62 prose_63 prose_64 prose_65 prose_66 prose_67 prose_68}

header_61 [label="3 : Usable"]

prose_62 [label="prose"]

prose_63 [label="prose"]

prose_64 [label="prose"]

prose_65 [label="prose"]

prose_66 [label="prose"]

prose_67 [label="prose"]

prose_68 [label="prose"]


// END RANK section_53

header_61 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Usable"]
// END RANK header_61

prose_62 -> { raw_70}
{rank=same; raw_70}

raw_70 [label="raw"]


// END RANK prose_62

raw_70 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A metalanguage is used interactively, on a deeper level than REPLs.
"]
// END RANK raw_70

prose_63 -> { raw_72 prespace_73 literal_74 raw_75}
{rank=same; raw_72 prespace_73 literal_74 raw_75}

raw_72 [label="raw"]

prespace_73 [label="prespace"]

literal_74 [label="literal"]

raw_75 [label="raw"]


// END RANK prose_63

raw_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is what makes working with Org so amazing. The first purpose of what became Babel
was simply editing outlines. This was outline mode, which dates back to the era when
using asterisks and"]
// END RANK raw_72

prespace_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_73

literal_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="- [ ]"]
// END RANK literal_74

raw_75 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" checkboxes in a plain ASCII text file was fairly futuristic
behavior.
"]
// END RANK raw_75

prose_64 -> { raw_80}
{rank=same; raw_80}

raw_80 [label="raw"]


// END RANK prose_64

raw_80 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You can't really call that a language either, though it's a syntax. More and more features
were attached until we have modern Babel. But because each feature was build as an extension
to the editing/runtime environment, Babel is fairly smooth to work with.
"]
// END RANK raw_80

prose_65 -> { raw_82}
{rank=same; raw_82}

raw_82 [label="raw"]


// END RANK prose_65

raw_82 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If you can handle Emacs. I can, some can't. A metalanguage is tightly coupled to its runtime,
because its runtime is its editing environment. Not much of a metalanguage if this isn't the
case.
"]
// END RANK raw_82

prose_66 -> { raw_84}
{rank=same; raw_84}

raw_84 [label="raw"]


// END RANK prose_66

raw_84 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is the culmination of a considerable dependency chain. We need a data structure, a
parser to work with the data structure, and an editing environment that builds on these. For
maximum enjoyment, we'll want a custom terminal that enhances the xterm protocol with a few
features, most notably graphics.
"]
// END RANK raw_84

prose_67 -> { raw_86}
{rank=same; raw_86}

raw_86 [label="raw"]


// END RANK prose_67

raw_86 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Just like I have trouble writing Lua without burning huge amounts of time planning out Clu, I
can't use Org without doing the same for Grimoire. It's all related: I need a really good parser.
"]
// END RANK raw_86

prose_68 -> { raw_88}
{rank=same; raw_88}

raw_88 [label="raw"]


// END RANK prose_68

raw_88 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[[https://github.com/UpstandingHackers/hammer][hammer]] is the leading contender. But back to Grimoire.
"]
// END RANK raw_88

section_54 -> { header_90 prose_91 prose_92 prose_93}
{rank=same; header_90 prose_91 prose_92 prose_93}

header_90 [label="3 : Readable"]

prose_91 [label="prose"]

prose_92 [label="prose"]

prose_93 [label="prose"]


// END RANK section_54

header_90 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Readable"]
// END RANK header_90

prose_91 -> { raw_95}
{rank=same; raw_95}

raw_95 [label="raw"]


// END RANK prose_91

raw_95 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is designed to be read.  It's important that the raw syntax not
 break the reader's flow.  A good metalanguage lets the user employ just
 as much magic as she's comfortable with, without imposing more.
"]
// END RANK raw_95

prose_92 -> { raw_97}
{rank=same; raw_97}

raw_97 [label="raw"]


// END RANK prose_92

raw_97 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Our syntax is  designed to support this. As such  it is deeply concerned
with matters  such as indentation  and whitespacing, which are  basic to
readability.
"]
// END RANK raw_97

prose_93 -> { raw_99}
{rank=same; raw_99}

raw_99 [label="raw"]


// END RANK prose_93

raw_99 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It will be quite possible and indeed comfortable to write pure documents
such  as blog  posts in  Grimoire form.  In that  use case  it resembles
Markdown.
"]
// END RANK raw_99

section_55 -> { header_101 prose_102 prose_103 prose_104 prose_105 prose_106}
{rank=same; header_101 prose_102 prose_103 prose_104 prose_105 prose_106}

header_101 [label="3 : Parsable"]

prose_102 [label="prose"]

prose_103 [label="prose"]

prose_104 [label="prose"]

prose_105 [label="prose"]

prose_106 [label="prose"]


// END RANK section_55

header_101 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Parsable"]
// END RANK header_101

prose_102 -> { raw_108}
{rank=same; raw_108}

raw_108 [label="raw"]


// END RANK prose_102

raw_108 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire  documents are  intended  to be  highly  convoluted. The  basic
editing operation  is the fold. The  Grimoire editor must be  capable of
handling documents in the tens of megabytes with a complex and preserved
folding structure.
"]
// END RANK raw_108

prose_103 -> { raw_110}
{rank=same; raw_110}

raw_110 [label="raw"]


// END RANK prose_103

raw_110 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This requires  a ground-up  editing environment  rewrite to  employ data
structures   with   correct   big-O    complexity   and   an   efficient
implementation.
"]
// END RANK raw_110

prose_104 -> { raw_112}
{rank=same; raw_112}

raw_112 [label="raw"]


// END RANK prose_104

raw_112 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This  also  requires  that  the   language  be  well-designed  for  easy
recognition of the structural elements. As this document evolves, I will
be defining a grammar in the syntax preferred by barbarian.
"]
// END RANK raw_112

prose_105 -> { raw_114}
{rank=same; raw_114}

raw_114 [label="raw"]


// END RANK prose_105

raw_114 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is  an error-free  language. There  are several  concepts which
interact to  create this, namely  structure, prose, well-  and malformed
structure, and validity.
"]
// END RANK raw_114

prose_106 -> { raw_116}
{rank=same; raw_116}

raw_116 [label="raw"]


// END RANK prose_106

raw_116 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A parser for Grimoire which doesn't  succeed without error for any utf-8
string is not valid.
"]
// END RANK raw_116

section_45 -> { header_118 prose_119 section_120 section_121 section_122 section_123 section_124 section_125}
{rank=same; header_118 prose_119 section_120 section_121 section_122 section_123 section_124 section_125}

header_118 [label="2 : Structure"]

prose_119 [label="prose"]

section_120 [label="section: 109-149"]

section_121 [label="section: 161-190"]

section_122 [label="section: 191-200"]

section_123 [label="section: 253-285"]

section_124 [label="section: 295-311"]

section_125 [label="section: 312-338"]


// END RANK section_45

header_118 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Structure"]
// END RANK header_118

prose_119 -> { raw_127}
{rank=same; raw_127}

raw_127 [label="raw"]


// END RANK prose_119

raw_127 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a top-down look at Grimoire's proposed syntax.
"]
// END RANK raw_127

section_120 -> { header_129 prose_130 prose_131 prose_132 prose_133 prose_134 prose_135 prose_136 prose_137 prose_138 section_139}
{rank=same; header_129 prose_130 prose_131 prose_132 prose_133 prose_134 prose_135 prose_136 prose_137 prose_138 section_139}

header_129 [label="3 : Encoding"]

prose_130 [label="prose"]

prose_131 [label="prose"]

prose_132 [label="prose"]

prose_133 [label="prose"]

prose_134 [label="prose"]

prose_135 [label="prose"]

prose_136 [label="prose"]

prose_137 [label="prose"]

prose_138 [label="prose"]

section_139 [label="section: 150-160"]


// END RANK section_120

header_129 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Encoding"]
// END RANK header_129

prose_130 -> { raw_141}
{rank=same; raw_141}

raw_141 [label="raw"]


// END RANK prose_130

raw_141 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is defined in terms of utf-8.
"]
// END RANK raw_141

prose_131 -> { raw_143}
{rank=same; raw_143}

raw_143 [label="raw"]


// END RANK prose_131

raw_143 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The core syntax is defined in terms of the reachable keys on a US keyboard.
This tradition is firmly entrenched in the mid teens, and I have no
designs on budging that at present. The miser in me likes that they're
a byte each. The lawyer in me insists that this isn't ASCII, which is a
seven-bit legacy encoding. All aspects of utf-8 are equally meaningful.
"]
// END RANK raw_143

prose_132 -> { raw_145}
{rank=same; raw_145}

raw_145 [label="raw"]


// END RANK prose_132

raw_145 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We aren't at all afraid to use Unicode characters to display aspects
of the runtime. In fact we favor this, as it marks those operations
as distinctive. Most people can't type ⦿ without effort (I can't)
and it's easy to recognize as a folded drawer once you've seen a couple.
"]
// END RANK raw_145

prose_133 -> { raw_147}
{rank=same; raw_147}

raw_147 [label="raw"]


// END RANK prose_133

raw_147 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is case sensitive and uses lower-snake-case for built-in English
phrases. There is a convention (see classes) that uses capitalization of
user words to affect semantics. This may be overridden with other rules
for languages that lack the majuscule-miniscule distinction.
"]
// END RANK raw_147

prose_134 -> { raw_149}
{rank=same; raw_149}

raw_149 [label="raw"]


// END RANK prose_134

raw_149 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I want Grimoire to have correct Unicode handling, for some value of
correct. It can't be considered 1.0 without this.
"]
// END RANK raw_149

prose_135 -> { raw_151}
{rank=same; raw_151}

raw_151 [label="raw"]


// END RANK prose_135

raw_151 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Bidirectional handling in a context that's indentation sensitive is
an example of something subtle. Grimoire uses indentation in various
ways, so here's the rule:
"]
// END RANK raw_151

prose_136 -> { raw_153}
{rank=same; raw_153}

raw_153 [label="raw"]


// END RANK prose_136

raw_153 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Any newline that has a reversed direction ends indentation. So if
you are going ltr, issue an rtl marker, and a newline, your indentation
level is zero. If you reverse direction twice in a line, you keep
your indentation level. Three times, you lose it.
"]
// END RANK raw_153

prose_137 -> { raw_155}
{rank=same; raw_155}

raw_155 [label="raw"]


// END RANK prose_137

raw_155 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'd love to get a Hebrew and/or Arabic fluent hacker on the project
early, to make sure this works correctly.
"]
// END RANK raw_155

prose_138 -> { raw_157}
{rank=same; raw_157}

raw_157 [label="raw"]


// END RANK prose_138

raw_157 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Another thing I want to get right is equivalence. If you have a
variable called \"Glück\" the compiler shouldn't complain if it's
rendered in either of the valid ways. For some sequences that's
\"any of the valid ways\". If we normalized your prose, you might
have problems later, so we don't want to solve it that way.
"]
// END RANK raw_157

section_139 -> { header_159 prose_160 prose_161}
{rank=same; header_159 prose_160 prose_161}

header_159 [label="4 : Internationalization"]

prose_160 [label="prose"]

prose_161 [label="prose"]


// END RANK section_139

header_159 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Internationalization"]
// END RANK header_159

prose_160 -> { raw_163 prespace_164 literal_165 raw_166}
{rank=same; raw_163 prespace_164 literal_165 raw_166}

raw_163 [label="raw"]

prespace_164 [label="prespace"]

literal_165 [label="literal"]

raw_166 [label="raw"]


// END RANK prose_160

raw_163 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

All parts of Grimoire defined in English will be namespaced
as"]
// END RANK raw_163

prespace_164 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_164

literal_165 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="en:/"]
// END RANK literal_165

raw_166 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and loaded by default. Other languages will be added
when there is a fluent maintainer available.
"]
// END RANK raw_166

prose_161 -> { raw_171 prespace_172 literal_173 raw_174 prespace_175 literal_176 raw_177 prespace_178 literal_179 raw_180 prespace_181 literal_182 raw_183}
{rank=same; raw_171 prespace_172 literal_173 raw_174 prespace_175 literal_176 raw_177 prespace_178 literal_179 raw_180 prespace_181 literal_182 raw_183}

raw_171 [label="raw"]

prespace_172 [label="prespace"]

literal_173 [label="literal"]

raw_174 [label="raw"]

prespace_175 [label="prespace"]

literal_176 [label="literal"]

raw_177 [label="raw"]

prespace_178 [label="prespace"]

literal_179 [label="literal"]

raw_180 [label="raw"]

prespace_181 [label="prespace"]

literal_182 [label="literal"]

raw_183 [label="raw"]


// END RANK prose_161

raw_171 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note  that  many  words  aren't  truly English.  Notably  the  names  of
programming languages are  the same in all human languages.   A tag like"]
// END RANK raw_171

prespace_172 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_172

literal_173 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#author"]
// END RANK literal_173

raw_174 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" can be namespaced"]
// END RANK raw_174

prespace_175 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_175

literal_176 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#fr:/auteur"]
// END RANK literal_176

raw_177 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and will be, but"]
// END RANK raw_177

prespace_178 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_178

literal_179 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!python"]
// END RANK literal_179

raw_180 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not
in the"]
// END RANK raw_180

prespace_181 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_181

literal_182 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label="en:/"]
// END RANK literal_182

raw_183 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" namespace.
"]
// END RANK raw_183

section_121 -> { header_197 prose_198 prose_199 prose_200 prose_201 prose_202 prose_203 prose_204}
{rank=same; header_197 prose_198 prose_199 prose_200 prose_201 prose_202 prose_203 prose_204}

header_197 [label="3 : Prose and Structure"]

prose_198 [label="prose"]

prose_199 [label="prose"]

prose_200 [label="prose"]

prose_201 [label="prose"]

prose_202 [label="prose"]

prose_203 [label="prose"]

prose_204 [label="prose"]


// END RANK section_121

header_197 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Prose and Structure"]
// END RANK header_197

prose_198 -> { raw_206}
{rank=same; raw_206}

raw_206 [label="raw"]


// END RANK prose_198

raw_206 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The major distinction Grimoire draws is between prose and structure.
"]
// END RANK raw_206

prose_199 -> { raw_208}
{rank=same; raw_208}

raw_208 [label="raw"]


// END RANK prose_199

raw_208 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose is the default parsing state. It is far from unstructured from the
runtime  perspective. Although  this needn't  be embedded  in the  parse
tree,  Grimoire   understands  concepts   such  as   paragraphs,  words,
punctuation,  capital letters,  languages, and  anything else  proper to
prose.
"]
// END RANK raw_208

prose_200 -> { raw_210}
{rank=same; raw_210}

raw_210 [label="raw"]


// END RANK prose_200

raw_210 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I refer to human languages, but Grimoire understands programming languages
also. In principle, all of them, it shouldn't be harder to add them than
it is to call them from shell, though getting a runtime rigged up to
another runtime always calls for some finesse to derive a good experience.
"]
// END RANK raw_210

prose_201 -> { raw_212}
{rank=same; raw_212}

raw_212 [label="raw"]


// END RANK prose_201

raw_212 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
\"Programming languages\" is overly specific. Grimoire draws a distinction
between prose and structure. Blocks may contain either, or both.
"]
// END RANK raw_212

prose_202 -> { raw_214 prespace_215 bold_216 raw_217}
{rank=same; raw_214 prespace_215 bold_216 raw_217}

raw_214 [label="raw"]

prespace_215 [label="prespace"]

bold_216 [label="bold"]

raw_217 [label="raw"]


// END RANK prose_202

raw_214 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something that's nice about a language build on a prose/structure
relationship is that it can be error free. Anything"]
// END RANK raw_214

prespace_215 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_215

bold_216 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym"]
// END RANK bold_216

raw_217 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" can't build into
a structure is just prose.
"]
// END RANK raw_217

prose_203 -> { raw_222}
{rank=same; raw_222}

raw_222 [label="raw"]


// END RANK prose_203

raw_222 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Markdown has this property. Sometimes you run into crappy parsers which
build errors into Markdown, which is just obnoxious. If you [[http://daringfireball.net/projects/markdown/syntax][RTFM]],
you'll find the word \"error\" once. Helpfully explaining how Markdown
keeps you from making one.
"]
// END RANK raw_222

prose_204 -> { raw_224}
{rank=same; raw_224}

raw_224 [label="raw"]


// END RANK prose_204

raw_224 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do what we can to make the document look the same as it is
in fact structured. Syntax highlighting handles the edge cases.
"]
// END RANK raw_224

section_122 -> { header_226 prose_227 prose_228 prose_229 section_230}
{rank=same; header_226 prose_227 prose_228 prose_229 section_230}

header_226 [label="3 : Ownership"]

prose_227 [label="prose"]

prose_228 [label="prose"]

prose_229 [label="prose"]

section_230 [label="section: 201-252"]


// END RANK section_122

header_226 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Ownership"]
// END RANK header_226

prose_227 -> { raw_232}
{rank=same; raw_232}

raw_232 [label="raw"]


// END RANK prose_227

raw_232 -> leaf_233
leaf_233  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The basic structural relationship in Grimoire is ownership.
"]
// END RANK raw_232

prose_228 -> { raw_234}
{rank=same; raw_234}

raw_234 [label="raw"]


// END RANK prose_228

raw_234 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Root elements of a heirarchy own their children, blocks own
lines that refer to that block. Indentation has a subtle but
regular interaction with ownership; it does what you expect.
"]
// END RANK raw_234

prose_229 -> { raw_236}
{rank=same; raw_236}

raw_236 [label="raw"]


// END RANK prose_229

raw_236 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Edge cases are resolved using the cling rule.
"]
// END RANK raw_236

section_230 -> { header_238 prose_239 prose_240 prose_241 prose_242 structure_243 structure_244 structure_245 structure_246 structure_247 prose_248 structure_249 structure_250 structure_251 prose_252}
{rank=same; header_238 prose_239 prose_240 prose_241 prose_242 structure_243 structure_244 structure_245 structure_246 structure_247 prose_248 structure_249 structure_250 structure_251 prose_252}

header_238 [label="4 : The Cling Rule"]

prose_239 [label="prose"]

prose_240 [label="prose"]

prose_241 [label="prose"]

prose_242 [label="prose"]

structure_243 [label="structure"]

structure_244 [label="structure"]

structure_245 [label="structure"]

structure_246 [label="structure"]

structure_247 [label="structure"]

prose_248 [label="prose"]

structure_249 [label="structure"]

structure_250 [label="structure"]

structure_251 [label="structure"]

prose_252 [label="prose"]


// END RANK section_230

header_238 -> leaf_253
leaf_253  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** The Cling Rule"]
// END RANK header_238

prose_239 -> { raw_254}
{rank=same; raw_254}

raw_254 [label="raw"]


// END RANK prose_239

raw_254 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The cling rule specifies that a group 'clings' to another group when
it is closer to that group than the other group. Ties resolve down.
"]
// END RANK raw_254

prose_240 -> { raw_256}
{rank=same; raw_256}

raw_256 [label="raw"]


// END RANK prose_240

raw_256 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This should make it intuitive to group elements that aren't grouping the
way you expect: put in whitespace until the block is visually distinguished
from the surroundings.
"]
// END RANK raw_256

prose_241 -> { raw_258}
{rank=same; raw_258}

raw_258 [label="raw"]


// END RANK prose_241

raw_258 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cling applies between blocks which are at the same level of ownership.
Ownership has precedence over cling: all blocks underneath e.g. a header
line are owned by that line, newlines notwithstanding.
"]
// END RANK raw_258

prose_242 -> { raw_260}
{rank=same; raw_260}

raw_260 [label="raw"]


// END RANK prose_242

raw_260 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that indentation of e.g. lists invokes the cling rule within the
indentation level.

"]
// END RANK raw_260

structure_243 -> { hashline_262}
{rank=same; hashline_262}

hashline_262 [label="hashline"]


// END RANK structure_243

hashline_262 -> { hashtag_263}
{rank=same; hashtag_263}

hashtag_263 [label="hashtag"]


// END RANK hashline_262

hashtag_263 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_263

structure_244 -> { hashline_265}
{rank=same; hashline_265}

hashline_265 [label="hashline"]


// END RANK structure_244

hashline_265 -> { hashtag_266}
{rank=same; hashtag_266}

hashtag_266 [label="hashtag"]


// END RANK hashline_265

hashtag_266 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_266

structure_245 -> { hashline_268}
{rank=same; hashline_268}

hashline_268 [label="hashline"]


// END RANK structure_245

hashline_268 -> { hashtag_269}
{rank=same; hashtag_269}

hashtag_269 [label="hashtag"]


// END RANK hashline_268

hashtag_269 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_269

structure_246 -> { hashline_271}
{rank=same; hashline_271}

hashline_271 [label="hashline"]


// END RANK structure_246

hashline_271 -> { hashtag_272}
{rank=same; hashtag_272}

hashtag_272 [label="hashtag"]


// END RANK hashline_271

hashtag_272 -> leaf_273
leaf_273  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
// END RANK hashtag_272

structure_247 -> { hashline_274}
{rank=same; hashline_274}

hashline_274 [label="hashline"]


// END RANK structure_247

hashline_274 -> { hashtag_275}
{rank=same; hashtag_275}

hashtag_275 [label="hashtag"]


// END RANK hashline_274

hashtag_275 -> leaf_276
leaf_276  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_275

prose_248 -> { raw_277}
{rank=same; raw_277}

raw_277 [label="raw"]


// END RANK prose_248

raw_277 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Even clings are resolved forwards:
"]
// END RANK raw_277

structure_249 -> { hashline_279}
{rank=same; hashline_279}

hashline_279 [label="hashline"]


// END RANK structure_249

hashline_279 -> { hashtag_280}
{rank=same; hashtag_280}

hashtag_280 [label="hashtag"]


// END RANK hashline_279

hashtag_280 -> leaf_281
leaf_281  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_280

structure_250 -> { hashline_282}
{rank=same; hashline_282}

hashline_282 [label="hashline"]


// END RANK structure_250

hashline_282 -> { hashtag_283}
{rank=same; hashtag_283}

hashtag_283 [label="hashtag"]


// END RANK hashline_282

hashtag_283 -> leaf_284
leaf_284  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
// END RANK hashtag_283

structure_251 -> { hashline_285}
{rank=same; hashline_285}

hashline_285 [label="hashline"]


// END RANK structure_251

hashline_285 -> { hashtag_286}
{rank=same; hashtag_286}

hashtag_286 [label="hashtag"]


// END RANK hashline_285

hashtag_286 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_286

prose_252 -> { raw_288}
{rank=same; raw_288}

raw_288 [label="raw"]


// END RANK prose_252

raw_288 -> leaf_289
leaf_289  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
be considered bad style.
"]
// END RANK raw_288

section_123 -> { header_290 prose_291 section_292 section_293 section_294}
{rank=same; header_290 prose_291 section_292 section_293 section_294}

header_290 [label="3 : Whitespace, Lines, and Indentation."]

prose_291 [label="prose"]

section_292 [label="section: 258-279"]

section_293 [label="section: 280-285"]

section_294 [label="section: 286-294"]


// END RANK section_123

header_290 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Whitespace, Lines, and Indentation."]
// END RANK header_290

prose_291 -> { raw_296}
{rank=same; raw_296}

raw_296 [label="raw"]


// END RANK prose_291

raw_296 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is a structured document format. There are semantics associated
with every character we encode.
"]
// END RANK raw_296

section_292 -> { header_298 prose_299 prose_300 prose_301 prose_302 prose_303}
{rank=same; header_298 prose_299 prose_300 prose_301 prose_302 prose_303}

header_298 [label="4 : Whitespace"]

prose_299 [label="prose"]

prose_300 [label="prose"]

prose_301 [label="prose"]

prose_302 [label="prose"]

prose_303 [label="prose"]


// END RANK section_292

header_298 -> leaf_304
leaf_304  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Whitespace"]
// END RANK header_298

prose_299 -> { raw_305}
{rank=same; raw_305}

raw_305 [label="raw"]


// END RANK prose_299

raw_305 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Whitespace is either the space or newline character. Returns are removed,
tabs resolved to two spaces by the formatter, the latter is warned against.
"]
// END RANK raw_305

prose_300 -> { raw_307}
{rank=same; raw_307}

raw_307 [label="raw"]


// END RANK prose_300

raw_307 -> leaf_308
leaf_308  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Most of the token-like categories we refer to must be surrounded by
whitespace. Newlines have semantics more often than they do not.
"]
// END RANK raw_307

prose_301 -> { raw_309 prespace_310 literal_311 raw_312}
{rank=same; raw_309 prespace_310 literal_311 raw_312}

raw_309 [label="raw"]

prespace_310 [label="prespace"]

literal_311 [label="literal"]

raw_312 [label="raw"]


// END RANK prose_301

raw_309 -> leaf_313
leaf_313  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Unicode actually contains quite a number of whitespace characters. They are
all treated as a single ordinary space. If that space is semantically meaningful,
as in the space between"]
// END RANK raw_309

prespace_310 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_310

literal_311 -> leaf_315
leaf_315  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** A Headline"]
// END RANK literal_311

raw_312 -> leaf_316
leaf_316  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", it is filtered into an ordinary space.
Otherwise it's considered prose, the only filtration prose receives is tab->space
conversion.
"]
// END RANK raw_312

prose_302 -> { raw_317}
{rank=same; raw_317}

raw_317 [label="raw"]


// END RANK prose_302

raw_317 -> leaf_318
leaf_318  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire mercilessly enforces tab-space conversion, even on your code blocks.
I will cling to this tenet as long as I can, the tab character needs to die,
the world has decided, that key is special and shouldn't insert a special
dropping that looks like n spaces.
"]
// END RANK raw_317

prose_303 -> { prespace_319 bold_320 raw_321}
{rank=same; prespace_319 bold_320 raw_321}

prespace_319 [label="prespace"]

bold_320 [label="bold"]

raw_321 [label="raw"]


// END RANK prose_303

prespace_319 -> leaf_322
leaf_322  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_319

bold_320 -> leaf_323
leaf_323  [color=Gray,shape=rectangle,fontname=Inconsolata,label="make"]
// END RANK bold_320

raw_321 -> leaf_324
leaf_324  [color=Gray,shape=rectangle,fontname=Inconsolata,label="? Outta my face with make. Yes, we'll have a make syntax, yes, it will
put the tabs back in.
"]
// END RANK raw_321

section_293 -> { header_325 prose_326}
{rank=same; header_325 prose_326}

header_325 [label="4 : Lines"]

prose_326 [label="prose"]


// END RANK section_293

header_325 -> leaf_327
leaf_327  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Lines"]
// END RANK header_325

prose_326 -> { raw_328}
{rank=same; raw_328}

raw_328 [label="raw"]


// END RANK prose_326

raw_328 -> leaf_329
leaf_329  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

When we refer to the beginning of a line, this allows for spaces before the
reference point. We call the absolute beginning of a line the first
position.
"]
// END RANK raw_328

section_294 -> { header_330 prose_331 prose_332 prose_333}
{rank=same; header_330 prose_331 prose_332 prose_333}

header_330 [label="4 : Indentation"]

prose_331 [label="prose"]

prose_332 [label="prose"]

prose_333 [label="prose"]


// END RANK section_294

header_330 -> leaf_334
leaf_334  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Indentation"]
// END RANK header_330

prose_331 -> { raw_335}
{rank=same; raw_335}

raw_335 [label="raw"]


// END RANK prose_331

raw_335 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is an indentation-aware language. Most kinds of block can be
arcically[fn:1] ordered by means of indentation.
"]
// END RANK raw_335

prose_332 -> { raw_337}
{rank=same; raw_337}

raw_337 [label="raw"]


// END RANK prose_332

raw_337 -> leaf_338
leaf_338  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indentation follows [[http://nim-lang.org/manual.html#indentation][Nim rules]].
"]
// END RANK raw_337

prose_333 -> { raw_339}
{rank=same; raw_339}

raw_339 [label="raw"]


// END RANK prose_333

raw_339 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[fn:1] There's nothing sacred about ordered subrules, and if we're making up
a new word, let's drop the silent h. Webster was a cool guy."]
// END RANK raw_339

section_124 -> { header_341 prose_342 prose_343 prose_344 prose_345}
{rank=same; header_341 prose_342 prose_343 prose_344 prose_345}

header_341 [label="3 : Order of Recognition"]

prose_342 [label="prose"]

prose_343 [label="prose"]

prose_344 [label="prose"]

prose_345 [label="prose"]


// END RANK section_124

header_341 -> leaf_346
leaf_346  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Order of Recognition"]
// END RANK header_341

prose_342 -> { raw_347}
{rank=same; raw_347}

raw_347 [label="raw"]


// END RANK prose_342

raw_347 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Starting from the neutral context, which is always at a newline, Grimoire
tries to make one of its initializing special forms. Failing that, it will
begin a prose block.
"]
// END RANK raw_347

prose_343 -> { raw_349}
{rank=same; raw_349}

raw_349 [label="raw"]


// END RANK prose_343

raw_349 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If there is whitespace, it affects indentation level in indicated ways.
They will not directly affect the semantics of the following form, that is,
these rules apply after any potentially block-ending newline, apart from
spaces that may be found between the newline and the character.
"]
// END RANK raw_349

prose_344 -> { raw_351 prespace_352 literal_353 raw_354 prespace_355 literal_356 raw_357 prespace_358 literal_359 raw_360 prespace_361 literal_362 raw_363 prespace_364 literal_365 raw_366 prespace_367 literal_368 raw_369 prespace_370 literal_371 raw_372 prespace_373 literal_374 raw_375}
{rank=same; raw_351 prespace_352 literal_353 raw_354 prespace_355 literal_356 raw_357 prespace_358 literal_359 raw_360 prespace_361 literal_362 raw_363 prespace_364 literal_365 raw_366 prespace_367 literal_368 raw_369 prespace_370 literal_371 raw_372 prespace_373 literal_374 raw_375}

raw_351 [label="raw"]

prespace_352 [label="prespace"]

literal_353 [label="literal"]

raw_354 [label="raw"]

prespace_355 [label="prespace"]

literal_356 [label="literal"]

raw_357 [label="raw"]

prespace_358 [label="prespace"]

literal_359 [label="literal"]

raw_360 [label="raw"]

prespace_361 [label="prespace"]

literal_362 [label="literal"]

raw_363 [label="raw"]

prespace_364 [label="prespace"]

literal_365 [label="literal"]

raw_366 [label="raw"]

prespace_367 [label="prespace"]

literal_368 [label="literal"]

raw_369 [label="raw"]

prespace_370 [label="prespace"]

literal_371 [label="literal"]

raw_372 [label="raw"]

prespace_373 [label="prespace"]

literal_374 [label="literal"]

raw_375 [label="raw"]


// END RANK prose_344

raw_351 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
At present, "]
// END RANK raw_351

prespace_352 -> leaf_377
leaf_377  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_352

literal_353 -> leaf_378
leaf_378  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
// END RANK literal_353

raw_354 -> leaf_379
leaf_379  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_354

prespace_355 -> leaf_380
leaf_380  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_355

literal_356 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#"]
// END RANK literal_356

raw_357 -> leaf_382
leaf_382  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
// END RANK raw_357

prespace_358 -> leaf_383
leaf_383  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_358

literal_359 -> leaf_384
leaf_384  [color=Gray,shape=rectangle,fontname=Inconsolata,label="|"]
// END RANK literal_359

raw_360 -> leaf_385
leaf_385  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_360

prespace_361 -> leaf_386
leaf_386  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_361

literal_362 -> leaf_387
leaf_387  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-"]
// END RANK literal_362

raw_363 -> leaf_388
leaf_388  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",  ,"]
// END RANK raw_363

prespace_364 -> leaf_389
leaf_389  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_364

literal_365 -> leaf_390
leaf_390  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~"]
// END RANK literal_365

raw_366 -> leaf_391
leaf_391  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
// END RANK raw_366

prespace_367 -> leaf_392
leaf_392  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_367

literal_368 -> leaf_393
leaf_393  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@"]
// END RANK literal_368

raw_369 -> leaf_394
leaf_394  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_369

prespace_370 -> leaf_395
leaf_395  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_370

literal_371 -> leaf_396
leaf_396  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":"]
// END RANK literal_371

raw_372 -> leaf_397
leaf_397  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  and"]
// END RANK raw_372

prespace_373 -> leaf_398
leaf_398  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_373

literal_374 -> leaf_399
leaf_399  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{"]
// END RANK literal_374

raw_375 -> leaf_400
leaf_400  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  all create
special  contexts.  A  special  context  creates a  block  in a  context
specific way.
"]
// END RANK raw_375

prose_345 -> { raw_401}
{rank=same; raw_401}

raw_401 [label="raw"]


// END RANK prose_345

raw_401 -> leaf_402
leaf_402  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Blocks have a left associativity which can be recursive.
"]
// END RANK raw_401

section_125 -> { header_403 prose_404 prose_405 prose_406 prose_407 prose_408}
{rank=same; header_403 prose_404 prose_405 prose_406 prose_407 prose_408}

header_403 [label="3 : Blocks"]

prose_404 [label="prose"]

prose_405 [label="prose"]

prose_406 [label="prose"]

prose_407 [label="prose"]

prose_408 [label="prose"]


// END RANK section_125

header_403 -> leaf_409
leaf_409  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Blocks"]
// END RANK header_403

prose_404 -> { raw_410}
{rank=same; raw_410}

raw_410 [label="raw"]


// END RANK prose_404

raw_410 -> leaf_411
leaf_411  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is oriented around blocks.
"]
// END RANK raw_410

prose_405 -> { raw_412}
{rank=same; raw_412}

raw_412 [label="raw"]


// END RANK prose_405

raw_412 -> leaf_413
leaf_413  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Blocks are at least one line long,  all restarts are on a new line.  Any
syntactic structure smaller than a block we call an element.
"]
// END RANK raw_412

prose_406 -> { raw_414}
{rank=same; raw_414}

raw_414 [label="raw"]


// END RANK prose_406

raw_414 -> leaf_415
leaf_415  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Some types of blocks nest.  A document is a single  block.  There may be
other semantic units such as directories, I'd think a language that uses
strict  nested heirarchy  as powerfully  as Grimoire  could dictate  the
semantics of a file system, but that's currently out of scope.
"]
// END RANK raw_414

prose_407 -> { raw_416 prespace_417 literal_418 raw_419 prespace_420 literal_421 raw_422 prespace_423 literal_424 raw_425}
{rank=same; raw_416 prespace_417 literal_418 raw_419 prespace_420 literal_421 raw_422 prespace_423 literal_424 raw_425}

raw_416 [label="raw"]

prespace_417 [label="prespace"]

literal_418 [label="literal"]

raw_419 [label="raw"]

prespace_420 [label="prespace"]

literal_421 [label="literal"]

raw_422 [label="raw"]

prespace_423 [label="prespace"]

literal_424 [label="literal"]

raw_425 [label="raw"]


// END RANK prose_407

raw_416 -> leaf_426
leaf_426  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indentation is relevant to some  kinds of blocks. In general, whitespace
matters quite a  bit in a Grimoire  document. We keep some  of the warts
out because the tab character is  illegal, and there will be a mandatory
formatter,"]
// END RANK raw_416

prespace_417 -> leaf_427
leaf_427  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_417

literal_418 -> leaf_428
leaf_428  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym  fmt"]
// END RANK literal_418

raw_419 -> leaf_429
leaf_429  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if  you will, that  does everything  from turning"]
// END RANK raw_419

prespace_420 -> leaf_430
leaf_430  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_420

literal_421 -> leaf_431
leaf_431  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**bold**"]
// END RANK literal_421

raw_422 -> leaf_432
leaf_432  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  into"]
// END RANK raw_422

prespace_423 -> leaf_433
leaf_433  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_423

literal_424 -> leaf_434
leaf_434  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*bold*"]
// END RANK literal_424

raw_425 -> leaf_435
leaf_435  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  (because the  extra stars  weren't used),  to
newline stripping, and so on.  This is normally applied incrementally by
the runtime editing environment.
"]
// END RANK raw_425

prose_408 -> { raw_436}
{rank=same; raw_436}

raw_436 [label="raw"]


// END RANK prose_408

raw_436 -> leaf_437
leaf_437  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indentation is human  readable and, with some care, a  computer may come
to the  same conclusions a  human would. I'm  still wary of  Python, but
there's no good  reason, unless the headache of most  Python not working
correctly  on my  computer, for  reasons I  can't track  down that  seem
related to  there being two languages  invoked as 'python', counts  as a
good reason.
"]
// END RANK raw_436

section_46 -> { header_438 prose_439 section_440}
{rank=same; header_438 prose_439 section_440}

header_438 [label="2 : Syntax"]

prose_439 [label="prose"]

section_440 [label="section: 344-407"]


// END RANK section_46

header_438 -> leaf_441
leaf_441  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Syntax"]
// END RANK header_438

prose_439 -> { raw_442}
{rank=same; raw_442}

raw_442 [label="raw"]


// END RANK prose_439

raw_442 -> leaf_443
leaf_443  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Now that we've established the basic constraints, let's
start our recursive descent into the parse.
"]
// END RANK raw_442

section_440 -> { header_444 prose_445 prose_446 prose_447 prose_448 prose_449 prose_450 structure_451 section_452 section_453}
{rank=same; header_444 prose_445 prose_446 prose_447 prose_448 prose_449 prose_450 structure_451 section_452 section_453}

header_444 [label="3 : Headers"]

prose_445 [label="prose"]

prose_446 [label="prose"]

prose_447 [label="prose"]

prose_448 [label="prose"]

prose_449 [label="prose"]

prose_450 [label="prose"]

structure_451 [label="structure"]

section_452 [label="section: 368-368"]

section_453 [label="section: 408-419"]


// END RANK section_440

header_444 -> leaf_454
leaf_454  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Headers"]
// END RANK header_444

prose_445 -> { raw_455}
{rank=same; raw_455}

raw_455 [label="raw"]


// END RANK prose_445

raw_455 -> leaf_456
leaf_456  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is arcically constrained by structure groups,
called headers.
"]
// END RANK raw_455

prose_446 -> { raw_457 prespace_458 literal_459 raw_460}
{rank=same; raw_457 prespace_458 literal_459 raw_460}

raw_457 [label="raw"]

prespace_458 [label="prespace"]

literal_459 [label="literal"]

raw_460 [label="raw"]


// END RANK prose_446

raw_457 -> leaf_461
leaf_461  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These start on a new line and begin with any number of "]
// END RANK raw_457

prespace_458 -> leaf_462
leaf_462  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_458

literal_459 -> leaf_463
leaf_463  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
// END RANK literal_459

raw_460 -> leaf_464
leaf_464  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". These must
be followed by a space mark to be valid. Contra Babel, you may
have a content-free header line, provided a space is found before the
newline.
"]
// END RANK raw_460

prose_447 -> { raw_465}
{rank=same; raw_465}

raw_465 [label="raw"]


// END RANK prose_447

raw_465 -> leaf_466
leaf_466  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In weaves and the like, headers represent document structure. Their
intention is structural: they support the same syntax as lists,
but the user is expected to use lists for list purposes. Putting
[TODO] in a header line should mean you have a document-specific
task to perform in that block.
"]
// END RANK raw_465

prose_448 -> { raw_467}
{rank=same; raw_467}

raw_467 [label="raw"]


// END RANK prose_448

raw_467 -> leaf_468
leaf_468  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Contra Babel, you may put spaces before the beginning of a header line.
"]
// END RANK raw_467

prose_449 -> { raw_469}
{rank=same; raw_469}

raw_469 [label="raw"]


// END RANK prose_449

raw_469 -> leaf_470
leaf_470  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The semantics of header lines are entirely determined by
the number of stars.
"]
// END RANK raw_469

prose_450 -> { raw_471}
{rank=same; raw_471}

raw_471 [label="raw"]


// END RANK prose_450

raw_471 -> leaf_472
leaf_472  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If you write
"]
// END RANK raw_471

structure_451 -> { hashline_473}
{rank=same; hashline_473}

hashline_473 [label="hashline"]


// END RANK structure_451

hashline_473 -> { hashtag_474}
{rank=same; hashtag_474}

hashtag_474 [label="hashtag"]


// END RANK hashline_473

hashtag_474 -> leaf_475
leaf_475  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_474

section_452 -> { header_476 prose_477 section_478}
{rank=same; header_476 prose_477 section_478}

header_476 [label="1 : Top Header"]

prose_477 [label="prose"]

section_478 [label="section: 369-380"]


// END RANK section_452

header_476 -> leaf_479
leaf_479  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  * Top Header"]
// END RANK header_476

prose_477 -> { raw_480}
{rank=same; raw_480}

raw_480 [label="raw"]


// END RANK prose_477

raw_480 -> leaf_481
leaf_481  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_480

section_478 -> { header_482 structure_483 structure_484 section_485}
{rank=same; header_482 structure_483 structure_484 section_485}

header_482 [label="2 : Second Header"]

structure_483 [label="structure"]

structure_484 [label="structure"]

section_485 [label="section: 381-381"]


// END RANK section_478

header_482 -> leaf_486
leaf_486  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    ** Second Header"]
// END RANK header_482

structure_483 -> { hashline_487}
{rank=same; hashline_487}

hashline_487 [label="hashline"]


// END RANK structure_483

hashline_487 -> { hashtag_488}
{rank=same; hashtag_488}

hashtag_488 [label="hashtag"]


// END RANK hashline_487

hashtag_488 -> leaf_489
leaf_489  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_488

structure_484 -> { hashline_490}
{rank=same; hashline_490}

hashline_490 [label="hashline"]


// END RANK structure_484

hashline_490 -> { hashtag_491}
{rank=same; hashtag_491}

hashtag_491 [label="hashtag"]


// END RANK hashline_490

hashtag_491 -> leaf_492
leaf_492  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_491

section_485 -> { header_493 prose_494 section_495}
{rank=same; header_493 prose_494 section_495}

header_493 [label="1 : Top Header ▼"]

prose_494 [label="prose"]

section_495 [label="section: 382-731"]


// END RANK section_485

header_493 -> leaf_496
leaf_496  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Top Header ▼"]
// END RANK header_493

prose_494 -> { raw_497}
{rank=same; raw_497}

raw_497 [label="raw"]


// END RANK prose_494

raw_497 -> leaf_498
leaf_498  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_497

section_495 -> { header_499 structure_500 prose_501 prose_502 prose_503 section_504 section_505 section_506 section_507 section_508 section_509 section_510 section_511 section_512 section_513}
{rank=same; header_499 structure_500 prose_501 prose_502 prose_503 section_504 section_505 section_506 section_507 section_508 section_509 section_510 section_511 section_512 section_513}

header_499 [label="2 : Second Header ►"]

structure_500 [label="structure"]

prose_501 [label="prose"]

prose_502 [label="prose"]

prose_503 [label="prose"]

section_504 [label="section: 398-407"]

section_505 [label="section: 422-440"]

section_506 [label="section: 441-481"]

section_507 [label="section: 489-501"]

section_508 [label="section: 502-558"]

section_509 [label="section: 567-593"]

section_510 [label="section: 594-611"]

section_511 [label="section: 612-672"]

section_512 [label="section: 691-731"]

section_513 [label="section: 732-741"]


// END RANK section_495

header_499 -> leaf_514
leaf_514  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   ** Second Header ►"]
// END RANK header_499

structure_500 -> { hashline_515}
{rank=same; hashline_515}

hashline_515 [label="hashline"]


// END RANK structure_500

hashline_515 -> { hashtag_516}
{rank=same; hashtag_516}

hashtag_516 [label="hashtag"]


// END RANK hashline_515

hashtag_516 -> leaf_517
leaf_517  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_516

prose_501 -> { raw_518}
{rank=same; raw_518}

raw_518 [label="raw"]


// END RANK prose_501

raw_518 -> leaf_519
leaf_519  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
may contain any number of blocks.
"]
// END RANK raw_518

prose_502 -> { raw_520}
{rank=same; raw_520}

raw_520 [label="raw"]


// END RANK prose_502

raw_520 -> leaf_521
leaf_521  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
\"begins\" means first non-whitespace character. Indentation levels are tracked by
Nim rules, obviously a Grimoire document can contain no tab marks
and if any wander in they become four spaces.
"]
// END RANK raw_520

prose_503 -> { raw_522}
{rank=same; raw_522}

raw_522 [label="raw"]


// END RANK prose_503

raw_522 -> leaf_523
leaf_523  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Contra other block forms, tags may not precede a headline.
"]
// END RANK raw_522

section_504 -> { header_524 prose_525 prose_526 prose_527}
{rank=same; header_524 prose_525 prose_526 prose_527}

header_524 [label="4 : Header Lines"]

prose_525 [label="prose"]

prose_526 [label="prose"]

prose_527 [label="prose"]


// END RANK section_504

header_524 -> leaf_528
leaf_528  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Header Lines"]
// END RANK header_524

prose_525 -> { raw_529 prespace_530 literal_531 raw_532}
{rank=same; raw_529 prespace_530 literal_531 raw_532}

raw_529 [label="raw"]

prespace_530 [label="prespace"]

literal_531 [label="literal"]

raw_532 [label="raw"]


// END RANK prose_525

raw_529 -> leaf_533
leaf_533  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Anything after a run of"]
// END RANK raw_529

prespace_530 -> leaf_534
leaf_534  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_530

literal_531 -> leaf_535
leaf_535  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
// END RANK literal_531

raw_532 -> leaf_536
leaf_536  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and a space, and before a newline, is
a header line.
"]
// END RANK raw_532

prose_526 -> { raw_537}
{rank=same; raw_537}

raw_537 [label="raw"]


// END RANK prose_526

raw_537 -> leaf_538
leaf_538  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Header lines and list lines are structured identically. If I discover
a necessary exception, I'll note it.
"]
// END RANK raw_537

prose_527 -> { raw_539}
{rank=same; raw_539}

raw_539 [label="raw"]


// END RANK prose_527

raw_539 -> leaf_540
leaf_540  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That structure is discussed under [[*Lists][lists]].
"]
// END RANK raw_539

section_505 -> { header_541 prose_542 prose_543 structure_544 prose_545 prose_546 structure_547}
{rank=same; header_541 prose_542 prose_543 structure_544 prose_545 prose_546 structure_547}

header_541 [label="3 : Prose blocks"]

prose_542 [label="prose"]

prose_543 [label="prose"]

structure_544 [label="structure"]

prose_545 [label="prose"]

prose_546 [label="prose"]

structure_547 [label="structure"]


// END RANK section_505

header_541 -> leaf_548
leaf_548  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Prose blocks"]
// END RANK header_541

prose_542 -> { raw_549}
{rank=same; raw_549}

raw_549 [label="raw"]


// END RANK prose_542

raw_549 -> leaf_550
leaf_550  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A prose block is preceded and followed by a single newline. Extraneous
whitespace on the bare line is filtered.
"]
// END RANK raw_549

prose_543 -> { raw_551}
{rank=same; raw_551}

raw_551 [label="raw"]


// END RANK prose_543

raw_551 -> leaf_552
leaf_552  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose blocks may not be indented in a semantically meaningful way.
"]
// END RANK raw_551

structure_544 -> { hashline_553}
{rank=same; hashline_553}

hashline_553 [label="hashline"]


// END RANK structure_544

hashline_553 -> { hashtag_554}
{rank=same; hashtag_554}

hashtag_554 [label="hashtag"]


// END RANK hashline_553

hashtag_554 -> leaf_555
leaf_555  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_554

prose_545 -> { raw_556}
{rank=same; raw_556}

raw_556 [label="raw"]


// END RANK prose_545

raw_556 -> leaf_557
leaf_557  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
    prose
"]
// END RANK raw_556

prose_546 -> { raw_558}
{rank=same; raw_558}

raw_558 [label="raw"]


// END RANK prose_546

raw_558 -> leaf_559
leaf_559  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
        prose
"]
// END RANK raw_558

structure_547 -> { hashline_560}
{rank=same; hashline_560}

hashline_560 [label="hashline"]


// END RANK structure_547

hashline_560 -> { hashtag_561}
{rank=same; hashtag_561}

hashtag_561 [label="hashtag"]


// END RANK hashline_560

hashtag_561 -> leaf_562
leaf_562  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_561

section_506 -> { header_563 prose_564 prose_565 prose_566 prose_567 prose_568 prose_569 prose_570 structure_571 prose_572 prose_573 prose_574 section_575}
{rank=same; header_563 prose_564 prose_565 prose_566 prose_567 prose_568 prose_569 prose_570 structure_571 prose_572 prose_573 prose_574 section_575}

header_563 [label="3 : Prose markup"]

prose_564 [label="prose"]

prose_565 [label="prose"]

prose_566 [label="prose"]

prose_567 [label="prose"]

prose_568 [label="prose"]

prose_569 [label="prose"]

prose_570 [label="prose"]

structure_571 [label="structure"]

prose_572 [label="prose"]

prose_573 [label="prose"]

prose_574 [label="prose"]

section_575 [label="section: 482-488"]


// END RANK section_506

header_563 -> leaf_576
leaf_576  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Prose markup"]
// END RANK header_563

prose_564 -> { raw_577}
{rank=same; raw_577}

raw_577 [label="raw"]


// END RANK prose_564

raw_577 -> leaf_578
leaf_578  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Prose markup rules apply in any prose contexts, not just for prose blocks.
"]
// END RANK raw_577

prose_565 -> { raw_579 prespace_580 literal_581 raw_582 prespace_583 literal_584 raw_585 prespace_586 literal_587 raw_588 prespace_589 literal_590 raw_591 prespace_592 literal_593 raw_594 prespace_595 literal_596 raw_597}
{rank=same; raw_579 prespace_580 literal_581 raw_582 prespace_583 literal_584 raw_585 prespace_586 literal_587 raw_588 prespace_589 literal_590 raw_591 prespace_592 literal_593 raw_594 prespace_595 literal_596 raw_597}

raw_579 [label="raw"]

prespace_580 [label="prespace"]

literal_581 [label="literal"]

raw_582 [label="raw"]

prespace_583 [label="prespace"]

literal_584 [label="literal"]

raw_585 [label="raw"]

prespace_586 [label="prespace"]

literal_587 [label="literal"]

raw_588 [label="raw"]

prespace_589 [label="prespace"]

literal_590 [label="literal"]

raw_591 [label="raw"]

prespace_592 [label="prespace"]

literal_593 [label="literal"]

raw_594 [label="raw"]

prespace_595 [label="prespace"]

literal_596 [label="literal"]

raw_597 [label="raw"]


// END RANK prose_565

raw_579 -> leaf_598
leaf_598  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We mark"]
// END RANK raw_579

prespace_580 -> leaf_599
leaf_599  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_580

literal_581 -> leaf_600
leaf_600  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*bold*"]
// END RANK literal_581

raw_582 -> leaf_601
leaf_601  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_582

prespace_583 -> leaf_602
leaf_602  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_583

literal_584 -> leaf_603
leaf_603  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/italic/"]
// END RANK literal_584

raw_585 -> leaf_604
leaf_604  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_585

prespace_586 -> leaf_605
leaf_605  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_586

literal_587 -> leaf_606
leaf_606  [color=Gray,shape=rectangle,fontname=Inconsolata,label="_underline_"]
// END RANK literal_587

raw_588 -> leaf_607
leaf_607  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_588

prespace_589 -> leaf_608
leaf_608  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_589

literal_590 -> leaf_609
leaf_609  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~strikethrough~"]
// END RANK literal_590

raw_591 -> leaf_610
leaf_610  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
and"]
// END RANK raw_591

prespace_592 -> leaf_611
leaf_611  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_592

literal_593 -> leaf_612
leaf_612  [color=Gray,shape=rectangle,fontname=Inconsolata,label="​"]
// END RANK literal_593

raw_594 -> leaf_613
leaf_613  [color=Gray,shape=rectangle,fontname=Inconsolata,label="literal=​=, using the indicated marks. They must not be separated
with whitespace from the connecting prose. Any number may be used and matched,
whitespace is allowed, so"]
// END RANK raw_594

prespace_595 -> leaf_614
leaf_614  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_595

literal_596 -> leaf_615
leaf_615  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**bold math: 4 * 5**"]
// END RANK literal_596

raw_597 -> leaf_616
leaf_616  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will highlight
correctly.
"]
// END RANK raw_597

prose_566 -> { raw_617 prespace_618 literal_619 raw_620}
{rank=same; raw_617 prespace_618 literal_619 raw_620}

raw_617 [label="raw"]

prespace_618 [label="prespace"]

literal_619 [label="literal"]

raw_620 [label="raw"]


// END RANK prose_566

raw_617 -> leaf_621
leaf_621  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is also [[*Inline%20Code][Inline Code]], which is formatted"]
// END RANK raw_617

prespace_618 -> leaf_622
leaf_622  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_618

literal_619 -> leaf_623
leaf_623  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`code`"]
// END RANK literal_619

raw_620 -> leaf_624
leaf_624  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_620

prose_567 -> { raw_625}
{rank=same; raw_625}

raw_625 [label="raw"]


// END RANK prose_567

raw_625 -> leaf_626
leaf_626  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These all follow the prose markup rule: any number of the starting
character matches the same number of the ending character in the
document string.
"]
// END RANK raw_625

prose_568 -> { raw_627 prespace_628 literal_629 raw_630 prespace_631 literal_632 raw_633 prespace_634 literal_635 raw_636 prespace_637 literal_638 raw_639}
{rank=same; raw_627 prespace_628 literal_629 raw_630 prespace_631 literal_632 raw_633 prespace_634 literal_635 raw_636 prespace_637 literal_638 raw_639}

raw_627 [label="raw"]

prespace_628 [label="prespace"]

literal_629 [label="literal"]

raw_630 [label="raw"]

prespace_631 [label="prespace"]

literal_632 [label="literal"]

raw_633 [label="raw"]

prespace_634 [label="prespace"]

literal_635 [label="literal"]

raw_636 [label="raw"]

prespace_637 [label="prespace"]

literal_638 [label="literal"]

raw_639 [label="raw"]


// END RANK prose_568

raw_627 -> leaf_640
leaf_640  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We make subscripts mildly annoying,"]
// END RANK raw_627

prespace_628 -> leaf_641
leaf_641  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_628

literal_629 -> leaf_642
leaf_642  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sub__script"]
// END RANK literal_629

raw_630 -> leaf_643
leaf_643  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_630

prespace_631 -> leaf_644
leaf_644  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_631

literal_632 -> leaf_645
leaf_645  [color=Gray,shape=rectangle,fontname=Inconsolata,label="super^^script"]
// END RANK literal_632

raw_633 -> leaf_646
leaf_646  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
to avoid colliding the former with"]
// END RANK raw_633

prespace_634 -> leaf_647
leaf_647  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_634

literal_635 -> leaf_648
leaf_648  [color=Gray,shape=rectangle,fontname=Inconsolata,label="snake_case"]
// END RANK literal_635

raw_636 -> leaf_649
leaf_649  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". That's a lot of ways
to parse the"]
// END RANK raw_636

prespace_637 -> leaf_650
leaf_650  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_637

literal_638 -> leaf_651
leaf_651  [color=Gray,shape=rectangle,fontname=Inconsolata,label="_"]
// END RANK literal_638

raw_639 -> leaf_652
leaf_652  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" character...
"]
// END RANK raw_639

prose_569 -> { raw_653 prespace_654 literal_655 raw_656}
{rank=same; raw_653 prespace_654 literal_655 raw_656}

raw_653 [label="raw"]

prespace_654 [label="prespace"]

literal_655 [label="literal"]

raw_656 [label="raw"]


// END RANK prose_569

raw_653 -> leaf_657
leaf_657  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In general, prose is more 'active'  than in Babel. There are more things
you can't say without triggering a parsed data structure.  Due to quirks
of Org  involving string  escaping,"]
// END RANK raw_653

prespace_654 -> leaf_658
leaf_658  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_654

literal_655 -> leaf_659
leaf_659  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`\\\"\\\"`"]
// END RANK literal_655

raw_656 -> leaf_660
leaf_660  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  can't be  literally quoted
without repercussions. Check  out the source if you enjoy pounding your
head in frustration at the nastiness of escaped strings.
"]
// END RANK raw_656

prose_570 -> { raw_661}
{rank=same; raw_661}

raw_661 [label="raw"]


// END RANK prose_570

raw_661 -> leaf_662
leaf_662  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Let's just use a code block:
"]
// END RANK raw_661

structure_571 -> { hashline_663}
{rank=same; hashline_663}

hashline_663 [label="hashline"]


// END RANK structure_571

hashline_663 -> { hashtag_664}
{rank=same; hashtag_664}

hashtag_664 [label="hashtag"]


// END RANK hashline_663

hashtag_664 -> leaf_665
leaf_665  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_664

prose_572 -> { raw_666 prespace_667 literal_668 raw_669 prespace_670 bold_671 raw_672}
{rank=same; raw_666 prespace_667 literal_668 raw_669 prespace_670 bold_671 raw_672}

raw_666 [label="raw"]

prespace_667 [label="prespace"]

literal_668 [label="literal"]

raw_669 [label="raw"]

prespace_670 [label="prespace"]

bold_671 [label="bold"]

raw_672 [label="raw"]


// END RANK prose_572

raw_666 -> leaf_673
leaf_673  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
one, of the \" character. This is pretty-printed in edit mode as"]
// END RANK raw_666

prespace_667 -> leaf_674
leaf_674  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_667

literal_668 -> leaf_675
leaf_675  [color=Gray,shape=rectangle,fontname=Inconsolata,label="‟literal”"]
// END RANK literal_668

raw_669 -> leaf_676
leaf_676  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
but such a string does"]
// END RANK raw_669

prespace_670 -> leaf_677
leaf_677  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_670

bold_671 -> leaf_678
leaf_678  [color=Gray,shape=rectangle,fontname=Inconsolata,label="not"]
// END RANK bold_671

raw_672 -> leaf_679
leaf_679  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" create escaping, we rely on semantic highlighting
to make the distinction clear.
"]
// END RANK raw_672

prose_573 -> { raw_680}
{rank=same; raw_680}

raw_680 [label="raw"]


// END RANK prose_573

raw_680 -> leaf_681
leaf_681  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Any number of \"\"\"\" collapse into one set of such balanced quites.
"]
// END RANK raw_680

prose_574 -> { raw_682}
{rank=same; raw_682}

raw_682 [label="raw"]


// END RANK prose_574

raw_682 -> leaf_683
leaf_683  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the woven documentation, no quotation marks appear, just the string.
"]
// END RANK raw_682

section_575 -> { header_684 prose_685}
{rank=same; header_684 prose_685}

header_684 [label="4 : Latex"]

prose_685 [label="prose"]


// END RANK section_575

header_684 -> leaf_686
leaf_686  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Latex"]
// END RANK header_684

prose_685 -> { raw_687 prespace_688 literal_689 raw_690}
{rank=same; raw_687 prespace_688 literal_689 raw_690}

raw_687 [label="raw"]

prespace_688 [label="prespace"]

literal_689 [label="literal"]

raw_690 [label="raw"]


// END RANK prose_685

raw_687 -> leaf_691
leaf_691  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

For further markup purposes in a prose context, we escape to LaTeX. The
syntax is"]
// END RANK raw_687

prespace_688 -> leaf_692
leaf_692  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_688

literal_689 -> leaf_693
leaf_693  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`\\latex`"]
// END RANK literal_689

raw_690 -> leaf_694
leaf_694  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", where the backslash causes us to use LaTeX instead
of Lua. Our TeX backend is LuaTeX, giving arbitrary levels of control from
within a Grimoire-native language.
"]
// END RANK raw_690

section_507 -> { header_695 prose_696 prose_697 prose_698}
{rank=same; header_695 prose_696 prose_697 prose_698}

header_695 [label="3 : Comments"]

prose_696 [label="prose"]

prose_697 [label="prose"]

prose_698 [label="prose"]


// END RANK section_507

header_695 -> leaf_699
leaf_699  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Comments"]
// END RANK header_695

prose_696 -> { raw_700 prespace_701 literal_702 raw_703}
{rank=same; raw_700 prespace_701 literal_702 raw_703}

raw_700 [label="raw"]

prespace_701 [label="prespace"]

literal_702 [label="literal"]

raw_703 [label="raw"]


// END RANK prose_696

raw_700 -> leaf_704
leaf_704  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

In a structure context, you may place line comments. These begin with"]
// END RANK raw_700

prespace_701 -> leaf_705
leaf_705  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_701

literal_702 -> leaf_706
leaf_706  [color=Gray,shape=rectangle,fontname=Inconsolata,label="--"]
// END RANK literal_702

raw_703 -> leaf_707
leaf_707  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
and continue to the end of a line.
"]
// END RANK raw_703

prose_697 -> { raw_708 prespace_709 bold_710 raw_711}
{rank=same; raw_708 prespace_709 bold_710 raw_711}

raw_708 [label="raw"]

prespace_709 [label="prespace"]

bold_710 [label="bold"]

raw_711 [label="raw"]


// END RANK prose_697

raw_708 -> leaf_712
leaf_712  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Commenting out a header line, or anything else, causes it to be ignored.
It does"]
// END RANK raw_708

prespace_709 -> leaf_713
leaf_713  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_709

bold_710 -> leaf_714
leaf_714  [color=Gray,shape=rectangle,fontname=Inconsolata,label="not"]
// END RANK bold_710

raw_711 -> leaf_715
leaf_715  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" result in any subdata being commented out, though it will
in the case of a headline change the ownership of the owned blocks.
"]
// END RANK raw_711

prose_698 -> { raw_716 prespace_717 literal_718 raw_719}
{rank=same; raw_716 prespace_717 literal_718 raw_719}

raw_716 [label="raw"]

prespace_717 [label="prespace"]

literal_718 [label="literal"]

raw_719 [label="raw"]


// END RANK prose_698

raw_716 -> leaf_720
leaf_720  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The  tag"]
// END RANK raw_716

prespace_717 -> leaf_721
leaf_721  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_717

literal_718 -> leaf_722
leaf_722  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#comment"]
// END RANK literal_718

raw_719 -> leaf_723
leaf_723  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  in a  valid tag  content position  marks the  owned
region  of  the tagged  block  as  a  comment.  Nothing within  will  be
evaluated or exported, though it will be parsed.
"]
// END RANK raw_719

section_508 -> { header_724 prose_725 prose_726 prose_727 prose_728 prose_729 prose_730 prose_731 prose_732 prose_733 prose_734 prose_735 prose_736 prose_737 prose_738 prose_739 prose_740 section_741}
{rank=same; header_724 prose_725 prose_726 prose_727 prose_728 prose_729 prose_730 prose_731 prose_732 prose_733 prose_734 prose_735 prose_736 prose_737 prose_738 prose_739 prose_740 section_741}

header_724 [label="3 : Marks"]

prose_725 [label="prose"]

prose_726 [label="prose"]

prose_727 [label="prose"]

prose_728 [label="prose"]

prose_729 [label="prose"]

prose_730 [label="prose"]

prose_731 [label="prose"]

prose_732 [label="prose"]

prose_733 [label="prose"]

prose_734 [label="prose"]

prose_735 [label="prose"]

prose_736 [label="prose"]

prose_737 [label="prose"]

prose_738 [label="prose"]

prose_739 [label="prose"]

prose_740 [label="prose"]

section_741 [label="section: 559-566"]


// END RANK section_508

header_724 -> leaf_742
leaf_742  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Marks"]
// END RANK header_724

prose_725 -> { raw_743}
{rank=same; raw_743}

raw_743 [label="raw"]


// END RANK prose_725

raw_743 -> leaf_744
leaf_744  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Marks provide global semantic categories for Grimoire. They may appear
anywhere, including a prose context, whitespace is required on both sides.
"]
// END RANK raw_743

prose_726 -> { raw_745 prespace_746 literal_747 raw_748 prespace_749 literal_750 raw_751}
{rank=same; raw_745 prespace_746 literal_747 raw_748 prespace_749 literal_750 raw_751}

raw_745 [label="raw"]

prespace_746 [label="prespace"]

literal_747 [label="literal"]

raw_748 [label="raw"]

prespace_749 [label="prespace"]

literal_750 [label="literal"]

raw_751 [label="raw"]


// END RANK prose_726

raw_745 -> leaf_752
leaf_752  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We use  a couple kinds  of marks: "]
// END RANK raw_745

prespace_746 -> leaf_753
leaf_753  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_746

literal_747 -> leaf_754
leaf_754  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@names"]
// END RANK literal_747

raw_748 -> leaf_755
leaf_755  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" name things,  and"]
// END RANK raw_748

prespace_749 -> leaf_756
leaf_756  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_749

literal_750 -> leaf_757
leaf_757  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#tags"]
// END RANK literal_750

raw_751 -> leaf_758
leaf_758  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
categorize them. Tags are semantics, while names are nominal.
"]
// END RANK raw_751

prose_727 -> { raw_759 prespace_760 literal_761 raw_762 prespace_763 literal_764 raw_765}
{rank=same; raw_759 prespace_760 literal_761 raw_762 prespace_763 literal_764 raw_765}

raw_759 [label="raw"]

prespace_760 [label="prespace"]

literal_761 [label="literal"]

raw_762 [label="raw"]

prespace_763 [label="prespace"]

literal_764 [label="literal"]

raw_765 [label="raw"]


// END RANK prose_727

raw_759 -> leaf_766
leaf_766  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags that  are boundaries are  paired as "]
// END RANK raw_759

prespace_760 -> leaf_767
leaf_767  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_760

literal_761 -> leaf_768
leaf_768  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#tag"]
// END RANK literal_761

raw_762 -> leaf_769
leaf_769  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_762

prespace_763 -> leaf_770
leaf_770  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_763

literal_764 -> leaf_771
leaf_771  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#/tag"]
// END RANK literal_764

raw_765 -> leaf_772
leaf_772  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",  plus some
light sugaring. Names are never bounded
"]
// END RANK raw_765

prose_728 -> { raw_773}
{rank=same; raw_773}

raw_773 [label="raw"]


// END RANK prose_728

raw_773 -> leaf_774
leaf_774  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Marks in the first position own the following line. If there is indentation
below that line, they own that too. This doesn't affect the associativity.
"]
// END RANK raw_773

prose_729 -> { raw_775 prespace_776 literal_777 raw_778 prespace_779 literal_780 raw_781}
{rank=same; raw_775 prespace_776 literal_777 raw_778 prespace_779 literal_780 raw_781}

raw_775 [label="raw"]

prespace_776 [label="prespace"]

literal_777 [label="literal"]

raw_778 [label="raw"]

prespace_779 [label="prespace"]

literal_780 [label="literal"]

raw_781 [label="raw"]


// END RANK prose_729

raw_775 -> leaf_782
leaf_782  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Marks may be namespaced, as"]
// END RANK raw_775

prespace_776 -> leaf_783
leaf_783  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_776

literal_777 -> leaf_784
leaf_784  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@name.subname"]
// END RANK literal_777

raw_778 -> leaf_785
leaf_785  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_778

prespace_779 -> leaf_786
leaf_786  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_779

literal_780 -> leaf_787
leaf_787  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#tag.sub-tag.sub-tag"]
// END RANK literal_780

raw_781 -> leaf_788
leaf_788  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_781

prose_730 -> { raw_789 prespace_790 literal_791 raw_792 prespace_793 literal_794 raw_795}
{rank=same; raw_789 prespace_790 literal_791 raw_792 prespace_793 literal_794 raw_795}

raw_789 [label="raw"]

prespace_790 [label="prespace"]

literal_791 [label="literal"]

raw_792 [label="raw"]

prespace_793 [label="prespace"]

literal_794 [label="literal"]

raw_795 [label="raw"]


// END RANK prose_730

raw_789 -> leaf_796
leaf_796  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If  you  require   further  namespacing, "]
// END RANK raw_789

prespace_790 -> leaf_797
leaf_797  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_790

literal_791 -> leaf_798
leaf_798  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@many/levels/java.class"]
// END RANK literal_791

raw_792 -> leaf_799
leaf_799  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  and"]
// END RANK raw_792

prespace_793 -> leaf_800
leaf_800  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_793

literal_794 -> leaf_801
leaf_801  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#mojo/nation.space/station"]
// END RANK literal_794

raw_795 -> leaf_802
leaf_802  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  is your  friend. Codices (that is, projects
following the bridge conventions for organization) will use namespacing
in a consistent way.
"]
// END RANK raw_795

prose_731 -> { raw_803 prespace_804 literal_805 raw_806}
{rank=same; raw_803 prespace_804 literal_805 raw_806}

raw_803 [label="raw"]

prespace_804 [label="prespace"]

literal_805 [label="literal"]

raw_806 [label="raw"]


// END RANK prose_731

raw_803 -> leaf_807
leaf_807  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
As I continue to muse on it, I  can think of no reason why marks couldn't follow
URI syntax,  or at  least mirror  it closely.  Chaining marks  is not  valid, so"]
// END RANK raw_803

prespace_804 -> leaf_808
leaf_808  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_804

literal_805 -> leaf_809
leaf_809  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@named@example.com"]
// END RANK literal_805

raw_806 -> leaf_810
leaf_810  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" could be a valid name.
"]
// END RANK raw_806

prose_732 -> { raw_811 prespace_812 literal_813 raw_814}
{rank=same; raw_811 prespace_812 literal_813 raw_814}

raw_811 [label="raw"]

prespace_812 [label="prespace"]

literal_813 [label="literal"]

raw_814 [label="raw"]


// END RANK prose_732

raw_811 -> leaf_815
leaf_815  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This would mean we could say something like"]
// END RANK raw_811

prespace_812 -> leaf_816
leaf_816  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_812

literal_813 -> leaf_817
leaf_817  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@file://~/usr/blah"]
// END RANK literal_813

raw_814 -> leaf_818
leaf_818  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_814

prose_733 -> { raw_819 prespace_820 literal_821 raw_822}
{rank=same; raw_819 prespace_820 literal_821 raw_822}

raw_819 [label="raw"]

prespace_820 [label="prespace"]

literal_821 [label="literal"]

raw_822 [label="raw"]


// END RANK prose_733

raw_819 -> leaf_823
leaf_823  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Or"]
// END RANK raw_819

prespace_820 -> leaf_824
leaf_824  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_820

literal_821 -> leaf_825
leaf_825  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!/usr/bin/perl/"]
// END RANK literal_821

raw_822 -> leaf_826
leaf_826  [color=Gray,shape=rectangle,fontname=Inconsolata,label="...
"]
// END RANK raw_822

prose_734 -> { raw_827}
{rank=same; raw_827}

raw_827 [label="raw"]


// END RANK prose_734

raw_827 -> leaf_828
leaf_828  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Yes. This  is a good idea.  Let's do this.  It doesn't displace [[*Links][link]]  syntax, it
enhances it. A  URI [[http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax][may not begin with  a slash]] so this is  parse-clean for tags
and names both. Tags aren't intended to  be user extensible in the narrow sense,
but uniformity is a virtue.
"]
// END RANK raw_827

prose_735 -> { raw_829}
{rank=same; raw_829}

raw_829 [label="raw"]


// END RANK prose_735

raw_829 -> leaf_830
leaf_830  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't know why you might want to stick a query in a tag. It's not my
place to know. We just slap a parser on that puppy and continue.
"]
// END RANK raw_829

prose_736 -> { raw_831}
{rank=same; raw_831}

raw_831 [label="raw"]


// END RANK prose_736

raw_831 -> leaf_832
leaf_832  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Implication: The hash or at should be syntax highlighted a different color
from the tag. I'd say hash and at get the same color, with categories and
symbols getting different ones.
"]
// END RANK raw_831

prose_737 -> { raw_833}
{rank=same; raw_833}

raw_833 [label="raw"]


// END RANK prose_737

raw_833 -> leaf_834
leaf_834  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Apparently, [[http://blog.nig.gl/post/48802013022/although-parentheses-are-technically-allowed-in][parentheses are allowed in URLs]], but follow the link, they
suck and you should never use them. They play badly with our calling
convention for named structures, and aren't allowed in our schema.
"]
// END RANK raw_833

prose_738 -> { raw_835 prespace_836 literal_837 raw_838}
{rank=same; raw_835 prespace_836 literal_837 raw_838}

raw_835 [label="raw"]

prespace_836 [label="prespace"]

literal_837 [label="literal"]

raw_838 [label="raw"]


// END RANK prose_738

raw_835 -> leaf_839
leaf_839  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not a real URI anyway, or it can be but it's also allowed to be a legal
fragment without the handle. In our case the assumed handle is"]
// END RANK raw_835

prespace_836 -> leaf_840
leaf_840  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_836

literal_837 -> leaf_841
leaf_841  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grimoire://"]
// END RANK literal_837

raw_838 -> leaf_842
leaf_842  [color=Gray,shape=rectangle,fontname=Inconsolata,label="?
"]
// END RANK raw_838

prose_739 -> { raw_843}
{rank=same; raw_843}

raw_843 [label="raw"]


// END RANK prose_739

raw_843 -> leaf_844
leaf_844  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Not a real URI. But an acceptable fake one.
"]
// END RANK raw_843

prose_740 -> { raw_845 prespace_846 literal_847 raw_848 prespace_849 literal_850 raw_851}
{rank=same; raw_845 prespace_846 literal_847 raw_848 prespace_849 literal_850 raw_851}

raw_845 [label="raw"]

prespace_846 [label="prespace"]

literal_847 [label="literal"]

raw_848 [label="raw"]

prespace_849 [label="prespace"]

literal_850 [label="literal"]

raw_851 [label="raw"]


// END RANK prose_740

raw_845 -> leaf_852
leaf_852  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The actual rule for a mark is that it begins with"]
// END RANK raw_845

prespace_846 -> leaf_853
leaf_853  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_846

literal_847 -> leaf_854
leaf_854  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@"]
// END RANK literal_847

raw_848 -> leaf_855
leaf_855  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_848

prespace_849 -> leaf_856
leaf_856  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_849

literal_850 -> leaf_857
leaf_857  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#"]
// END RANK literal_850

raw_851 -> leaf_858
leaf_858  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and is surrounded
by whitespace. Internal parsing of the mark is part of recognition, anything
not recognized is subsequently ignored. It's still considered a mark for e.g.
weaving purposes.


"]
// END RANK raw_851

section_741 -> { header_859 prose_860 prose_861}
{rank=same; header_859 prose_860 prose_861}

header_859 [label="4 : Plural Hashtags"]

prose_860 [label="prose"]

prose_861 [label="prose"]


// END RANK section_741

header_859 -> leaf_862
leaf_862  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Plural Hashtags"]
// END RANK header_859

prose_860 -> { raw_863 prespace_864 literal_865 raw_866 prespace_867 literal_868 raw_869}
{rank=same; raw_863 prespace_864 literal_865 raw_866 prespace_867 literal_868 raw_869}

raw_863 [label="raw"]

prespace_864 [label="prespace"]

literal_865 [label="literal"]

raw_866 [label="raw"]

prespace_867 [label="prespace"]

literal_868 [label="literal"]

raw_869 [label="raw"]


// END RANK prose_860

raw_863 -> leaf_870
leaf_870  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

In some cases, such as"]
// END RANK raw_863

prespace_864 -> leaf_871
leaf_871  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_864

literal_865 -> leaf_872
leaf_872  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#formula"]
// END RANK literal_865

raw_866 -> leaf_873
leaf_873  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_866

prespace_867 -> leaf_874
leaf_874  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_867

literal_868 -> leaf_875
leaf_875  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#formulas"]
// END RANK literal_868

raw_869 -> leaf_876
leaf_876  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", a tag may have a
singular or plural form. These are equivalent from the runtimes perspective.
"]
// END RANK raw_869

prose_861 -> { raw_877 prespace_878 literal_879 raw_880 prespace_881 literal_882 raw_883}
{rank=same; raw_877 prespace_878 literal_879 raw_880 prespace_881 literal_882 raw_883}

raw_877 [label="raw"]

prespace_878 [label="prespace"]

literal_879 [label="literal"]

raw_880 [label="raw"]

prespace_881 [label="prespace"]

literal_882 [label="literal"]

raw_883 [label="raw"]


// END RANK prose_861

raw_877 -> leaf_884
leaf_884  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The same concept applies to pairs such as"]
// END RANK raw_877

prespace_878 -> leaf_885
leaf_885  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_878

literal_879 -> leaf_886
leaf_886  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#export"]
// END RANK literal_879

raw_880 -> leaf_887
leaf_887  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_880

prespace_881 -> leaf_888
leaf_888  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_881

literal_882 -> leaf_889
leaf_889  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#exports"]
// END RANK literal_882

raw_883 -> leaf_890
leaf_890  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", though
the linguistic distinction is not that of plurality.
"]
// END RANK raw_883

section_509 -> { header_891 prose_892 prose_893 prose_894 prose_895 prose_896 prose_897}
{rank=same; header_891 prose_892 prose_893 prose_894 prose_895 prose_896 prose_897}

header_891 [label="3 : Classes"]

prose_892 [label="prose"]

prose_893 [label="prose"]

prose_894 [label="prose"]

prose_895 [label="prose"]

prose_896 [label="prose"]

prose_897 [label="prose"]


// END RANK section_509

header_891 -> leaf_898
leaf_898  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Classes"]
// END RANK header_891

prose_892 -> { raw_899}
{rank=same; raw_899}

raw_899 [label="raw"]


// END RANK prose_892

raw_899 -> leaf_900
leaf_900  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Tags are for Grimoire. A category provides runtime semantics,
cooperating with structure groups to provide the API. Names
play the role of a value in languages which provide a
value-variable distinction: every name within a documents reachable
namespace must be globally unique.
"]
// END RANK raw_899

prose_893 -> { raw_901}
{rank=same; raw_901}

raw_901 [label="raw"]


// END RANK prose_893

raw_901 -> leaf_902
leaf_902  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Specifically names are globally hyperstatic: any redefinition affects
the referent from the moment the parser receives it forward. Redefinitions
are warned against and have no utility, don't do it.
"]
// END RANK raw_901

prose_894 -> { raw_903}
{rank=same; raw_903}

raw_903 [label="raw"]


// END RANK prose_894

raw_903 -> leaf_904
leaf_904  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Classes are roughly equivalent to categories/hashtags, but
for the user. They have a light semantics similar to their
function in Org.
"]
// END RANK raw_903

prose_895 -> { raw_905 prespace_906 literal_907 raw_908 prespace_909 literal_910 raw_911 prespace_912 literal_913 raw_914}
{rank=same; raw_905 prespace_906 literal_907 raw_908 prespace_909 literal_910 raw_911 prespace_912 literal_913 raw_914}

raw_905 [label="raw"]

prespace_906 [label="prespace"]

literal_907 [label="literal"]

raw_908 [label="raw"]

prespace_909 [label="prespace"]

literal_910 [label="literal"]

raw_911 [label="raw"]

prespace_912 [label="prespace"]

literal_913 [label="literal"]

raw_914 [label="raw"]


// END RANK prose_895

raw_905 -> leaf_915
leaf_915  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A class is defined as"]
// END RANK raw_905

prespace_906 -> leaf_916
leaf_916  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_906

literal_907 -> leaf_917
leaf_917  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":Class:"]
// END RANK literal_907

raw_908 -> leaf_918
leaf_918  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_908

prespace_909 -> leaf_919
leaf_919  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_909

literal_910 -> leaf_920
leaf_920  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":class:"]
// END RANK literal_910

raw_911 -> leaf_921
leaf_921  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" including"]
// END RANK raw_911

prespace_912 -> leaf_922
leaf_922  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_912

literal_913 -> leaf_923
leaf_923  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":several:Classes:chained:"]
// END RANK literal_913

raw_914 -> leaf_924
leaf_924  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_914

prose_896 -> { raw_925}
{rank=same; raw_925}

raw_925 [label="raw"]


// END RANK prose_896

raw_925 -> leaf_926
leaf_926  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A capital letter means the class inherits onto all subgroups of the block,
a miniscule means the class is associated with the indentation level it is
found within.
"]
// END RANK raw_925

prose_897 -> { raw_927}
{rank=same; raw_927}

raw_927 [label="raw"]


// END RANK prose_897

raw_927 -> leaf_928
leaf_928  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You know you're programming a computer when class and category have distinct
semantics. At least there are no objects, and only two primitive types,
structure and prose.
"]
// END RANK raw_927

section_510 -> { header_929 prose_930 prose_931 structure_932 prose_933 prose_934}
{rank=same; header_929 prose_930 prose_931 structure_932 prose_933 prose_934}

header_929 [label="3 : Links"]

prose_930 [label="prose"]

prose_931 [label="prose"]

structure_932 [label="structure"]

prose_933 [label="prose"]

prose_934 [label="prose"]


// END RANK section_510

header_929 -> leaf_935
leaf_935  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Links"]
// END RANK header_929

prose_930 -> { raw_936}
{rank=same; raw_936}

raw_936 [label="raw"]


// END RANK prose_930

raw_936 -> leaf_937
leaf_937  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

There's nothing at all wrong with the syntax or behavior of Babel links.
"]
// END RANK raw_936

prose_931 -> { raw_938}
{rank=same; raw_938}

raw_938 [label="raw"]


// END RANK prose_931

raw_938 -> leaf_939
leaf_939  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which look like this:
"]
// END RANK raw_938

structure_932 -> { hashline_940}
{rank=same; hashline_940}

hashline_940 [label="hashline"]


// END RANK structure_932

hashline_940 -> { hashtag_941}
{rank=same; hashtag_941}

hashtag_941 [label="hashtag"]


// END RANK hashline_940

hashtag_941 -> leaf_942
leaf_942  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_941

prose_933 -> { raw_943 prespace_944 literal_945 raw_946}
{rank=same; raw_943 prespace_944 literal_945 raw_946}

raw_943 [label="raw"]

prespace_944 [label="prespace"]

literal_945 [label="literal"]

raw_946 [label="raw"]


// END RANK prose_933

raw_943 -> leaf_947
leaf_947  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We won't support legacy forms of footnoting, such as"]
// END RANK raw_943

prespace_944 -> leaf_948
leaf_948  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_944

literal_945 -> leaf_949
leaf_949  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[1]"]
// END RANK literal_945

raw_946 -> leaf_950
leaf_950  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". This applies
to legacy versions of table formulas and list syntax also.
"]
// END RANK raw_946

prose_934 -> { raw_951}
{rank=same; raw_951}

raw_951 [label="raw"]


// END RANK prose_934

raw_951 -> leaf_952
leaf_952  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In Grimoire  there's one way  to do things.  At least, we  avoid variant
syntax with identical semantics.
"]
// END RANK raw_951

section_511 -> { header_953 prose_954 prose_955 prose_956 prose_957 prose_958 structure_959 prose_960 prose_961 prose_962 prose_963 prose_964 prose_965 prose_966 prose_967 section_968}
{rank=same; header_953 prose_954 prose_955 prose_956 prose_957 prose_958 structure_959 prose_960 prose_961 prose_962 prose_963 prose_964 prose_965 prose_966 prose_967 section_968}

header_953 [label="3 : Cookies"]

prose_954 [label="prose"]

prose_955 [label="prose"]

prose_956 [label="prose"]

prose_957 [label="prose"]

prose_958 [label="prose"]

structure_959 [label="structure"]

prose_960 [label="prose"]

prose_961 [label="prose"]

prose_962 [label="prose"]

prose_963 [label="prose"]

prose_964 [label="prose"]

prose_965 [label="prose"]

prose_966 [label="prose"]

prose_967 [label="prose"]

section_968 [label="section: 673-690"]


// END RANK section_511

header_953 -> leaf_969
leaf_969  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Cookies"]
// END RANK header_953

prose_954 -> { raw_970 prespace_971 literal_972 raw_973}
{rank=same; raw_970 prespace_971 literal_972 raw_973}

raw_970 [label="raw"]

prespace_971 [label="prespace"]

literal_972 [label="literal"]

raw_973 [label="raw"]


// END RANK prose_954

raw_970 -> leaf_974
leaf_974  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

List line contexts (header lines and list lines) may have cookies. A
cookie looks like"]
// END RANK raw_970

prespace_971 -> leaf_975
leaf_975  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_971

literal_972 -> leaf_976
leaf_976  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[ ]"]
// END RANK literal_972

raw_973 -> leaf_977
leaf_977  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", it must have contents and a space on both sides.
"]
// END RANK raw_973

prose_955 -> { raw_978}
{rank=same; raw_978}

raw_978 [label="raw"]


// END RANK prose_955

raw_978 -> leaf_979
leaf_979  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies are valid after the symbol that defines the list line, but before
anything else. They are also valid at the end of a list line, in which
case they are preceded by a space and followed by a newline.
"]
// END RANK raw_978

prose_956 -> { raw_980}
{rank=same; raw_980}

raw_980 [label="raw"]


// END RANK prose_956

raw_980 -> leaf_981
leaf_981  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies are distinctive in that they may only be applied to list lines.
Most other token-like groups, specifically tags, classes, and inline drawers,
may be embedded into all prose contexts excepting literal strings.
"]
// END RANK raw_980

prose_957 -> { raw_982}
{rank=same; raw_982}

raw_982 [label="raw"]


// END RANK prose_957

raw_982 -> leaf_983
leaf_983  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies are used similarly to cookies in Org, but with consistent semantics.
A simple cookie set is \"X\" and \" \", the user cycles through them. TODO and
DONE are another option.
"]
// END RANK raw_982

prose_958 -> { raw_984}
{rank=same; raw_984}

raw_984 [label="raw"]


// END RANK prose_958

raw_984 -> leaf_985
leaf_985  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't want cookies to turn into lightweight tables. Still, saying to
the user \"you may have precisely two cookies a line\" is restrictive.
It's not a violation of the [[http://c2.com/cgi/wiki?TwoIsAnImpossibleNumber][\"Two is an Impossible Number\"]] principle,
because they're head and tail. I think this is ugly:
"]
// END RANK raw_984

structure_959 -> { hashline_986}
{rank=same; hashline_986}

hashline_986 [label="hashline"]


// END RANK structure_959

hashline_986 -> { hashtag_987}
{rank=same; hashtag_987}

hashtag_987 [label="hashtag"]


// END RANK hashline_986

hashtag_987 -> leaf_988
leaf_988  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_987

prose_960 -> { raw_989}
{rank=same; raw_989}

raw_989 [label="raw"]


// END RANK prose_960

raw_989 -> leaf_990
leaf_990  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You can stick a table in a list. I don't know if I mentioned, it's kind
of an obvious thing, I'll write a unit for it at some point.
"]
// END RANK raw_989

prose_961 -> { raw_991}
{rank=same; raw_991}

raw_991 [label="raw"]


// END RANK prose_961

raw_991 -> leaf_992
leaf_992  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Still. I can see a case for two on the left. Once you allow two, you allow
n, without excellent reason.
"]
// END RANK raw_991

prose_962 -> { raw_993}
{rank=same; raw_993}

raw_993 [label="raw"]


// END RANK prose_962

raw_993 -> leaf_994
leaf_994  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[[*Radio%20cookies][Radio cookies]] must be the leftmost cookie on a line, only one is of course allowed.
I could allow a single-line short form multi-radio-button interface but what
is it, a fancy text slider for some value? No. Any number of ordinary cookies
can follow. Knock yourself out.
"]
// END RANK raw_993

prose_963 -> { raw_995}
{rank=same; raw_995}

raw_995 [label="raw"]


// END RANK prose_963

raw_995 -> leaf_996
leaf_996  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Anything more than a couple and one should consider a class or a table.
Handrolling data structures is perverse in a markup language, and I'm
still tempted to forbid it.
"]
// END RANK raw_995

prose_964 -> { raw_997 prespace_998 literal_999 raw_1000 prespace_1001 literal_1002 raw_1003}
{rank=same; raw_997 prespace_998 literal_999 raw_1000 prespace_1001 literal_1002 raw_1003}

raw_997 [label="raw"]

prespace_998 [label="prespace"]

literal_999 [label="literal"]

raw_1000 [label="raw"]

prespace_1001 [label="prespace"]

literal_1002 [label="literal"]

raw_1003 [label="raw"]


// END RANK prose_964

raw_997 -> leaf_1004
leaf_1004  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't like distinctions without difference. A cookie at the end of a
line is filled by Grimoire, not the user. This mirrors Org's use, which is
to display either a percent or a n/m marker for completion of list items.
The user seeds the cookie, in these cases with"]
// END RANK raw_997

prespace_998 -> leaf_1005
leaf_1005  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_998

literal_999 -> leaf_1006
leaf_1006  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%"]
// END RANK literal_999

raw_1000 -> leaf_1007
leaf_1007  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or"]
// END RANK raw_1000

prespace_1001 -> leaf_1008
leaf_1008  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1001

literal_1002 -> leaf_1009
leaf_1009  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/"]
// END RANK literal_1002

raw_1003 -> leaf_1010
leaf_1010  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and the runtime
does the rest.
"]
// END RANK raw_1003

prose_965 -> { raw_1011}
{rank=same; raw_1011}

raw_1011 [label="raw"]


// END RANK prose_965

raw_1011 -> leaf_1012
leaf_1012  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Adding more than one such structure to the tail list would complicate the
reference syntax, which I haven't designed, and again, it's just not necessary.
Grimoire can fill in any data structure, \"n-dimensional end cookie array\"
isn't one we have a compelling need for.
"]
// END RANK raw_1011

prose_966 -> { raw_1013}
{rank=same; raw_1013}

raw_1013 [label="raw"]


// END RANK prose_966

raw_1013 -> leaf_1014
leaf_1014  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies could interact badly with link syntax. I don't think a [bare box]
qualifies as a link in Org, clearly it doesn't, we can follow that notion
and disallow \"[]\" as a filling for cookies.
"]
// END RANK raw_1013

prose_967 -> { raw_1015}
{rank=same; raw_1015}

raw_1015 [label="raw"]


// END RANK prose_967

raw_1015 -> leaf_1016
leaf_1016  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I also think they should be allowed in table cells, which have their own
context which is mostly handwaved right now but is prose++.
"]
// END RANK raw_1015

section_968 -> { header_1017 prose_1018 prose_1019 prose_1020 prose_1021}
{rank=same; header_1017 prose_1018 prose_1019 prose_1020 prose_1021}

header_1017 [label="4 : Radio cookies"]

prose_1018 [label="prose"]

prose_1019 [label="prose"]

prose_1020 [label="prose"]

prose_1021 [label="prose"]


// END RANK section_968

header_1017 -> leaf_1022
leaf_1022  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Radio cookies"]
// END RANK header_1017

prose_1018 -> { raw_1023 prespace_1024 literal_1025 raw_1026}
{rank=same; raw_1023 prespace_1024 literal_1025 raw_1026}

raw_1023 [label="raw"]

prespace_1024 [label="prespace"]

literal_1025 [label="literal"]

raw_1026 [label="raw"]


// END RANK prose_1018

raw_1023 -> leaf_1027
leaf_1027  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We have one 'weird cookie'. A radio cookie, which looks like"]
// END RANK raw_1023

prespace_1024 -> leaf_1028
leaf_1028  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1024

literal_1025 -> leaf_1029
leaf_1029  [color=Gray,shape=rectangle,fontname=Inconsolata,label="( )"]
// END RANK literal_1025

raw_1026 -> leaf_1030
leaf_1030  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
must be present at the head position of list line contexts. All
list lines at the same level of indentation must have one, if one does.
"]
// END RANK raw_1026

prose_1019 -> { raw_1031}
{rank=same; raw_1031}

raw_1031 [label="raw"]


// END RANK prose_1019

raw_1031 -> leaf_1032
leaf_1032  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Only one is selected at any given time. These would be awkward to add
into tables, to little gain.
"]
// END RANK raw_1031

prose_1020 -> { raw_1033}
{rank=same; raw_1033}

raw_1033 [label="raw"]


// END RANK prose_1020

raw_1033 -> leaf_1034
leaf_1034  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This comes perilously close to pushing us into the realm of error.
The formatter adds buttons to an entire subtree if one member has it,
and if more than one is ticked off, it warns if possible or removes
all but the first mark encountered. If none are present the first
option is selected.
"]
// END RANK raw_1033

prose_1021 -> { raw_1035}
{rank=same; raw_1035}

raw_1035 [label="raw"]


// END RANK prose_1021

raw_1035 -> leaf_1036
leaf_1036  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The runtime will not normally build an invalid radio list, but
Grimoire must import plain text.
"]
// END RANK raw_1035

section_512 -> { header_1037 prose_1038 structure_1039 prose_1040 prose_1041 prose_1042 structure_1043 prose_1044 prose_1045 prose_1046}
{rank=same; header_1037 prose_1038 structure_1039 prose_1040 prose_1041 prose_1042 structure_1043 prose_1044 prose_1045 prose_1046}

header_1037 [label="3 : Drawers"]

prose_1038 [label="prose"]

structure_1039 [label="structure"]

prose_1040 [label="prose"]

prose_1041 [label="prose"]

prose_1042 [label="prose"]

structure_1043 [label="structure"]

prose_1044 [label="prose"]

prose_1045 [label="prose"]

prose_1046 [label="prose"]


// END RANK section_512

header_1037 -> leaf_1047
leaf_1047  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Drawers"]
// END RANK header_1037

prose_1038 -> { raw_1048}
{rank=same; raw_1048}

raw_1048 [label="raw"]


// END RANK prose_1038

raw_1048 -> leaf_1049
leaf_1049  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A drawer is a block that's hidden by default. The computer sees it,
the user sees ⦿, or a similar rune.
"]
// END RANK raw_1048

structure_1039 -> { hashline_1050}
{rank=same; hashline_1050}

hashline_1050 [label="hashline"]


// END RANK structure_1039

hashline_1050 -> { hashtag_1051}
{rank=same; hashtag_1051}

hashtag_1051 [label="hashtag"]


// END RANK hashline_1050

hashtag_1051 -> leaf_1052
leaf_1052  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1051

prose_1040 -> { raw_1053}
{rank=same; raw_1053}

raw_1053 [label="raw"]


// END RANK prose_1040

raw_1053 -> leaf_1054
leaf_1054  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
without opening it. Deleting into an ordinary fold marker opens the fold,
deleting towards a drawer marker skips past it.
"]
// END RANK raw_1053

prose_1041 -> { prespace_1055 literal_1056 raw_1057 prespace_1058 literal_1059 raw_1060 prespace_1061 literal_1062 raw_1063 prespace_1064 literal_1065 raw_1066}
{rank=same; prespace_1055 literal_1056 raw_1057 prespace_1058 literal_1059 raw_1060 prespace_1061 literal_1062 raw_1063 prespace_1064 literal_1065 raw_1066}

prespace_1055 [label="prespace"]

literal_1056 [label="literal"]

raw_1057 [label="raw"]

prespace_1058 [label="prespace"]

literal_1059 [label="literal"]

raw_1060 [label="raw"]

prespace_1061 [label="prespace"]

literal_1062 [label="literal"]

raw_1063 [label="raw"]

prespace_1064 [label="prespace"]

literal_1065 [label="literal"]

raw_1066 [label="raw"]


// END RANK prose_1041

prespace_1055 -> leaf_1067
leaf_1067  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_1055

literal_1056 -> leaf_1068
leaf_1068  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a-drawer"]
// END RANK literal_1056

raw_1057 -> leaf_1069
leaf_1069  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  is  a type,  not  a  name, something  like "]
// END RANK raw_1057

prespace_1058 -> leaf_1070
leaf_1070  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1058

literal_1059 -> leaf_1071
leaf_1071  [color=Gray,shape=rectangle,fontname=Inconsolata,label="weave"]
// END RANK literal_1059

raw_1060 -> leaf_1072
leaf_1072  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  or"]
// END RANK raw_1060

prespace_1061 -> leaf_1073
leaf_1073  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1061

literal_1062 -> leaf_1074
leaf_1074  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tangle"]
// END RANK literal_1062

raw_1063 -> leaf_1075
leaf_1075  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  in
practice. This may or  may not be supported with a"]
// END RANK raw_1063

prespace_1064 -> leaf_1076
leaf_1076  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1064

literal_1065 -> leaf_1077
leaf_1077  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#weave"]
// END RANK literal_1065

raw_1066 -> leaf_1078
leaf_1078  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  tag.
"]
// END RANK raw_1066

prose_1042 -> { raw_1079}
{rank=same; raw_1079}

raw_1079 [label="raw"]


// END RANK prose_1042

raw_1079 -> leaf_1080
leaf_1080  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm not entirely sure how to interact names with drawers, perhaps like this:
"]
// END RANK raw_1079

structure_1043 -> { hashline_1081}
{rank=same; hashline_1081}

hashline_1081 [label="hashline"]


// END RANK structure_1043

hashline_1081 -> { hashtag_1082}
{rank=same; hashtag_1082}

hashtag_1082 [label="hashtag"]


// END RANK hashline_1081

hashtag_1082 -> leaf_1083
leaf_1083  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1082

prose_1044 -> { raw_1084}
{rank=same; raw_1084}

raw_1084 [label="raw"]


// END RANK prose_1044

raw_1084 -> leaf_1085
leaf_1085  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
should keep it closed unless it's  open, those are the only additional semantics
associated.
"]
// END RANK raw_1084

prose_1045 -> { raw_1086}
{rank=same; raw_1086}

raw_1086 [label="raw"]


// END RANK prose_1045

raw_1086 -> leaf_1087
leaf_1087  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This lets master wizards embed unobtrusive magic into documents for apprentice
wizards to spell with.
"]
// END RANK raw_1086

prose_1046 -> { raw_1088 prespace_1089 literal_1090 raw_1091}
{rank=same; raw_1088 prespace_1089 literal_1090 raw_1091}

raw_1088 [label="raw"]

prespace_1089 [label="prespace"]

literal_1090 [label="literal"]

raw_1091 [label="raw"]


// END RANK prose_1046

raw_1088 -> leaf_1092
leaf_1092  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An inline drawer looks like"]
// END RANK raw_1088

prespace_1089 -> leaf_1093
leaf_1093  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1089

literal_1090 -> leaf_1094
leaf_1094  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[[some contents]]:"]
// END RANK literal_1090

raw_1091 -> leaf_1095
leaf_1095  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  As usual when we say \"inline\" it
can be as long as you want. Being anonymous, because untagged, the only semantics
of such a drawer are to hide the contents in source mode.
"]
// END RANK raw_1091

section_513 -> { header_1096 prose_1097 prose_1098 prose_1099 structure_1100 section_1101}
{rank=same; header_1096 prose_1097 prose_1098 prose_1099 structure_1100 section_1101}

header_1096 [label="3 : Runes"]

prose_1097 [label="prose"]

prose_1098 [label="prose"]

prose_1099 [label="prose"]

structure_1100 [label="structure"]

section_1101 [label="section: 742-742"]


// END RANK section_513

header_1096 -> leaf_1102
leaf_1102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Runes"]
// END RANK header_1096

prose_1097 -> { raw_1103}
{rank=same; raw_1103}

raw_1103 [label="raw"]


// END RANK prose_1097

raw_1103 -> leaf_1104
leaf_1104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

After drawers is as good a place to put runes as any.
"]
// END RANK raw_1103

prose_1098 -> { raw_1105}
{rank=same; raw_1105}

raw_1105 [label="raw"]


// END RANK prose_1098

raw_1105 -> leaf_1106
leaf_1106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Runes are characters drawn from the pictographic zones of Unicode,
which describe semantic activity within a document.
"]
// END RANK raw_1105

prose_1099 -> { raw_1107}
{rank=same; raw_1107}

raw_1107 [label="raw"]


// END RANK prose_1099

raw_1107 -> leaf_1108
leaf_1108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Contra Org, when we have something like the aformentioned:
"]
// END RANK raw_1107

structure_1100 -> { hashline_1109}
{rank=same; hashline_1109}

hashline_1109 [label="hashline"]


// END RANK structure_1100

hashline_1109 -> { hashtag_1110}
{rank=same; hashtag_1110}

hashtag_1110 [label="hashtag"]


// END RANK hashline_1109

hashtag_1110 -> leaf_1111
leaf_1111  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1110

section_1101 -> { header_1112 prose_1113 section_1114}
{rank=same; header_1112 prose_1113 section_1114}

header_1112 [label="1 : Top Header ▼"]

prose_1113 [label="prose"]

section_1114 [label="section: 743-924"]


// END RANK section_1101

header_1112 -> leaf_1115
leaf_1115  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Top Header ▼"]
// END RANK header_1112

prose_1113 -> { raw_1116}
{rank=same; raw_1116}

raw_1116 [label="raw"]


// END RANK prose_1113

raw_1116 -> leaf_1117
leaf_1117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_1116

section_1114 -> { header_1118 structure_1119 prose_1120 prose_1121 prose_1122 prose_1123 prose_1124 prose_1125 prose_1126 section_1127 section_1128 section_1129 section_1130 section_1131}
{rank=same; header_1118 structure_1119 prose_1120 prose_1121 prose_1122 prose_1123 prose_1124 prose_1125 prose_1126 section_1127 section_1128 section_1129 section_1130 section_1131}

header_1118 [label="2 : Second Header ►"]

structure_1119 [label="structure"]

prose_1120 [label="prose"]

prose_1121 [label="prose"]

prose_1122 [label="prose"]

prose_1123 [label="prose"]

prose_1124 [label="prose"]

prose_1125 [label="prose"]

prose_1126 [label="prose"]

section_1127 [label="section: 772-822"]

section_1128 [label="section: 823-843"]

section_1129 [label="section: 844-910"]

section_1130 [label="section: 911-924"]

section_1131 [label="section: 925-963"]


// END RANK section_1114

header_1118 -> leaf_1132
leaf_1132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   ** Second Header ►"]
// END RANK header_1118

structure_1119 -> { hashline_1133}
{rank=same; hashline_1133}

hashline_1133 [label="hashline"]


// END RANK structure_1119

hashline_1133 -> { hashtag_1134}
{rank=same; hashtag_1134}

hashtag_1134 [label="hashtag"]


// END RANK hashline_1133

hashtag_1134 -> leaf_1135
leaf_1135  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1134

prose_1120 -> { raw_1136}
{rank=same; raw_1136}

raw_1136 [label="raw"]


// END RANK prose_1120

raw_1136 -> leaf_1137
leaf_1137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
any transformation we may take. If you load up last Wednesday's
version of something, it will be in last Wednesday's fold state.
"]
// END RANK raw_1136

prose_1121 -> { raw_1138}
{rank=same; raw_1138}

raw_1138 [label="raw"]


// END RANK prose_1121

raw_1138 -> leaf_1139
leaf_1139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This lets us have richer folding semantics, like \"don't unfold when
cycling\". It lets us have richer drawer semantics, and so on.
"]
// END RANK raw_1138

prose_1122 -> { raw_1140}
{rank=same; raw_1140}

raw_1140 [label="raw"]


// END RANK prose_1122

raw_1140 -> leaf_1141
leaf_1141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We will reserve a number of characters for this purpose, at least
"]
// END RANK raw_1140

prose_1123 -> { raw_1142}
{rank=same; raw_1142}

raw_1142 [label="raw"]


// END RANK prose_1123

raw_1142 -> leaf_1143
leaf_1143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
| ▼ |  ► | ⦿ |
    |
"]
// END RANK raw_1142

prose_1124 -> { raw_1144}
{rank=same; raw_1144}

raw_1144 [label="raw"]


// END RANK prose_1124

raw_1144 -> leaf_1145
leaf_1145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's legal to delete runes, like anything else. It's also legal to
insert them manually. Neither of these paradigms is typical;
deleting into a rune may or may not cause it to disappear in
normal edit mode.
"]
// END RANK raw_1144

prose_1125 -> { raw_1146}
{rank=same; raw_1146}

raw_1146 [label="raw"]


// END RANK prose_1125

raw_1146 -> leaf_1147
leaf_1147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Runes, like absolutely everything in Grimoire, are prose if encountered
in a context where they aren't valid structure.
"]
// END RANK raw_1146

prose_1126 -> { raw_1148}
{rank=same; raw_1148}

raw_1148 [label="raw"]


// END RANK prose_1126

raw_1148 -> leaf_1149
leaf_1149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We will most likely reuse runes inside cookies, though it's just as valid
and quite typical to use normal letters or words.
"]
// END RANK raw_1148

section_1127 -> { header_1150 prose_1151 prose_1152 structure_1153 prose_1154 prose_1155 structure_1156 structure_1157}
{rank=same; header_1150 prose_1151 prose_1152 structure_1153 prose_1154 prose_1155 structure_1156 structure_1157}

header_1150 [label="3 : Lists"]

prose_1151 [label="prose"]

prose_1152 [label="prose"]

structure_1153 [label="structure"]

prose_1154 [label="prose"]

prose_1155 [label="prose"]

structure_1156 [label="structure"]

structure_1157 [label="structure"]


// END RANK section_1127

header_1150 -> leaf_1158
leaf_1158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Lists"]
// END RANK header_1150

prose_1151 -> { raw_1159}
{rank=same; raw_1159}

raw_1159 [label="raw"]


// END RANK prose_1151

raw_1159 -> leaf_1160
leaf_1160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Something that irks me about Org is basically historic. It was a TODO
list first, and became a heiarchical document editor later. As a result,
the functions that let you tag, track, and so on, are in the wrong place;
an Org file has to choose whether or not it's a task list or a document,
which doesn't fit the metalanguage paradigm cleanly.
"]
// END RANK raw_1159

prose_1152 -> { raw_1161}
{rank=same; raw_1161}

raw_1161 [label="raw"]


// END RANK prose_1152

raw_1161 -> leaf_1162
leaf_1162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A list looks like this:
"]
// END RANK raw_1161

structure_1153 -> { hashline_1163}
{rank=same; hashline_1163}

hashline_1163 [label="hashline"]


// END RANK structure_1153

hashline_1163 -> { hashtag_1164}
{rank=same; hashtag_1164}

hashtag_1164 [label="hashtag"]


// END RANK hashline_1163

hashtag_1164 -> leaf_1165
leaf_1165  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1164

prose_1154 -> { raw_1166}
{rank=same; raw_1166}

raw_1166 [label="raw"]


// END RANK prose_1154

raw_1166 -> leaf_1167
leaf_1167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
and we have radio buttons.
"]
// END RANK raw_1166

prose_1155 -> { raw_1168}
{rank=same; raw_1168}

raw_1168 [label="raw"]


// END RANK prose_1155

raw_1168 -> leaf_1169
leaf_1169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We also have whitespace lists:
"]
// END RANK raw_1168

structure_1156 -> { hashline_1170}
{rank=same; hashline_1170}

hashline_1170 [label="hashline"]


// END RANK structure_1156

hashline_1170 -> { hashtag_1171}
{rank=same; hashtag_1171}

hashtag_1171 [label="hashtag"]


// END RANK hashline_1170

hashtag_1171 -> leaf_1172
leaf_1172  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1171

structure_1157 -> { hashline_1173}
{rank=same; hashline_1173}

hashline_1173 [label="hashline"]


// END RANK structure_1157

hashline_1173 -> { hashtag_1174}
{rank=same; hashtag_1174}

hashtag_1174 [label="hashtag"]


// END RANK hashline_1173

hashtag_1174 -> leaf_1175
leaf_1175  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1174

section_1128 -> { header_1176 prose_1177 prose_1178 prose_1179 prose_1180 prose_1181}
{rank=same; header_1176 prose_1177 prose_1178 prose_1179 prose_1180 prose_1181}

header_1176 [label="3 : Embedded Data"]

prose_1177 [label="prose"]

prose_1178 [label="prose"]

prose_1179 [label="prose"]

prose_1180 [label="prose"]

prose_1181 [label="prose"]


// END RANK section_1128

header_1176 -> leaf_1182
leaf_1182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Embedded Data"]
// END RANK header_1176

prose_1177 -> { raw_1183 prespace_1184 literal_1185 raw_1186 prespace_1187 literal_1188 raw_1189 prespace_1190 literal_1191 raw_1192 prespace_1193 literal_1194 raw_1195 prespace_1196 bold_1197 raw_1198 prespace_1199 bold_1200 raw_1201 prespace_1202 literal_1203 raw_1204 prespace_1205 bold_1206 raw_1207 prespace_1208 bold_1209 raw_1210}
{rank=same; raw_1183 prespace_1184 literal_1185 raw_1186 prespace_1187 literal_1188 raw_1189 prespace_1190 literal_1191 raw_1192 prespace_1193 literal_1194 raw_1195 prespace_1196 bold_1197 raw_1198 prespace_1199 bold_1200 raw_1201 prespace_1202 literal_1203 raw_1204 prespace_1205 bold_1206 raw_1207 prespace_1208 bold_1209 raw_1210}

raw_1183 [label="raw"]

prespace_1184 [label="prespace"]

literal_1185 [label="literal"]

raw_1186 [label="raw"]

prespace_1187 [label="prespace"]

literal_1188 [label="literal"]

raw_1189 [label="raw"]

prespace_1190 [label="prespace"]

literal_1191 [label="literal"]

raw_1192 [label="raw"]

prespace_1193 [label="prespace"]

literal_1194 [label="literal"]

raw_1195 [label="raw"]

prespace_1196 [label="prespace"]

bold_1197 [label="bold"]

raw_1198 [label="raw"]

prespace_1199 [label="prespace"]

bold_1200 [label="bold"]

raw_1201 [label="raw"]

prespace_1202 [label="prespace"]

literal_1203 [label="literal"]

raw_1204 [label="raw"]

prespace_1205 [label="prespace"]

bold_1206 [label="bold"]

raw_1207 [label="raw"]

prespace_1208 [label="prespace"]

bold_1209 [label="bold"]

raw_1210 [label="raw"]


// END RANK prose_1177

raw_1183 -> leaf_1211
leaf_1211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Anything found in prose between"]
// END RANK raw_1183

prespace_1184 -> leaf_1212
leaf_1212  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1184

literal_1185 -> leaf_1213
leaf_1213  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{"]
// END RANK literal_1185

raw_1186 -> leaf_1214
leaf_1214  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_1186

prespace_1187 -> leaf_1215
leaf_1215  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1187

literal_1188 -> leaf_1216
leaf_1216  [color=Gray,shape=rectangle,fontname=Inconsolata,label="}"]
// END RANK literal_1188

raw_1189 -> leaf_1217
leaf_1217  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is EDN. Note that the
outermost pair of curlies denotes a boundary."]
// END RANK raw_1189

prespace_1190 -> leaf_1218
leaf_1218  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1190

literal_1191 -> leaf_1219
leaf_1219  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{ foo }"]
// END RANK literal_1191

raw_1192 -> leaf_1220
leaf_1220  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the symbol
foo,"]
// END RANK raw_1192

prespace_1193 -> leaf_1221
leaf_1221  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1193

literal_1194 -> leaf_1222
leaf_1222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{ foo bar }"]
// END RANK literal_1194

raw_1195 -> leaf_1223
leaf_1223  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the symbol"]
// END RANK raw_1195

prespace_1196 -> leaf_1224
leaf_1224  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1196

bold_1197 -> leaf_1225
leaf_1225  [color=Gray,shape=rectangle,fontname=Inconsolata,label="foo"]
// END RANK bold_1197

raw_1198 -> leaf_1226
leaf_1226  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and the symbol"]
// END RANK raw_1198

prespace_1199 -> leaf_1227
leaf_1227  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1199

bold_1200 -> leaf_1228
leaf_1228  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bar"]
// END RANK bold_1200

raw_1201 -> leaf_1229
leaf_1229  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_1201

prespace_1202 -> leaf_1230
leaf_1230  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1202

literal_1203 -> leaf_1231
leaf_1231  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{{foo bar}}"]
// END RANK literal_1203

raw_1204 -> leaf_1232
leaf_1232  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is
a map with key"]
// END RANK raw_1204

prespace_1205 -> leaf_1233
leaf_1233  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1205

bold_1206 -> leaf_1234
leaf_1234  [color=Gray,shape=rectangle,fontname=Inconsolata,label="foo"]
// END RANK bold_1206

raw_1207 -> leaf_1235
leaf_1235  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and value"]
// END RANK raw_1207

prespace_1208 -> leaf_1236
leaf_1236  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1208

bold_1209 -> leaf_1237
leaf_1237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bar"]
// END RANK bold_1209

raw_1210 -> leaf_1238
leaf_1238  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_1210

prose_1178 -> { raw_1239}
{rank=same; raw_1239}

raw_1239 [label="raw"]


// END RANK prose_1178

raw_1239 -> leaf_1240
leaf_1240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To quote the [[https://github.com/edn-format/edn][spec]], \"There is no enclosing element at the top level\". The
braces mark the boundaries of the data region.
"]
// END RANK raw_1239

prose_1179 -> { raw_1241}
{rank=same; raw_1241}

raw_1241 [label="raw"]


// END RANK prose_1179

raw_1241 -> leaf_1242
leaf_1242  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is a mapping between lists and EDN, the basics of which will be clear
to the astute reader. The non-basics are unclear to the author as well.
"]
// END RANK raw_1241

prose_1180 -> { raw_1243}
{rank=same; raw_1243}

raw_1243 [label="raw"]


// END RANK prose_1180

raw_1243 -> leaf_1244
leaf_1244  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Unresolved: may data be inlined into prose? What would that even mean?
slap some colors on it in the document? If we want to provide a 'this is
code but not for interpretation' mark, we will, it won't be EDN specific.
Inlining colorized code is not high on my todo list.
"]
// END RANK raw_1243

prose_1181 -> { raw_1245}
{rank=same; raw_1245}

raw_1245 [label="raw"]


// END RANK prose_1181

raw_1245 -> leaf_1246
leaf_1246  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't think you can. Embeds are down here with lists and
tables in 'things you can't inline', for now.
"]
// END RANK raw_1245

section_1129 -> { header_1247 prose_1248 prose_1249 prose_1250 prose_1251 structure_1252 structure_1253 structure_1254 structure_1255 prose_1256 prose_1257 structure_1258 structure_1259 structure_1260 prose_1261 prose_1262 prose_1263}
{rank=same; header_1247 prose_1248 prose_1249 prose_1250 prose_1251 structure_1252 structure_1253 structure_1254 structure_1255 prose_1256 prose_1257 structure_1258 structure_1259 structure_1260 prose_1261 prose_1262 prose_1263}

header_1247 [label="3 : Tables"]

prose_1248 [label="prose"]

prose_1249 [label="prose"]

prose_1250 [label="prose"]

prose_1251 [label="prose"]

structure_1252 [label="structure"]

structure_1253 [label="structure"]

structure_1254 [label="structure"]

structure_1255 [label="structure"]

prose_1256 [label="prose"]

prose_1257 [label="prose"]

structure_1258 [label="structure"]

structure_1259 [label="structure"]

structure_1260 [label="structure"]

prose_1261 [label="prose"]

prose_1262 [label="prose"]

prose_1263 [label="prose"]


// END RANK section_1129

header_1247 -> leaf_1264
leaf_1264  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Tables"]
// END RANK header_1247

prose_1248 -> { raw_1265}
{rank=same; raw_1265}

raw_1265 [label="raw"]


// END RANK prose_1248

raw_1265 -> leaf_1266
leaf_1266  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The way tables work in Babel is fine and needs little polish. Any modest
improvements we make will be in the face of considerable experience.
"]
// END RANK raw_1265

prose_1249 -> { raw_1267}
{rank=same; raw_1267}

raw_1267 [label="raw"]


// END RANK prose_1249

raw_1267 -> leaf_1268
leaf_1268  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For example, I expect there's a way to make multiple literal rows serve
as a single row in existing Org, but I don't know what it is. I'll be
playing around a lot in the coming weeks, I hope.
"]
// END RANK raw_1267

prose_1250 -> { raw_1269}
{rank=same; raw_1269}

raw_1269 [label="raw"]


// END RANK prose_1250

raw_1269 -> leaf_1270
leaf_1270  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Composability being an overarching goal, we can embed anything in a table
that we would put elsewhere.
"]
// END RANK raw_1269

prose_1251 -> { raw_1271}
{rank=same; raw_1271}

raw_1271 [label="raw"]


// END RANK prose_1251

raw_1271 -> leaf_1272
leaf_1272  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Looks something like this:
"]
// END RANK raw_1271

structure_1252 -> { hashline_1273}
{rank=same; hashline_1273}

hashline_1273 [label="hashline"]


// END RANK structure_1252

hashline_1273 -> { hashtag_1274}
{rank=same; hashtag_1274}

hashtag_1274 [label="hashtag"]


// END RANK hashline_1273

hashtag_1274 -> leaf_1275
leaf_1275  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1274

structure_1253 -> { hashline_1276}
{rank=same; hashline_1276}

hashline_1276 [label="hashline"]


// END RANK structure_1253

hashline_1276 -> { hashtag_1277}
{rank=same; hashtag_1277}

hashtag_1277 [label="hashtag"]


// END RANK hashline_1276

hashtag_1277 -> leaf_1278
leaf_1278  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1277

structure_1254 -> { hashline_1279}
{rank=same; hashline_1279}

hashline_1279 [label="hashline"]


// END RANK structure_1254

hashline_1279 -> { hashtag_1280}
{rank=same; hashtag_1280}

hashtag_1280 [label="hashtag"]


// END RANK hashline_1279

hashtag_1280 -> leaf_1281
leaf_1281  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1280

structure_1255 -> { hashline_1282}
{rank=same; hashline_1282}

hashline_1282 [label="hashline"]


// END RANK structure_1255

hashline_1282 -> { hashtag_1283}
{rank=same; hashtag_1283}

hashtag_1283 [label="hashtag"]


// END RANK hashline_1282

hashtag_1283 -> leaf_1284
leaf_1284  [color=Gray,shape=rectangle,fontname=Inconsolata,label="formulas"]
// END RANK hashtag_1283

prose_1256 -> { raw_1285 prespace_1286 literal_1287 raw_1288 prespace_1289 literal_1290 raw_1291 prespace_1292 literal_1293 raw_1294}
{rank=same; raw_1285 prespace_1286 literal_1287 raw_1288 prespace_1289 literal_1290 raw_1291 prespace_1292 literal_1293 raw_1294}

raw_1285 [label="raw"]

prespace_1286 [label="prespace"]

literal_1287 [label="literal"]

raw_1288 [label="raw"]

prespace_1289 [label="prespace"]

literal_1290 [label="literal"]

raw_1291 [label="raw"]

prespace_1292 [label="prespace"]

literal_1293 [label="literal"]

raw_1294 [label="raw"]


// END RANK prose_1256

raw_1285 -> leaf_1295
leaf_1295  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A subtle point of parsing I'm not sure is correct is"]
// END RANK raw_1285

prespace_1286 -> leaf_1296
leaf_1296  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1286

literal_1287 -> leaf_1297
leaf_1297  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#formulas -"]
// END RANK literal_1287

raw_1288 -> leaf_1298
leaf_1298  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
or"]
// END RANK raw_1288

prespace_1289 -> leaf_1299
leaf_1299  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1289

literal_1290 -> leaf_1300
leaf_1300  [color=Gray,shape=rectangle,fontname=Inconsolata,label="- #formulas"]
// END RANK literal_1290

raw_1291 -> leaf_1301
leaf_1301  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". I feel like by normal associativity the latter
attaches the tag to the list, then nothing to the tag,
since the rule is a tag preceded only by whitespace owns the line
after it and indentations below it. The tag doesn't affect the indentation level
of the"]
// END RANK raw_1291

prespace_1292 -> leaf_1302
leaf_1302  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1292

literal_1293 -> leaf_1303
leaf_1303  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-"]
// END RANK literal_1293

raw_1294 -> leaf_1304
leaf_1304  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which could be confusing but won't be.
"]
// END RANK raw_1294

prose_1257 -> { raw_1305}
{rank=same; raw_1305}

raw_1305 [label="raw"]


// END RANK prose_1257

raw_1305 -> leaf_1306
leaf_1306  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We should be able to tag tables like this:
"]
// END RANK raw_1305

structure_1258 -> { hashline_1307}
{rank=same; hashline_1307}

hashline_1307 [label="hashline"]


// END RANK structure_1258

hashline_1307 -> { hashtag_1308}
{rank=same; hashtag_1308}

hashtag_1308 [label="hashtag"]


// END RANK hashline_1307

hashtag_1308 -> leaf_1309
leaf_1309  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1308

structure_1259 -> { hashline_1310}
{rank=same; hashline_1310}

hashline_1310 [label="hashline"]


// END RANK structure_1259

hashline_1310 -> { hashtag_1311}
{rank=same; hashtag_1311}

hashtag_1311 [label="hashtag"]


// END RANK hashline_1310

hashtag_1311 -> leaf_1312
leaf_1312  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1311

structure_1260 -> { hashline_1313}
{rank=same; hashline_1313}

hashline_1313 [label="hashline"]


// END RANK structure_1260

hashline_1313 -> { hashtag_1314}
{rank=same; hashtag_1314}

hashtag_1314 [label="hashtag"]


// END RANK hashline_1313

hashtag_1314 -> leaf_1315
leaf_1315  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1314

prose_1261 -> { raw_1316}
{rank=same; raw_1316}

raw_1316 [label="raw"]


// END RANK prose_1261

raw_1316 -> leaf_1317
leaf_1317  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Totally okay in this context, doesn't trigger Nim rules because the table
associates to the tag anyway.
"]
// END RANK raw_1316

prose_1262 -> { raw_1318}
{rank=same; raw_1318}

raw_1318 [label="raw"]


// END RANK prose_1262

raw_1318 -> leaf_1319
leaf_1319  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This gives us a nice left gutter which I propose we can use in various ways.
"]
// END RANK raw_1318

prose_1263 -> { raw_1320}
{rank=same; raw_1320}

raw_1320 [label="raw"]


// END RANK prose_1263

raw_1320 -> leaf_1321
leaf_1321  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This section can get much longer. Generalizing how tables work is incredibly
powerful. My dream is to embed APL into Grimoire. Give me an excuse to
finally learn it!
"]
// END RANK raw_1320

section_1130 -> { header_1322 prose_1323 prose_1324 prose_1325 prose_1326 prose_1327}
{rank=same; header_1322 prose_1323 prose_1324 prose_1325 prose_1326 prose_1327}

header_1322 [label="3 : Clocks"]

prose_1323 [label="prose"]

prose_1324 [label="prose"]

prose_1325 [label="prose"]

prose_1326 [label="prose"]

prose_1327 [label="prose"]


// END RANK section_1130

header_1322 -> leaf_1328
leaf_1328  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Clocks"]
// END RANK header_1322

prose_1323 -> { raw_1329}
{rank=same; raw_1329}

raw_1329 [label="raw"]


// END RANK prose_1323

raw_1329 -> leaf_1330
leaf_1330  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I think timestamps are just a drawer you put a timestamp in.
"]
// END RANK raw_1329

prose_1324 -> { raw_1331}
{rank=same; raw_1331}

raw_1331 [label="raw"]


// END RANK prose_1324

raw_1331 -> leaf_1332
leaf_1332  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That drawer can collapse and look like ⏱.
"]
// END RANK raw_1331

prose_1325 -> { raw_1333}
{rank=same; raw_1333}

raw_1333 [label="raw"]


// END RANK prose_1325

raw_1333 -> leaf_1334
leaf_1334  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Or we can collapse it into something from the set containing 🕞.
"]
// END RANK raw_1333

prose_1326 -> { raw_1335}
{rank=same; raw_1335}

raw_1335 [label="raw"]


// END RANK prose_1326

raw_1335 -> leaf_1336
leaf_1336  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which normal Emacs doesn't display. I really need to go Japanese soon.
"]
// END RANK raw_1335

prose_1327 -> { raw_1337}
{rank=same; raw_1337}

raw_1337 [label="raw"]


// END RANK prose_1327

raw_1337 -> leaf_1338
leaf_1338  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
But it would be just adorable to have a little clock representing the timestamp.
Emoji are quirky but the set contains useful icons, and it's Unicode.
Grimoire supports Unicode.
"]
// END RANK raw_1337

section_1131 -> { header_1339 prose_1340 prose_1341 prose_1342 prose_1343 section_1344 section_1345}
{rank=same; header_1339 prose_1340 prose_1341 prose_1342 prose_1343 section_1344 section_1345}

header_1339 [label="3 : Code"]

prose_1340 [label="prose"]

prose_1341 [label="prose"]

prose_1342 [label="prose"]

prose_1343 [label="prose"]

section_1344 [label="section: 946-963"]

section_1345 [label="section: 964-1084"]


// END RANK section_1131

header_1339 -> leaf_1346
leaf_1346  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Code"]
// END RANK header_1339

prose_1340 -> { raw_1347}
{rank=same; raw_1347}

raw_1347 [label="raw"]


// END RANK prose_1340

raw_1347 -> leaf_1348
leaf_1348  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The place where it all comes together.
"]
// END RANK raw_1347

prose_1341 -> { raw_1349}
{rank=same; raw_1349}

raw_1349 [label="raw"]


// END RANK prose_1341

raw_1349 -> leaf_1350
leaf_1350  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire has a servant language, Lua by default, but this
is of course configurable. Eventually we'll write Clu,
it's a race to see which project is finished first but they
have common dependencies, surprise, surprise.
"]
// END RANK raw_1349

prose_1342 -> { raw_1351}
{rank=same; raw_1351}

raw_1351 [label="raw"]


// END RANK prose_1342

raw_1351 -> leaf_1352
leaf_1352  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code and data are yin and yang in Grimoire. Code embedded in
documents is executed in various ways and times; comments within
code blocks are themselves in Grimoire data format, and so on.
"]
// END RANK raw_1351

prose_1343 -> { raw_1353}
{rank=same; raw_1353}

raw_1353 [label="raw"]


// END RANK prose_1343

raw_1353 -> leaf_1354
leaf_1354  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Given a single language Grimoire text, we can perform a mechanical
figure-ground reversal, such that data blocks become comments and
code blocks become live. We have many more sophisticated weave and
tangle operations, but this is a designed-in property that will prove
handy: sometimes you want to take code, org it up, and then flip it
into a literate context. Upgrade path for existing codebases.

"]
// END RANK raw_1353

section_1344 -> { header_1355 prose_1356 structure_1357 prose_1358 prose_1359}
{rank=same; header_1355 prose_1356 structure_1357 prose_1358 prose_1359}

header_1355 [label="4 : Inline Code"]

prose_1356 [label="prose"]

structure_1357 [label="structure"]

prose_1358 [label="prose"]

prose_1359 [label="prose"]


// END RANK section_1344

header_1355 -> leaf_1360
leaf_1360  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Inline Code"]
// END RANK header_1355

prose_1356 -> { raw_1361 prespace_1362 literal_1363 raw_1364}
{rank=same; raw_1361 prespace_1362 literal_1363 raw_1364}

raw_1361 [label="raw"]

prespace_1362 [label="prespace"]

literal_1363 [label="literal"]

raw_1364 [label="raw"]


// END RANK prose_1356

raw_1361 -> leaf_1365
leaf_1365  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Inline code is written"]
// END RANK raw_1361

prespace_1362 -> leaf_1366
leaf_1366  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1362

literal_1363 -> leaf_1367
leaf_1367  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`4 + 5`"]
// END RANK literal_1363

raw_1364 -> leaf_1368
leaf_1368  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". It executes in something similar to
:function mode in Babel, the call is as though it were wrapped in a function
call that looks like:
"]
// END RANK raw_1364

structure_1357 -> { hashline_1369}
{rank=same; hashline_1369}

hashline_1369 [label="hashline"]


// END RANK structure_1357

hashline_1369 -> { hashtag_1370}
{rank=same; hashtag_1370}

hashtag_1370 [label="hashtag"]


// END RANK hashline_1369

hashtag_1370 -> leaf_1371
leaf_1371  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1370

prose_1358 -> { raw_1372}
{rank=same; raw_1372}

raw_1372 [label="raw"]


// END RANK prose_1358

raw_1372 -> leaf_1373
leaf_1373  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
maintaining state between calls.
"]
// END RANK raw_1372

prose_1359 -> { raw_1374}
{rank=same; raw_1374}

raw_1374 [label="raw"]


// END RANK prose_1359

raw_1374 -> leaf_1375
leaf_1375  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Anything named exists as a data structure in the helper language. This makes it easy to
refer to a block that contains a self-reference, so these are stored in a cycle-safe way.
"]
// END RANK raw_1374

section_1345 -> { header_1376 prose_1377 prose_1378 structure_1379 structure_1380 prose_1381 structure_1382 structure_1383 prose_1384 codeblock_1385 structure_1386 prose_1387 prose_1388 prose_1389 codeblock_1390 codeblock_1391 codeblock_1392 structure_1393 structure_1394 codeblock_1395 structure_1396 structure_1397 prose_1398 prose_1399 prose_1400 prose_1401 structure_1402 prose_1403 prose_1404 prose_1405 codeblock_1406 section_1407}
{rank=same; header_1376 prose_1377 prose_1378 structure_1379 structure_1380 prose_1381 structure_1382 structure_1383 prose_1384 codeblock_1385 structure_1386 prose_1387 prose_1388 prose_1389 codeblock_1390 codeblock_1391 codeblock_1392 structure_1393 structure_1394 codeblock_1395 structure_1396 structure_1397 prose_1398 prose_1399 prose_1400 prose_1401 structure_1402 prose_1403 prose_1404 prose_1405 codeblock_1406 section_1407}

header_1376 [label="4 : Code Blocks"]

prose_1377 [label="prose"]

prose_1378 [label="prose"]

structure_1379 [label="structure"]

structure_1380 [label="structure"]

prose_1381 [label="prose"]

structure_1382 [label="structure"]

structure_1383 [label="structure"]

prose_1384 [label="prose"]

codeblock_1385 [label="code block 993-995"]

structure_1386 [label="structure"]

prose_1387 [label="prose"]

prose_1388 [label="prose"]

prose_1389 [label="prose"]

codeblock_1390 [label="code block 1009-1011"]

codeblock_1391 [label="code block 1017-1019"]

codeblock_1392 [label="code block 1023-1025"]

structure_1393 [label="structure"]

structure_1394 [label="structure"]

codeblock_1395 [label="code block 1033-1035"]

structure_1396 [label="structure"]

structure_1397 [label="structure"]

prose_1398 [label="prose"]

prose_1399 [label="prose"]

prose_1400 [label="prose"]

prose_1401 [label="prose"]

structure_1402 [label="structure"]

prose_1403 [label="prose"]

prose_1404 [label="prose"]

prose_1405 [label="prose"]

codeblock_1406 [label="code block 1078-1080"]

section_1407 [label="section: 1085-1155"]


// END RANK section_1345

header_1376 -> leaf_1408
leaf_1408  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Code Blocks"]
// END RANK header_1376

prose_1377 -> { raw_1409 prespace_1410 literal_1411 raw_1412}
{rank=same; raw_1409 prespace_1410 literal_1411 raw_1412}

raw_1409 [label="raw"]

prespace_1410 [label="prespace"]

literal_1411 [label="literal"]

raw_1412 [label="raw"]


// END RANK prose_1377

raw_1409 -> leaf_1413
leaf_1413  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The"]
// END RANK raw_1409

prespace_1410 -> leaf_1414
leaf_1414  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1410

literal_1411 -> leaf_1415
leaf_1415  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`inline`"]
// END RANK literal_1411

raw_1412 -> leaf_1416
leaf_1416  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" syntax works like the rest, you may use any number of backticks to enclose a form.
"]
// END RANK raw_1412

prose_1378 -> { raw_1417}
{rank=same; raw_1417}

raw_1417 [label="raw"]


// END RANK prose_1378

raw_1417 -> leaf_1418
leaf_1418  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something like:
"]
// END RANK raw_1417

structure_1379 -> { hashline_1419}
{rank=same; hashline_1419}

hashline_1419 [label="hashline"]


// END RANK structure_1379

hashline_1419 -> { hashtag_1420}
{rank=same; hashtag_1420}

hashtag_1420 [label="hashtag"]


// END RANK hashline_1419

hashtag_1420 -> leaf_1421
leaf_1421  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1420

structure_1380 -> { hashline_1422}
{rank=same; hashline_1422}

hashline_1422 [label="hashline"]


// END RANK structure_1380

hashline_1422 -> { hashtag_1423}
{rank=same; hashtag_1423}

hashtag_1423 [label="hashtag"]


// END RANK hashline_1422

hashtag_1423 -> leaf_1424
leaf_1424  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1423

prose_1381 -> { raw_1425}
{rank=same; raw_1425}

raw_1425 [label="raw"]


// END RANK prose_1381

raw_1425 -> leaf_1426
leaf_1426  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
it is evaluated when referenced. This:
"]
// END RANK raw_1425

structure_1382 -> { hashline_1427}
{rank=same; hashline_1427}

hashline_1427 [label="hashline"]


// END RANK structure_1382

hashline_1427 -> { hashtag_1428}
{rank=same; hashtag_1428}

hashtag_1428 [label="hashtag"]


// END RANK hashline_1427

hashtag_1428 -> leaf_1429
leaf_1429  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1428

structure_1383 -> { hashline_1430}
{rank=same; hashline_1430}

hashline_1430 [label="hashline"]


// END RANK structure_1383

hashline_1430 -> { hashtag_1431}
{rank=same; hashtag_1431}

hashtag_1431 [label="hashtag"]


// END RANK hashline_1430

hashtag_1431 -> leaf_1432
leaf_1432  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1431

prose_1384 -> { raw_1433}
{rank=same; raw_1433}

raw_1433 [label="raw"]


// END RANK prose_1384

raw_1433 -> leaf_1434
leaf_1434  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Separated code blocks use special tags:
"]
// END RANK raw_1433

codeblock_1385 -> leaf_1435
leaf_1435  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
// END RANK codeblock_1385

structure_1386 -> { hashline_1436}
{rank=same; hashline_1436}

hashline_1436 [label="hashline"]


// END RANK structure_1386

hashline_1436 -> { hashtag_1437}
{rank=same; hashtag_1437}

hashtag_1437 [label="hashtag"]


// END RANK hashline_1436

hashtag_1437 -> leaf_1438
leaf_1438  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1437

prose_1387 -> { raw_1439}
{rank=same; raw_1439}

raw_1439 [label="raw"]


// END RANK prose_1387

raw_1439 -> leaf_1440
leaf_1440  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
nesting apply. As indeed they might in a Grimoire code block.
"]
// END RANK raw_1439

prose_1388 -> { raw_1441}
{rank=same; raw_1441}

raw_1441 [label="raw"]


// END RANK prose_1388

raw_1441 -> leaf_1442
leaf_1442  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We need a good runtime. Playing the Inception game
with Grimoire should be an amusing headache, not a dog-slow
system killer.
"]
// END RANK raw_1441

prose_1389 -> { raw_1443}
{rank=same; raw_1443}

raw_1443 [label="raw"]


// END RANK prose_1389

raw_1443 -> leaf_1444
leaf_1444  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They may be named like anything else:
"]
// END RANK raw_1443

codeblock_1390 -> leaf_1445
leaf_1445  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
// END RANK codeblock_1390

codeblock_1391 -> leaf_1446
leaf_1446  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
// END RANK codeblock_1391

codeblock_1392 -> leaf_1447
leaf_1447  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 4 + 5"]
// END RANK codeblock_1392

structure_1393 -> { hashline_1448}
{rank=same; hashline_1448}

hashline_1448 [label="hashline"]


// END RANK structure_1393

hashline_1448 -> { hashtag_1449}
{rank=same; hashtag_1449}

hashtag_1449 [label="hashtag"]


// END RANK hashline_1448

hashtag_1449 -> leaf_1450
leaf_1450  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1449

structure_1394 -> { handleline_1451}
{rank=same; handleline_1451}

handleline_1451 [label="handleline"]


// END RANK structure_1394

handleline_1451 -> { handle_1452}
{rank=same; handle_1452}

handle_1452 [label="handle"]


// END RANK handleline_1451

handle_1452 -> leaf_1453
leaf_1453  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nine"]
// END RANK handle_1452

codeblock_1395 -> leaf_1454
leaf_1454  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 4 + 5"]
// END RANK codeblock_1395

structure_1396 -> { hashline_1455}
{rank=same; hashline_1455}

hashline_1455 [label="hashline"]


// END RANK structure_1396

hashline_1455 -> { hashtag_1456}
{rank=same; hashtag_1456}

hashtag_1456 [label="hashtag"]


// END RANK hashline_1455

hashtag_1456 -> leaf_1457
leaf_1457  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1456

structure_1397 -> { hashline_1458}
{rank=same; hashline_1458}

hashline_1458 [label="hashline"]


// END RANK structure_1397

hashline_1458 -> { hashtag_1459}
{rank=same; hashtag_1459}

hashtag_1459 [label="hashtag"]


// END RANK hashline_1458

hashtag_1459 -> leaf_1460
leaf_1460  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1459

prose_1398 -> { raw_1461 prespace_1462 literal_1463 raw_1464 prespace_1465 literal_1466 raw_1467 prespace_1468 literal_1469 raw_1470 prespace_1471 bold_1472 raw_1473}
{rank=same; raw_1461 prespace_1462 literal_1463 raw_1464 prespace_1465 literal_1466 raw_1467 prespace_1468 literal_1469 raw_1470 prespace_1471 bold_1472 raw_1473}

raw_1461 [label="raw"]

prespace_1462 [label="prespace"]

literal_1463 [label="literal"]

raw_1464 [label="raw"]

prespace_1465 [label="prespace"]

literal_1466 [label="literal"]

raw_1467 [label="raw"]

prespace_1468 [label="prespace"]

literal_1469 [label="literal"]

raw_1470 [label="raw"]

prespace_1471 [label="prespace"]

bold_1472 [label="bold"]

raw_1473 [label="raw"]


// END RANK prose_1398

raw_1461 -> leaf_1474
leaf_1474  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
marks an anonymous result."]
// END RANK raw_1461

prespace_1462 -> leaf_1475
leaf_1475  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1462

literal_1463 -> leaf_1476
leaf_1476  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#@nine->"]
// END RANK literal_1463

raw_1464 -> leaf_1477
leaf_1477  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the automatically generated tag for
the return value of the block named"]
// END RANK raw_1464

prespace_1465 -> leaf_1478
leaf_1478  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1465

literal_1466 -> leaf_1479
leaf_1479  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@nine"]
// END RANK literal_1466

raw_1467 -> leaf_1480
leaf_1480  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", adding"]
// END RANK raw_1467

prespace_1468 -> leaf_1481
leaf_1481  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1468

literal_1469 -> leaf_1482
leaf_1482  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@nine()"]
// END RANK literal_1469

raw_1470 -> leaf_1483
leaf_1483  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to a prose block will
add the number 9 to the weave at that location."]
// END RANK raw_1470

prespace_1471 -> leaf_1484
leaf_1484  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1471

bold_1472 -> leaf_1485
leaf_1485  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK bold_1472

raw_1473 -> leaf_1486
leaf_1486  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will either display the result,
the call, or both, configurably, when editing the source, with syntax-highlighting to
enforce the distinction.
"]
// END RANK raw_1473

prose_1399 -> { raw_1487}
{rank=same; raw_1487}

raw_1487 [label="raw"]


// END RANK prose_1399

raw_1487 -> leaf_1488
leaf_1488  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code blocks may be indented as any other blocks, with the associated owership
rules. Code blocks so indented have a logical start equal to their level of
indentation, which is to say the program being called will not see indentation
that is proper to the Grimoire document.
"]
// END RANK raw_1487

prose_1400 -> { raw_1489}
{rank=same; raw_1489}

raw_1489 [label="raw"]


// END RANK prose_1400

raw_1489 -> leaf_1490
leaf_1490  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code blocks may be placed inside lists, as tables may be, but may not be
explicitly placed inside tables.
"]
// END RANK raw_1489

prose_1401 -> { raw_1491 prespace_1492 literal_1493 raw_1494 prespace_1495 literal_1496 raw_1497}
{rank=same; raw_1491 prespace_1492 literal_1493 raw_1494 prespace_1495 literal_1496 raw_1497}

raw_1491 [label="raw"]

prespace_1492 [label="prespace"]

literal_1493 [label="literal"]

raw_1494 [label="raw"]

prespace_1495 [label="prespace"]

literal_1496 [label="literal"]

raw_1497 [label="raw"]


// END RANK prose_1401

raw_1491 -> leaf_1498
leaf_1498  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You may insert the result of a named code block in the data context
by simply saying"]
// END RANK raw_1491

prespace_1492 -> leaf_1499
leaf_1499  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1492

literal_1493 -> leaf_1500
leaf_1500  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@a-named-block()"]
// END RANK literal_1493

raw_1494 -> leaf_1501
leaf_1501  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". If there are variables, you may pass
them,"]
// END RANK raw_1494

prespace_1495 -> leaf_1502
leaf_1502  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1495

literal_1496 -> leaf_1503
leaf_1503  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@a-named-block(23, true)"]
// END RANK literal_1496

raw_1497 -> leaf_1504
leaf_1504  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or if you wish, by name:
"]
// END RANK raw_1497

structure_1402 -> { hashline_1505}
{rank=same; hashline_1505}

hashline_1505 [label="hashline"]


// END RANK structure_1402

hashline_1505 -> { hashtag_1506}
{rank=same; hashtag_1506}

hashtag_1506 [label="hashtag"]


// END RANK hashline_1505

hashtag_1506 -> leaf_1507
leaf_1507  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK hashtag_1506

prose_1403 -> { raw_1508}
{rank=same; raw_1508}

raw_1508 [label="raw"]


// END RANK prose_1403

raw_1508 -> leaf_1509
leaf_1509  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Within a formula applied to a table, it is valid to use the description
syntax for a variable to supply an argument to a function.
"]
// END RANK raw_1508

prose_1404 -> { raw_1510}
{rank=same; raw_1510}

raw_1510 [label="raw"]


// END RANK prose_1404

raw_1510 -> leaf_1511
leaf_1511  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There will be further syntax involved in building up the line that
begins a code block. It's considered good form to assign complex
code block headers into distinct tags, and use those, rather than
being explicit and repeating yourself or hiding file-local defaults
in drawers.
"]
// END RANK raw_1510

prose_1405 -> { raw_1512}
{rank=same; raw_1512}

raw_1512 [label="raw"]


// END RANK prose_1405

raw_1512 -> leaf_1513
leaf_1513  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So we prefer something like
"]
// END RANK raw_1512

codeblock_1406 -> leaf_1514
leaf_1514  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
// END RANK codeblock_1406

section_1407 -> { header_1515 prose_1516 section_1517 section_1518}
{rank=same; header_1515 prose_1516 section_1517 section_1518}

header_1515 [label="1 : Runtime"]

prose_1516 [label="prose"]

section_1517 [label="section: 1089-1123"]

section_1518 [label="section: 1156-1200"]


// END RANK section_1407

header_1515 -> leaf_1519
leaf_1519  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Runtime"]
// END RANK header_1515

prose_1516 -> { raw_1520}
{rank=same; raw_1520}

raw_1520 [label="raw"]


// END RANK prose_1516

raw_1520 -> leaf_1521
leaf_1521  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Here, we begin to explore the interactions Grimoire is capable of.
"]
// END RANK raw_1520

section_1517 -> { header_1522 prose_1523 prose_1524 prose_1525 prose_1526 prose_1527 prose_1528 prose_1529 prose_1530 section_1531}
{rank=same; header_1522 prose_1523 prose_1524 prose_1525 prose_1526 prose_1527 prose_1528 prose_1529 prose_1530 section_1531}

header_1522 [label="2 : Literate or Live?"]

prose_1523 [label="prose"]

prose_1524 [label="prose"]

prose_1525 [label="prose"]

prose_1526 [label="prose"]

prose_1527 [label="prose"]

prose_1528 [label="prose"]

prose_1529 [label="prose"]

prose_1530 [label="prose"]

section_1531 [label="section: 1124-1155"]


// END RANK section_1517

header_1522 -> leaf_1532
leaf_1532  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Literate or Live?"]
// END RANK header_1522

prose_1523 -> { raw_1533}
{rank=same; raw_1533}

raw_1533 [label="raw"]


// END RANK prose_1523

raw_1533 -> leaf_1534
leaf_1534  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Babel is descended from the tradition of [[http://en.wikipedia.org/wiki/Literate_programming][literate programming]], and
Grimoire inherits this from Babel.
"]
// END RANK raw_1533

prose_1524 -> { raw_1535}
{rank=same; raw_1535}

raw_1535 [label="raw"]


// END RANK prose_1524

raw_1535 -> leaf_1536
leaf_1536  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is capable of producing code and documentation in the
classic literate style. This is not the aim of Grimoire: it is
a metalanguage, for working with prose, data, and code in an
integrated fashion.
"]
// END RANK raw_1535

prose_1525 -> { raw_1537}
{rank=same; raw_1537}

raw_1537 [label="raw"]


// END RANK prose_1525

raw_1537 -> leaf_1538
leaf_1538  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
What a compiler is to a REPL, literate programming is to living
documents.
"]
// END RANK raw_1537

prose_1526 -> { raw_1539}
{rank=same; raw_1539}

raw_1539 [label="raw"]


// END RANK prose_1526

raw_1539 -> leaf_1540
leaf_1540  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In a literate programming context, we have source, which integrates
code and documentation. The source is then woven into documentation,
and tangled into code. Both are compiled, one is printed, one is run.
"]
// END RANK raw_1539

prose_1527 -> { raw_1541}
{rank=same; raw_1541}

raw_1541 [label="raw"]


// END RANK prose_1527

raw_1541 -> leaf_1542
leaf_1542  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The word 'printed' sounds somewhat archaic, no? The number of tools
Donald Knuth had to write just to write the tools he wanted to write,
and tool the writings he wanted to tool, is simply staggering.
"]
// END RANK raw_1541

prose_1528 -> { raw_1543 prespace_1544 literal_1545 raw_1546}
{rank=same; raw_1543 prespace_1544 literal_1545 raw_1546}

raw_1543 [label="raw"]

prespace_1544 [label="prespace"]

literal_1545 [label="literal"]

raw_1546 [label="raw"]


// END RANK prose_1528

raw_1543 -> leaf_1547
leaf_1547  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Traces of that legacy remain in Grimoire. Like Babel, we allow for
LaTeX embedding, with the sugar"]
// END RANK raw_1543

prespace_1544 -> leaf_1548
leaf_1548  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1544

literal_1545 -> leaf_1549
leaf_1549  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`\\latex`"]
// END RANK literal_1545

raw_1546 -> leaf_1550
leaf_1550  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". Starting Lua code with
a backslash is illegal, starting Clu code with a backslash is also
illegal.
"]
// END RANK raw_1546

prose_1529 -> { raw_1551}
{rank=same; raw_1551}

raw_1551 [label="raw"]


// END RANK prose_1529

raw_1551 -> leaf_1552
leaf_1552  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For a Grimoire document to be printed, realistically, in today's world,
it will be translated to LaTeX, hence to PDF, sent off to a print
on demand company, and drop shipped. Some documents may in fact
make this journey, because why not? We aren't oriented around it.
"]
// END RANK raw_1551

prose_1530 -> { raw_1553}
{rank=same; raw_1553}

raw_1553 [label="raw"]


// END RANK prose_1530

raw_1553 -> leaf_1554
leaf_1554  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The basic flow in a Grimoire context is one of excursion and return.
We have tangling and weaving, but also unraveling, where actions taken
within the weave or tangle are integrated back into the source document.
"]
// END RANK raw_1553

section_1531 -> { header_1555 prose_1556 prose_1557 prose_1558 prose_1559 prose_1560 prose_1561}
{rank=same; header_1555 prose_1556 prose_1557 prose_1558 prose_1559 prose_1560 prose_1561}

header_1555 [label="3 : Unraveling the Mystery"]

prose_1556 [label="prose"]

prose_1557 [label="prose"]

prose_1558 [label="prose"]

prose_1559 [label="prose"]

prose_1560 [label="prose"]

prose_1561 [label="prose"]


// END RANK section_1531

header_1555 -> leaf_1562
leaf_1562  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Unraveling the Mystery"]
// END RANK header_1555

prose_1556 -> { raw_1563}
{rank=same; raw_1563}

raw_1563 [label="raw"]


// END RANK prose_1556

raw_1563 -> leaf_1564
leaf_1564  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

What's unraveling? When I picture Donald Knuth writing literate code,
I picture him with a notebook, writing free-flowing algorithms in a
fashion he refined his entire career. I imagine him carefully transcribing
into Web, running the compiler, going for a stroll around the Stanford
campus, and examining the changes upon his return.
"]
// END RANK raw_1563

prose_1557 -> { raw_1565}
{rank=same; raw_1565}

raw_1565 [label="raw"]


// END RANK prose_1557

raw_1565 -> leaf_1566
leaf_1566  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
On the days, and they did happen, when his program was in a state of error,
I picture him returning to his notebook first. While thinking. Perhaps
playing the organ for an hour or two, to relax. He would then correct the
notebook, then the code, then the program, which would be correct now,
most of the time.
"]
// END RANK raw_1565

prose_1558 -> { raw_1567}
{rank=same; raw_1567}

raw_1567 [label="raw"]


// END RANK prose_1558

raw_1567 -> leaf_1568
leaf_1568  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm making that all up. But I'd wager I'm not far off the mark. We
don't work like that and most of us can't.
"]
// END RANK raw_1567

prose_1559 -> { raw_1569}
{rank=same; raw_1569}

raw_1569 [label="raw"]


// END RANK prose_1559

raw_1569 -> leaf_1570
leaf_1570  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A tangle is named that because the mapping between it and the source
can be non-trivial. It's quite possible to make it undecidable what to
do with edits to the tangle. it's also possible to move edits from the tangle
back into the source, in most cases, if we structure things well.
"]
// END RANK raw_1569

prose_1560 -> { raw_1571}
{rank=same; raw_1571}

raw_1571 [label="raw"]


// END RANK prose_1560

raw_1571 -> leaf_1572
leaf_1572  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Donald Knuth was unable to print a book that would alter his code. I'm
sure he'd have been delighted to have the ability. Our weaves can easily
be living documents, through in-browser and server side empowerment.
Those changes, too, should make it back into the source.
"]
// END RANK raw_1571

prose_1561 -> { raw_1573}
{rank=same; raw_1573}

raw_1573 [label="raw"]


// END RANK prose_1561

raw_1573 -> leaf_1574
leaf_1574  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Ultimately I imagine many people will prefer to edit and run their
Grimoire documents entirely from a weave that provides a bit of the
ol' WYSIWYG to the experience. Well and good for them, I have my own
view of Heaven, and it isn't Heaven if we don't all fit.
"]
// END RANK raw_1573

section_1518 -> { header_1575 prose_1576 prose_1577 prose_1578 prose_1579 section_1580 section_1581}
{rank=same; header_1575 prose_1576 prose_1577 prose_1578 prose_1579 section_1580 section_1581}

header_1575 [label="2 : Source, Tangle and Weave"]

prose_1576 [label="prose"]

prose_1577 [label="prose"]

prose_1578 [label="prose"]

prose_1579 [label="prose"]

section_1580 [label="section: 1173-1200"]

section_1581 [label="section: 1201-1219"]


// END RANK section_1518

header_1575 -> leaf_1582
leaf_1582  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Source, Tangle and Weave"]
// END RANK header_1575

prose_1576 -> { raw_1583}
{rank=same; raw_1583}

raw_1583 [label="raw"]


// END RANK prose_1576

raw_1583 -> leaf_1584
leaf_1584  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

These classic concepts from literate programming are central to
the Grimoire paradigm.
"]
// END RANK raw_1583

prose_1577 -> { raw_1585}
{rank=same; raw_1585}

raw_1585 [label="raw"]


// END RANK prose_1577

raw_1585 -> leaf_1586
leaf_1586  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In Grimoire, something like a PDF is not a true weave. It is a product;
much like an image or data derived from a simulation, it is regenerated
when necessary but has no further connection to the Grimoire environment.
"]
// END RANK raw_1585

prose_1578 -> { raw_1587}
{rank=same; raw_1587}

raw_1587 [label="raw"]


// END RANK prose_1578

raw_1587 -> leaf_1588
leaf_1588  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Our first section discusses the format of Grimoire source code. Like Babel,
unlike Web and descendants, it is self-tangling. Grimoire will be tightly
integrated and purpose-built for this task, operating at a REPL+ level.
"]
// END RANK raw_1587

prose_1579 -> { raw_1589}
{rank=same; raw_1589}

raw_1589 [label="raw"]


// END RANK prose_1579

raw_1589 -> leaf_1590
leaf_1590  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We still wish to use it to compile programs written in appropriate languages.
These languages needn't be educated in the ways of Grimoire, imposing this
requirement would be so onerous as to block adoption.
"]
// END RANK raw_1589

section_1580 -> { header_1591 prose_1592 prose_1593 prose_1594 prose_1595 prose_1596}
{rank=same; header_1591 prose_1592 prose_1593 prose_1594 prose_1595 prose_1596}

header_1591 [label="3 : Unraveling the Tangle"]

prose_1592 [label="prose"]

prose_1593 [label="prose"]

prose_1594 [label="prose"]

prose_1595 [label="prose"]

prose_1596 [label="prose"]


// END RANK section_1580

header_1591 -> leaf_1597
leaf_1597  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Unraveling the Tangle"]
// END RANK header_1591

prose_1592 -> { raw_1598}
{rank=same; raw_1598}

raw_1598 [label="raw"]


// END RANK prose_1592

raw_1598 -> leaf_1599
leaf_1599  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Babel offers limited facilities for working within source blocks. What it
doesn't offer is the critical 'unravel' operation, which takes changes to
the tangle and integrates them back into the weave.
"]
// END RANK raw_1598

prose_1593 -> { raw_1600}
{rank=same; raw_1600}

raw_1600 [label="raw"]


// END RANK prose_1593

raw_1600 -> leaf_1601
leaf_1601  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is a partially-solved problem, with Babel able to put comment tags into
the source which allow Emacs to jump back into your actual source from
errors in the tangle.
"]
// END RANK raw_1600

prose_1594 -> { raw_1602}
{rank=same; raw_1602}

raw_1602 [label="raw"]


// END RANK prose_1594

raw_1602 -> leaf_1603
leaf_1603  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is just not good enough. For any number of reasons, we need to be able
to unravel. I'll cite one: Converting existing codebases over to literacy.
The first step is to recreate the existing program on a source-line-identical
level. The entire existing developer base is familiar with the program already
and isn't going to want to start editing a bunch of Grimoire. They can most
likely be induced to accept readable metadata, and that's it.
"]
// END RANK raw_1602

prose_1595 -> { raw_1604}
{rank=same; raw_1604}

raw_1604 [label="raw"]


// END RANK prose_1595

raw_1604 -> leaf_1605
leaf_1605  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That's all we need. Code is in one of three categories: either it is a single
literal copy from source, it's one of several copies from source, or
it's generated code that's dependent on information in the source.
"]
// END RANK raw_1604

prose_1596 -> { raw_1606}
{rank=same; raw_1606}

raw_1606 [label="raw"]


// END RANK prose_1596

raw_1606 -> leaf_1607
leaf_1607  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We incorporate all changes to the former automatically when we unravel.
Changes to a single version of multiple copies prompts user interaction: do
you want to embed the change as its own source block, propagate it to each
instance, or decline the merge? Changes to generated code are simply
forbidden. If one is doing generation on the code base, working from
the weave is the more comfortable approach.
"]
// END RANK raw_1606

section_1581 -> { header_1608 prose_1609 prose_1610 prose_1611 prose_1612}
{rank=same; header_1608 prose_1609 prose_1610 prose_1611 prose_1612}

header_1608 [label="3 : Backweaving"]

prose_1609 [label="prose"]

prose_1610 [label="prose"]

prose_1611 [label="prose"]

prose_1612 [label="prose"]


// END RANK section_1581

header_1608 -> leaf_1613
leaf_1613  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Backweaving"]
// END RANK header_1608

prose_1609 -> { raw_1614}
{rank=same; raw_1614}

raw_1614 [label="raw"]


// END RANK prose_1609

raw_1614 -> leaf_1615
leaf_1615  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

An analogous operation is backweaving.
"]
// END RANK raw_1614

prose_1610 -> { raw_1616}
{rank=same; raw_1616}

raw_1616 [label="raw"]


// END RANK prose_1610

raw_1616 -> leaf_1617
leaf_1617  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A weave in Grimoire is an HTML/CSS/JS document. In other words, a program.
The weave is much closer akin to the source than any tangle. Any Grimoire
program can have a weave view, though it isn't necessary; many will have
no tangle at all, containing the functionality within Grimoire.
"]
// END RANK raw_1616

prose_1611 -> { raw_1618}
{rank=same; raw_1618}

raw_1618 [label="raw"]


// END RANK prose_1611

raw_1618 -> leaf_1619
leaf_1619  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The weave may therefore be manipulated, and we need some way to reflect
those changes back into the source. This can't be automated in a general
way. What we're left with is an EDN protocol for exchanging information
to update the weave in cooperation with some server logic and git.
"]
// END RANK raw_1618

prose_1612 -> { raw_1620}
{rank=same; raw_1620}

raw_1620 [label="raw"]


// END RANK prose_1612

raw_1620 -> leaf_1621
leaf_1621  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So, could you write the server logic for a site as a literate program,
push it to a server that tangles and weaves it, and use the source
and Grimoire/bridge as the sysadmin view? I bet you could, it might
even be fairly popular.
"]
// END RANK raw_1620

section_453 -> { header_1622 prose_1623 prose_1624 prose_1625 section_1626}
{rank=same; header_1622 prose_1623 prose_1624 prose_1625 section_1626}

header_1622 [label="4 : Zero-header tag"]

prose_1623 [label="prose"]

prose_1624 [label="prose"]

prose_1625 [label="prose"]

section_1626 [label="section: 420-421"]


// END RANK section_453

header_1622 -> leaf_1627
leaf_1627  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Zero-header tag"]
// END RANK header_1622

prose_1623 -> { raw_1628 prespace_1629 literal_1630 raw_1631}
{rank=same; raw_1628 prespace_1629 literal_1630 raw_1631}

raw_1628 [label="raw"]

prespace_1629 [label="prespace"]

literal_1630 [label="literal"]

raw_1631 [label="raw"]


// END RANK prose_1623

raw_1628 -> leaf_1632
leaf_1632  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The special [[*Tags][tag]]"]
// END RANK raw_1628

prespace_1629 -> leaf_1633
leaf_1633  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1629

literal_1630 -> leaf_1634
leaf_1634  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#*"]
// END RANK literal_1630

raw_1631 -> leaf_1635
leaf_1635  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which is only meaningful at the top of a document,
 indicates a 'zero header'. This lets you use the one-star level as a
series within a single document.
"]
// END RANK raw_1631

prose_1624 -> { raw_1636 prespace_1637 literal_1638 raw_1639}
{rank=same; raw_1636 prespace_1637 literal_1638 raw_1639}

raw_1636 [label="raw"]

prespace_1637 [label="prespace"]

literal_1638 [label="literal"]

raw_1639 [label="raw"]


// END RANK prose_1624

raw_1636 -> leaf_1640
leaf_1640  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The related tag"]
// END RANK raw_1636

prespace_1637 -> leaf_1641
leaf_1641  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_1637

literal_1638 -> leaf_1642
leaf_1642  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#meta*"]
// END RANK literal_1638

raw_1639 -> leaf_1643
leaf_1643  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" must be followed by a space and any number of
stars. This indicates a meta-level for the entire under-tree, that
exists somewhere else. Further semantics may be provided.
"]
// END RANK raw_1639

prose_1625 -> { raw_1644}
{rank=same; raw_1644}

raw_1644 [label="raw"]


// END RANK prose_1625

raw_1644 -> leaf_1645
leaf_1645  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This section belongs in some further API section.
"]
// END RANK raw_1644

section_1626 -> { header_1646 prose_1647}
{rank=same; header_1646 prose_1647}

header_1646 [label="5 : TODO Move to API Section"]

prose_1647 [label="prose"]


// END RANK section_1626

header_1646 -> leaf_1648
leaf_1648  [color=Gray,shape=rectangle,fontname=Inconsolata,label="***** TODO Move to API Section"]
// END RANK header_1646

prose_1647 -> { raw_1649}
{rank=same; raw_1649}

raw_1649 [label="raw"]


// END RANK prose_1647

raw_1649 -> leaf_1650
leaf_1650  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_1649


}
