digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 1219"]


doc_0 -> { section_1 section_2}
{rank=same; section_1 section_2}

section_1 [label="section: 1-3"]

section_2 [label="section: 34-338"]


section_1 -> { header_3 prose_4 structure_5 section_6}
{rank=same; header_3 prose_4 structure_5 section_6}

header_3 [label="0 : "]

prose_4 [label="prose"]

structure_5 [label="structure"]

section_6 [label="section: 4-33"]


header_3 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#+title: Grimoire: a metalanguage for magic spells."]
prose_4 -> { raw_8}
{rank=same; raw_8}

raw_8 [label="raw"]


raw_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_5 -> { hashline_10}
{rank=same; hashline_10}

hashline_10 [label="hashline"]


hashline_10 -> { hashtag_11}
{rank=same; hashtag_11}

hashtag_11 [label="hashtag"]


hashtag_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_6 -> { header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 prose_21 prose_22}
{rank=same; header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 prose_21 prose_22}

header_13 [label="1 : Introduction"]

prose_14 [label="prose"]

prose_15 [label="prose"]

prose_16 [label="prose"]

prose_17 [label="prose"]

prose_18 [label="prose"]

prose_19 [label="prose"]

prose_20 [label="prose"]

prose_21 [label="prose"]

prose_22 [label="prose"]


header_13 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Introduction"]
prose_14 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is a response to Babel.
"]
prose_15 -> { raw_26}
{rank=same; raw_26}

raw_26 [label="raw"]


raw_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Babel is simultaneously a kludge and the most potentially powerful language in existence.
"]
prose_16 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Babel is a metalanguage. The structure of Org mode lets the user weave together code into a
living document, in a flexible, powerful way.
"]
prose_17 -> { raw_30}
{rank=same; raw_30}

raw_30 [label="raw"]


raw_30 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The name is charmingly apt. Babel exists at the top of a tower of abstractions that is teetering
on the verge of collapse. Org-mode is an extension of outline mode, which was a simple tree
editor task list.
"]
prose_18 -> { raw_32}
{rank=same; raw_32}

raw_32 [label="raw"]


raw_32 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Various users bolted stuff on, because that's how emacs grows, you bolt stuff onto it and it
continues to function because it's [[http://lispers.org/][made with alien technology]].
"]
prose_19 -> { raw_34}
{rank=same; raw_34}

raw_34 [label="raw"]


raw_34 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The problem with Babel is more than the syntax being clunky, though that's a problem. The issue is
more profoundly that Babel is built on Org, which is built on emacs. It's a language, yes,
parsers exist for other platforms. But as a runtime, it isn't portable without a lot of effort.
"]
prose_20 -> { raw_36}
{rank=same; raw_36}

raw_36 [label="raw"]


raw_36 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So much so, that we get a chance to start over. It's roughly as difficult to write Grimoire as it would be to
reimplement Babel in, say, Sublime.
"]
prose_21 -> { raw_38}
{rank=same; raw_38}

raw_38 [label="raw"]


raw_38 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the process, we can:
"]
prose_22 -> { raw_40}
{rank=same; raw_40}

raw_40 [label="raw"]


raw_40 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - streamline concepts, making them more orthogonal
  - clean up the clunkiness in the grammar
  - build a toolchain that will let us write magic spells in any number of languages, amassing a powerful
    collection of same. A grimoire, if you will: a living book in which magic is both written and performed.
"]
section_2 -> { header_42 prose_43 section_44 section_45 section_46}
{rank=same; header_42 prose_43 section_44 section_45 section_46}

header_42 [label="1 : Musings on Metasyntax"]

prose_43 [label="prose"]

section_44 [label="section: 35-82"]

section_45 [label="section: 105-311"]

section_46 [label="section: 339-343"]


header_42 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Musings on Metasyntax"]
prose_43 -> { raw_48}
{rank=same; raw_48}

raw_48 [label="raw"]


raw_48 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_44 -> { header_50 prose_51 prose_52 section_53 section_54 section_55}
{rank=same; header_50 prose_51 prose_52 section_53 section_54 section_55}

header_50 [label="2 : Constraints"]

prose_51 [label="prose"]

prose_52 [label="prose"]

section_53 [label="section: 42-68"]

section_54 [label="section: 69-82"]

section_55 [label="section: 83-104"]


header_50 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Constraints"]
prose_51 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

There is a difference between a metalanguage and a literate programming language. Babel is a metalanguage,
as Grimoire is intended to be.
"]
prose_52 -> { raw_59}
{rank=same; raw_59}

raw_59 [label="raw"]


raw_59 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An effective metalanguage balances three concerns. It must be usable, readable, and parsable.
"]
section_53 -> { header_61 prose_62 prose_63 prose_64 prose_65 prose_66 prose_67 prose_68}
{rank=same; header_61 prose_62 prose_63 prose_64 prose_65 prose_66 prose_67 prose_68}

header_61 [label="3 : Usable"]

prose_62 [label="prose"]

prose_63 [label="prose"]

prose_64 [label="prose"]

prose_65 [label="prose"]

prose_66 [label="prose"]

prose_67 [label="prose"]

prose_68 [label="prose"]


header_61 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Usable"]
prose_62 -> { raw_70}
{rank=same; raw_70}

raw_70 [label="raw"]


raw_70 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A metalanguage is used interactively, on a deeper level than REPLs.
"]
prose_63 -> { raw_72 literal_73 raw_74}
{rank=same; raw_72 literal_73 raw_74}

raw_72 [label="raw"]

literal_73 [label="literal"]

raw_74 [label="raw"]


raw_72 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is what makes working with Org so amazing. The first purpose of what became Babel
was simply editing outlines. This was outline mode, which dates back to the era when
using asterisks and "]
literal_73 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="- [ ]"]
raw_74 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" checkboxes in a plain ASCII text file was fairly futuristic
behavior.
"]
prose_64 -> { raw_78}
{rank=same; raw_78}

raw_78 [label="raw"]


raw_78 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You can't really call that a language either, though it's a syntax. More and more features
were attached until we have modern Babel. But because each feature was build as an extension
to the editing/runtime environment, Babel is fairly smooth to work with.
"]
prose_65 -> { raw_80}
{rank=same; raw_80}

raw_80 [label="raw"]


raw_80 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If you can handle Emacs. I can, some can't. A metalanguage is tightly coupled to its runtime,
because its runtime is its editing environment. Not much of a metalanguage if this isn't the
case.
"]
prose_66 -> { raw_82}
{rank=same; raw_82}

raw_82 [label="raw"]


raw_82 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is the culmination of a considerable dependency chain. We need a data structure, a
parser to work with the data structure, and an editing environment that builds on these. For
maximum enjoyment, we'll want a custom terminal that enhances the xterm protocol with a few
features, most notably graphics.
"]
prose_67 -> { raw_84}
{rank=same; raw_84}

raw_84 [label="raw"]


raw_84 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Just like I have trouble writing Lua without burning huge amounts of time planning out Clu, I
can't use Org without doing the same for Grimoire. It's all related: I need a really good parser.
"]
prose_68 -> { raw_86}
{rank=same; raw_86}

raw_86 [label="raw"]


raw_86 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[[https://github.com/UpstandingHackers/hammer][hammer]] is the leading contender. But back to Grimoire.
"]
section_54 -> { header_88 prose_89 prose_90 prose_91}
{rank=same; header_88 prose_89 prose_90 prose_91}

header_88 [label="3 : Readable"]

prose_89 [label="prose"]

prose_90 [label="prose"]

prose_91 [label="prose"]


header_88 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Readable"]
prose_89 -> { raw_93}
{rank=same; raw_93}

raw_93 [label="raw"]


raw_93 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is designed to be read.  It's important that the raw syntax not
 break the reader's flow.  A good metalanguage lets the user employ just
 as much magic as she's comfortable with, without imposing more.
"]
prose_90 -> { raw_95}
{rank=same; raw_95}

raw_95 [label="raw"]


raw_95 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Our syntax is  designed to support this. As such  it is deeply concerned
with matters  such as indentation  and whitespacing, which are  basic to
readability.
"]
prose_91 -> { raw_97}
{rank=same; raw_97}

raw_97 [label="raw"]


raw_97 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It will be quite possible and indeed comfortable to write pure documents
such  as blog  posts in  Grimoire form.  In that  use case  it resembles
Markdown.
"]
section_55 -> { header_99 prose_100 prose_101 prose_102 prose_103 prose_104}
{rank=same; header_99 prose_100 prose_101 prose_102 prose_103 prose_104}

header_99 [label="3 : Parsable"]

prose_100 [label="prose"]

prose_101 [label="prose"]

prose_102 [label="prose"]

prose_103 [label="prose"]

prose_104 [label="prose"]


header_99 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Parsable"]
prose_100 -> { raw_106}
{rank=same; raw_106}

raw_106 [label="raw"]


raw_106 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire  documents are  intended  to be  highly  convoluted. The  basic
editing operation  is the fold. The  Grimoire editor must be  capable of
handling documents in the tens of megabytes with a complex and preserved
folding structure.
"]
prose_101 -> { raw_108}
{rank=same; raw_108}

raw_108 [label="raw"]


raw_108 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This requires  a ground-up  editing environment  rewrite to  employ data
structures   with   correct   big-O    complexity   and   an   efficient
implementation.
"]
prose_102 -> { raw_110}
{rank=same; raw_110}

raw_110 [label="raw"]


raw_110 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This  also  requires  that  the   language  be  well-designed  for  easy
recognition of the structural elements. As this document evolves, I will
be defining a grammar in the syntax preferred by barbarian.
"]
prose_103 -> { raw_112}
{rank=same; raw_112}

raw_112 [label="raw"]


raw_112 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is  an error-free  language. There  are several  concepts which
interact to  create this, namely  structure, prose, well-  and malformed
structure, and validity.
"]
prose_104 -> { raw_114}
{rank=same; raw_114}

raw_114 [label="raw"]


raw_114 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A parser for Grimoire which doesn't  succeed without error for any utf-8
string is not valid.
"]
section_45 -> { header_116 prose_117 section_118 section_119 section_120 section_121 section_122 section_123}
{rank=same; header_116 prose_117 section_118 section_119 section_120 section_121 section_122 section_123}

header_116 [label="2 : Structure"]

prose_117 [label="prose"]

section_118 [label="section: 109-149"]

section_119 [label="section: 161-190"]

section_120 [label="section: 191-200"]

section_121 [label="section: 253-285"]

section_122 [label="section: 295-311"]

section_123 [label="section: 312-338"]


header_116 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Structure"]
prose_117 -> { raw_125}
{rank=same; raw_125}

raw_125 [label="raw"]


raw_125 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a top-down look at Grimoire's proposed syntax.
"]
section_118 -> { header_127 prose_128 prose_129 prose_130 prose_131 prose_132 prose_133 prose_134 prose_135 prose_136 section_137}
{rank=same; header_127 prose_128 prose_129 prose_130 prose_131 prose_132 prose_133 prose_134 prose_135 prose_136 section_137}

header_127 [label="3 : Encoding"]

prose_128 [label="prose"]

prose_129 [label="prose"]

prose_130 [label="prose"]

prose_131 [label="prose"]

prose_132 [label="prose"]

prose_133 [label="prose"]

prose_134 [label="prose"]

prose_135 [label="prose"]

prose_136 [label="prose"]

section_137 [label="section: 150-160"]


header_127 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Encoding"]
prose_128 -> { raw_139}
{rank=same; raw_139}

raw_139 [label="raw"]


raw_139 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is defined in terms of utf-8.
"]
prose_129 -> { raw_141}
{rank=same; raw_141}

raw_141 [label="raw"]


raw_141 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The core syntax is defined in terms of the reachable keys on a US keyboard.
This tradition is firmly entrenched in the mid teens, and I have no
designs on budging that at present. The miser in me likes that they're
a byte each. The lawyer in me insists that this isn't ASCII, which is a
seven-bit legacy encoding. All aspects of utf-8 are equally meaningful.
"]
prose_130 -> { raw_143}
{rank=same; raw_143}

raw_143 [label="raw"]


raw_143 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We aren't at all afraid to use Unicode characters to display aspects
of the runtime. In fact we favor this, as it marks those operations
as distinctive. Most people can't type ⦿ without effort (I can't)
and it's easy to recognize as a folded drawer once you've seen a couple.
"]
prose_131 -> { raw_145}
{rank=same; raw_145}

raw_145 [label="raw"]


raw_145 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is case sensitive and uses lower-snake-case for built-in English
phrases. There is a convention (see classes) that uses capitalization of
user words to affect semantics. This may be overridden with other rules
for languages that lack the majuscule-miniscule distinction.
"]
prose_132 -> { raw_147}
{rank=same; raw_147}

raw_147 [label="raw"]


raw_147 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I want Grimoire to have correct Unicode handling, for some value of
correct. It can't be considered 1.0 without this.
"]
prose_133 -> { raw_149}
{rank=same; raw_149}

raw_149 [label="raw"]


raw_149 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Bidirectional handling in a context that's indentation sensitive is
an example of something subtle. Grimoire uses indentation in various
ways, so here's the rule:
"]
prose_134 -> { raw_151}
{rank=same; raw_151}

raw_151 [label="raw"]


raw_151 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Any newline that has a reversed direction ends indentation. So if
you are going ltr, issue an rtl marker, and a newline, your indentation
level is zero. If you reverse direction twice in a line, you keep
your indentation level. Three times, you lose it.
"]
prose_135 -> { raw_153}
{rank=same; raw_153}

raw_153 [label="raw"]


raw_153 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'd love to get a Hebrew and/or Arabic fluent hacker on the project
early, to make sure this works correctly.
"]
prose_136 -> { raw_155}
{rank=same; raw_155}

raw_155 [label="raw"]


raw_155 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Another thing I want to get right is equivalence. If you have a
variable called \"Glück\" the compiler shouldn't complain if it's
rendered in either of the valid ways. For some sequences that's
\"any of the valid ways\". If we normalized your prose, you might
have problems later, so we don't want to solve it that way.
"]
section_137 -> { header_157 prose_158 prose_159}
{rank=same; header_157 prose_158 prose_159}

header_157 [label="4 : Internationalization"]

prose_158 [label="prose"]

prose_159 [label="prose"]


header_157 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Internationalization"]
prose_158 -> { raw_161 literal_162 raw_163}
{rank=same; raw_161 literal_162 raw_163}

raw_161 [label="raw"]

literal_162 [label="literal"]

raw_163 [label="raw"]


raw_161 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

All parts of Grimoire defined in English will be namespaced
as "]
literal_162 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label="en:/"]
raw_163 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and loaded by default. Other languages will be added
when there is a fluent maintainer available.
"]
prose_159 -> { raw_167 literal_168 raw_169 literal_170 raw_171 literal_172 raw_173 literal_174 raw_175}
{rank=same; raw_167 literal_168 raw_169 literal_170 raw_171 literal_172 raw_173 literal_174 raw_175}

raw_167 [label="raw"]

literal_168 [label="literal"]

raw_169 [label="raw"]

literal_170 [label="literal"]

raw_171 [label="raw"]

literal_172 [label="literal"]

raw_173 [label="raw"]

literal_174 [label="literal"]

raw_175 [label="raw"]


raw_167 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note  that  many  words  aren't  truly English.  Notably  the  names  of
programming languages are  the same in all human languages.   A tag like"]
literal_168 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#author"]
raw_169 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" can be namespaced "]
literal_170 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#fr:/auteur"]
raw_171 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and will be, but "]
literal_172 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!python"]
raw_173 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not
in the "]
literal_174 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="en:/"]
raw_175 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" namespace.
"]
section_119 -> { header_185 prose_186 prose_187 prose_188 prose_189 prose_190 prose_191 prose_192}
{rank=same; header_185 prose_186 prose_187 prose_188 prose_189 prose_190 prose_191 prose_192}

header_185 [label="3 : Prose and Structure"]

prose_186 [label="prose"]

prose_187 [label="prose"]

prose_188 [label="prose"]

prose_189 [label="prose"]

prose_190 [label="prose"]

prose_191 [label="prose"]

prose_192 [label="prose"]


header_185 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Prose and Structure"]
prose_186 -> { raw_194}
{rank=same; raw_194}

raw_194 [label="raw"]


raw_194 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The major distinction Grimoire draws is between prose and structure.
"]
prose_187 -> { raw_196}
{rank=same; raw_196}

raw_196 [label="raw"]


raw_196 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose is the default parsing state. It is far from unstructured from the
runtime  perspective. Although  this needn't  be embedded  in the  parse
tree,  Grimoire   understands  concepts   such  as   paragraphs,  words,
punctuation,  capital letters,  languages, and  anything else  proper to
prose.
"]
prose_188 -> { raw_198}
{rank=same; raw_198}

raw_198 [label="raw"]


raw_198 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I refer to human languages, but Grimoire understands programming languages
also. In principle, all of them, it shouldn't be harder to add them than
it is to call them from shell, though getting a runtime rigged up to
another runtime always calls for some finesse to derive a good experience.
"]
prose_189 -> { raw_200}
{rank=same; raw_200}

raw_200 [label="raw"]


raw_200 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
\"Programming languages\" is overly specific. Grimoire draws a distinction
between prose and structure. Blocks may contain either, or both.
"]
prose_190 -> { raw_202}
{rank=same; raw_202}

raw_202 [label="raw"]


raw_202 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something that's nice about a language build on a prose/structure
relationship is that it can be error free. Anything *grym* can't build into
a structure is just prose.
"]
prose_191 -> { raw_204}
{rank=same; raw_204}

raw_204 [label="raw"]


raw_204 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Markdown has this property. Sometimes you run into crappy parsers which
build errors into Markdown, which is just obnoxious. If you [[http://daringfireball.net/projects/markdown/syntax][RTFM]],
you'll find the word \"error\" once. Helpfully explaining how Markdown
keeps you from making one.
"]
prose_192 -> { raw_206}
{rank=same; raw_206}

raw_206 [label="raw"]


raw_206 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do what we can to make the document look the same as it is
in fact structured. Syntax highlighting handles the edge cases.
"]
section_120 -> { header_208 prose_209 prose_210 prose_211 section_212}
{rank=same; header_208 prose_209 prose_210 prose_211 section_212}

header_208 [label="3 : Ownership"]

prose_209 [label="prose"]

prose_210 [label="prose"]

prose_211 [label="prose"]

section_212 [label="section: 201-252"]


header_208 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Ownership"]
prose_209 -> { raw_214}
{rank=same; raw_214}

raw_214 [label="raw"]


raw_214 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The basic structural relationship in Grimoire is ownership.
"]
prose_210 -> { raw_216}
{rank=same; raw_216}

raw_216 [label="raw"]


raw_216 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Root elements of a heirarchy own their children, blocks own
lines that refer to that block. Indentation has a subtle but
regular interaction with ownership; it does what you expect.
"]
prose_211 -> { raw_218}
{rank=same; raw_218}

raw_218 [label="raw"]


raw_218 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Edge cases are resolved using the cling rule.
"]
section_212 -> { header_220 prose_221 prose_222 prose_223 prose_224 structure_225 structure_226 structure_227 structure_228 structure_229 prose_230 structure_231 structure_232 structure_233 prose_234}
{rank=same; header_220 prose_221 prose_222 prose_223 prose_224 structure_225 structure_226 structure_227 structure_228 structure_229 prose_230 structure_231 structure_232 structure_233 prose_234}

header_220 [label="4 : The Cling Rule"]

prose_221 [label="prose"]

prose_222 [label="prose"]

prose_223 [label="prose"]

prose_224 [label="prose"]

structure_225 [label="structure"]

structure_226 [label="structure"]

structure_227 [label="structure"]

structure_228 [label="structure"]

structure_229 [label="structure"]

prose_230 [label="prose"]

structure_231 [label="structure"]

structure_232 [label="structure"]

structure_233 [label="structure"]

prose_234 [label="prose"]


header_220 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** The Cling Rule"]
prose_221 -> { raw_236}
{rank=same; raw_236}

raw_236 [label="raw"]


raw_236 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The cling rule specifies that a group 'clings' to another group when
it is closer to that group than the other group. Ties resolve down.
"]
prose_222 -> { raw_238}
{rank=same; raw_238}

raw_238 [label="raw"]


raw_238 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This should make it intuitive to group elements that aren't grouping the
way you expect: put in whitespace until the block is visually distinguished
from the surroundings.
"]
prose_223 -> { raw_240}
{rank=same; raw_240}

raw_240 [label="raw"]


raw_240 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cling applies between blocks which are at the same level of ownership.
Ownership has precedence over cling: all blocks underneath e.g. a header
line are owned by that line, newlines notwithstanding.
"]
prose_224 -> { raw_242}
{rank=same; raw_242}

raw_242 [label="raw"]


raw_242 -> leaf_243
leaf_243  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that indentation of e.g. lists invokes the cling rule within the
indentation level.

"]
structure_225 -> { hashline_244}
{rank=same; hashline_244}

hashline_244 [label="hashline"]


hashline_244 -> { hashtag_245}
{rank=same; hashtag_245}

hashtag_245 [label="hashtag"]


hashtag_245 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_226 -> { hashline_247}
{rank=same; hashline_247}

hashline_247 [label="hashline"]


hashline_247 -> { hashtag_248}
{rank=same; hashtag_248}

hashtag_248 [label="hashtag"]


hashtag_248 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_227 -> { hashline_250}
{rank=same; hashline_250}

hashline_250 [label="hashline"]


hashline_250 -> { hashtag_251}
{rank=same; hashtag_251}

hashtag_251 [label="hashtag"]


hashtag_251 -> leaf_252
leaf_252  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_228 -> { hashline_253}
{rank=same; hashline_253}

hashline_253 [label="hashline"]


hashline_253 -> { hashtag_254}
{rank=same; hashtag_254}

hashtag_254 [label="hashtag"]


hashtag_254 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
structure_229 -> { hashline_256}
{rank=same; hashline_256}

hashline_256 [label="hashline"]


hashline_256 -> { hashtag_257}
{rank=same; hashtag_257}

hashtag_257 [label="hashtag"]


hashtag_257 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_230 -> { raw_259}
{rank=same; raw_259}

raw_259 [label="raw"]


raw_259 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Even clings are resolved forwards:
"]
structure_231 -> { hashline_261}
{rank=same; hashline_261}

hashline_261 [label="hashline"]


hashline_261 -> { hashtag_262}
{rank=same; hashtag_262}

hashtag_262 [label="hashtag"]


hashtag_262 -> leaf_263
leaf_263  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_232 -> { hashline_264}
{rank=same; hashline_264}

hashline_264 [label="hashline"]


hashline_264 -> { hashtag_265}
{rank=same; hashtag_265}

hashtag_265 [label="hashtag"]


hashtag_265 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
structure_233 -> { hashline_267}
{rank=same; hashline_267}

hashline_267 [label="hashline"]


hashline_267 -> { hashtag_268}
{rank=same; hashtag_268}

hashtag_268 [label="hashtag"]


hashtag_268 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_234 -> { raw_270}
{rank=same; raw_270}

raw_270 [label="raw"]


raw_270 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
be considered bad style.
"]
section_121 -> { header_272 prose_273 section_274 section_275 section_276}
{rank=same; header_272 prose_273 section_274 section_275 section_276}

header_272 [label="3 : Whitespace, Lines, and Indentation."]

prose_273 [label="prose"]

section_274 [label="section: 258-279"]

section_275 [label="section: 280-285"]

section_276 [label="section: 286-294"]


header_272 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Whitespace, Lines, and Indentation."]
prose_273 -> { raw_278}
{rank=same; raw_278}

raw_278 [label="raw"]


raw_278 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is a structured document format. There are semantics associated
with every character we encode.
"]
section_274 -> { header_280 prose_281 prose_282 prose_283 prose_284 prose_285}
{rank=same; header_280 prose_281 prose_282 prose_283 prose_284 prose_285}

header_280 [label="4 : Whitespace"]

prose_281 [label="prose"]

prose_282 [label="prose"]

prose_283 [label="prose"]

prose_284 [label="prose"]

prose_285 [label="prose"]


header_280 -> leaf_286
leaf_286  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Whitespace"]
prose_281 -> { raw_287}
{rank=same; raw_287}

raw_287 [label="raw"]


raw_287 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Whitespace is either the space or newline character. Returns are removed,
tabs resolved to two spaces by the formatter, the latter is warned against.
"]
prose_282 -> { raw_289}
{rank=same; raw_289}

raw_289 [label="raw"]


raw_289 -> leaf_290
leaf_290  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Most of the token-like categories we refer to must be surrounded by
whitespace. Newlines have semantics more often than they do not.
"]
prose_283 -> { raw_291 literal_292 raw_293}
{rank=same; raw_291 literal_292 raw_293}

raw_291 [label="raw"]

literal_292 [label="literal"]

raw_293 [label="raw"]


raw_291 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Unicode actually contains quite a number of whitespace characters. They are
all treated as a single ordinary space. If that space is semantically meaningful,
as in the space between "]
literal_292 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** A Headline"]
raw_293 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", it is filtered into an ordinary space.
Otherwise it's considered prose, the only filtration prose receives is tab->space
conversion.
"]
prose_284 -> { raw_297}
{rank=same; raw_297}

raw_297 [label="raw"]


raw_297 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire mercilessly enforces tab-space conversion, even on your code blocks.
I will cling to this tenet as long as I can, the tab character needs to die,
the world has decided, that key is special and shouldn't insert a special
dropping that looks like n spaces.
"]
prose_285 -> { raw_299}
{rank=same; raw_299}

raw_299 [label="raw"]


raw_299 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
*make*? Outta my face with make. Yes, we'll have a make syntax, yes, it will
put the tabs back in.
"]
section_275 -> { header_301 prose_302}
{rank=same; header_301 prose_302}

header_301 [label="4 : Lines"]

prose_302 [label="prose"]


header_301 -> leaf_303
leaf_303  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Lines"]
prose_302 -> { raw_304}
{rank=same; raw_304}

raw_304 [label="raw"]


raw_304 -> leaf_305
leaf_305  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

When we refer to the beginning of a line, this allows for spaces before the
reference point. We call the absolute beginning of a line the first
position.
"]
section_276 -> { header_306 prose_307 prose_308 prose_309}
{rank=same; header_306 prose_307 prose_308 prose_309}

header_306 [label="4 : Indentation"]

prose_307 [label="prose"]

prose_308 [label="prose"]

prose_309 [label="prose"]


header_306 -> leaf_310
leaf_310  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Indentation"]
prose_307 -> { raw_311}
{rank=same; raw_311}

raw_311 [label="raw"]


raw_311 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is an indentation-aware language. Most kinds of block can be
arcically[fn:1] ordered by means of indentation.
"]
prose_308 -> { raw_313}
{rank=same; raw_313}

raw_313 [label="raw"]


raw_313 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indentation follows [[http://nim-lang.org/manual.html#indentation][Nim rules]].
"]
prose_309 -> { raw_315}
{rank=same; raw_315}

raw_315 [label="raw"]


raw_315 -> leaf_316
leaf_316  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[fn:1] There's nothing sacred about ordered subrules, and if we're making up
a new word, let's drop the silent h. Webster was a cool guy."]
section_122 -> { header_317 prose_318 prose_319 prose_320 prose_321}
{rank=same; header_317 prose_318 prose_319 prose_320 prose_321}

header_317 [label="3 : Order of Recognition"]

prose_318 [label="prose"]

prose_319 [label="prose"]

prose_320 [label="prose"]

prose_321 [label="prose"]


header_317 -> leaf_322
leaf_322  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Order of Recognition"]
prose_318 -> { raw_323}
{rank=same; raw_323}

raw_323 [label="raw"]


raw_323 -> leaf_324
leaf_324  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Starting from the neutral context, which is always at a newline, Grimoire
tries to make one of its initializing special forms. Failing that, it will
begin a prose block.
"]
prose_319 -> { raw_325}
{rank=same; raw_325}

raw_325 [label="raw"]


raw_325 -> leaf_326
leaf_326  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If there is whitespace, it affects indentation level in indicated ways.
They will not directly affect the semantics of the following form, that is,
these rules apply after any potentially block-ending newline, apart from
spaces that may be found between the newline and the character.
"]
prose_320 -> { raw_327 literal_328 raw_329 literal_330 raw_331 literal_332 raw_333 literal_334 raw_335 literal_336 raw_337 literal_338 raw_339 literal_340 raw_341 literal_342 raw_343}
{rank=same; raw_327 literal_328 raw_329 literal_330 raw_331 literal_332 raw_333 literal_334 raw_335 literal_336 raw_337 literal_338 raw_339 literal_340 raw_341 literal_342 raw_343}

raw_327 [label="raw"]

literal_328 [label="literal"]

raw_329 [label="raw"]

literal_330 [label="literal"]

raw_331 [label="raw"]

literal_332 [label="literal"]

raw_333 [label="raw"]

literal_334 [label="literal"]

raw_335 [label="raw"]

literal_336 [label="literal"]

raw_337 [label="raw"]

literal_338 [label="literal"]

raw_339 [label="raw"]

literal_340 [label="literal"]

raw_341 [label="raw"]

literal_342 [label="literal"]

raw_343 [label="raw"]


raw_327 -> leaf_344
leaf_344  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
At present,  "]
literal_328 -> leaf_345
leaf_345  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_329 -> leaf_346
leaf_346  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_330 -> leaf_347
leaf_347  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#"]
raw_331 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",  "]
literal_332 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label="|"]
raw_333 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_334 -> leaf_351
leaf_351  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-"]
raw_335 -> leaf_352
leaf_352  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",  , "]
literal_336 -> leaf_353
leaf_353  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~"]
raw_337 -> leaf_354
leaf_354  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",  "]
literal_338 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@"]
raw_339 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_340 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":"]
raw_341 -> leaf_358
leaf_358  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  and "]
literal_342 -> leaf_359
leaf_359  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{"]
raw_343 -> leaf_360
leaf_360  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  all create
special  contexts.  A  special  context  creates a  block  in a  context
specific way.
"]
prose_321 -> { raw_361}
{rank=same; raw_361}

raw_361 [label="raw"]


raw_361 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Blocks have a left associativity which can be recursive.
"]
section_123 -> { header_363 prose_364 prose_365 prose_366 prose_367 prose_368}
{rank=same; header_363 prose_364 prose_365 prose_366 prose_367 prose_368}

header_363 [label="3 : Blocks"]

prose_364 [label="prose"]

prose_365 [label="prose"]

prose_366 [label="prose"]

prose_367 [label="prose"]

prose_368 [label="prose"]


header_363 -> leaf_369
leaf_369  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Blocks"]
prose_364 -> { raw_370}
{rank=same; raw_370}

raw_370 [label="raw"]


raw_370 -> leaf_371
leaf_371  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is oriented around blocks.
"]
prose_365 -> { raw_372}
{rank=same; raw_372}

raw_372 [label="raw"]


raw_372 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Blocks are at least one line long,  all restarts are on a new line.  Any
syntactic structure smaller than a block we call an element.
"]
prose_366 -> { raw_374}
{rank=same; raw_374}

raw_374 [label="raw"]


raw_374 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Some types of blocks nest.  A document is a single  block.  There may be
other semantic units such as directories, I'd think a language that uses
strict  nested heirarchy  as powerfully  as Grimoire  could dictate  the
semantics of a file system, but that's currently out of scope.
"]
prose_367 -> { raw_376 literal_377 raw_378 literal_379 raw_380 literal_381 raw_382}
{rank=same; raw_376 literal_377 raw_378 literal_379 raw_380 literal_381 raw_382}

raw_376 [label="raw"]

literal_377 [label="literal"]

raw_378 [label="raw"]

literal_379 [label="literal"]

raw_380 [label="raw"]

literal_381 [label="literal"]

raw_382 [label="raw"]


raw_376 -> leaf_383
leaf_383  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indentation is relevant to some  kinds of blocks. In general, whitespace
matters quite a  bit in a Grimoire  document. We keep some  of the warts
out because the tab character is  illegal, and there will be a mandatory
formatter, "]
literal_377 -> leaf_384
leaf_384  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym  fmt"]
raw_378 -> leaf_385
leaf_385  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if  you will, that  does everything  from turning"]
literal_379 -> leaf_386
leaf_386  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**bold**"]
raw_380 -> leaf_387
leaf_387  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  into "]
literal_381 -> leaf_388
leaf_388  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*bold*"]
raw_382 -> leaf_389
leaf_389  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  (because the  extra stars  weren't used),  to
newline stripping, and so on.  This is normally applied incrementally by
the runtime editing environment.
"]
prose_368 -> { raw_390}
{rank=same; raw_390}

raw_390 [label="raw"]


raw_390 -> leaf_391
leaf_391  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indentation is human  readable and, with some care, a  computer may come
to the  same conclusions a  human would. I'm  still wary of  Python, but
there's no good  reason, unless the headache of most  Python not working
correctly  on my  computer, for  reasons I  can't track  down that  seem
related to  there being two languages  invoked as 'python', counts  as a
good reason.
"]
section_46 -> { header_392 prose_393 section_394}
{rank=same; header_392 prose_393 section_394}

header_392 [label="2 : Syntax"]

prose_393 [label="prose"]

section_394 [label="section: 344-407"]


header_392 -> leaf_395
leaf_395  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Syntax"]
prose_393 -> { raw_396}
{rank=same; raw_396}

raw_396 [label="raw"]


raw_396 -> leaf_397
leaf_397  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Now that we've established the basic constraints, let's
start our recursive descent into the parse.
"]
section_394 -> { header_398 prose_399 prose_400 prose_401 prose_402 prose_403 prose_404 structure_405 section_406 section_407}
{rank=same; header_398 prose_399 prose_400 prose_401 prose_402 prose_403 prose_404 structure_405 section_406 section_407}

header_398 [label="3 : Headers"]

prose_399 [label="prose"]

prose_400 [label="prose"]

prose_401 [label="prose"]

prose_402 [label="prose"]

prose_403 [label="prose"]

prose_404 [label="prose"]

structure_405 [label="structure"]

section_406 [label="section: 368-368"]

section_407 [label="section: 408-419"]


header_398 -> leaf_408
leaf_408  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Headers"]
prose_399 -> { raw_409}
{rank=same; raw_409}

raw_409 [label="raw"]


raw_409 -> leaf_410
leaf_410  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is arcically constrained by structure groups,
called headers.
"]
prose_400 -> { raw_411 literal_412 raw_413}
{rank=same; raw_411 literal_412 raw_413}

raw_411 [label="raw"]

literal_412 [label="literal"]

raw_413 [label="raw"]


raw_411 -> leaf_414
leaf_414  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These start on a new line and begin with any number of  "]
literal_412 -> leaf_415
leaf_415  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_413 -> leaf_416
leaf_416  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". These must
be followed by a space mark to be valid. Contra Babel, you may
have a content-free header line, provided a space is found before the
newline.
"]
prose_401 -> { raw_417}
{rank=same; raw_417}

raw_417 [label="raw"]


raw_417 -> leaf_418
leaf_418  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In weaves and the like, headers represent document structure. Their
intention is structural: they support the same syntax as lists,
but the user is expected to use lists for list purposes. Putting
[TODO] in a header line should mean you have a document-specific
task to perform in that block.
"]
prose_402 -> { raw_419}
{rank=same; raw_419}

raw_419 [label="raw"]


raw_419 -> leaf_420
leaf_420  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Contra Babel, you may put spaces before the beginning of a header line.
"]
prose_403 -> { raw_421}
{rank=same; raw_421}

raw_421 [label="raw"]


raw_421 -> leaf_422
leaf_422  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The semantics of header lines are entirely determined by
the number of stars.
"]
prose_404 -> { raw_423}
{rank=same; raw_423}

raw_423 [label="raw"]


raw_423 -> leaf_424
leaf_424  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If you write
"]
structure_405 -> { hashline_425}
{rank=same; hashline_425}

hashline_425 [label="hashline"]


hashline_425 -> { hashtag_426}
{rank=same; hashtag_426}

hashtag_426 [label="hashtag"]


hashtag_426 -> leaf_427
leaf_427  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_406 -> { header_428 prose_429 section_430}
{rank=same; header_428 prose_429 section_430}

header_428 [label="1 : Top Header"]

prose_429 [label="prose"]

section_430 [label="section: 369-380"]


header_428 -> leaf_431
leaf_431  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  * Top Header"]
prose_429 -> { raw_432}
{rank=same; raw_432}

raw_432 [label="raw"]


raw_432 -> leaf_433
leaf_433  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_430 -> { header_434 structure_435 structure_436 section_437}
{rank=same; header_434 structure_435 structure_436 section_437}

header_434 [label="2 : Second Header"]

structure_435 [label="structure"]

structure_436 [label="structure"]

section_437 [label="section: 381-381"]


header_434 -> leaf_438
leaf_438  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    ** Second Header"]
structure_435 -> { hashline_439}
{rank=same; hashline_439}

hashline_439 [label="hashline"]


hashline_439 -> { hashtag_440}
{rank=same; hashtag_440}

hashtag_440 [label="hashtag"]


hashtag_440 -> leaf_441
leaf_441  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_436 -> { hashline_442}
{rank=same; hashline_442}

hashline_442 [label="hashline"]


hashline_442 -> { hashtag_443}
{rank=same; hashtag_443}

hashtag_443 [label="hashtag"]


hashtag_443 -> leaf_444
leaf_444  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_437 -> { header_445 prose_446 section_447}
{rank=same; header_445 prose_446 section_447}

header_445 [label="1 : Top Header ▼"]

prose_446 [label="prose"]

section_447 [label="section: 382-731"]


header_445 -> leaf_448
leaf_448  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Top Header ▼"]
prose_446 -> { raw_449}
{rank=same; raw_449}

raw_449 [label="raw"]


raw_449 -> leaf_450
leaf_450  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_447 -> { header_451 structure_452 prose_453 prose_454 prose_455 section_456 section_457 section_458 section_459 section_460 section_461 section_462 section_463 section_464 section_465}
{rank=same; header_451 structure_452 prose_453 prose_454 prose_455 section_456 section_457 section_458 section_459 section_460 section_461 section_462 section_463 section_464 section_465}

header_451 [label="2 : Second Header ►"]

structure_452 [label="structure"]

prose_453 [label="prose"]

prose_454 [label="prose"]

prose_455 [label="prose"]

section_456 [label="section: 398-407"]

section_457 [label="section: 422-440"]

section_458 [label="section: 441-481"]

section_459 [label="section: 489-501"]

section_460 [label="section: 502-558"]

section_461 [label="section: 567-593"]

section_462 [label="section: 594-611"]

section_463 [label="section: 612-672"]

section_464 [label="section: 691-731"]

section_465 [label="section: 732-741"]


header_451 -> leaf_466
leaf_466  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   ** Second Header ►"]
structure_452 -> { hashline_467}
{rank=same; hashline_467}

hashline_467 [label="hashline"]


hashline_467 -> { hashtag_468}
{rank=same; hashtag_468}

hashtag_468 [label="hashtag"]


hashtag_468 -> leaf_469
leaf_469  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_453 -> { raw_470}
{rank=same; raw_470}

raw_470 [label="raw"]


raw_470 -> leaf_471
leaf_471  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
may contain any number of blocks.
"]
prose_454 -> { raw_472}
{rank=same; raw_472}

raw_472 [label="raw"]


raw_472 -> leaf_473
leaf_473  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
\"begins\" means first non-whitespace character. Indentation levels are tracked by
Nim rules, obviously a Grimoire document can contain no tab marks
and if any wander in they become four spaces.
"]
prose_455 -> { raw_474}
{rank=same; raw_474}

raw_474 [label="raw"]


raw_474 -> leaf_475
leaf_475  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Contra other block forms, tags may not precede a headline.
"]
section_456 -> { header_476 prose_477 prose_478 prose_479}
{rank=same; header_476 prose_477 prose_478 prose_479}

header_476 [label="4 : Header Lines"]

prose_477 [label="prose"]

prose_478 [label="prose"]

prose_479 [label="prose"]


header_476 -> leaf_480
leaf_480  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Header Lines"]
prose_477 -> { raw_481 literal_482 raw_483}
{rank=same; raw_481 literal_482 raw_483}

raw_481 [label="raw"]

literal_482 [label="literal"]

raw_483 [label="raw"]


raw_481 -> leaf_484
leaf_484  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Anything after a run of "]
literal_482 -> leaf_485
leaf_485  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_483 -> leaf_486
leaf_486  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and a space, and before a newline, is
a header line.
"]
prose_478 -> { raw_487}
{rank=same; raw_487}

raw_487 [label="raw"]


raw_487 -> leaf_488
leaf_488  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Header lines and list lines are structured identically. If I discover
a necessary exception, I'll note it.
"]
prose_479 -> { raw_489}
{rank=same; raw_489}

raw_489 [label="raw"]


raw_489 -> leaf_490
leaf_490  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That structure is discussed under [[*Lists][lists]].
"]
section_457 -> { header_491 prose_492 prose_493 structure_494 prose_495 prose_496 structure_497}
{rank=same; header_491 prose_492 prose_493 structure_494 prose_495 prose_496 structure_497}

header_491 [label="3 : Prose blocks"]

prose_492 [label="prose"]

prose_493 [label="prose"]

structure_494 [label="structure"]

prose_495 [label="prose"]

prose_496 [label="prose"]

structure_497 [label="structure"]


header_491 -> leaf_498
leaf_498  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Prose blocks"]
prose_492 -> { raw_499}
{rank=same; raw_499}

raw_499 [label="raw"]


raw_499 -> leaf_500
leaf_500  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A prose block is preceded and followed by a single newline. Extraneous
whitespace on the bare line is filtered.
"]
prose_493 -> { raw_501}
{rank=same; raw_501}

raw_501 [label="raw"]


raw_501 -> leaf_502
leaf_502  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose blocks may not be indented in a semantically meaningful way.
"]
structure_494 -> { hashline_503}
{rank=same; hashline_503}

hashline_503 [label="hashline"]


hashline_503 -> { hashtag_504}
{rank=same; hashtag_504}

hashtag_504 [label="hashtag"]


hashtag_504 -> leaf_505
leaf_505  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_495 -> { raw_506}
{rank=same; raw_506}

raw_506 [label="raw"]


raw_506 -> leaf_507
leaf_507  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
    prose
"]
prose_496 -> { raw_508}
{rank=same; raw_508}

raw_508 [label="raw"]


raw_508 -> leaf_509
leaf_509  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
        prose
"]
structure_497 -> { hashline_510}
{rank=same; hashline_510}

hashline_510 [label="hashline"]


hashline_510 -> { hashtag_511}
{rank=same; hashtag_511}

hashtag_511 [label="hashtag"]


hashtag_511 -> leaf_512
leaf_512  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_458 -> { header_513 prose_514 prose_515 prose_516 prose_517 prose_518 prose_519 prose_520 structure_521 prose_522 prose_523 prose_524 section_525}
{rank=same; header_513 prose_514 prose_515 prose_516 prose_517 prose_518 prose_519 prose_520 structure_521 prose_522 prose_523 prose_524 section_525}

header_513 [label="3 : Prose markup"]

prose_514 [label="prose"]

prose_515 [label="prose"]

prose_516 [label="prose"]

prose_517 [label="prose"]

prose_518 [label="prose"]

prose_519 [label="prose"]

prose_520 [label="prose"]

structure_521 [label="structure"]

prose_522 [label="prose"]

prose_523 [label="prose"]

prose_524 [label="prose"]

section_525 [label="section: 482-488"]


header_513 -> leaf_526
leaf_526  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Prose markup"]
prose_514 -> { raw_527}
{rank=same; raw_527}

raw_527 [label="raw"]


raw_527 -> leaf_528
leaf_528  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Prose markup rules apply in any prose contexts, not just for prose blocks.
"]
prose_515 -> { raw_529 literal_530 raw_531 literal_532 raw_533 literal_534 raw_535 literal_536 raw_537 literal_538 raw_539 literal_540 raw_541 literal_542 raw_543}
{rank=same; raw_529 literal_530 raw_531 literal_532 raw_533 literal_534 raw_535 literal_536 raw_537 literal_538 raw_539 literal_540 raw_541 literal_542 raw_543}

raw_529 [label="raw"]

literal_530 [label="literal"]

raw_531 [label="raw"]

literal_532 [label="literal"]

raw_533 [label="raw"]

literal_534 [label="literal"]

raw_535 [label="raw"]

literal_536 [label="literal"]

raw_537 [label="raw"]

literal_538 [label="literal"]

raw_539 [label="raw"]

literal_540 [label="literal"]

raw_541 [label="raw"]

literal_542 [label="literal"]

raw_543 [label="raw"]


raw_529 -> leaf_544
leaf_544  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We mark "]
literal_530 -> leaf_545
leaf_545  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*bold*"]
raw_531 -> leaf_546
leaf_546  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_532 -> leaf_547
leaf_547  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/italic/"]
raw_533 -> leaf_548
leaf_548  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_534 -> leaf_549
leaf_549  [color=Gray,shape=rectangle,fontname=Inconsolata,label="_underline_"]
raw_535 -> leaf_550
leaf_550  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_536 -> leaf_551
leaf_551  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~strikethrough~"]
raw_537 -> leaf_552
leaf_552  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", 
and "]
literal_538 -> leaf_553
leaf_553  [color=Gray,shape=rectangle,fontname=Inconsolata,label="​"]
raw_539 -> leaf_554
leaf_554  [color=Gray,shape=rectangle,fontname=Inconsolata,label="literal"]
literal_540 -> leaf_555
leaf_555  [color=Gray,shape=rectangle,fontname=Inconsolata,label="​"]
raw_541 -> leaf_556
leaf_556  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", using the indicated marks. They must not be separated 
with whitespace from the connecting prose. Any number may be used and matched,
whitespace is allowed, so "]
literal_542 -> leaf_557
leaf_557  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**bold math: 4 * 5**"]
raw_543 -> leaf_558
leaf_558  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will highlight
correctly.
"]
prose_516 -> { raw_559 literal_560 raw_561}
{rank=same; raw_559 literal_560 raw_561}

raw_559 [label="raw"]

literal_560 [label="literal"]

raw_561 [label="raw"]


raw_559 -> leaf_562
leaf_562  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is also [[*Inline%20Code][Inline Code]], which is formatted "]
literal_560 -> leaf_563
leaf_563  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`code`"]
raw_561 -> leaf_564
leaf_564  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_517 -> { raw_565}
{rank=same; raw_565}

raw_565 [label="raw"]


raw_565 -> leaf_566
leaf_566  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These all follow the prose markup rule: any number of the starting
character matches the same number of the ending character in the
document string.
"]
prose_518 -> { raw_567 literal_568 raw_569 literal_570 raw_571 literal_572 raw_573 literal_574 raw_575}
{rank=same; raw_567 literal_568 raw_569 literal_570 raw_571 literal_572 raw_573 literal_574 raw_575}

raw_567 [label="raw"]

literal_568 [label="literal"]

raw_569 [label="raw"]

literal_570 [label="literal"]

raw_571 [label="raw"]

literal_572 [label="literal"]

raw_573 [label="raw"]

literal_574 [label="literal"]

raw_575 [label="raw"]


raw_567 -> leaf_576
leaf_576  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We make subscripts mildly annoying, "]
literal_568 -> leaf_577
leaf_577  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sub__script"]
raw_569 -> leaf_578
leaf_578  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
literal_570 -> leaf_579
leaf_579  [color=Gray,shape=rectangle,fontname=Inconsolata,label="super^^script"]
raw_571 -> leaf_580
leaf_580  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", 
to avoid colliding the former with "]
literal_572 -> leaf_581
leaf_581  [color=Gray,shape=rectangle,fontname=Inconsolata,label="snake_case"]
raw_573 -> leaf_582
leaf_582  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". That's a lot of ways 
to parse the "]
literal_574 -> leaf_583
leaf_583  [color=Gray,shape=rectangle,fontname=Inconsolata,label="_"]
raw_575 -> leaf_584
leaf_584  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" character...
"]
prose_519 -> { raw_585 literal_586 raw_587}
{rank=same; raw_585 literal_586 raw_587}

raw_585 [label="raw"]

literal_586 [label="literal"]

raw_587 [label="raw"]


raw_585 -> leaf_588
leaf_588  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In general, prose is more 'active'  than in Babel. There are more things
you can't say without triggering a parsed data structure.  Due to quirks
of Org  involving string  escaping, "]
literal_586 -> leaf_589
leaf_589  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`\\\"\\\"`"]
raw_587 -> leaf_590
leaf_590  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  can't be  literally quoted
without repercussions. Check  out the source if you enjoy pounding your
head in frustration at the nastiness of escaped strings.
"]
prose_520 -> { raw_591}
{rank=same; raw_591}

raw_591 [label="raw"]


raw_591 -> leaf_592
leaf_592  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Let's just use a code block:
"]
structure_521 -> { hashline_593}
{rank=same; hashline_593}

hashline_593 [label="hashline"]


hashline_593 -> { hashtag_594}
{rank=same; hashtag_594}

hashtag_594 [label="hashtag"]


hashtag_594 -> leaf_595
leaf_595  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_522 -> { raw_596 literal_597 raw_598}
{rank=same; raw_596 literal_597 raw_598}

raw_596 [label="raw"]

literal_597 [label="literal"]

raw_598 [label="raw"]


raw_596 -> leaf_599
leaf_599  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
one, of the \" character. This is pretty-printed in edit mode as "]
literal_597 -> leaf_600
leaf_600  [color=Gray,shape=rectangle,fontname=Inconsolata,label="‟literal”"]
raw_598 -> leaf_601
leaf_601  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
but such a string does *not* create escaping, we rely on semantic highlighting
to make the distinction clear.
"]
prose_523 -> { raw_602}
{rank=same; raw_602}

raw_602 [label="raw"]


raw_602 -> leaf_603
leaf_603  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Any number of \"\"\"\" collapse into one set of such balanced quites.
"]
prose_524 -> { raw_604}
{rank=same; raw_604}

raw_604 [label="raw"]


raw_604 -> leaf_605
leaf_605  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the woven documentation, no quotation marks appear, just the string.
"]
section_525 -> { header_606 prose_607}
{rank=same; header_606 prose_607}

header_606 [label="4 : Latex"]

prose_607 [label="prose"]


header_606 -> leaf_608
leaf_608  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Latex"]
prose_607 -> { raw_609 literal_610 raw_611}
{rank=same; raw_609 literal_610 raw_611}

raw_609 [label="raw"]

literal_610 [label="literal"]

raw_611 [label="raw"]


raw_609 -> leaf_612
leaf_612  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

For further markup purposes in a prose context, we escape to LaTeX. The
syntax is "]
literal_610 -> leaf_613
leaf_613  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`\\latex`"]
raw_611 -> leaf_614
leaf_614  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", where the backslash causes us to use LaTeX instead
of Lua. Our TeX backend is LuaTeX, giving arbitrary levels of control from
within a Grimoire-native language.
"]
section_459 -> { header_615 prose_616 prose_617 prose_618}
{rank=same; header_615 prose_616 prose_617 prose_618}

header_615 [label="3 : Comments"]

prose_616 [label="prose"]

prose_617 [label="prose"]

prose_618 [label="prose"]


header_615 -> leaf_619
leaf_619  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Comments"]
prose_616 -> { raw_620 literal_621 raw_622}
{rank=same; raw_620 literal_621 raw_622}

raw_620 [label="raw"]

literal_621 [label="literal"]

raw_622 [label="raw"]


raw_620 -> leaf_623
leaf_623  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

In a structure context, you may place line comments. These begin with "]
literal_621 -> leaf_624
leaf_624  [color=Gray,shape=rectangle,fontname=Inconsolata,label="--"]
raw_622 -> leaf_625
leaf_625  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
and continue to the end of a line.
"]
prose_617 -> { raw_626}
{rank=same; raw_626}

raw_626 [label="raw"]


raw_626 -> leaf_627
leaf_627  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Commenting out a header line, or anything else, causes it to be ignored.
It does *not* result in any subdata being commented out, though it will
in the case of a headline change the ownership of the owned blocks.
"]
prose_618 -> { raw_628 literal_629 raw_630}
{rank=same; raw_628 literal_629 raw_630}

raw_628 [label="raw"]

literal_629 [label="literal"]

raw_630 [label="raw"]


raw_628 -> leaf_631
leaf_631  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The  tag "]
literal_629 -> leaf_632
leaf_632  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#comment"]
raw_630 -> leaf_633
leaf_633  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  in a  valid tag  content position  marks the  owned
region  of  the tagged  block  as  a  comment.  Nothing within  will  be
evaluated or exported, though it will be parsed.
"]
section_460 -> { header_634 prose_635 prose_636 prose_637 prose_638 prose_639 prose_640 prose_641 prose_642 prose_643 prose_644 prose_645 prose_646 prose_647 prose_648 prose_649 prose_650 section_651}
{rank=same; header_634 prose_635 prose_636 prose_637 prose_638 prose_639 prose_640 prose_641 prose_642 prose_643 prose_644 prose_645 prose_646 prose_647 prose_648 prose_649 prose_650 section_651}

header_634 [label="3 : Marks"]

prose_635 [label="prose"]

prose_636 [label="prose"]

prose_637 [label="prose"]

prose_638 [label="prose"]

prose_639 [label="prose"]

prose_640 [label="prose"]

prose_641 [label="prose"]

prose_642 [label="prose"]

prose_643 [label="prose"]

prose_644 [label="prose"]

prose_645 [label="prose"]

prose_646 [label="prose"]

prose_647 [label="prose"]

prose_648 [label="prose"]

prose_649 [label="prose"]

prose_650 [label="prose"]

section_651 [label="section: 559-566"]


header_634 -> leaf_652
leaf_652  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Marks"]
prose_635 -> { raw_653}
{rank=same; raw_653}

raw_653 [label="raw"]


raw_653 -> leaf_654
leaf_654  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Marks provide global semantic categories for Grimoire. They may appear
anywhere, including a prose context, whitespace is required on both sides.
"]
prose_636 -> { raw_655 literal_656 raw_657 literal_658 raw_659}
{rank=same; raw_655 literal_656 raw_657 literal_658 raw_659}

raw_655 [label="raw"]

literal_656 [label="literal"]

raw_657 [label="raw"]

literal_658 [label="literal"]

raw_659 [label="raw"]


raw_655 -> leaf_660
leaf_660  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We use  a couple kinds  of marks:  "]
literal_656 -> leaf_661
leaf_661  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@names"]
raw_657 -> leaf_662
leaf_662  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" name things,  and "]
literal_658 -> leaf_663
leaf_663  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#tags"]
raw_659 -> leaf_664
leaf_664  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
categorize them. Tags are semantics, while names are nominal. 
"]
prose_637 -> { raw_665 literal_666 raw_667 literal_668 raw_669}
{rank=same; raw_665 literal_666 raw_667 literal_668 raw_669}

raw_665 [label="raw"]

literal_666 [label="literal"]

raw_667 [label="raw"]

literal_668 [label="literal"]

raw_669 [label="raw"]


raw_665 -> leaf_670
leaf_670  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags that  are boundaries are  paired as  "]
literal_666 -> leaf_671
leaf_671  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#tag"]
raw_667 -> leaf_672
leaf_672  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
literal_668 -> leaf_673
leaf_673  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#/tag"]
raw_669 -> leaf_674
leaf_674  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",  plus some
light sugaring. Names are never bounded
"]
prose_638 -> { raw_675}
{rank=same; raw_675}

raw_675 [label="raw"]


raw_675 -> leaf_676
leaf_676  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Marks in the first position own the following line. If there is indentation
below that line, they own that too. This doesn't affect the associativity.
"]
prose_639 -> { raw_677 literal_678 raw_679 literal_680 raw_681}
{rank=same; raw_677 literal_678 raw_679 literal_680 raw_681}

raw_677 [label="raw"]

literal_678 [label="literal"]

raw_679 [label="raw"]

literal_680 [label="literal"]

raw_681 [label="raw"]


raw_677 -> leaf_682
leaf_682  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Marks may be namespaced, as "]
literal_678 -> leaf_683
leaf_683  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@name.subname"]
raw_679 -> leaf_684
leaf_684  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or "]
literal_680 -> leaf_685
leaf_685  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#tag.sub-tag.sub-tag"]
raw_681 -> leaf_686
leaf_686  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_640 -> { raw_687 literal_688 raw_689 literal_690 raw_691}
{rank=same; raw_687 literal_688 raw_689 literal_690 raw_691}

raw_687 [label="raw"]

literal_688 [label="literal"]

raw_689 [label="raw"]

literal_690 [label="literal"]

raw_691 [label="raw"]


raw_687 -> leaf_692
leaf_692  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If  you  require   further  namespacing,  "]
literal_688 -> leaf_693
leaf_693  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@many/levels/java.class"]
raw_689 -> leaf_694
leaf_694  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  and"]
literal_690 -> leaf_695
leaf_695  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#mojo/nation.space/station"]
raw_691 -> leaf_696
leaf_696  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  is your  friend. Codices (that is, projects
following the bridge conventions for organization) will use namespacing
in a consistent way. 
"]
prose_641 -> { raw_697 literal_698 raw_699}
{rank=same; raw_697 literal_698 raw_699}

raw_697 [label="raw"]

literal_698 [label="literal"]

raw_699 [label="raw"]


raw_697 -> leaf_700
leaf_700  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
As I continue to muse on it, I  can think of no reason why marks couldn't follow
URI syntax,  or at  least mirror  it closely.  Chaining marks  is not  valid, so"]
literal_698 -> leaf_701
leaf_701  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@named@example.com"]
raw_699 -> leaf_702
leaf_702  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" could be a valid name. 
"]
prose_642 -> { raw_703 literal_704 raw_705}
{rank=same; raw_703 literal_704 raw_705}

raw_703 [label="raw"]

literal_704 [label="literal"]

raw_705 [label="raw"]


raw_703 -> leaf_706
leaf_706  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This would mean we could say something like "]
literal_704 -> leaf_707
leaf_707  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@file://~/usr/blah"]
raw_705 -> leaf_708
leaf_708  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_643 -> { raw_709 literal_710 raw_711}
{rank=same; raw_709 literal_710 raw_711}

raw_709 [label="raw"]

literal_710 [label="literal"]

raw_711 [label="raw"]


raw_709 -> leaf_712
leaf_712  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Or "]
literal_710 -> leaf_713
leaf_713  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!/usr/bin/perl/"]
raw_711 -> leaf_714
leaf_714  [color=Gray,shape=rectangle,fontname=Inconsolata,label="...
"]
prose_644 -> { raw_715}
{rank=same; raw_715}

raw_715 [label="raw"]


raw_715 -> leaf_716
leaf_716  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Yes. This  is a good idea.  Let's do this.  It doesn't displace [[*Links][link]]  syntax, it
enhances it. A  URI [[http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax][may not begin with  a slash]] so this is  parse-clean for tags
and names both. Tags aren't intended to  be user extensible in the narrow sense,
but uniformity is a virtue.
"]
prose_645 -> { raw_717}
{rank=same; raw_717}

raw_717 [label="raw"]


raw_717 -> leaf_718
leaf_718  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't know why you might want to stick a query in a tag. It's not my
place to know. We just slap a parser on that puppy and continue.
"]
prose_646 -> { raw_719}
{rank=same; raw_719}

raw_719 [label="raw"]


raw_719 -> leaf_720
leaf_720  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Implication: The hash or at should be syntax highlighted a different color
from the tag. I'd say hash and at get the same color, with categories and
symbols getting different ones.
"]
prose_647 -> { raw_721}
{rank=same; raw_721}

raw_721 [label="raw"]


raw_721 -> leaf_722
leaf_722  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Apparently, [[http://blog.nig.gl/post/48802013022/although-parentheses-are-technically-allowed-in][parentheses are allowed in URLs]], but follow the link, they
suck and you should never use them. They play badly with our calling
convention for named structures, and aren't allowed in our schema.
"]
prose_648 -> { raw_723 literal_724 raw_725}
{rank=same; raw_723 literal_724 raw_725}

raw_723 [label="raw"]

literal_724 [label="literal"]

raw_725 [label="raw"]


raw_723 -> leaf_726
leaf_726  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not a real URI anyway, or it can be but it's also allowed to be a legal
fragment without the handle. In our case the assumed handle is "]
literal_724 -> leaf_727
leaf_727  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grimoire://"]
raw_725 -> leaf_728
leaf_728  [color=Gray,shape=rectangle,fontname=Inconsolata,label="?
"]
prose_649 -> { raw_729}
{rank=same; raw_729}

raw_729 [label="raw"]


raw_729 -> leaf_730
leaf_730  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Not a real URI. But an acceptable fake one.
"]
prose_650 -> { raw_731 literal_732 raw_733 literal_734 raw_735}
{rank=same; raw_731 literal_732 raw_733 literal_734 raw_735}

raw_731 [label="raw"]

literal_732 [label="literal"]

raw_733 [label="raw"]

literal_734 [label="literal"]

raw_735 [label="raw"]


raw_731 -> leaf_736
leaf_736  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The actual rule for a mark is that it begins with "]
literal_732 -> leaf_737
leaf_737  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@"]
raw_733 -> leaf_738
leaf_738  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or "]
literal_734 -> leaf_739
leaf_739  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#"]
raw_735 -> leaf_740
leaf_740  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and is surrounded
by whitespace. Internal parsing of the mark is part of recognition, anything 
not recognized is subsequently ignored. It's still considered a mark for e.g. 
weaving purposes. 


"]
section_651 -> { header_741 prose_742 prose_743}
{rank=same; header_741 prose_742 prose_743}

header_741 [label="4 : Plural Hashtags"]

prose_742 [label="prose"]

prose_743 [label="prose"]


header_741 -> leaf_744
leaf_744  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Plural Hashtags"]
prose_742 -> { raw_745 literal_746 raw_747 literal_748 raw_749}
{rank=same; raw_745 literal_746 raw_747 literal_748 raw_749}

raw_745 [label="raw"]

literal_746 [label="literal"]

raw_747 [label="raw"]

literal_748 [label="literal"]

raw_749 [label="raw"]


raw_745 -> leaf_750
leaf_750  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

In some cases, such as "]
literal_746 -> leaf_751
leaf_751  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#formula"]
raw_747 -> leaf_752
leaf_752  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
literal_748 -> leaf_753
leaf_753  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#formulas"]
raw_749 -> leaf_754
leaf_754  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", a tag may have a
singular or plural form. These are equivalent from the runtimes perspective.
"]
prose_743 -> { raw_755 literal_756 raw_757 literal_758 raw_759}
{rank=same; raw_755 literal_756 raw_757 literal_758 raw_759}

raw_755 [label="raw"]

literal_756 [label="literal"]

raw_757 [label="raw"]

literal_758 [label="literal"]

raw_759 [label="raw"]


raw_755 -> leaf_760
leaf_760  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The same concept applies to pairs such as "]
literal_756 -> leaf_761
leaf_761  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#export"]
raw_757 -> leaf_762
leaf_762  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
literal_758 -> leaf_763
leaf_763  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#exports"]
raw_759 -> leaf_764
leaf_764  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", though
the linguistic distinction is not that of plurality.
"]
section_461 -> { header_765 prose_766 prose_767 prose_768 prose_769 prose_770 prose_771}
{rank=same; header_765 prose_766 prose_767 prose_768 prose_769 prose_770 prose_771}

header_765 [label="3 : Classes"]

prose_766 [label="prose"]

prose_767 [label="prose"]

prose_768 [label="prose"]

prose_769 [label="prose"]

prose_770 [label="prose"]

prose_771 [label="prose"]


header_765 -> leaf_772
leaf_772  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Classes"]
prose_766 -> { raw_773}
{rank=same; raw_773}

raw_773 [label="raw"]


raw_773 -> leaf_774
leaf_774  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Tags are for Grimoire. A category provides runtime semantics,
cooperating with structure groups to provide the API. Names
play the role of a value in languages which provide a
value-variable distinction: every name within a documents reachable
namespace must be globally unique.
"]
prose_767 -> { raw_775}
{rank=same; raw_775}

raw_775 [label="raw"]


raw_775 -> leaf_776
leaf_776  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Specifically names are globally hyperstatic: any redefinition affects
the referent from the moment the parser receives it forward. Redefinitions
are warned against and have no utility, don't do it.
"]
prose_768 -> { raw_777}
{rank=same; raw_777}

raw_777 [label="raw"]


raw_777 -> leaf_778
leaf_778  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Classes are roughly equivalent to categories/hashtags, but
for the user. They have a light semantics similar to their
function in Org.
"]
prose_769 -> { raw_779 literal_780 raw_781 literal_782 raw_783 literal_784 raw_785}
{rank=same; raw_779 literal_780 raw_781 literal_782 raw_783 literal_784 raw_785}

raw_779 [label="raw"]

literal_780 [label="literal"]

raw_781 [label="raw"]

literal_782 [label="literal"]

raw_783 [label="raw"]

literal_784 [label="literal"]

raw_785 [label="raw"]


raw_779 -> leaf_786
leaf_786  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A class is defined as "]
literal_780 -> leaf_787
leaf_787  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":Class:"]
raw_781 -> leaf_788
leaf_788  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or "]
literal_782 -> leaf_789
leaf_789  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":class:"]
raw_783 -> leaf_790
leaf_790  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" including"]
literal_784 -> leaf_791
leaf_791  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":several:Classes:chained:"]
raw_785 -> leaf_792
leaf_792  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_770 -> { raw_793}
{rank=same; raw_793}

raw_793 [label="raw"]


raw_793 -> leaf_794
leaf_794  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A capital letter means the class inherits onto all subgroups of the block,
a miniscule means the class is associated with the indentation level it is
found within.
"]
prose_771 -> { raw_795}
{rank=same; raw_795}

raw_795 [label="raw"]


raw_795 -> leaf_796
leaf_796  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You know you're programming a computer when class and category have distinct
semantics. At least there are no objects, and only two primitive types,
structure and prose.
"]
section_462 -> { header_797 prose_798 prose_799 structure_800 prose_801 prose_802}
{rank=same; header_797 prose_798 prose_799 structure_800 prose_801 prose_802}

header_797 [label="3 : Links"]

prose_798 [label="prose"]

prose_799 [label="prose"]

structure_800 [label="structure"]

prose_801 [label="prose"]

prose_802 [label="prose"]


header_797 -> leaf_803
leaf_803  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Links"]
prose_798 -> { raw_804}
{rank=same; raw_804}

raw_804 [label="raw"]


raw_804 -> leaf_805
leaf_805  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

There's nothing at all wrong with the syntax or behavior of Babel links.
"]
prose_799 -> { raw_806}
{rank=same; raw_806}

raw_806 [label="raw"]


raw_806 -> leaf_807
leaf_807  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which look like this:
"]
structure_800 -> { hashline_808}
{rank=same; hashline_808}

hashline_808 [label="hashline"]


hashline_808 -> { hashtag_809}
{rank=same; hashtag_809}

hashtag_809 [label="hashtag"]


hashtag_809 -> leaf_810
leaf_810  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_801 -> { raw_811 literal_812 raw_813}
{rank=same; raw_811 literal_812 raw_813}

raw_811 [label="raw"]

literal_812 [label="literal"]

raw_813 [label="raw"]


raw_811 -> leaf_814
leaf_814  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We won't support legacy forms of footnoting, such as "]
literal_812 -> leaf_815
leaf_815  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[1]"]
raw_813 -> leaf_816
leaf_816  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". This applies
to legacy versions of table formulas and list syntax also.
"]
prose_802 -> { raw_817}
{rank=same; raw_817}

raw_817 [label="raw"]


raw_817 -> leaf_818
leaf_818  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In Grimoire  there's one way  to do things.  At least, we  avoid variant
syntax with identical semantics.
"]
section_463 -> { header_819 prose_820 prose_821 prose_822 prose_823 prose_824 structure_825 prose_826 prose_827 prose_828 prose_829 prose_830 prose_831 prose_832 prose_833 section_834}
{rank=same; header_819 prose_820 prose_821 prose_822 prose_823 prose_824 structure_825 prose_826 prose_827 prose_828 prose_829 prose_830 prose_831 prose_832 prose_833 section_834}

header_819 [label="3 : Cookies"]

prose_820 [label="prose"]

prose_821 [label="prose"]

prose_822 [label="prose"]

prose_823 [label="prose"]

prose_824 [label="prose"]

structure_825 [label="structure"]

prose_826 [label="prose"]

prose_827 [label="prose"]

prose_828 [label="prose"]

prose_829 [label="prose"]

prose_830 [label="prose"]

prose_831 [label="prose"]

prose_832 [label="prose"]

prose_833 [label="prose"]

section_834 [label="section: 673-690"]


header_819 -> leaf_835
leaf_835  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Cookies"]
prose_820 -> { raw_836 literal_837 raw_838}
{rank=same; raw_836 literal_837 raw_838}

raw_836 [label="raw"]

literal_837 [label="literal"]

raw_838 [label="raw"]


raw_836 -> leaf_839
leaf_839  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

List line contexts (header lines and list lines) may have cookies. A
cookie looks like "]
literal_837 -> leaf_840
leaf_840  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[ ]"]
raw_838 -> leaf_841
leaf_841  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", it must have contents and a space on both sides.
"]
prose_821 -> { raw_842}
{rank=same; raw_842}

raw_842 [label="raw"]


raw_842 -> leaf_843
leaf_843  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies are valid after the symbol that defines the list line, but before
anything else. They are also valid at the end of a list line, in which
case they are preceded by a space and followed by a newline.
"]
prose_822 -> { raw_844}
{rank=same; raw_844}

raw_844 [label="raw"]


raw_844 -> leaf_845
leaf_845  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies are distinctive in that they may only be applied to list lines.
Most other token-like groups, specifically tags, classes, and inline drawers,
may be embedded into all prose contexts excepting literal strings.
"]
prose_823 -> { raw_846}
{rank=same; raw_846}

raw_846 [label="raw"]


raw_846 -> leaf_847
leaf_847  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies are used similarly to cookies in Org, but with consistent semantics.
A simple cookie set is \"X\" and \" \", the user cycles through them. TODO and
DONE are another option.
"]
prose_824 -> { raw_848}
{rank=same; raw_848}

raw_848 [label="raw"]


raw_848 -> leaf_849
leaf_849  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't want cookies to turn into lightweight tables. Still, saying to
the user \"you may have precisely two cookies a line\" is restrictive.
It's not a violation of the [[http://c2.com/cgi/wiki?TwoIsAnImpossibleNumber][\"Two is an Impossible Number\"]] principle,
because they're head and tail. I think this is ugly:
"]
structure_825 -> { hashline_850}
{rank=same; hashline_850}

hashline_850 [label="hashline"]


hashline_850 -> { hashtag_851}
{rank=same; hashtag_851}

hashtag_851 [label="hashtag"]


hashtag_851 -> leaf_852
leaf_852  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_826 -> { raw_853}
{rank=same; raw_853}

raw_853 [label="raw"]


raw_853 -> leaf_854
leaf_854  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You can stick a table in a list. I don't know if I mentioned, it's kind
of an obvious thing, I'll write a unit for it at some point.
"]
prose_827 -> { raw_855}
{rank=same; raw_855}

raw_855 [label="raw"]


raw_855 -> leaf_856
leaf_856  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Still. I can see a case for two on the left. Once you allow two, you allow
n, without excellent reason.
"]
prose_828 -> { raw_857}
{rank=same; raw_857}

raw_857 [label="raw"]


raw_857 -> leaf_858
leaf_858  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[[*Radio%20cookies][Radio cookies]] must be the leftmost cookie on a line, only one is of course allowed.
I could allow a single-line short form multi-radio-button interface but what
is it, a fancy text slider for some value? No. Any number of ordinary cookies
can follow. Knock yourself out.
"]
prose_829 -> { raw_859}
{rank=same; raw_859}

raw_859 [label="raw"]


raw_859 -> leaf_860
leaf_860  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Anything more than a couple and one should consider a class or a table.
Handrolling data structures is perverse in a markup language, and I'm
still tempted to forbid it.
"]
prose_830 -> { raw_861 literal_862 raw_863 literal_864 raw_865}
{rank=same; raw_861 literal_862 raw_863 literal_864 raw_865}

raw_861 [label="raw"]

literal_862 [label="literal"]

raw_863 [label="raw"]

literal_864 [label="literal"]

raw_865 [label="raw"]


raw_861 -> leaf_866
leaf_866  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't like distinctions without difference. A cookie at the end of a
line is filled by Grimoire, not the user. This mirrors Org's use, which is
to display either a percent or a n/m marker for completion of list items.
The user seeds the cookie, in these cases with "]
literal_862 -> leaf_867
leaf_867  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%"]
raw_863 -> leaf_868
leaf_868  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or "]
literal_864 -> leaf_869
leaf_869  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/"]
raw_865 -> leaf_870
leaf_870  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and the runtime
does the rest.
"]
prose_831 -> { raw_871}
{rank=same; raw_871}

raw_871 [label="raw"]


raw_871 -> leaf_872
leaf_872  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Adding more than one such structure to the tail list would complicate the
reference syntax, which I haven't designed, and again, it's just not necessary.
Grimoire can fill in any data structure, \"n-dimensional end cookie array\"
isn't one we have a compelling need for.
"]
prose_832 -> { raw_873}
{rank=same; raw_873}

raw_873 [label="raw"]


raw_873 -> leaf_874
leaf_874  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies could interact badly with link syntax. I don't think a [bare box]
qualifies as a link in Org, clearly it doesn't, we can follow that notion
and disallow \"[]\" as a filling for cookies.
"]
prose_833 -> { raw_875}
{rank=same; raw_875}

raw_875 [label="raw"]


raw_875 -> leaf_876
leaf_876  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I also think they should be allowed in table cells, which have their own
context which is mostly handwaved right now but is prose++.
"]
section_834 -> { header_877 prose_878 prose_879 prose_880 prose_881}
{rank=same; header_877 prose_878 prose_879 prose_880 prose_881}

header_877 [label="4 : Radio cookies"]

prose_878 [label="prose"]

prose_879 [label="prose"]

prose_880 [label="prose"]

prose_881 [label="prose"]


header_877 -> leaf_882
leaf_882  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Radio cookies"]
prose_878 -> { raw_883 literal_884 raw_885}
{rank=same; raw_883 literal_884 raw_885}

raw_883 [label="raw"]

literal_884 [label="literal"]

raw_885 [label="raw"]


raw_883 -> leaf_886
leaf_886  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We have one 'weird cookie'. A radio cookie, which looks like "]
literal_884 -> leaf_887
leaf_887  [color=Gray,shape=rectangle,fontname=Inconsolata,label="( )"]
raw_885 -> leaf_888
leaf_888  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
must be present at the head position of list line contexts. All
list lines at the same level of indentation must have one, if one does.
"]
prose_879 -> { raw_889}
{rank=same; raw_889}

raw_889 [label="raw"]


raw_889 -> leaf_890
leaf_890  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Only one is selected at any given time. These would be awkward to add
into tables, to little gain.
"]
prose_880 -> { raw_891}
{rank=same; raw_891}

raw_891 [label="raw"]


raw_891 -> leaf_892
leaf_892  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This comes perilously close to pushing us into the realm of error.
The formatter adds buttons to an entire subtree if one member has it,
and if more than one is ticked off, it warns if possible or removes
all but the first mark encountered. If none are present the first
option is selected.
"]
prose_881 -> { raw_893}
{rank=same; raw_893}

raw_893 [label="raw"]


raw_893 -> leaf_894
leaf_894  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The runtime will not normally build an invalid radio list, but
Grimoire must import plain text.
"]
section_464 -> { header_895 prose_896 structure_897 prose_898 prose_899 prose_900 structure_901 prose_902 prose_903 prose_904}
{rank=same; header_895 prose_896 structure_897 prose_898 prose_899 prose_900 structure_901 prose_902 prose_903 prose_904}

header_895 [label="3 : Drawers"]

prose_896 [label="prose"]

structure_897 [label="structure"]

prose_898 [label="prose"]

prose_899 [label="prose"]

prose_900 [label="prose"]

structure_901 [label="structure"]

prose_902 [label="prose"]

prose_903 [label="prose"]

prose_904 [label="prose"]


header_895 -> leaf_905
leaf_905  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Drawers"]
prose_896 -> { raw_906}
{rank=same; raw_906}

raw_906 [label="raw"]


raw_906 -> leaf_907
leaf_907  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A drawer is a block that's hidden by default. The computer sees it,
the user sees ⦿, or a similar rune.
"]
structure_897 -> { hashline_908}
{rank=same; hashline_908}

hashline_908 [label="hashline"]


hashline_908 -> { hashtag_909}
{rank=same; hashtag_909}

hashtag_909 [label="hashtag"]


hashtag_909 -> leaf_910
leaf_910  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_898 -> { raw_911}
{rank=same; raw_911}

raw_911 [label="raw"]


raw_911 -> leaf_912
leaf_912  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
without opening it. Deleting into an ordinary fold marker opens the fold,
deleting towards a drawer marker skips past it.
"]
prose_899 -> { raw_913 literal_914 raw_915 literal_916 raw_917 literal_918 raw_919 literal_920 raw_921}
{rank=same; raw_913 literal_914 raw_915 literal_916 raw_917 literal_918 raw_919 literal_920 raw_921}

raw_913 [label="raw"]

literal_914 [label="literal"]

raw_915 [label="raw"]

literal_916 [label="literal"]

raw_917 [label="raw"]

literal_918 [label="literal"]

raw_919 [label="raw"]

literal_920 [label="literal"]

raw_921 [label="raw"]


raw_913 -> leaf_922
leaf_922  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
literal_914 -> leaf_923
leaf_923  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a-drawer"]
raw_915 -> leaf_924
leaf_924  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  is  a type,  not  a  name, something  like  "]
literal_916 -> leaf_925
leaf_925  [color=Gray,shape=rectangle,fontname=Inconsolata,label="weave"]
raw_917 -> leaf_926
leaf_926  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  or "]
literal_918 -> leaf_927
leaf_927  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tangle"]
raw_919 -> leaf_928
leaf_928  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  in
practice. This may or  may not be supported with a "]
literal_920 -> leaf_929
leaf_929  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#weave"]
raw_921 -> leaf_930
leaf_930  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  tag. 
"]
prose_900 -> { raw_931}
{rank=same; raw_931}

raw_931 [label="raw"]


raw_931 -> leaf_932
leaf_932  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm not entirely sure how to interact names with drawers, perhaps like this:
"]
structure_901 -> { hashline_933}
{rank=same; hashline_933}

hashline_933 [label="hashline"]


hashline_933 -> { hashtag_934}
{rank=same; hashtag_934}

hashtag_934 [label="hashtag"]


hashtag_934 -> leaf_935
leaf_935  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_902 -> { raw_936}
{rank=same; raw_936}

raw_936 [label="raw"]


raw_936 -> leaf_937
leaf_937  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
should keep it closed unless it's  open, those are the only additional semantics
associated.
"]
prose_903 -> { raw_938}
{rank=same; raw_938}

raw_938 [label="raw"]


raw_938 -> leaf_939
leaf_939  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This lets master wizards embed unobtrusive magic into documents for apprentice
wizards to spell with.
"]
prose_904 -> { raw_940 literal_941 raw_942}
{rank=same; raw_940 literal_941 raw_942}

raw_940 [label="raw"]

literal_941 [label="literal"]

raw_942 [label="raw"]


raw_940 -> leaf_943
leaf_943  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An inline drawer looks like "]
literal_941 -> leaf_944
leaf_944  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[[some contents]]:"]
raw_942 -> leaf_945
leaf_945  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  As usual when we say \"inline\" it
can be as long as you want. Being anonymous, because untagged, the only semantics
of such a drawer are to hide the contents in source mode. 
"]
section_465 -> { header_946 prose_947 prose_948 prose_949 structure_950 section_951}
{rank=same; header_946 prose_947 prose_948 prose_949 structure_950 section_951}

header_946 [label="3 : Runes"]

prose_947 [label="prose"]

prose_948 [label="prose"]

prose_949 [label="prose"]

structure_950 [label="structure"]

section_951 [label="section: 742-742"]


header_946 -> leaf_952
leaf_952  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Runes"]
prose_947 -> { raw_953}
{rank=same; raw_953}

raw_953 [label="raw"]


raw_953 -> leaf_954
leaf_954  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

After drawers is as good a place to put runes as any.
"]
prose_948 -> { raw_955}
{rank=same; raw_955}

raw_955 [label="raw"]


raw_955 -> leaf_956
leaf_956  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Runes are characters drawn from the pictographic zones of Unicode,
which describe semantic activity within a document.
"]
prose_949 -> { raw_957}
{rank=same; raw_957}

raw_957 [label="raw"]


raw_957 -> leaf_958
leaf_958  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Contra Org, when we have something like the aformentioned:
"]
structure_950 -> { hashline_959}
{rank=same; hashline_959}

hashline_959 [label="hashline"]


hashline_959 -> { hashtag_960}
{rank=same; hashtag_960}

hashtag_960 [label="hashtag"]


hashtag_960 -> leaf_961
leaf_961  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_951 -> { header_962 prose_963 section_964}
{rank=same; header_962 prose_963 section_964}

header_962 [label="1 : Top Header ▼"]

prose_963 [label="prose"]

section_964 [label="section: 743-924"]


header_962 -> leaf_965
leaf_965  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Top Header ▼"]
prose_963 -> { raw_966}
{rank=same; raw_966}

raw_966 [label="raw"]


raw_966 -> leaf_967
leaf_967  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_964 -> { header_968 structure_969 prose_970 prose_971 prose_972 prose_973 prose_974 prose_975 prose_976 section_977 section_978 section_979 section_980 section_981}
{rank=same; header_968 structure_969 prose_970 prose_971 prose_972 prose_973 prose_974 prose_975 prose_976 section_977 section_978 section_979 section_980 section_981}

header_968 [label="2 : Second Header ►"]

structure_969 [label="structure"]

prose_970 [label="prose"]

prose_971 [label="prose"]

prose_972 [label="prose"]

prose_973 [label="prose"]

prose_974 [label="prose"]

prose_975 [label="prose"]

prose_976 [label="prose"]

section_977 [label="section: 772-822"]

section_978 [label="section: 823-843"]

section_979 [label="section: 844-910"]

section_980 [label="section: 911-924"]

section_981 [label="section: 925-963"]


header_968 -> leaf_982
leaf_982  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   ** Second Header ►"]
structure_969 -> { hashline_983}
{rank=same; hashline_983}

hashline_983 [label="hashline"]


hashline_983 -> { hashtag_984}
{rank=same; hashtag_984}

hashtag_984 [label="hashtag"]


hashtag_984 -> leaf_985
leaf_985  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_970 -> { raw_986}
{rank=same; raw_986}

raw_986 [label="raw"]


raw_986 -> leaf_987
leaf_987  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
any transformation we may take. If you load up last Wednesday's
version of something, it will be in last Wednesday's fold state.
"]
prose_971 -> { raw_988}
{rank=same; raw_988}

raw_988 [label="raw"]


raw_988 -> leaf_989
leaf_989  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This lets us have richer folding semantics, like \"don't unfold when
cycling\". It lets us have richer drawer semantics, and so on.
"]
prose_972 -> { raw_990}
{rank=same; raw_990}

raw_990 [label="raw"]


raw_990 -> leaf_991
leaf_991  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We will reserve a number of characters for this purpose, at least
"]
prose_973 -> { raw_992}
{rank=same; raw_992}

raw_992 [label="raw"]


raw_992 -> leaf_993
leaf_993  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
| ▼ |  ► | ⦿ |
    |
"]
prose_974 -> { raw_994}
{rank=same; raw_994}

raw_994 [label="raw"]


raw_994 -> leaf_995
leaf_995  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's legal to delete runes, like anything else. It's also legal to
insert them manually. Neither of these paradigms is typical;
deleting into a rune may or may not cause it to disappear in
normal edit mode.
"]
prose_975 -> { raw_996}
{rank=same; raw_996}

raw_996 [label="raw"]


raw_996 -> leaf_997
leaf_997  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Runes, like absolutely everything in Grimoire, are prose if encountered
in a context where they aren't valid structure.
"]
prose_976 -> { raw_998}
{rank=same; raw_998}

raw_998 [label="raw"]


raw_998 -> leaf_999
leaf_999  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We will most likely reuse runes inside cookies, though it's just as valid
and quite typical to use normal letters or words.
"]
section_977 -> { header_1000 prose_1001 prose_1002 structure_1003 prose_1004 prose_1005 structure_1006 structure_1007}
{rank=same; header_1000 prose_1001 prose_1002 structure_1003 prose_1004 prose_1005 structure_1006 structure_1007}

header_1000 [label="3 : Lists"]

prose_1001 [label="prose"]

prose_1002 [label="prose"]

structure_1003 [label="structure"]

prose_1004 [label="prose"]

prose_1005 [label="prose"]

structure_1006 [label="structure"]

structure_1007 [label="structure"]


header_1000 -> leaf_1008
leaf_1008  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Lists"]
prose_1001 -> { raw_1009}
{rank=same; raw_1009}

raw_1009 [label="raw"]


raw_1009 -> leaf_1010
leaf_1010  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Something that irks me about Org is basically historic. It was a TODO
list first, and became a heiarchical document editor later. As a result,
the functions that let you tag, track, and so on, are in the wrong place;
an Org file has to choose whether or not it's a task list or a document,
which doesn't fit the metalanguage paradigm cleanly.
"]
prose_1002 -> { raw_1011}
{rank=same; raw_1011}

raw_1011 [label="raw"]


raw_1011 -> leaf_1012
leaf_1012  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A list looks like this:
"]
structure_1003 -> { hashline_1013}
{rank=same; hashline_1013}

hashline_1013 [label="hashline"]


hashline_1013 -> { hashtag_1014}
{rank=same; hashtag_1014}

hashtag_1014 [label="hashtag"]


hashtag_1014 -> leaf_1015
leaf_1015  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1004 -> { raw_1016}
{rank=same; raw_1016}

raw_1016 [label="raw"]


raw_1016 -> leaf_1017
leaf_1017  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
and we have radio buttons.
"]
prose_1005 -> { raw_1018}
{rank=same; raw_1018}

raw_1018 [label="raw"]


raw_1018 -> leaf_1019
leaf_1019  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We also have whitespace lists:
"]
structure_1006 -> { hashline_1020}
{rank=same; hashline_1020}

hashline_1020 [label="hashline"]


hashline_1020 -> { hashtag_1021}
{rank=same; hashtag_1021}

hashtag_1021 [label="hashtag"]


hashtag_1021 -> leaf_1022
leaf_1022  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1007 -> { hashline_1023}
{rank=same; hashline_1023}

hashline_1023 [label="hashline"]


hashline_1023 -> { hashtag_1024}
{rank=same; hashtag_1024}

hashtag_1024 [label="hashtag"]


hashtag_1024 -> leaf_1025
leaf_1025  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_978 -> { header_1026 prose_1027 prose_1028 prose_1029 prose_1030 prose_1031}
{rank=same; header_1026 prose_1027 prose_1028 prose_1029 prose_1030 prose_1031}

header_1026 [label="3 : Embedded Data"]

prose_1027 [label="prose"]

prose_1028 [label="prose"]

prose_1029 [label="prose"]

prose_1030 [label="prose"]

prose_1031 [label="prose"]


header_1026 -> leaf_1032
leaf_1032  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Embedded Data"]
prose_1027 -> { raw_1033 literal_1034 raw_1035 literal_1036 raw_1037 literal_1038 raw_1039 literal_1040 raw_1041 literal_1042 raw_1043}
{rank=same; raw_1033 literal_1034 raw_1035 literal_1036 raw_1037 literal_1038 raw_1039 literal_1040 raw_1041 literal_1042 raw_1043}

raw_1033 [label="raw"]

literal_1034 [label="literal"]

raw_1035 [label="raw"]

literal_1036 [label="literal"]

raw_1037 [label="raw"]

literal_1038 [label="literal"]

raw_1039 [label="raw"]

literal_1040 [label="literal"]

raw_1041 [label="raw"]

literal_1042 [label="literal"]

raw_1043 [label="raw"]


raw_1033 -> leaf_1044
leaf_1044  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Anything found in prose between "]
literal_1034 -> leaf_1045
leaf_1045  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{"]
raw_1035 -> leaf_1046
leaf_1046  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
literal_1036 -> leaf_1047
leaf_1047  [color=Gray,shape=rectangle,fontname=Inconsolata,label="}"]
raw_1037 -> leaf_1048
leaf_1048  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is EDN. Note that the
outermost pair of curlies denotes a boundary. "]
literal_1038 -> leaf_1049
leaf_1049  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{ foo }"]
raw_1039 -> leaf_1050
leaf_1050  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the symbol
foo, "]
literal_1040 -> leaf_1051
leaf_1051  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{ foo bar }"]
raw_1041 -> leaf_1052
leaf_1052  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the symbol *foo* and the symbol *bar*, "]
literal_1042 -> leaf_1053
leaf_1053  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{{foo bar}}"]
raw_1043 -> leaf_1054
leaf_1054  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is
a map with key *foo* and value *bar*.
"]
prose_1028 -> { raw_1055}
{rank=same; raw_1055}

raw_1055 [label="raw"]


raw_1055 -> leaf_1056
leaf_1056  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To quote the [[https://github.com/edn-format/edn][spec]], \"There is no enclosing element at the top level\". The
braces mark the boundaries of the data region.
"]
prose_1029 -> { raw_1057}
{rank=same; raw_1057}

raw_1057 [label="raw"]


raw_1057 -> leaf_1058
leaf_1058  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is a mapping between lists and EDN, the basics of which will be clear
to the astute reader. The non-basics are unclear to the author as well.
"]
prose_1030 -> { raw_1059}
{rank=same; raw_1059}

raw_1059 [label="raw"]


raw_1059 -> leaf_1060
leaf_1060  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Unresolved: may data be inlined into prose? What would that even mean?
slap some colors on it in the document? If we want to provide a 'this is
code but not for interpretation' mark, we will, it won't be EDN specific.
Inlining colorized code is not high on my todo list.
"]
prose_1031 -> { raw_1061}
{rank=same; raw_1061}

raw_1061 [label="raw"]


raw_1061 -> leaf_1062
leaf_1062  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't think you can. Embeds are down here with lists and
tables in 'things you can't inline', for now.
"]
section_979 -> { header_1063 prose_1064 prose_1065 prose_1066 prose_1067 structure_1068 structure_1069 structure_1070 structure_1071 prose_1072 prose_1073 structure_1074 structure_1075 structure_1076 prose_1077 prose_1078 prose_1079}
{rank=same; header_1063 prose_1064 prose_1065 prose_1066 prose_1067 structure_1068 structure_1069 structure_1070 structure_1071 prose_1072 prose_1073 structure_1074 structure_1075 structure_1076 prose_1077 prose_1078 prose_1079}

header_1063 [label="3 : Tables"]

prose_1064 [label="prose"]

prose_1065 [label="prose"]

prose_1066 [label="prose"]

prose_1067 [label="prose"]

structure_1068 [label="structure"]

structure_1069 [label="structure"]

structure_1070 [label="structure"]

structure_1071 [label="structure"]

prose_1072 [label="prose"]

prose_1073 [label="prose"]

structure_1074 [label="structure"]

structure_1075 [label="structure"]

structure_1076 [label="structure"]

prose_1077 [label="prose"]

prose_1078 [label="prose"]

prose_1079 [label="prose"]


header_1063 -> leaf_1080
leaf_1080  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Tables"]
prose_1064 -> { raw_1081}
{rank=same; raw_1081}

raw_1081 [label="raw"]


raw_1081 -> leaf_1082
leaf_1082  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The way tables work in Babel is fine and needs little polish. Any modest
improvements we make will be in the face of considerable experience.
"]
prose_1065 -> { raw_1083}
{rank=same; raw_1083}

raw_1083 [label="raw"]


raw_1083 -> leaf_1084
leaf_1084  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For example, I expect there's a way to make multiple literal rows serve
as a single row in existing Org, but I don't know what it is. I'll be
playing around a lot in the coming weeks, I hope.
"]
prose_1066 -> { raw_1085}
{rank=same; raw_1085}

raw_1085 [label="raw"]


raw_1085 -> leaf_1086
leaf_1086  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Composability being an overarching goal, we can embed anything in a table
that we would put elsewhere.
"]
prose_1067 -> { raw_1087}
{rank=same; raw_1087}

raw_1087 [label="raw"]


raw_1087 -> leaf_1088
leaf_1088  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Looks something like this:
"]
structure_1068 -> { hashline_1089}
{rank=same; hashline_1089}

hashline_1089 [label="hashline"]


hashline_1089 -> { hashtag_1090}
{rank=same; hashtag_1090}

hashtag_1090 [label="hashtag"]


hashtag_1090 -> leaf_1091
leaf_1091  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1069 -> { hashline_1092}
{rank=same; hashline_1092}

hashline_1092 [label="hashline"]


hashline_1092 -> { hashtag_1093}
{rank=same; hashtag_1093}

hashtag_1093 [label="hashtag"]


hashtag_1093 -> leaf_1094
leaf_1094  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1070 -> { hashline_1095}
{rank=same; hashline_1095}

hashline_1095 [label="hashline"]


hashline_1095 -> { hashtag_1096}
{rank=same; hashtag_1096}

hashtag_1096 [label="hashtag"]


hashtag_1096 -> leaf_1097
leaf_1097  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1071 -> { hashline_1098}
{rank=same; hashline_1098}

hashline_1098 [label="hashline"]


hashline_1098 -> { hashtag_1099}
{rank=same; hashtag_1099}

hashtag_1099 [label="hashtag"]


hashtag_1099 -> leaf_1100
leaf_1100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="formulas"]
prose_1072 -> { raw_1101 literal_1102 raw_1103 literal_1104 raw_1105 literal_1106 raw_1107}
{rank=same; raw_1101 literal_1102 raw_1103 literal_1104 raw_1105 literal_1106 raw_1107}

raw_1101 [label="raw"]

literal_1102 [label="literal"]

raw_1103 [label="raw"]

literal_1104 [label="literal"]

raw_1105 [label="raw"]

literal_1106 [label="literal"]

raw_1107 [label="raw"]


raw_1101 -> leaf_1108
leaf_1108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A subtle point of parsing I'm not sure is correct is "]
literal_1102 -> leaf_1109
leaf_1109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#formulas -"]
raw_1103 -> leaf_1110
leaf_1110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
or "]
literal_1104 -> leaf_1111
leaf_1111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="- #formulas"]
raw_1105 -> leaf_1112
leaf_1112  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". I feel like by normal associativity the latter
attaches the tag to the list, then nothing to the tag,
since the rule is a tag preceded only by whitespace owns the line
after it and indentations below it. The tag doesn't affect the indentation level
of the "]
literal_1106 -> leaf_1113
leaf_1113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-"]
raw_1107 -> leaf_1114
leaf_1114  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which could be confusing but won't be.
"]
prose_1073 -> { raw_1115}
{rank=same; raw_1115}

raw_1115 [label="raw"]


raw_1115 -> leaf_1116
leaf_1116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We should be able to tag tables like this:
"]
structure_1074 -> { hashline_1117}
{rank=same; hashline_1117}

hashline_1117 [label="hashline"]


hashline_1117 -> { hashtag_1118}
{rank=same; hashtag_1118}

hashtag_1118 [label="hashtag"]


hashtag_1118 -> leaf_1119
leaf_1119  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1075 -> { hashline_1120}
{rank=same; hashline_1120}

hashline_1120 [label="hashline"]


hashline_1120 -> { hashtag_1121}
{rank=same; hashtag_1121}

hashtag_1121 [label="hashtag"]


hashtag_1121 -> leaf_1122
leaf_1122  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1076 -> { hashline_1123}
{rank=same; hashline_1123}

hashline_1123 [label="hashline"]


hashline_1123 -> { hashtag_1124}
{rank=same; hashtag_1124}

hashtag_1124 [label="hashtag"]


hashtag_1124 -> leaf_1125
leaf_1125  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1077 -> { raw_1126}
{rank=same; raw_1126}

raw_1126 [label="raw"]


raw_1126 -> leaf_1127
leaf_1127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Totally okay in this context, doesn't trigger Nim rules because the table
associates to the tag anyway.
"]
prose_1078 -> { raw_1128}
{rank=same; raw_1128}

raw_1128 [label="raw"]


raw_1128 -> leaf_1129
leaf_1129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This gives us a nice left gutter which I propose we can use in various ways.
"]
prose_1079 -> { raw_1130}
{rank=same; raw_1130}

raw_1130 [label="raw"]


raw_1130 -> leaf_1131
leaf_1131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This section can get much longer. Generalizing how tables work is incredibly
powerful. My dream is to embed APL into Grimoire. Give me an excuse to
finally learn it!
"]
section_980 -> { header_1132 prose_1133 prose_1134 prose_1135 prose_1136 prose_1137}
{rank=same; header_1132 prose_1133 prose_1134 prose_1135 prose_1136 prose_1137}

header_1132 [label="3 : Clocks"]

prose_1133 [label="prose"]

prose_1134 [label="prose"]

prose_1135 [label="prose"]

prose_1136 [label="prose"]

prose_1137 [label="prose"]


header_1132 -> leaf_1138
leaf_1138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Clocks"]
prose_1133 -> { raw_1139}
{rank=same; raw_1139}

raw_1139 [label="raw"]


raw_1139 -> leaf_1140
leaf_1140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I think timestamps are just a drawer you put a timestamp in.
"]
prose_1134 -> { raw_1141}
{rank=same; raw_1141}

raw_1141 [label="raw"]


raw_1141 -> leaf_1142
leaf_1142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That drawer can collapse and look like ⏱.
"]
prose_1135 -> { raw_1143}
{rank=same; raw_1143}

raw_1143 [label="raw"]


raw_1143 -> leaf_1144
leaf_1144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Or we can collapse it into something from the set containing 🕞.
"]
prose_1136 -> { raw_1145}
{rank=same; raw_1145}

raw_1145 [label="raw"]


raw_1145 -> leaf_1146
leaf_1146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which normal Emacs doesn't display. I really need to go Japanese soon.
"]
prose_1137 -> { raw_1147}
{rank=same; raw_1147}

raw_1147 [label="raw"]


raw_1147 -> leaf_1148
leaf_1148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
But it would be just adorable to have a little clock representing the timestamp.
Emoji are quirky but the set contains useful icons, and it's Unicode.
Grimoire supports Unicode.
"]
section_981 -> { header_1149 prose_1150 prose_1151 prose_1152 prose_1153 section_1154 section_1155}
{rank=same; header_1149 prose_1150 prose_1151 prose_1152 prose_1153 section_1154 section_1155}

header_1149 [label="3 : Code"]

prose_1150 [label="prose"]

prose_1151 [label="prose"]

prose_1152 [label="prose"]

prose_1153 [label="prose"]

section_1154 [label="section: 946-963"]

section_1155 [label="section: 964-1084"]


header_1149 -> leaf_1156
leaf_1156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Code"]
prose_1150 -> { raw_1157}
{rank=same; raw_1157}

raw_1157 [label="raw"]


raw_1157 -> leaf_1158
leaf_1158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The place where it all comes together.
"]
prose_1151 -> { raw_1159}
{rank=same; raw_1159}

raw_1159 [label="raw"]


raw_1159 -> leaf_1160
leaf_1160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire has a servant language, Lua by default, but this
is of course configurable. Eventually we'll write Clu,
it's a race to see which project is finished first but they
have common dependencies, surprise, surprise.
"]
prose_1152 -> { raw_1161}
{rank=same; raw_1161}

raw_1161 [label="raw"]


raw_1161 -> leaf_1162
leaf_1162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code and data are yin and yang in Grimoire. Code embedded in
documents is executed in various ways and times; comments within
code blocks are themselves in Grimoire data format, and so on.
"]
prose_1153 -> { raw_1163}
{rank=same; raw_1163}

raw_1163 [label="raw"]


raw_1163 -> leaf_1164
leaf_1164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Given a single language Grimoire text, we can perform a mechanical
figure-ground reversal, such that data blocks become comments and
code blocks become live. We have many more sophisticated weave and
tangle operations, but this is a designed-in property that will prove
handy: sometimes you want to take code, org it up, and then flip it
into a literate context. Upgrade path for existing codebases.

"]
section_1154 -> { header_1165 prose_1166 structure_1167 prose_1168 prose_1169}
{rank=same; header_1165 prose_1166 structure_1167 prose_1168 prose_1169}

header_1165 [label="4 : Inline Code"]

prose_1166 [label="prose"]

structure_1167 [label="structure"]

prose_1168 [label="prose"]

prose_1169 [label="prose"]


header_1165 -> leaf_1170
leaf_1170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Inline Code"]
prose_1166 -> { raw_1171 literal_1172 raw_1173}
{rank=same; raw_1171 literal_1172 raw_1173}

raw_1171 [label="raw"]

literal_1172 [label="literal"]

raw_1173 [label="raw"]


raw_1171 -> leaf_1174
leaf_1174  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Inline code is written "]
literal_1172 -> leaf_1175
leaf_1175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`4 + 5`"]
raw_1173 -> leaf_1176
leaf_1176  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". It executes in something similar to
:function mode in Babel, the call is as though it were wrapped in a function
call that looks like:
"]
structure_1167 -> { hashline_1177}
{rank=same; hashline_1177}

hashline_1177 [label="hashline"]


hashline_1177 -> { hashtag_1178}
{rank=same; hashtag_1178}

hashtag_1178 [label="hashtag"]


hashtag_1178 -> leaf_1179
leaf_1179  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1168 -> { raw_1180}
{rank=same; raw_1180}

raw_1180 [label="raw"]


raw_1180 -> leaf_1181
leaf_1181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
maintaining state between calls.
"]
prose_1169 -> { raw_1182}
{rank=same; raw_1182}

raw_1182 [label="raw"]


raw_1182 -> leaf_1183
leaf_1183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Anything named exists as a data structure in the helper language. This makes it easy to
refer to a block that contains a self-reference, so these are stored in a cycle-safe way.
"]
section_1155 -> { header_1184 prose_1185 prose_1186 structure_1187 structure_1188 prose_1189 structure_1190 structure_1191 prose_1192 codeblock_1193 structure_1194 prose_1195 prose_1196 prose_1197 codeblock_1198 codeblock_1199 codeblock_1200 structure_1201 structure_1202 codeblock_1203 structure_1204 structure_1205 prose_1206 prose_1207 prose_1208 prose_1209 structure_1210 prose_1211 prose_1212 prose_1213 codeblock_1214 section_1215}
{rank=same; header_1184 prose_1185 prose_1186 structure_1187 structure_1188 prose_1189 structure_1190 structure_1191 prose_1192 codeblock_1193 structure_1194 prose_1195 prose_1196 prose_1197 codeblock_1198 codeblock_1199 codeblock_1200 structure_1201 structure_1202 codeblock_1203 structure_1204 structure_1205 prose_1206 prose_1207 prose_1208 prose_1209 structure_1210 prose_1211 prose_1212 prose_1213 codeblock_1214 section_1215}

header_1184 [label="4 : Code Blocks"]

prose_1185 [label="prose"]

prose_1186 [label="prose"]

structure_1187 [label="structure"]

structure_1188 [label="structure"]

prose_1189 [label="prose"]

structure_1190 [label="structure"]

structure_1191 [label="structure"]

prose_1192 [label="prose"]

codeblock_1193 [label="code block 993-995"]

structure_1194 [label="structure"]

prose_1195 [label="prose"]

prose_1196 [label="prose"]

prose_1197 [label="prose"]

codeblock_1198 [label="code block 1009-1011"]

codeblock_1199 [label="code block 1017-1019"]

codeblock_1200 [label="code block 1023-1025"]

structure_1201 [label="structure"]

structure_1202 [label="structure"]

codeblock_1203 [label="code block 1033-1035"]

structure_1204 [label="structure"]

structure_1205 [label="structure"]

prose_1206 [label="prose"]

prose_1207 [label="prose"]

prose_1208 [label="prose"]

prose_1209 [label="prose"]

structure_1210 [label="structure"]

prose_1211 [label="prose"]

prose_1212 [label="prose"]

prose_1213 [label="prose"]

codeblock_1214 [label="code block 1078-1080"]

section_1215 [label="section: 1085-1155"]


header_1184 -> leaf_1216
leaf_1216  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Code Blocks"]
prose_1185 -> { raw_1217 literal_1218 raw_1219}
{rank=same; raw_1217 literal_1218 raw_1219}

raw_1217 [label="raw"]

literal_1218 [label="literal"]

raw_1219 [label="raw"]


raw_1217 -> leaf_1220
leaf_1220  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The "]
literal_1218 -> leaf_1221
leaf_1221  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`inline`"]
raw_1219 -> leaf_1222
leaf_1222  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" syntax works like the rest, you may use any number of backticks to enclose a form.
"]
prose_1186 -> { raw_1223}
{rank=same; raw_1223}

raw_1223 [label="raw"]


raw_1223 -> leaf_1224
leaf_1224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something like:
"]
structure_1187 -> { hashline_1225}
{rank=same; hashline_1225}

hashline_1225 [label="hashline"]


hashline_1225 -> { hashtag_1226}
{rank=same; hashtag_1226}

hashtag_1226 [label="hashtag"]


hashtag_1226 -> leaf_1227
leaf_1227  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1188 -> { hashline_1228}
{rank=same; hashline_1228}

hashline_1228 [label="hashline"]


hashline_1228 -> { hashtag_1229}
{rank=same; hashtag_1229}

hashtag_1229 [label="hashtag"]


hashtag_1229 -> leaf_1230
leaf_1230  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1189 -> { raw_1231}
{rank=same; raw_1231}

raw_1231 [label="raw"]


raw_1231 -> leaf_1232
leaf_1232  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
it is evaluated when referenced. This:
"]
structure_1190 -> { hashline_1233}
{rank=same; hashline_1233}

hashline_1233 [label="hashline"]


hashline_1233 -> { hashtag_1234}
{rank=same; hashtag_1234}

hashtag_1234 [label="hashtag"]


hashtag_1234 -> leaf_1235
leaf_1235  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1191 -> { hashline_1236}
{rank=same; hashline_1236}

hashline_1236 [label="hashline"]


hashline_1236 -> { hashtag_1237}
{rank=same; hashtag_1237}

hashtag_1237 [label="hashtag"]


hashtag_1237 -> leaf_1238
leaf_1238  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1192 -> { raw_1239}
{rank=same; raw_1239}

raw_1239 [label="raw"]


raw_1239 -> leaf_1240
leaf_1240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Separated code blocks use special tags:
"]
codeblock_1193 -> leaf_1241
leaf_1241  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
structure_1194 -> { hashline_1242}
{rank=same; hashline_1242}

hashline_1242 [label="hashline"]


hashline_1242 -> { hashtag_1243}
{rank=same; hashtag_1243}

hashtag_1243 [label="hashtag"]


hashtag_1243 -> leaf_1244
leaf_1244  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1195 -> { raw_1245}
{rank=same; raw_1245}

raw_1245 [label="raw"]


raw_1245 -> leaf_1246
leaf_1246  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
nesting apply. As indeed they might in a Grimoire code block.
"]
prose_1196 -> { raw_1247}
{rank=same; raw_1247}

raw_1247 [label="raw"]


raw_1247 -> leaf_1248
leaf_1248  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We need a good runtime. Playing the Inception game
with Grimoire should be an amusing headache, not a dog-slow
system killer.
"]
prose_1197 -> { raw_1249}
{rank=same; raw_1249}

raw_1249 [label="raw"]


raw_1249 -> leaf_1250
leaf_1250  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They may be named like anything else:
"]
codeblock_1198 -> leaf_1251
leaf_1251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
codeblock_1199 -> leaf_1252
leaf_1252  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
codeblock_1200 -> leaf_1253
leaf_1253  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 4 + 5"]
structure_1201 -> { hashline_1254}
{rank=same; hashline_1254}

hashline_1254 [label="hashline"]


hashline_1254 -> { hashtag_1255}
{rank=same; hashtag_1255}

hashtag_1255 [label="hashtag"]


hashtag_1255 -> leaf_1256
leaf_1256  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1202 -> { handleline_1257}
{rank=same; handleline_1257}

handleline_1257 [label="handleline"]


handleline_1257 -> { handle_1258}
{rank=same; handle_1258}

handle_1258 [label="handle"]


handle_1258 -> leaf_1259
leaf_1259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nine"]
codeblock_1203 -> leaf_1260
leaf_1260  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 4 + 5"]
structure_1204 -> { hashline_1261}
{rank=same; hashline_1261}

hashline_1261 [label="hashline"]


hashline_1261 -> { hashtag_1262}
{rank=same; hashtag_1262}

hashtag_1262 [label="hashtag"]


hashtag_1262 -> leaf_1263
leaf_1263  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1205 -> { hashline_1264}
{rank=same; hashline_1264}

hashline_1264 [label="hashline"]


hashline_1264 -> { hashtag_1265}
{rank=same; hashtag_1265}

hashtag_1265 [label="hashtag"]


hashtag_1265 -> leaf_1266
leaf_1266  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1206 -> { raw_1267 literal_1268 raw_1269 literal_1270 raw_1271 literal_1272 raw_1273}
{rank=same; raw_1267 literal_1268 raw_1269 literal_1270 raw_1271 literal_1272 raw_1273}

raw_1267 [label="raw"]

literal_1268 [label="literal"]

raw_1269 [label="raw"]

literal_1270 [label="literal"]

raw_1271 [label="raw"]

literal_1272 [label="literal"]

raw_1273 [label="raw"]


raw_1267 -> leaf_1274
leaf_1274  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
marks an anonymous result. "]
literal_1268 -> leaf_1275
leaf_1275  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#@nine->"]
raw_1269 -> leaf_1276
leaf_1276  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the automatically generated tag for
the return value of the block named "]
literal_1270 -> leaf_1277
leaf_1277  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@nine"]
raw_1271 -> leaf_1278
leaf_1278  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", adding "]
literal_1272 -> leaf_1279
leaf_1279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@nine()"]
raw_1273 -> leaf_1280
leaf_1280  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to a prose block will
add the number 9 to the weave at that location. *bridge* will either display the result,
the call, or both, configurably, when editing the source, with syntax-highlighting to 
enforce the distinction. 
"]
prose_1207 -> { raw_1281}
{rank=same; raw_1281}

raw_1281 [label="raw"]


raw_1281 -> leaf_1282
leaf_1282  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code blocks may be indented as any other blocks, with the associated owership
rules. Code blocks so indented have a logical start equal to their level of
indentation, which is to say the program being called will not see indentation
that is proper to the Grimoire document.
"]
prose_1208 -> { raw_1283}
{rank=same; raw_1283}

raw_1283 [label="raw"]


raw_1283 -> leaf_1284
leaf_1284  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code blocks may be placed inside lists, as tables may be, but may not be
explicitly placed inside tables.
"]
prose_1209 -> { raw_1285 literal_1286 raw_1287 literal_1288 raw_1289}
{rank=same; raw_1285 literal_1286 raw_1287 literal_1288 raw_1289}

raw_1285 [label="raw"]

literal_1286 [label="literal"]

raw_1287 [label="raw"]

literal_1288 [label="literal"]

raw_1289 [label="raw"]


raw_1285 -> leaf_1290
leaf_1290  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You may insert the result of a named code block in the data context
by simply saying "]
literal_1286 -> leaf_1291
leaf_1291  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@a-named-block()"]
raw_1287 -> leaf_1292
leaf_1292  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". If there are variables, you may pass
them, "]
literal_1288 -> leaf_1293
leaf_1293  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@a-named-block(23, true)"]
raw_1289 -> leaf_1294
leaf_1294  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or if you wish, by name:
"]
structure_1210 -> { hashline_1295}
{rank=same; hashline_1295}

hashline_1295 [label="hashline"]


hashline_1295 -> { hashtag_1296}
{rank=same; hashtag_1296}

hashtag_1296 [label="hashtag"]


hashtag_1296 -> leaf_1297
leaf_1297  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1211 -> { raw_1298}
{rank=same; raw_1298}

raw_1298 [label="raw"]


raw_1298 -> leaf_1299
leaf_1299  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Within a formula applied to a table, it is valid to use the description
syntax for a variable to supply an argument to a function.
"]
prose_1212 -> { raw_1300}
{rank=same; raw_1300}

raw_1300 [label="raw"]


raw_1300 -> leaf_1301
leaf_1301  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There will be further syntax involved in building up the line that
begins a code block. It's considered good form to assign complex
code block headers into distinct tags, and use those, rather than
being explicit and repeating yourself or hiding file-local defaults
in drawers.
"]
prose_1213 -> { raw_1302}
{rank=same; raw_1302}

raw_1302 [label="raw"]


raw_1302 -> leaf_1303
leaf_1303  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So we prefer something like
"]
codeblock_1214 -> leaf_1304
leaf_1304  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
section_1215 -> { header_1305 prose_1306 section_1307 section_1308}
{rank=same; header_1305 prose_1306 section_1307 section_1308}

header_1305 [label="1 : Runtime"]

prose_1306 [label="prose"]

section_1307 [label="section: 1089-1123"]

section_1308 [label="section: 1156-1200"]


header_1305 -> leaf_1309
leaf_1309  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Runtime"]
prose_1306 -> { raw_1310}
{rank=same; raw_1310}

raw_1310 [label="raw"]


raw_1310 -> leaf_1311
leaf_1311  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Here, we begin to explore the interactions Grimoire is capable of.
"]
section_1307 -> { header_1312 prose_1313 prose_1314 prose_1315 prose_1316 prose_1317 prose_1318 prose_1319 prose_1320 section_1321}
{rank=same; header_1312 prose_1313 prose_1314 prose_1315 prose_1316 prose_1317 prose_1318 prose_1319 prose_1320 section_1321}

header_1312 [label="2 : Literate or Live?"]

prose_1313 [label="prose"]

prose_1314 [label="prose"]

prose_1315 [label="prose"]

prose_1316 [label="prose"]

prose_1317 [label="prose"]

prose_1318 [label="prose"]

prose_1319 [label="prose"]

prose_1320 [label="prose"]

section_1321 [label="section: 1124-1155"]


header_1312 -> leaf_1322
leaf_1322  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Literate or Live?"]
prose_1313 -> { raw_1323}
{rank=same; raw_1323}

raw_1323 [label="raw"]


raw_1323 -> leaf_1324
leaf_1324  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Babel is descended from the tradition of [[http://en.wikipedia.org/wiki/Literate_programming][literate programming]], and
Grimoire inherits this from Babel.
"]
prose_1314 -> { raw_1325}
{rank=same; raw_1325}

raw_1325 [label="raw"]


raw_1325 -> leaf_1326
leaf_1326  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is capable of producing code and documentation in the
classic literate style. This is not the aim of Grimoire: it is
a metalanguage, for working with prose, data, and code in an
integrated fashion.
"]
prose_1315 -> { raw_1327}
{rank=same; raw_1327}

raw_1327 [label="raw"]


raw_1327 -> leaf_1328
leaf_1328  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
What a compiler is to a REPL, literate programming is to living
documents.
"]
prose_1316 -> { raw_1329}
{rank=same; raw_1329}

raw_1329 [label="raw"]


raw_1329 -> leaf_1330
leaf_1330  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In a literate programming context, we have source, which integrates
code and documentation. The source is then woven into documentation,
and tangled into code. Both are compiled, one is printed, one is run.
"]
prose_1317 -> { raw_1331}
{rank=same; raw_1331}

raw_1331 [label="raw"]


raw_1331 -> leaf_1332
leaf_1332  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The word 'printed' sounds somewhat archaic, no? The number of tools
Donald Knuth had to write just to write the tools he wanted to write,
and tool the writings he wanted to tool, is simply staggering.
"]
prose_1318 -> { raw_1333 literal_1334 raw_1335}
{rank=same; raw_1333 literal_1334 raw_1335}

raw_1333 [label="raw"]

literal_1334 [label="literal"]

raw_1335 [label="raw"]


raw_1333 -> leaf_1336
leaf_1336  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Traces of that legacy remain in Grimoire. Like Babel, we allow for
LaTeX embedding, with the sugar "]
literal_1334 -> leaf_1337
leaf_1337  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`\\latex`"]
raw_1335 -> leaf_1338
leaf_1338  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". Starting Lua code with
a backslash is illegal, starting Clu code with a backslash is also
illegal.
"]
prose_1319 -> { raw_1339}
{rank=same; raw_1339}

raw_1339 [label="raw"]


raw_1339 -> leaf_1340
leaf_1340  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For a Grimoire document to be printed, realistically, in today's world,
it will be translated to LaTeX, hence to PDF, sent off to a print
on demand company, and drop shipped. Some documents may in fact
make this journey, because why not? We aren't oriented around it.
"]
prose_1320 -> { raw_1341}
{rank=same; raw_1341}

raw_1341 [label="raw"]


raw_1341 -> leaf_1342
leaf_1342  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The basic flow in a Grimoire context is one of excursion and return.
We have tangling and weaving, but also unraveling, where actions taken
within the weave or tangle are integrated back into the source document.
"]
section_1321 -> { header_1343 prose_1344 prose_1345 prose_1346 prose_1347 prose_1348 prose_1349}
{rank=same; header_1343 prose_1344 prose_1345 prose_1346 prose_1347 prose_1348 prose_1349}

header_1343 [label="3 : Unraveling the Mystery"]

prose_1344 [label="prose"]

prose_1345 [label="prose"]

prose_1346 [label="prose"]

prose_1347 [label="prose"]

prose_1348 [label="prose"]

prose_1349 [label="prose"]


header_1343 -> leaf_1350
leaf_1350  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Unraveling the Mystery"]
prose_1344 -> { raw_1351}
{rank=same; raw_1351}

raw_1351 [label="raw"]


raw_1351 -> leaf_1352
leaf_1352  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

What's unraveling? When I picture Donald Knuth writing literate code,
I picture him with a notebook, writing free-flowing algorithms in a
fashion he refined his entire career. I imagine him carefully transcribing
into Web, running the compiler, going for a stroll around the Stanford
campus, and examining the changes upon his return.
"]
prose_1345 -> { raw_1353}
{rank=same; raw_1353}

raw_1353 [label="raw"]


raw_1353 -> leaf_1354
leaf_1354  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
On the days, and they did happen, when his program was in a state of error,
I picture him returning to his notebook first. While thinking. Perhaps
playing the organ for an hour or two, to relax. He would then correct the
notebook, then the code, then the program, which would be correct now,
most of the time.
"]
prose_1346 -> { raw_1355}
{rank=same; raw_1355}

raw_1355 [label="raw"]


raw_1355 -> leaf_1356
leaf_1356  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm making that all up. But I'd wager I'm not far off the mark. We
don't work like that and most of us can't.
"]
prose_1347 -> { raw_1357}
{rank=same; raw_1357}

raw_1357 [label="raw"]


raw_1357 -> leaf_1358
leaf_1358  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A tangle is named that because the mapping between it and the source
can be non-trivial. It's quite possible to make it undecidable what to
do with edits to the tangle. it's also possible to move edits from the tangle
back into the source, in most cases, if we structure things well.
"]
prose_1348 -> { raw_1359}
{rank=same; raw_1359}

raw_1359 [label="raw"]


raw_1359 -> leaf_1360
leaf_1360  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Donald Knuth was unable to print a book that would alter his code. I'm
sure he'd have been delighted to have the ability. Our weaves can easily
be living documents, through in-browser and server side empowerment.
Those changes, too, should make it back into the source.
"]
prose_1349 -> { raw_1361}
{rank=same; raw_1361}

raw_1361 [label="raw"]


raw_1361 -> leaf_1362
leaf_1362  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Ultimately I imagine many people will prefer to edit and run their
Grimoire documents entirely from a weave that provides a bit of the
ol' WYSIWYG to the experience. Well and good for them, I have my own
view of Heaven, and it isn't Heaven if we don't all fit.
"]
section_1308 -> { header_1363 prose_1364 prose_1365 prose_1366 prose_1367 section_1368 section_1369}
{rank=same; header_1363 prose_1364 prose_1365 prose_1366 prose_1367 section_1368 section_1369}

header_1363 [label="2 : Source, Tangle and Weave"]

prose_1364 [label="prose"]

prose_1365 [label="prose"]

prose_1366 [label="prose"]

prose_1367 [label="prose"]

section_1368 [label="section: 1173-1200"]

section_1369 [label="section: 1201-1219"]


header_1363 -> leaf_1370
leaf_1370  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Source, Tangle and Weave"]
prose_1364 -> { raw_1371}
{rank=same; raw_1371}

raw_1371 [label="raw"]


raw_1371 -> leaf_1372
leaf_1372  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

These classic concepts from literate programming are central to
the Grimoire paradigm.
"]
prose_1365 -> { raw_1373}
{rank=same; raw_1373}

raw_1373 [label="raw"]


raw_1373 -> leaf_1374
leaf_1374  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In Grimoire, something like a PDF is not a true weave. It is a product;
much like an image or data derived from a simulation, it is regenerated
when necessary but has no further connection to the Grimoire environment.
"]
prose_1366 -> { raw_1375}
{rank=same; raw_1375}

raw_1375 [label="raw"]


raw_1375 -> leaf_1376
leaf_1376  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Our first section discusses the format of Grimoire source code. Like Babel,
unlike Web and descendants, it is self-tangling. Grimoire will be tightly
integrated and purpose-built for this task, operating at a REPL+ level.
"]
prose_1367 -> { raw_1377}
{rank=same; raw_1377}

raw_1377 [label="raw"]


raw_1377 -> leaf_1378
leaf_1378  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We still wish to use it to compile programs written in appropriate languages.
These languages needn't be educated in the ways of Grimoire, imposing this
requirement would be so onerous as to block adoption.
"]
section_1368 -> { header_1379 prose_1380 prose_1381 prose_1382 prose_1383 prose_1384}
{rank=same; header_1379 prose_1380 prose_1381 prose_1382 prose_1383 prose_1384}

header_1379 [label="3 : Unraveling the Tangle"]

prose_1380 [label="prose"]

prose_1381 [label="prose"]

prose_1382 [label="prose"]

prose_1383 [label="prose"]

prose_1384 [label="prose"]


header_1379 -> leaf_1385
leaf_1385  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Unraveling the Tangle"]
prose_1380 -> { raw_1386}
{rank=same; raw_1386}

raw_1386 [label="raw"]


raw_1386 -> leaf_1387
leaf_1387  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Babel offers limited facilities for working within source blocks. What it
doesn't offer is the critical 'unravel' operation, which takes changes to
the tangle and integrates them back into the weave.
"]
prose_1381 -> { raw_1388}
{rank=same; raw_1388}

raw_1388 [label="raw"]


raw_1388 -> leaf_1389
leaf_1389  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is a partially-solved problem, with Babel able to put comment tags into
the source which allow Emacs to jump back into your actual source from
errors in the tangle.
"]
prose_1382 -> { raw_1390}
{rank=same; raw_1390}

raw_1390 [label="raw"]


raw_1390 -> leaf_1391
leaf_1391  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is just not good enough. For any number of reasons, we need to be able
to unravel. I'll cite one: Converting existing codebases over to literacy.
The first step is to recreate the existing program on a source-line-identical
level. The entire existing developer base is familiar with the program already
and isn't going to want to start editing a bunch of Grimoire. They can most
likely be induced to accept readable metadata, and that's it.
"]
prose_1383 -> { raw_1392}
{rank=same; raw_1392}

raw_1392 [label="raw"]


raw_1392 -> leaf_1393
leaf_1393  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That's all we need. Code is in one of three categories: either it is a single
literal copy from source, it's one of several copies from source, or
it's generated code that's dependent on information in the source.
"]
prose_1384 -> { raw_1394}
{rank=same; raw_1394}

raw_1394 [label="raw"]


raw_1394 -> leaf_1395
leaf_1395  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We incorporate all changes to the former automatically when we unravel.
Changes to a single version of multiple copies prompts user interaction: do
you want to embed the change as its own source block, propagate it to each
instance, or decline the merge? Changes to generated code are simply
forbidden. If one is doing generation on the code base, working from
the weave is the more comfortable approach.
"]
section_1369 -> { header_1396 prose_1397 prose_1398 prose_1399 prose_1400}
{rank=same; header_1396 prose_1397 prose_1398 prose_1399 prose_1400}

header_1396 [label="3 : Backweaving"]

prose_1397 [label="prose"]

prose_1398 [label="prose"]

prose_1399 [label="prose"]

prose_1400 [label="prose"]


header_1396 -> leaf_1401
leaf_1401  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Backweaving"]
prose_1397 -> { raw_1402}
{rank=same; raw_1402}

raw_1402 [label="raw"]


raw_1402 -> leaf_1403
leaf_1403  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

An analogous operation is backweaving.
"]
prose_1398 -> { raw_1404}
{rank=same; raw_1404}

raw_1404 [label="raw"]


raw_1404 -> leaf_1405
leaf_1405  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A weave in Grimoire is an HTML/CSS/JS document. In other words, a program.
The weave is much closer akin to the source than any tangle. Any Grimoire
program can have a weave view, though it isn't necessary; many will have
no tangle at all, containing the functionality within Grimoire.
"]
prose_1399 -> { raw_1406}
{rank=same; raw_1406}

raw_1406 [label="raw"]


raw_1406 -> leaf_1407
leaf_1407  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The weave may therefore be manipulated, and we need some way to reflect
those changes back into the source. This can't be automated in a general
way. What we're left with is an EDN protocol for exchanging information
to update the weave in cooperation with some server logic and git.
"]
prose_1400 -> { raw_1408}
{rank=same; raw_1408}

raw_1408 [label="raw"]


raw_1408 -> leaf_1409
leaf_1409  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So, could you write the server logic for a site as a literate program,
push it to a server that tangles and weaves it, and use the source
and Grimoire/bridge as the sysadmin view? I bet you could, it might
even be fairly popular.
"]
section_407 -> { header_1410 prose_1411 prose_1412 prose_1413 section_1414}
{rank=same; header_1410 prose_1411 prose_1412 prose_1413 section_1414}

header_1410 [label="4 : Zero-header tag"]

prose_1411 [label="prose"]

prose_1412 [label="prose"]

prose_1413 [label="prose"]

section_1414 [label="section: 420-421"]


header_1410 -> leaf_1415
leaf_1415  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Zero-header tag"]
prose_1411 -> { raw_1416 literal_1417 raw_1418}
{rank=same; raw_1416 literal_1417 raw_1418}

raw_1416 [label="raw"]

literal_1417 [label="literal"]

raw_1418 [label="raw"]


raw_1416 -> leaf_1419
leaf_1419  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The special [[*Tags][tag]] "]
literal_1417 -> leaf_1420
leaf_1420  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#*"]
raw_1418 -> leaf_1421
leaf_1421  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which is only meaningful at the top of a document,
 indicates a 'zero header'. This lets you use the one-star level as a
series within a single document.
"]
prose_1412 -> { raw_1422 literal_1423 raw_1424}
{rank=same; raw_1422 literal_1423 raw_1424}

raw_1422 [label="raw"]

literal_1423 [label="literal"]

raw_1424 [label="raw"]


raw_1422 -> leaf_1425
leaf_1425  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The related tag "]
literal_1423 -> leaf_1426
leaf_1426  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#meta*"]
raw_1424 -> leaf_1427
leaf_1427  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" must be followed by a space and any number of
stars. This indicates a meta-level for the entire under-tree, that
exists somewhere else. Further semantics may be provided.
"]
prose_1413 -> { raw_1428}
{rank=same; raw_1428}

raw_1428 [label="raw"]


raw_1428 -> leaf_1429
leaf_1429  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This section belongs in some further API section.
"]
section_1414 -> { header_1430 prose_1431}
{rank=same; header_1430 prose_1431}

header_1430 [label="5 : TODO Move to API Section"]

prose_1431 [label="prose"]


header_1430 -> leaf_1432
leaf_1432  [color=Gray,shape=rectangle,fontname=Inconsolata,label="***** TODO Move to API Section"]
prose_1431 -> { raw_1433}
{rank=same; raw_1433}

raw_1433 [label="raw"]


raw_1433 -> leaf_1434
leaf_1434  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]

}
