digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 1219"]


doc_0 -> { section_1 section_2}
{rank=same; section_1 section_2}

section_1 [label="section: 1-3"]

section_2 [label="section: 34-338"]


section_1 -> { header_3 prose_4 structure_5 section_6}
{rank=same; header_3 prose_4 structure_5 section_6}

header_3 [label="0 : "]

prose_4 [label="prose"]

structure_5 [label="structure"]

section_6 [label="section: 4-33"]


header_3 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#+title: Grimoire: a metalanguage for magic spells."]
prose_4 -> { raw_8}
{rank=same; raw_8}

raw_8 [label="raw"]


raw_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_5 -> { hashline_10}
{rank=same; hashline_10}

hashline_10 [label="hashline"]


hashline_10 -> { hashtag_11}
{rank=same; hashtag_11}

hashtag_11 [label="hashtag"]


hashtag_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_6 -> { header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 prose_21 prose_22}
{rank=same; header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 prose_21 prose_22}

header_13 [label="1 : Introduction"]

prose_14 [label="prose"]

prose_15 [label="prose"]

prose_16 [label="prose"]

prose_17 [label="prose"]

prose_18 [label="prose"]

prose_19 [label="prose"]

prose_20 [label="prose"]

prose_21 [label="prose"]

prose_22 [label="prose"]


header_13 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Introduction"]
prose_14 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is a response to Babel.
"]
prose_15 -> { raw_26}
{rank=same; raw_26}

raw_26 [label="raw"]


raw_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Babel is simultaneously a kludge and the most potentially powerful language in existence.
"]
prose_16 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Babel is a metalanguage. The structure of Org mode lets the user weave together code into a
living document, in a flexible, powerful way.
"]
prose_17 -> { raw_30}
{rank=same; raw_30}

raw_30 [label="raw"]


raw_30 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The name is charmingly apt. Babel exists at the top of a tower of abstractions that is teetering
on the verge of collapse. Org-mode is an extension of outline mode, which was a simple tree
editor task list.
"]
prose_18 -> { raw_32}
{rank=same; raw_32}

raw_32 [label="raw"]


raw_32 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Various users bolted stuff on, because that's how emacs grows, you bolt stuff onto it and it
continues to function because it's [[http://lispers.org/][made with alien technology]].
"]
prose_19 -> { raw_34}
{rank=same; raw_34}

raw_34 [label="raw"]


raw_34 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The problem with Babel is more than the syntax being clunky, though that's a problem. The issue is
more profoundly that Babel is built on Org, which is built on emacs. It's a language, yes,
parsers exist for other platforms. But as a runtime, it isn't portable without a lot of effort.
"]
prose_20 -> { raw_36}
{rank=same; raw_36}

raw_36 [label="raw"]


raw_36 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So much so, that we get a chance to start over. It's roughly as difficult to write Grimoire as it would be to
reimplement Babel in, say, Sublime.
"]
prose_21 -> { raw_38}
{rank=same; raw_38}

raw_38 [label="raw"]


raw_38 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the process, we can:
"]
prose_22 -> { raw_40}
{rank=same; raw_40}

raw_40 [label="raw"]


raw_40 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - streamline concepts, making them more orthogonal
  - clean up the clunkiness in the grammar
  - build a toolchain that will let us write magic spells in any number of languages, amassing a powerful
    collection of same. A grimoire, if you will: a living book in which magic is both written and performed.
"]
section_2 -> { header_42 prose_43 section_44 section_45 section_46}
{rank=same; header_42 prose_43 section_44 section_45 section_46}

header_42 [label="1 : Musings on Metasyntax"]

prose_43 [label="prose"]

section_44 [label="section: 35-82"]

section_45 [label="section: 105-311"]

section_46 [label="section: 339-343"]


header_42 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Musings on Metasyntax"]
prose_43 -> { raw_48}
{rank=same; raw_48}

raw_48 [label="raw"]


raw_48 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_44 -> { header_50 prose_51 prose_52 section_53 section_54 section_55}
{rank=same; header_50 prose_51 prose_52 section_53 section_54 section_55}

header_50 [label="2 : Constraints"]

prose_51 [label="prose"]

prose_52 [label="prose"]

section_53 [label="section: 42-68"]

section_54 [label="section: 69-82"]

section_55 [label="section: 83-104"]


header_50 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Constraints"]
prose_51 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

There is a difference between a metalanguage and a literate programming language. Babel is a metalanguage,
as Grimoire is intended to be.
"]
prose_52 -> { raw_59}
{rank=same; raw_59}

raw_59 [label="raw"]


raw_59 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An effective metalanguage balances three concerns. It must be usable, readable, and parsable.
"]
section_53 -> { header_61 prose_62 prose_63 prose_64 prose_65 prose_66 prose_67 prose_68}
{rank=same; header_61 prose_62 prose_63 prose_64 prose_65 prose_66 prose_67 prose_68}

header_61 [label="3 : Usable"]

prose_62 [label="prose"]

prose_63 [label="prose"]

prose_64 [label="prose"]

prose_65 [label="prose"]

prose_66 [label="prose"]

prose_67 [label="prose"]

prose_68 [label="prose"]


header_61 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Usable"]
prose_62 -> { raw_70}
{rank=same; raw_70}

raw_70 [label="raw"]


raw_70 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A metalanguage is used interactively, on a deeper level than REPLs.
"]
prose_63 -> { raw_72 literal_73 raw_74}
{rank=same; raw_72 literal_73 raw_74}

raw_72 [label="raw"]

literal_73 [label="literal"]

raw_74 [label="raw"]


raw_72 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is what makes working with Org so amazing. The first purpose of what became Babel
was simply editing outlines. This was outline mode, which dates back to the era when
using asterisks and "]
literal_73 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="- [ ]"]
raw_74 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" checkboxes in a plain ASCII text file was fairly futuristic
behavior.
"]
prose_64 -> { raw_78}
{rank=same; raw_78}

raw_78 [label="raw"]


raw_78 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You can't really call that a language either, though it's a syntax. More and more features
were attached until we have modern Babel. But because each feature was build as an extension
to the editing/runtime environment, Babel is fairly smooth to work with.
"]
prose_65 -> { raw_80}
{rank=same; raw_80}

raw_80 [label="raw"]


raw_80 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If you can handle Emacs. I can, some can't. A metalanguage is tightly coupled to its runtime,
because its runtime is its editing environment. Not much of a metalanguage if this isn't the
case.
"]
prose_66 -> { raw_82}
{rank=same; raw_82}

raw_82 [label="raw"]


raw_82 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is the culmination of a considerable dependency chain. We need a data structure, a
parser to work with the data structure, and an editing environment that builds on these. For
maximum enjoyment, we'll want a custom terminal that enhances the xterm protocol with a few
features, most notably graphics.
"]
prose_67 -> { raw_84}
{rank=same; raw_84}

raw_84 [label="raw"]


raw_84 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Just like I have trouble writing Lua without burning huge amounts of time planning out Clu, I
can't use Org without doing the same for Grimoire. It's all related: I need a really good parser.
"]
prose_68 -> { raw_86}
{rank=same; raw_86}

raw_86 [label="raw"]


raw_86 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[[https://github.com/UpstandingHackers/hammer][hammer]] is the leading contender. But back to Grimoire.
"]
section_54 -> { header_88 prose_89 prose_90 prose_91}
{rank=same; header_88 prose_89 prose_90 prose_91}

header_88 [label="3 : Readable"]

prose_89 [label="prose"]

prose_90 [label="prose"]

prose_91 [label="prose"]


header_88 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Readable"]
prose_89 -> { raw_93}
{rank=same; raw_93}

raw_93 [label="raw"]


raw_93 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is designed to be read.  It's important that the raw syntax not
 break the reader's flow.  A good metalanguage lets the user employ just
 as much magic as she's comfortable with, without imposing more.
"]
prose_90 -> { raw_95}
{rank=same; raw_95}

raw_95 [label="raw"]


raw_95 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Our syntax is  designed to support this. As such  it is deeply concerned
with matters  such as indentation  and whitespacing, which are  basic to
readability.
"]
prose_91 -> { raw_97}
{rank=same; raw_97}

raw_97 [label="raw"]


raw_97 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It will be quite possible and indeed comfortable to write pure documents
such  as blog  posts in  Grimoire form.  In that  use case  it resembles
Markdown.
"]
section_55 -> { header_99 prose_100 prose_101 prose_102 prose_103 prose_104}
{rank=same; header_99 prose_100 prose_101 prose_102 prose_103 prose_104}

header_99 [label="3 : Parsable"]

prose_100 [label="prose"]

prose_101 [label="prose"]

prose_102 [label="prose"]

prose_103 [label="prose"]

prose_104 [label="prose"]


header_99 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Parsable"]
prose_100 -> { raw_106}
{rank=same; raw_106}

raw_106 [label="raw"]


raw_106 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire  documents are  intended  to be  highly  convoluted. The  basic
editing operation  is the fold. The  Grimoire editor must be  capable of
handling documents in the tens of megabytes with a complex and preserved
folding structure.
"]
prose_101 -> { raw_108}
{rank=same; raw_108}

raw_108 [label="raw"]


raw_108 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This requires  a ground-up  editing environment  rewrite to  employ data
structures   with   correct   big-O    complexity   and   an   efficient
implementation.
"]
prose_102 -> { raw_110}
{rank=same; raw_110}

raw_110 [label="raw"]


raw_110 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This  also  requires  that  the   language  be  well-designed  for  easy
recognition of the structural elements. As this document evolves, I will
be defining a grammar in the syntax preferred by barbarian.
"]
prose_103 -> { raw_112}
{rank=same; raw_112}

raw_112 [label="raw"]


raw_112 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is  an error-free  language. There  are several  concepts which
interact to  create this, namely  structure, prose, well-  and malformed
structure, and validity.
"]
prose_104 -> { raw_114}
{rank=same; raw_114}

raw_114 [label="raw"]


raw_114 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A parser for Grimoire which doesn't  succeed without error for any utf-8
string is not valid.
"]
section_45 -> { header_116 prose_117 section_118 section_119 section_120 section_121 section_122 section_123}
{rank=same; header_116 prose_117 section_118 section_119 section_120 section_121 section_122 section_123}

header_116 [label="2 : Structure"]

prose_117 [label="prose"]

section_118 [label="section: 109-149"]

section_119 [label="section: 161-190"]

section_120 [label="section: 191-200"]

section_121 [label="section: 253-285"]

section_122 [label="section: 295-311"]

section_123 [label="section: 312-338"]


header_116 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Structure"]
prose_117 -> { raw_125}
{rank=same; raw_125}

raw_125 [label="raw"]


raw_125 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a top-down look at Grimoire's proposed syntax.
"]
section_118 -> { header_127 prose_128 prose_129 prose_130 prose_131 prose_132 prose_133 prose_134 prose_135 prose_136 section_137}
{rank=same; header_127 prose_128 prose_129 prose_130 prose_131 prose_132 prose_133 prose_134 prose_135 prose_136 section_137}

header_127 [label="3 : Encoding"]

prose_128 [label="prose"]

prose_129 [label="prose"]

prose_130 [label="prose"]

prose_131 [label="prose"]

prose_132 [label="prose"]

prose_133 [label="prose"]

prose_134 [label="prose"]

prose_135 [label="prose"]

prose_136 [label="prose"]

section_137 [label="section: 150-160"]


header_127 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Encoding"]
prose_128 -> { raw_139}
{rank=same; raw_139}

raw_139 [label="raw"]


raw_139 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is defined in terms of utf-8.
"]
prose_129 -> { raw_141}
{rank=same; raw_141}

raw_141 [label="raw"]


raw_141 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The core syntax is defined in terms of the reachable keys on a US keyboard.
This tradition is firmly entrenched in the mid teens, and I have no
designs on budging that at present. The miser in me likes that they're
a byte each. The lawyer in me insists that this isn't ASCII, which is a
seven-bit legacy encoding. All aspects of utf-8 are equally meaningful.
"]
prose_130 -> { raw_143}
{rank=same; raw_143}

raw_143 [label="raw"]


raw_143 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We aren't at all afraid to use Unicode characters to display aspects
of the runtime. In fact we favor this, as it marks those operations
as distinctive. Most people can't type ⦿ without effort (I can't)
and it's easy to recognize as a folded drawer once you've seen a couple.
"]
prose_131 -> { raw_145}
{rank=same; raw_145}

raw_145 [label="raw"]


raw_145 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is case sensitive and uses lower-snake-case for built-in English
phrases. There is a convention (see classes) that uses capitalization of
user words to affect semantics. This may be overridden with other rules
for languages that lack the majuscule-miniscule distinction.
"]
prose_132 -> { raw_147}
{rank=same; raw_147}

raw_147 [label="raw"]


raw_147 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I want Grimoire to have correct Unicode handling, for some value of
correct. It can't be considered 1.0 without this.
"]
prose_133 -> { raw_149}
{rank=same; raw_149}

raw_149 [label="raw"]


raw_149 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Bidirectional handling in a context that's indentation sensitive is
an example of something subtle. Grimoire uses indentation in various
ways, so here's the rule:
"]
prose_134 -> { raw_151}
{rank=same; raw_151}

raw_151 [label="raw"]


raw_151 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Any newline that has a reversed direction ends indentation. So if
you are going ltr, issue an rtl marker, and a newline, your indentation
level is zero. If you reverse direction twice in a line, you keep
your indentation level. Three times, you lose it.
"]
prose_135 -> { raw_153}
{rank=same; raw_153}

raw_153 [label="raw"]


raw_153 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'd love to get a Hebrew and/or Arabic fluent hacker on the project
early, to make sure this works correctly.
"]
prose_136 -> { raw_155}
{rank=same; raw_155}

raw_155 [label="raw"]


raw_155 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Another thing I want to get right is equivalence. If you have a
variable called \"Glück\" the compiler shouldn't complain if it's
rendered in either of the valid ways. For some sequences that's
\"any of the valid ways\". If we normalized your prose, you might
have problems later, so we don't want to solve it that way.
"]
section_137 -> { header_157 prose_158 prose_159}
{rank=same; header_157 prose_158 prose_159}

header_157 [label="4 : Internationalization"]

prose_158 [label="prose"]

prose_159 [label="prose"]


header_157 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Internationalization"]
prose_158 -> { raw_161 literal_162 raw_163}
{rank=same; raw_161 literal_162 raw_163}

raw_161 [label="raw"]

literal_162 [label="literal"]

raw_163 [label="raw"]


raw_161 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

All parts of Grimoire defined in English will be namespaced
as "]
literal_162 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label="en:/"]
raw_163 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and loaded by default. Other languages will be added
when there is a fluent maintainer available.
"]
prose_159 -> { raw_167 literal_168 raw_169 literal_170 raw_171 literal_172 raw_173 literal_174 raw_175}
{rank=same; raw_167 literal_168 raw_169 literal_170 raw_171 literal_172 raw_173 literal_174 raw_175}

raw_167 [label="raw"]

literal_168 [label="literal"]

raw_169 [label="raw"]

literal_170 [label="literal"]

raw_171 [label="raw"]

literal_172 [label="literal"]

raw_173 [label="raw"]

literal_174 [label="literal"]

raw_175 [label="raw"]


raw_167 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note  that  many  words  aren't  truly English.  Notably  the  names  of
programming languages are  the same in all human languages.   A tag like"]
literal_168 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#author"]
raw_169 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" can be namespaced "]
literal_170 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#fr:/auteur"]
raw_171 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and will be, but "]
literal_172 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!python"]
raw_173 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not
in the "]
literal_174 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="en:/"]
raw_175 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" namespace.
"]
section_119 -> { header_185 prose_186 prose_187 prose_188 prose_189 prose_190 prose_191 prose_192}
{rank=same; header_185 prose_186 prose_187 prose_188 prose_189 prose_190 prose_191 prose_192}

header_185 [label="3 : Prose and Structure"]

prose_186 [label="prose"]

prose_187 [label="prose"]

prose_188 [label="prose"]

prose_189 [label="prose"]

prose_190 [label="prose"]

prose_191 [label="prose"]

prose_192 [label="prose"]


header_185 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Prose and Structure"]
prose_186 -> { raw_194}
{rank=same; raw_194}

raw_194 [label="raw"]


raw_194 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The major distinction Grimoire draws is between prose and structure.
"]
prose_187 -> { raw_196}
{rank=same; raw_196}

raw_196 [label="raw"]


raw_196 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose is the default parsing state. It is far from unstructured from the
runtime  perspective. Although  this needn't  be embedded  in the  parse
tree,  Grimoire   understands  concepts   such  as   paragraphs,  words,
punctuation,  capital letters,  languages, and  anything else  proper to
prose.
"]
prose_188 -> { raw_198}
{rank=same; raw_198}

raw_198 [label="raw"]


raw_198 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I refer to human languages, but Grimoire understands programming languages
also. In principle, all of them, it shouldn't be harder to add them than
it is to call them from shell, though getting a runtime rigged up to
another runtime always calls for some finesse to derive a good experience.
"]
prose_189 -> { raw_200}
{rank=same; raw_200}

raw_200 [label="raw"]


raw_200 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
\"Programming languages\" is overly specific. Grimoire draws a distinction
between prose and structure. Blocks may contain either, or both.
"]
prose_190 -> { raw_202 bold_203 raw_204}
{rank=same; raw_202 bold_203 raw_204}

raw_202 [label="raw"]

bold_203 [label="bold"]

raw_204 [label="raw"]


raw_202 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something that's nice about a language build on a prose/structure
relationship is that it can be error free. Anything "]
bold_203 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym"]
raw_204 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" can't build into
a structure is just prose.
"]
prose_191 -> { raw_208}
{rank=same; raw_208}

raw_208 [label="raw"]


raw_208 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Markdown has this property. Sometimes you run into crappy parsers which
build errors into Markdown, which is just obnoxious. If you [[http://daringfireball.net/projects/markdown/syntax][RTFM]],
you'll find the word \"error\" once. Helpfully explaining how Markdown
keeps you from making one.
"]
prose_192 -> { raw_210}
{rank=same; raw_210}

raw_210 [label="raw"]


raw_210 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do what we can to make the document look the same as it is
in fact structured. Syntax highlighting handles the edge cases.
"]
section_120 -> { header_212 prose_213 prose_214 prose_215 section_216}
{rank=same; header_212 prose_213 prose_214 prose_215 section_216}

header_212 [label="3 : Ownership"]

prose_213 [label="prose"]

prose_214 [label="prose"]

prose_215 [label="prose"]

section_216 [label="section: 201-252"]


header_212 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Ownership"]
prose_213 -> { raw_218}
{rank=same; raw_218}

raw_218 [label="raw"]


raw_218 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The basic structural relationship in Grimoire is ownership.
"]
prose_214 -> { raw_220}
{rank=same; raw_220}

raw_220 [label="raw"]


raw_220 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Root elements of a heirarchy own their children, blocks own
lines that refer to that block. Indentation has a subtle but
regular interaction with ownership; it does what you expect.
"]
prose_215 -> { raw_222}
{rank=same; raw_222}

raw_222 [label="raw"]


raw_222 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Edge cases are resolved using the cling rule.
"]
section_216 -> { header_224 prose_225 prose_226 prose_227 prose_228 structure_229 structure_230 structure_231 structure_232 structure_233 prose_234 structure_235 structure_236 structure_237 prose_238}
{rank=same; header_224 prose_225 prose_226 prose_227 prose_228 structure_229 structure_230 structure_231 structure_232 structure_233 prose_234 structure_235 structure_236 structure_237 prose_238}

header_224 [label="4 : The Cling Rule"]

prose_225 [label="prose"]

prose_226 [label="prose"]

prose_227 [label="prose"]

prose_228 [label="prose"]

structure_229 [label="structure"]

structure_230 [label="structure"]

structure_231 [label="structure"]

structure_232 [label="structure"]

structure_233 [label="structure"]

prose_234 [label="prose"]

structure_235 [label="structure"]

structure_236 [label="structure"]

structure_237 [label="structure"]

prose_238 [label="prose"]


header_224 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** The Cling Rule"]
prose_225 -> { raw_240}
{rank=same; raw_240}

raw_240 [label="raw"]


raw_240 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The cling rule specifies that a group 'clings' to another group when
it is closer to that group than the other group. Ties resolve down.
"]
prose_226 -> { raw_242}
{rank=same; raw_242}

raw_242 [label="raw"]


raw_242 -> leaf_243
leaf_243  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This should make it intuitive to group elements that aren't grouping the
way you expect: put in whitespace until the block is visually distinguished
from the surroundings.
"]
prose_227 -> { raw_244}
{rank=same; raw_244}

raw_244 [label="raw"]


raw_244 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cling applies between blocks which are at the same level of ownership.
Ownership has precedence over cling: all blocks underneath e.g. a header
line are owned by that line, newlines notwithstanding.
"]
prose_228 -> { raw_246}
{rank=same; raw_246}

raw_246 [label="raw"]


raw_246 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note that indentation of e.g. lists invokes the cling rule within the
indentation level.

"]
structure_229 -> { hashline_248}
{rank=same; hashline_248}

hashline_248 [label="hashline"]


hashline_248 -> { hashtag_249}
{rank=same; hashtag_249}

hashtag_249 [label="hashtag"]


hashtag_249 -> leaf_250
leaf_250  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_230 -> { hashline_251}
{rank=same; hashline_251}

hashline_251 [label="hashline"]


hashline_251 -> { hashtag_252}
{rank=same; hashtag_252}

hashtag_252 [label="hashtag"]


hashtag_252 -> leaf_253
leaf_253  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_231 -> { hashline_254}
{rank=same; hashline_254}

hashline_254 [label="hashline"]


hashline_254 -> { hashtag_255}
{rank=same; hashtag_255}

hashtag_255 [label="hashtag"]


hashtag_255 -> leaf_256
leaf_256  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_232 -> { hashline_257}
{rank=same; hashline_257}

hashline_257 [label="hashline"]


hashline_257 -> { hashtag_258}
{rank=same; hashtag_258}

hashtag_258 [label="hashtag"]


hashtag_258 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
structure_233 -> { hashline_260}
{rank=same; hashline_260}

hashline_260 [label="hashline"]


hashline_260 -> { hashtag_261}
{rank=same; hashtag_261}

hashtag_261 [label="hashtag"]


hashtag_261 -> leaf_262
leaf_262  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_234 -> { raw_263}
{rank=same; raw_263}

raw_263 [label="raw"]


raw_263 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Even clings are resolved forwards:
"]
structure_235 -> { hashline_265}
{rank=same; hashline_265}

hashline_265 [label="hashline"]


hashline_265 -> { hashtag_266}
{rank=same; hashtag_266}

hashtag_266 [label="hashtag"]


hashtag_266 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_236 -> { hashline_268}
{rank=same; hashline_268}

hashline_268 [label="hashline"]


hashline_268 -> { hashtag_269}
{rank=same; hashtag_269}

hashtag_269 [label="hashtag"]


hashtag_269 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
structure_237 -> { hashline_271}
{rank=same; hashline_271}

hashline_271 [label="hashline"]


hashline_271 -> { hashtag_272}
{rank=same; hashtag_272}

hashtag_272 [label="hashtag"]


hashtag_272 -> leaf_273
leaf_273  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_238 -> { raw_274}
{rank=same; raw_274}

raw_274 [label="raw"]


raw_274 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
be considered bad style.
"]
section_121 -> { header_276 prose_277 section_278 section_279 section_280}
{rank=same; header_276 prose_277 section_278 section_279 section_280}

header_276 [label="3 : Whitespace, Lines, and Indentation."]

prose_277 [label="prose"]

section_278 [label="section: 258-279"]

section_279 [label="section: 280-285"]

section_280 [label="section: 286-294"]


header_276 -> leaf_281
leaf_281  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Whitespace, Lines, and Indentation."]
prose_277 -> { raw_282}
{rank=same; raw_282}

raw_282 [label="raw"]


raw_282 -> leaf_283
leaf_283  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is a structured document format. There are semantics associated
with every character we encode.
"]
section_278 -> { header_284 prose_285 prose_286 prose_287 prose_288 prose_289}
{rank=same; header_284 prose_285 prose_286 prose_287 prose_288 prose_289}

header_284 [label="4 : Whitespace"]

prose_285 [label="prose"]

prose_286 [label="prose"]

prose_287 [label="prose"]

prose_288 [label="prose"]

prose_289 [label="prose"]


header_284 -> leaf_290
leaf_290  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Whitespace"]
prose_285 -> { raw_291}
{rank=same; raw_291}

raw_291 [label="raw"]


raw_291 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Whitespace is either the space or newline character. Returns are removed,
tabs resolved to two spaces by the formatter, the latter is warned against.
"]
prose_286 -> { raw_293}
{rank=same; raw_293}

raw_293 [label="raw"]


raw_293 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Most of the token-like categories we refer to must be surrounded by
whitespace. Newlines have semantics more often than they do not.
"]
prose_287 -> { raw_295 literal_296 raw_297}
{rank=same; raw_295 literal_296 raw_297}

raw_295 [label="raw"]

literal_296 [label="literal"]

raw_297 [label="raw"]


raw_295 -> leaf_298
leaf_298  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Unicode actually contains quite a number of whitespace characters. They are
all treated as a single ordinary space. If that space is semantically meaningful,
as in the space between "]
literal_296 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** A Headline"]
raw_297 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", it is filtered into an ordinary space.
Otherwise it's considered prose, the only filtration prose receives is tab->space
conversion.
"]
prose_288 -> { raw_301}
{rank=same; raw_301}

raw_301 [label="raw"]


raw_301 -> leaf_302
leaf_302  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire mercilessly enforces tab-space conversion, even on your code blocks.
I will cling to this tenet as long as I can, the tab character needs to die,
the world has decided, that key is special and shouldn't insert a special
dropping that looks like n spaces.
"]
prose_289 -> { raw_303 bold_304 raw_305}
{rank=same; raw_303 bold_304 raw_305}

raw_303 [label="raw"]

bold_304 [label="bold"]

raw_305 [label="raw"]


raw_303 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
bold_304 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label="make"]
raw_305 -> leaf_308
leaf_308  [color=Gray,shape=rectangle,fontname=Inconsolata,label="? Outta my face with make. Yes, we'll have a make syntax, yes, it will
put the tabs back in.
"]
section_279 -> { header_309 prose_310}
{rank=same; header_309 prose_310}

header_309 [label="4 : Lines"]

prose_310 [label="prose"]


header_309 -> leaf_311
leaf_311  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Lines"]
prose_310 -> { raw_312}
{rank=same; raw_312}

raw_312 [label="raw"]


raw_312 -> leaf_313
leaf_313  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

When we refer to the beginning of a line, this allows for spaces before the
reference point. We call the absolute beginning of a line the first
position.
"]
section_280 -> { header_314 prose_315 prose_316 prose_317}
{rank=same; header_314 prose_315 prose_316 prose_317}

header_314 [label="4 : Indentation"]

prose_315 [label="prose"]

prose_316 [label="prose"]

prose_317 [label="prose"]


header_314 -> leaf_318
leaf_318  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Indentation"]
prose_315 -> { raw_319}
{rank=same; raw_319}

raw_319 [label="raw"]


raw_319 -> leaf_320
leaf_320  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is an indentation-aware language. Most kinds of block can be
arcically[fn:1] ordered by means of indentation.
"]
prose_316 -> { raw_321}
{rank=same; raw_321}

raw_321 [label="raw"]


raw_321 -> leaf_322
leaf_322  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indentation follows [[http://nim-lang.org/manual.html#indentation][Nim rules]].
"]
prose_317 -> { raw_323}
{rank=same; raw_323}

raw_323 [label="raw"]


raw_323 -> leaf_324
leaf_324  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[fn:1] There's nothing sacred about ordered subrules, and if we're making up
a new word, let's drop the silent h. Webster was a cool guy."]
section_122 -> { header_325 prose_326 prose_327 prose_328 prose_329}
{rank=same; header_325 prose_326 prose_327 prose_328 prose_329}

header_325 [label="3 : Order of Recognition"]

prose_326 [label="prose"]

prose_327 [label="prose"]

prose_328 [label="prose"]

prose_329 [label="prose"]


header_325 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Order of Recognition"]
prose_326 -> { raw_331}
{rank=same; raw_331}

raw_331 [label="raw"]


raw_331 -> leaf_332
leaf_332  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Starting from the neutral context, which is always at a newline, Grimoire
tries to make one of its initializing special forms. Failing that, it will
begin a prose block.
"]
prose_327 -> { raw_333}
{rank=same; raw_333}

raw_333 [label="raw"]


raw_333 -> leaf_334
leaf_334  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If there is whitespace, it affects indentation level in indicated ways.
They will not directly affect the semantics of the following form, that is,
these rules apply after any potentially block-ending newline, apart from
spaces that may be found between the newline and the character.
"]
prose_328 -> { raw_335 literal_336 raw_337 literal_338 raw_339 literal_340 raw_341 literal_342 raw_343 literal_344 raw_345 literal_346 raw_347 literal_348 raw_349 literal_350 raw_351}
{rank=same; raw_335 literal_336 raw_337 literal_338 raw_339 literal_340 raw_341 literal_342 raw_343 literal_344 raw_345 literal_346 raw_347 literal_348 raw_349 literal_350 raw_351}

raw_335 [label="raw"]

literal_336 [label="literal"]

raw_337 [label="raw"]

literal_338 [label="literal"]

raw_339 [label="raw"]

literal_340 [label="literal"]

raw_341 [label="raw"]

literal_342 [label="literal"]

raw_343 [label="raw"]

literal_344 [label="literal"]

raw_345 [label="raw"]

literal_346 [label="literal"]

raw_347 [label="raw"]

literal_348 [label="literal"]

raw_349 [label="raw"]

literal_350 [label="literal"]

raw_351 [label="raw"]


raw_335 -> leaf_352
leaf_352  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
At present,  "]
literal_336 -> leaf_353
leaf_353  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_337 -> leaf_354
leaf_354  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_338 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#"]
raw_339 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",  "]
literal_340 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label="|"]
raw_341 -> leaf_358
leaf_358  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_342 -> leaf_359
leaf_359  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-"]
raw_343 -> leaf_360
leaf_360  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",  , "]
literal_344 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~"]
raw_345 -> leaf_362
leaf_362  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",  "]
literal_346 -> leaf_363
leaf_363  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@"]
raw_347 -> leaf_364
leaf_364  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_348 -> leaf_365
leaf_365  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":"]
raw_349 -> leaf_366
leaf_366  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  and "]
literal_350 -> leaf_367
leaf_367  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{"]
raw_351 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  all create
special  contexts.  A  special  context  creates a  block  in a  context
specific way.
"]
prose_329 -> { raw_369}
{rank=same; raw_369}

raw_369 [label="raw"]


raw_369 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Blocks have a left associativity which can be recursive.
"]
section_123 -> { header_371 prose_372 prose_373 prose_374 prose_375 prose_376}
{rank=same; header_371 prose_372 prose_373 prose_374 prose_375 prose_376}

header_371 [label="3 : Blocks"]

prose_372 [label="prose"]

prose_373 [label="prose"]

prose_374 [label="prose"]

prose_375 [label="prose"]

prose_376 [label="prose"]


header_371 -> leaf_377
leaf_377  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Blocks"]
prose_372 -> { raw_378}
{rank=same; raw_378}

raw_378 [label="raw"]


raw_378 -> leaf_379
leaf_379  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is oriented around blocks.
"]
prose_373 -> { raw_380}
{rank=same; raw_380}

raw_380 [label="raw"]


raw_380 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Blocks are at least one line long,  all restarts are on a new line.  Any
syntactic structure smaller than a block we call an element.
"]
prose_374 -> { raw_382}
{rank=same; raw_382}

raw_382 [label="raw"]


raw_382 -> leaf_383
leaf_383  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Some types of blocks nest.  A document is a single  block.  There may be
other semantic units such as directories, I'd think a language that uses
strict  nested heirarchy  as powerfully  as Grimoire  could dictate  the
semantics of a file system, but that's currently out of scope.
"]
prose_375 -> { raw_384 literal_385 raw_386 literal_387 raw_388 literal_389 raw_390}
{rank=same; raw_384 literal_385 raw_386 literal_387 raw_388 literal_389 raw_390}

raw_384 [label="raw"]

literal_385 [label="literal"]

raw_386 [label="raw"]

literal_387 [label="literal"]

raw_388 [label="raw"]

literal_389 [label="literal"]

raw_390 [label="raw"]


raw_384 -> leaf_391
leaf_391  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indentation is relevant to some  kinds of blocks. In general, whitespace
matters quite a  bit in a Grimoire  document. We keep some  of the warts
out because the tab character is  illegal, and there will be a mandatory
formatter, "]
literal_385 -> leaf_392
leaf_392  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym  fmt"]
raw_386 -> leaf_393
leaf_393  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if  you will, that  does everything  from turning"]
literal_387 -> leaf_394
leaf_394  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**bold**"]
raw_388 -> leaf_395
leaf_395  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  into "]
literal_389 -> leaf_396
leaf_396  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*bold*"]
raw_390 -> leaf_397
leaf_397  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  (because the  extra stars  weren't used),  to
newline stripping, and so on.  This is normally applied incrementally by
the runtime editing environment.
"]
prose_376 -> { raw_398}
{rank=same; raw_398}

raw_398 [label="raw"]


raw_398 -> leaf_399
leaf_399  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indentation is human  readable and, with some care, a  computer may come
to the  same conclusions a  human would. I'm  still wary of  Python, but
there's no good  reason, unless the headache of most  Python not working
correctly  on my  computer, for  reasons I  can't track  down that  seem
related to  there being two languages  invoked as 'python', counts  as a
good reason.
"]
section_46 -> { header_400 prose_401 section_402}
{rank=same; header_400 prose_401 section_402}

header_400 [label="2 : Syntax"]

prose_401 [label="prose"]

section_402 [label="section: 344-407"]


header_400 -> leaf_403
leaf_403  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Syntax"]
prose_401 -> { raw_404}
{rank=same; raw_404}

raw_404 [label="raw"]


raw_404 -> leaf_405
leaf_405  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Now that we've established the basic constraints, let's
start our recursive descent into the parse.
"]
section_402 -> { header_406 prose_407 prose_408 prose_409 prose_410 prose_411 prose_412 structure_413 section_414 section_415}
{rank=same; header_406 prose_407 prose_408 prose_409 prose_410 prose_411 prose_412 structure_413 section_414 section_415}

header_406 [label="3 : Headers"]

prose_407 [label="prose"]

prose_408 [label="prose"]

prose_409 [label="prose"]

prose_410 [label="prose"]

prose_411 [label="prose"]

prose_412 [label="prose"]

structure_413 [label="structure"]

section_414 [label="section: 368-368"]

section_415 [label="section: 408-419"]


header_406 -> leaf_416
leaf_416  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Headers"]
prose_407 -> { raw_417}
{rank=same; raw_417}

raw_417 [label="raw"]


raw_417 -> leaf_418
leaf_418  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Grimoire is arcically constrained by structure groups,
called headers.
"]
prose_408 -> { raw_419 literal_420 raw_421}
{rank=same; raw_419 literal_420 raw_421}

raw_419 [label="raw"]

literal_420 [label="literal"]

raw_421 [label="raw"]


raw_419 -> leaf_422
leaf_422  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These start on a new line and begin with any number of  "]
literal_420 -> leaf_423
leaf_423  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_421 -> leaf_424
leaf_424  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". These must
be followed by a space mark to be valid. Contra Babel, you may
have a content-free header line, provided a space is found before the
newline.
"]
prose_409 -> { raw_425}
{rank=same; raw_425}

raw_425 [label="raw"]


raw_425 -> leaf_426
leaf_426  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In weaves and the like, headers represent document structure. Their
intention is structural: they support the same syntax as lists,
but the user is expected to use lists for list purposes. Putting
[TODO] in a header line should mean you have a document-specific
task to perform in that block.
"]
prose_410 -> { raw_427}
{rank=same; raw_427}

raw_427 [label="raw"]


raw_427 -> leaf_428
leaf_428  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Contra Babel, you may put spaces before the beginning of a header line.
"]
prose_411 -> { raw_429}
{rank=same; raw_429}

raw_429 [label="raw"]


raw_429 -> leaf_430
leaf_430  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The semantics of header lines are entirely determined by
the number of stars.
"]
prose_412 -> { raw_431}
{rank=same; raw_431}

raw_431 [label="raw"]


raw_431 -> leaf_432
leaf_432  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If you write
"]
structure_413 -> { hashline_433}
{rank=same; hashline_433}

hashline_433 [label="hashline"]


hashline_433 -> { hashtag_434}
{rank=same; hashtag_434}

hashtag_434 [label="hashtag"]


hashtag_434 -> leaf_435
leaf_435  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_414 -> { header_436 prose_437 section_438}
{rank=same; header_436 prose_437 section_438}

header_436 [label="1 : Top Header"]

prose_437 [label="prose"]

section_438 [label="section: 369-380"]


header_436 -> leaf_439
leaf_439  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  * Top Header"]
prose_437 -> { raw_440}
{rank=same; raw_440}

raw_440 [label="raw"]


raw_440 -> leaf_441
leaf_441  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_438 -> { header_442 structure_443 structure_444 section_445}
{rank=same; header_442 structure_443 structure_444 section_445}

header_442 [label="2 : Second Header"]

structure_443 [label="structure"]

structure_444 [label="structure"]

section_445 [label="section: 381-381"]


header_442 -> leaf_446
leaf_446  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    ** Second Header"]
structure_443 -> { hashline_447}
{rank=same; hashline_447}

hashline_447 [label="hashline"]


hashline_447 -> { hashtag_448}
{rank=same; hashtag_448}

hashtag_448 [label="hashtag"]


hashtag_448 -> leaf_449
leaf_449  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_444 -> { hashline_450}
{rank=same; hashline_450}

hashline_450 [label="hashline"]


hashline_450 -> { hashtag_451}
{rank=same; hashtag_451}

hashtag_451 [label="hashtag"]


hashtag_451 -> leaf_452
leaf_452  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_445 -> { header_453 prose_454 section_455}
{rank=same; header_453 prose_454 section_455}

header_453 [label="1 : Top Header ▼"]

prose_454 [label="prose"]

section_455 [label="section: 382-731"]


header_453 -> leaf_456
leaf_456  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Top Header ▼"]
prose_454 -> { raw_457}
{rank=same; raw_457}

raw_457 [label="raw"]


raw_457 -> leaf_458
leaf_458  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_455 -> { header_459 structure_460 prose_461 prose_462 prose_463 section_464 section_465 section_466 section_467 section_468 section_469 section_470 section_471 section_472 section_473}
{rank=same; header_459 structure_460 prose_461 prose_462 prose_463 section_464 section_465 section_466 section_467 section_468 section_469 section_470 section_471 section_472 section_473}

header_459 [label="2 : Second Header ►"]

structure_460 [label="structure"]

prose_461 [label="prose"]

prose_462 [label="prose"]

prose_463 [label="prose"]

section_464 [label="section: 398-407"]

section_465 [label="section: 422-440"]

section_466 [label="section: 441-481"]

section_467 [label="section: 489-501"]

section_468 [label="section: 502-558"]

section_469 [label="section: 567-593"]

section_470 [label="section: 594-611"]

section_471 [label="section: 612-672"]

section_472 [label="section: 691-731"]

section_473 [label="section: 732-741"]


header_459 -> leaf_474
leaf_474  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   ** Second Header ►"]
structure_460 -> { hashline_475}
{rank=same; hashline_475}

hashline_475 [label="hashline"]


hashline_475 -> { hashtag_476}
{rank=same; hashtag_476}

hashtag_476 [label="hashtag"]


hashtag_476 -> leaf_477
leaf_477  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_461 -> { raw_478}
{rank=same; raw_478}

raw_478 [label="raw"]


raw_478 -> leaf_479
leaf_479  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
may contain any number of blocks.
"]
prose_462 -> { raw_480}
{rank=same; raw_480}

raw_480 [label="raw"]


raw_480 -> leaf_481
leaf_481  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
\"begins\" means first non-whitespace character. Indentation levels are tracked by
Nim rules, obviously a Grimoire document can contain no tab marks
and if any wander in they become four spaces.
"]
prose_463 -> { raw_482}
{rank=same; raw_482}

raw_482 [label="raw"]


raw_482 -> leaf_483
leaf_483  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Contra other block forms, tags may not precede a headline.
"]
section_464 -> { header_484 prose_485 prose_486 prose_487}
{rank=same; header_484 prose_485 prose_486 prose_487}

header_484 [label="4 : Header Lines"]

prose_485 [label="prose"]

prose_486 [label="prose"]

prose_487 [label="prose"]


header_484 -> leaf_488
leaf_488  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Header Lines"]
prose_485 -> { raw_489 literal_490 raw_491}
{rank=same; raw_489 literal_490 raw_491}

raw_489 [label="raw"]

literal_490 [label="literal"]

raw_491 [label="raw"]


raw_489 -> leaf_492
leaf_492  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Anything after a run of "]
literal_490 -> leaf_493
leaf_493  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
raw_491 -> leaf_494
leaf_494  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and a space, and before a newline, is
a header line.
"]
prose_486 -> { raw_495}
{rank=same; raw_495}

raw_495 [label="raw"]


raw_495 -> leaf_496
leaf_496  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Header lines and list lines are structured identically. If I discover
a necessary exception, I'll note it.
"]
prose_487 -> { raw_497}
{rank=same; raw_497}

raw_497 [label="raw"]


raw_497 -> leaf_498
leaf_498  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That structure is discussed under [[*Lists][lists]].
"]
section_465 -> { header_499 prose_500 prose_501 structure_502 prose_503 prose_504 structure_505}
{rank=same; header_499 prose_500 prose_501 structure_502 prose_503 prose_504 structure_505}

header_499 [label="3 : Prose blocks"]

prose_500 [label="prose"]

prose_501 [label="prose"]

structure_502 [label="structure"]

prose_503 [label="prose"]

prose_504 [label="prose"]

structure_505 [label="structure"]


header_499 -> leaf_506
leaf_506  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Prose blocks"]
prose_500 -> { raw_507}
{rank=same; raw_507}

raw_507 [label="raw"]


raw_507 -> leaf_508
leaf_508  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A prose block is preceded and followed by a single newline. Extraneous
whitespace on the bare line is filtered.
"]
prose_501 -> { raw_509}
{rank=same; raw_509}

raw_509 [label="raw"]


raw_509 -> leaf_510
leaf_510  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose blocks may not be indented in a semantically meaningful way.
"]
structure_502 -> { hashline_511}
{rank=same; hashline_511}

hashline_511 [label="hashline"]


hashline_511 -> { hashtag_512}
{rank=same; hashtag_512}

hashtag_512 [label="hashtag"]


hashtag_512 -> leaf_513
leaf_513  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_503 -> { raw_514}
{rank=same; raw_514}

raw_514 [label="raw"]


raw_514 -> leaf_515
leaf_515  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
    prose
"]
prose_504 -> { raw_516}
{rank=same; raw_516}

raw_516 [label="raw"]


raw_516 -> leaf_517
leaf_517  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
        prose
"]
structure_505 -> { hashline_518}
{rank=same; hashline_518}

hashline_518 [label="hashline"]


hashline_518 -> { hashtag_519}
{rank=same; hashtag_519}

hashtag_519 [label="hashtag"]


hashtag_519 -> leaf_520
leaf_520  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_466 -> { header_521 prose_522 prose_523 prose_524 prose_525 prose_526 prose_527 prose_528 structure_529 prose_530 prose_531 prose_532 section_533}
{rank=same; header_521 prose_522 prose_523 prose_524 prose_525 prose_526 prose_527 prose_528 structure_529 prose_530 prose_531 prose_532 section_533}

header_521 [label="3 : Prose markup"]

prose_522 [label="prose"]

prose_523 [label="prose"]

prose_524 [label="prose"]

prose_525 [label="prose"]

prose_526 [label="prose"]

prose_527 [label="prose"]

prose_528 [label="prose"]

structure_529 [label="structure"]

prose_530 [label="prose"]

prose_531 [label="prose"]

prose_532 [label="prose"]

section_533 [label="section: 482-488"]


header_521 -> leaf_534
leaf_534  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Prose markup"]
prose_522 -> { raw_535}
{rank=same; raw_535}

raw_535 [label="raw"]


raw_535 -> leaf_536
leaf_536  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Prose markup rules apply in any prose contexts, not just for prose blocks.
"]
prose_523 -> { raw_537 literal_538 raw_539 literal_540 raw_541 literal_542 raw_543 literal_544 raw_545 literal_546 raw_547 literal_548 raw_549 literal_550 raw_551}
{rank=same; raw_537 literal_538 raw_539 literal_540 raw_541 literal_542 raw_543 literal_544 raw_545 literal_546 raw_547 literal_548 raw_549 literal_550 raw_551}

raw_537 [label="raw"]

literal_538 [label="literal"]

raw_539 [label="raw"]

literal_540 [label="literal"]

raw_541 [label="raw"]

literal_542 [label="literal"]

raw_543 [label="raw"]

literal_544 [label="literal"]

raw_545 [label="raw"]

literal_546 [label="literal"]

raw_547 [label="raw"]

literal_548 [label="literal"]

raw_549 [label="raw"]

literal_550 [label="literal"]

raw_551 [label="raw"]


raw_537 -> leaf_552
leaf_552  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We mark "]
literal_538 -> leaf_553
leaf_553  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*bold*"]
raw_539 -> leaf_554
leaf_554  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_540 -> leaf_555
leaf_555  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/italic/"]
raw_541 -> leaf_556
leaf_556  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_542 -> leaf_557
leaf_557  [color=Gray,shape=rectangle,fontname=Inconsolata,label="_underline_"]
raw_543 -> leaf_558
leaf_558  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_544 -> leaf_559
leaf_559  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~strikethrough~"]
raw_545 -> leaf_560
leaf_560  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", 
and "]
literal_546 -> leaf_561
leaf_561  [color=Gray,shape=rectangle,fontname=Inconsolata,label="​"]
raw_547 -> leaf_562
leaf_562  [color=Gray,shape=rectangle,fontname=Inconsolata,label="literal"]
literal_548 -> leaf_563
leaf_563  [color=Gray,shape=rectangle,fontname=Inconsolata,label="​"]
raw_549 -> leaf_564
leaf_564  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", using the indicated marks. They must not be separated 
with whitespace from the connecting prose. Any number may be used and matched,
whitespace is allowed, so "]
literal_550 -> leaf_565
leaf_565  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**bold math: 4 * 5**"]
raw_551 -> leaf_566
leaf_566  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will highlight
correctly.
"]
prose_524 -> { raw_567 literal_568 raw_569}
{rank=same; raw_567 literal_568 raw_569}

raw_567 [label="raw"]

literal_568 [label="literal"]

raw_569 [label="raw"]


raw_567 -> leaf_570
leaf_570  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is also [[*Inline%20Code][Inline Code]], which is formatted "]
literal_568 -> leaf_571
leaf_571  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`code`"]
raw_569 -> leaf_572
leaf_572  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_525 -> { raw_573}
{rank=same; raw_573}

raw_573 [label="raw"]


raw_573 -> leaf_574
leaf_574  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These all follow the prose markup rule: any number of the starting
character matches the same number of the ending character in the
document string.
"]
prose_526 -> { raw_575 literal_576 raw_577 literal_578 raw_579 literal_580 raw_581 literal_582 raw_583}
{rank=same; raw_575 literal_576 raw_577 literal_578 raw_579 literal_580 raw_581 literal_582 raw_583}

raw_575 [label="raw"]

literal_576 [label="literal"]

raw_577 [label="raw"]

literal_578 [label="literal"]

raw_579 [label="raw"]

literal_580 [label="literal"]

raw_581 [label="raw"]

literal_582 [label="literal"]

raw_583 [label="raw"]


raw_575 -> leaf_584
leaf_584  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We make subscripts mildly annoying, "]
literal_576 -> leaf_585
leaf_585  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sub__script"]
raw_577 -> leaf_586
leaf_586  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
literal_578 -> leaf_587
leaf_587  [color=Gray,shape=rectangle,fontname=Inconsolata,label="super^^script"]
raw_579 -> leaf_588
leaf_588  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", 
to avoid colliding the former with "]
literal_580 -> leaf_589
leaf_589  [color=Gray,shape=rectangle,fontname=Inconsolata,label="snake_case"]
raw_581 -> leaf_590
leaf_590  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". That's a lot of ways 
to parse the "]
literal_582 -> leaf_591
leaf_591  [color=Gray,shape=rectangle,fontname=Inconsolata,label="_"]
raw_583 -> leaf_592
leaf_592  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" character...
"]
prose_527 -> { raw_593 literal_594 raw_595}
{rank=same; raw_593 literal_594 raw_595}

raw_593 [label="raw"]

literal_594 [label="literal"]

raw_595 [label="raw"]


raw_593 -> leaf_596
leaf_596  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In general, prose is more 'active'  than in Babel. There are more things
you can't say without triggering a parsed data structure.  Due to quirks
of Org  involving string  escaping, "]
literal_594 -> leaf_597
leaf_597  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`\\\"\\\"`"]
raw_595 -> leaf_598
leaf_598  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  can't be  literally quoted
without repercussions. Check  out the source if you enjoy pounding your
head in frustration at the nastiness of escaped strings.
"]
prose_528 -> { raw_599}
{rank=same; raw_599}

raw_599 [label="raw"]


raw_599 -> leaf_600
leaf_600  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Let's just use a code block:
"]
structure_529 -> { hashline_601}
{rank=same; hashline_601}

hashline_601 [label="hashline"]


hashline_601 -> { hashtag_602}
{rank=same; hashtag_602}

hashtag_602 [label="hashtag"]


hashtag_602 -> leaf_603
leaf_603  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_530 -> { raw_604 literal_605 raw_606 bold_607 raw_608}
{rank=same; raw_604 literal_605 raw_606 bold_607 raw_608}

raw_604 [label="raw"]

literal_605 [label="literal"]

raw_606 [label="raw"]

bold_607 [label="bold"]

raw_608 [label="raw"]


raw_604 -> leaf_609
leaf_609  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
one, of the \" character. This is pretty-printed in edit mode as "]
literal_605 -> leaf_610
leaf_610  [color=Gray,shape=rectangle,fontname=Inconsolata,label="‟literal”"]
raw_606 -> leaf_611
leaf_611  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
but such a string does "]
bold_607 -> leaf_612
leaf_612  [color=Gray,shape=rectangle,fontname=Inconsolata,label="not"]
raw_608 -> leaf_613
leaf_613  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" create escaping, we rely on semantic highlighting
to make the distinction clear.
"]
prose_531 -> { raw_614}
{rank=same; raw_614}

raw_614 [label="raw"]


raw_614 -> leaf_615
leaf_615  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Any number of \"\"\"\" collapse into one set of such balanced quites.
"]
prose_532 -> { raw_616}
{rank=same; raw_616}

raw_616 [label="raw"]


raw_616 -> leaf_617
leaf_617  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the woven documentation, no quotation marks appear, just the string.
"]
section_533 -> { header_618 prose_619}
{rank=same; header_618 prose_619}

header_618 [label="4 : Latex"]

prose_619 [label="prose"]


header_618 -> leaf_620
leaf_620  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Latex"]
prose_619 -> { raw_621 literal_622 raw_623}
{rank=same; raw_621 literal_622 raw_623}

raw_621 [label="raw"]

literal_622 [label="literal"]

raw_623 [label="raw"]


raw_621 -> leaf_624
leaf_624  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

For further markup purposes in a prose context, we escape to LaTeX. The
syntax is "]
literal_622 -> leaf_625
leaf_625  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`\\latex`"]
raw_623 -> leaf_626
leaf_626  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", where the backslash causes us to use LaTeX instead
of Lua. Our TeX backend is LuaTeX, giving arbitrary levels of control from
within a Grimoire-native language.
"]
section_467 -> { header_627 prose_628 prose_629 prose_630}
{rank=same; header_627 prose_628 prose_629 prose_630}

header_627 [label="3 : Comments"]

prose_628 [label="prose"]

prose_629 [label="prose"]

prose_630 [label="prose"]


header_627 -> leaf_631
leaf_631  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Comments"]
prose_628 -> { raw_632 literal_633 raw_634}
{rank=same; raw_632 literal_633 raw_634}

raw_632 [label="raw"]

literal_633 [label="literal"]

raw_634 [label="raw"]


raw_632 -> leaf_635
leaf_635  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

In a structure context, you may place line comments. These begin with "]
literal_633 -> leaf_636
leaf_636  [color=Gray,shape=rectangle,fontname=Inconsolata,label="--"]
raw_634 -> leaf_637
leaf_637  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
and continue to the end of a line.
"]
prose_629 -> { raw_638 bold_639 raw_640}
{rank=same; raw_638 bold_639 raw_640}

raw_638 [label="raw"]

bold_639 [label="bold"]

raw_640 [label="raw"]


raw_638 -> leaf_641
leaf_641  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Commenting out a header line, or anything else, causes it to be ignored.
It does "]
bold_639 -> leaf_642
leaf_642  [color=Gray,shape=rectangle,fontname=Inconsolata,label="not"]
raw_640 -> leaf_643
leaf_643  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" result in any subdata being commented out, though it will
in the case of a headline change the ownership of the owned blocks.
"]
prose_630 -> { raw_644 literal_645 raw_646}
{rank=same; raw_644 literal_645 raw_646}

raw_644 [label="raw"]

literal_645 [label="literal"]

raw_646 [label="raw"]


raw_644 -> leaf_647
leaf_647  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The  tag "]
literal_645 -> leaf_648
leaf_648  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#comment"]
raw_646 -> leaf_649
leaf_649  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  in a  valid tag  content position  marks the  owned
region  of  the tagged  block  as  a  comment.  Nothing within  will  be
evaluated or exported, though it will be parsed.
"]
section_468 -> { header_650 prose_651 prose_652 prose_653 prose_654 prose_655 prose_656 prose_657 prose_658 prose_659 prose_660 prose_661 prose_662 prose_663 prose_664 prose_665 prose_666 section_667}
{rank=same; header_650 prose_651 prose_652 prose_653 prose_654 prose_655 prose_656 prose_657 prose_658 prose_659 prose_660 prose_661 prose_662 prose_663 prose_664 prose_665 prose_666 section_667}

header_650 [label="3 : Marks"]

prose_651 [label="prose"]

prose_652 [label="prose"]

prose_653 [label="prose"]

prose_654 [label="prose"]

prose_655 [label="prose"]

prose_656 [label="prose"]

prose_657 [label="prose"]

prose_658 [label="prose"]

prose_659 [label="prose"]

prose_660 [label="prose"]

prose_661 [label="prose"]

prose_662 [label="prose"]

prose_663 [label="prose"]

prose_664 [label="prose"]

prose_665 [label="prose"]

prose_666 [label="prose"]

section_667 [label="section: 559-566"]


header_650 -> leaf_668
leaf_668  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Marks"]
prose_651 -> { raw_669}
{rank=same; raw_669}

raw_669 [label="raw"]


raw_669 -> leaf_670
leaf_670  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Marks provide global semantic categories for Grimoire. They may appear
anywhere, including a prose context, whitespace is required on both sides.
"]
prose_652 -> { raw_671 literal_672 raw_673 literal_674 raw_675}
{rank=same; raw_671 literal_672 raw_673 literal_674 raw_675}

raw_671 [label="raw"]

literal_672 [label="literal"]

raw_673 [label="raw"]

literal_674 [label="literal"]

raw_675 [label="raw"]


raw_671 -> leaf_676
leaf_676  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We use  a couple kinds  of marks:  "]
literal_672 -> leaf_677
leaf_677  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@names"]
raw_673 -> leaf_678
leaf_678  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" name things,  and "]
literal_674 -> leaf_679
leaf_679  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#tags"]
raw_675 -> leaf_680
leaf_680  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
categorize them. Tags are semantics, while names are nominal. 
"]
prose_653 -> { raw_681 literal_682 raw_683 literal_684 raw_685}
{rank=same; raw_681 literal_682 raw_683 literal_684 raw_685}

raw_681 [label="raw"]

literal_682 [label="literal"]

raw_683 [label="raw"]

literal_684 [label="literal"]

raw_685 [label="raw"]


raw_681 -> leaf_686
leaf_686  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags that  are boundaries are  paired as  "]
literal_682 -> leaf_687
leaf_687  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#tag"]
raw_683 -> leaf_688
leaf_688  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
literal_684 -> leaf_689
leaf_689  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#/tag"]
raw_685 -> leaf_690
leaf_690  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",  plus some
light sugaring. Names are never bounded
"]
prose_654 -> { raw_691}
{rank=same; raw_691}

raw_691 [label="raw"]


raw_691 -> leaf_692
leaf_692  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Marks in the first position own the following line. If there is indentation
below that line, they own that too. This doesn't affect the associativity.
"]
prose_655 -> { raw_693 literal_694 raw_695 literal_696 raw_697}
{rank=same; raw_693 literal_694 raw_695 literal_696 raw_697}

raw_693 [label="raw"]

literal_694 [label="literal"]

raw_695 [label="raw"]

literal_696 [label="literal"]

raw_697 [label="raw"]


raw_693 -> leaf_698
leaf_698  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Marks may be namespaced, as "]
literal_694 -> leaf_699
leaf_699  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@name.subname"]
raw_695 -> leaf_700
leaf_700  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or "]
literal_696 -> leaf_701
leaf_701  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#tag.sub-tag.sub-tag"]
raw_697 -> leaf_702
leaf_702  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_656 -> { raw_703 literal_704 raw_705 literal_706 raw_707}
{rank=same; raw_703 literal_704 raw_705 literal_706 raw_707}

raw_703 [label="raw"]

literal_704 [label="literal"]

raw_705 [label="raw"]

literal_706 [label="literal"]

raw_707 [label="raw"]


raw_703 -> leaf_708
leaf_708  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If  you  require   further  namespacing,  "]
literal_704 -> leaf_709
leaf_709  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@many/levels/java.class"]
raw_705 -> leaf_710
leaf_710  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  and"]
literal_706 -> leaf_711
leaf_711  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#mojo/nation.space/station"]
raw_707 -> leaf_712
leaf_712  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  is your  friend. Codices (that is, projects
following the bridge conventions for organization) will use namespacing
in a consistent way. 
"]
prose_657 -> { raw_713 literal_714 raw_715}
{rank=same; raw_713 literal_714 raw_715}

raw_713 [label="raw"]

literal_714 [label="literal"]

raw_715 [label="raw"]


raw_713 -> leaf_716
leaf_716  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
As I continue to muse on it, I  can think of no reason why marks couldn't follow
URI syntax,  or at  least mirror  it closely.  Chaining marks  is not  valid, so"]
literal_714 -> leaf_717
leaf_717  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@named@example.com"]
raw_715 -> leaf_718
leaf_718  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" could be a valid name. 
"]
prose_658 -> { raw_719 literal_720 raw_721}
{rank=same; raw_719 literal_720 raw_721}

raw_719 [label="raw"]

literal_720 [label="literal"]

raw_721 [label="raw"]


raw_719 -> leaf_722
leaf_722  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This would mean we could say something like "]
literal_720 -> leaf_723
leaf_723  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@file://~/usr/blah"]
raw_721 -> leaf_724
leaf_724  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_659 -> { raw_725 literal_726 raw_727}
{rank=same; raw_725 literal_726 raw_727}

raw_725 [label="raw"]

literal_726 [label="literal"]

raw_727 [label="raw"]


raw_725 -> leaf_728
leaf_728  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Or "]
literal_726 -> leaf_729
leaf_729  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!/usr/bin/perl/"]
raw_727 -> leaf_730
leaf_730  [color=Gray,shape=rectangle,fontname=Inconsolata,label="...
"]
prose_660 -> { raw_731}
{rank=same; raw_731}

raw_731 [label="raw"]


raw_731 -> leaf_732
leaf_732  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Yes. This  is a good idea.  Let's do this.  It doesn't displace [[*Links][link]]  syntax, it
enhances it. A  URI [[http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax][may not begin with  a slash]] so this is  parse-clean for tags
and names both. Tags aren't intended to  be user extensible in the narrow sense,
but uniformity is a virtue.
"]
prose_661 -> { raw_733}
{rank=same; raw_733}

raw_733 [label="raw"]


raw_733 -> leaf_734
leaf_734  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't know why you might want to stick a query in a tag. It's not my
place to know. We just slap a parser on that puppy and continue.
"]
prose_662 -> { raw_735}
{rank=same; raw_735}

raw_735 [label="raw"]


raw_735 -> leaf_736
leaf_736  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Implication: The hash or at should be syntax highlighted a different color
from the tag. I'd say hash and at get the same color, with categories and
symbols getting different ones.
"]
prose_663 -> { raw_737}
{rank=same; raw_737}

raw_737 [label="raw"]


raw_737 -> leaf_738
leaf_738  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Apparently, [[http://blog.nig.gl/post/48802013022/although-parentheses-are-technically-allowed-in][parentheses are allowed in URLs]], but follow the link, they
suck and you should never use them. They play badly with our calling
convention for named structures, and aren't allowed in our schema.
"]
prose_664 -> { raw_739 literal_740 raw_741}
{rank=same; raw_739 literal_740 raw_741}

raw_739 [label="raw"]

literal_740 [label="literal"]

raw_741 [label="raw"]


raw_739 -> leaf_742
leaf_742  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's not a real URI anyway, or it can be but it's also allowed to be a legal
fragment without the handle. In our case the assumed handle is "]
literal_740 -> leaf_743
leaf_743  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grimoire://"]
raw_741 -> leaf_744
leaf_744  [color=Gray,shape=rectangle,fontname=Inconsolata,label="?
"]
prose_665 -> { raw_745}
{rank=same; raw_745}

raw_745 [label="raw"]


raw_745 -> leaf_746
leaf_746  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Not a real URI. But an acceptable fake one.
"]
prose_666 -> { raw_747 literal_748 raw_749 literal_750 raw_751}
{rank=same; raw_747 literal_748 raw_749 literal_750 raw_751}

raw_747 [label="raw"]

literal_748 [label="literal"]

raw_749 [label="raw"]

literal_750 [label="literal"]

raw_751 [label="raw"]


raw_747 -> leaf_752
leaf_752  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The actual rule for a mark is that it begins with "]
literal_748 -> leaf_753
leaf_753  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@"]
raw_749 -> leaf_754
leaf_754  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or "]
literal_750 -> leaf_755
leaf_755  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#"]
raw_751 -> leaf_756
leaf_756  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and is surrounded
by whitespace. Internal parsing of the mark is part of recognition, anything 
not recognized is subsequently ignored. It's still considered a mark for e.g. 
weaving purposes. 


"]
section_667 -> { header_757 prose_758 prose_759}
{rank=same; header_757 prose_758 prose_759}

header_757 [label="4 : Plural Hashtags"]

prose_758 [label="prose"]

prose_759 [label="prose"]


header_757 -> leaf_760
leaf_760  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Plural Hashtags"]
prose_758 -> { raw_761 literal_762 raw_763 literal_764 raw_765}
{rank=same; raw_761 literal_762 raw_763 literal_764 raw_765}

raw_761 [label="raw"]

literal_762 [label="literal"]

raw_763 [label="raw"]

literal_764 [label="literal"]

raw_765 [label="raw"]


raw_761 -> leaf_766
leaf_766  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

In some cases, such as "]
literal_762 -> leaf_767
leaf_767  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#formula"]
raw_763 -> leaf_768
leaf_768  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
literal_764 -> leaf_769
leaf_769  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#formulas"]
raw_765 -> leaf_770
leaf_770  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", a tag may have a
singular or plural form. These are equivalent from the runtimes perspective.
"]
prose_759 -> { raw_771 literal_772 raw_773 literal_774 raw_775}
{rank=same; raw_771 literal_772 raw_773 literal_774 raw_775}

raw_771 [label="raw"]

literal_772 [label="literal"]

raw_773 [label="raw"]

literal_774 [label="literal"]

raw_775 [label="raw"]


raw_771 -> leaf_776
leaf_776  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The same concept applies to pairs such as "]
literal_772 -> leaf_777
leaf_777  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#export"]
raw_773 -> leaf_778
leaf_778  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
literal_774 -> leaf_779
leaf_779  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#exports"]
raw_775 -> leaf_780
leaf_780  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", though
the linguistic distinction is not that of plurality.
"]
section_469 -> { header_781 prose_782 prose_783 prose_784 prose_785 prose_786 prose_787}
{rank=same; header_781 prose_782 prose_783 prose_784 prose_785 prose_786 prose_787}

header_781 [label="3 : Classes"]

prose_782 [label="prose"]

prose_783 [label="prose"]

prose_784 [label="prose"]

prose_785 [label="prose"]

prose_786 [label="prose"]

prose_787 [label="prose"]


header_781 -> leaf_788
leaf_788  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Classes"]
prose_782 -> { raw_789}
{rank=same; raw_789}

raw_789 [label="raw"]


raw_789 -> leaf_790
leaf_790  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Tags are for Grimoire. A category provides runtime semantics,
cooperating with structure groups to provide the API. Names
play the role of a value in languages which provide a
value-variable distinction: every name within a documents reachable
namespace must be globally unique.
"]
prose_783 -> { raw_791}
{rank=same; raw_791}

raw_791 [label="raw"]


raw_791 -> leaf_792
leaf_792  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Specifically names are globally hyperstatic: any redefinition affects
the referent from the moment the parser receives it forward. Redefinitions
are warned against and have no utility, don't do it.
"]
prose_784 -> { raw_793}
{rank=same; raw_793}

raw_793 [label="raw"]


raw_793 -> leaf_794
leaf_794  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Classes are roughly equivalent to categories/hashtags, but
for the user. They have a light semantics similar to their
function in Org.
"]
prose_785 -> { raw_795 literal_796 raw_797 literal_798 raw_799 literal_800 raw_801}
{rank=same; raw_795 literal_796 raw_797 literal_798 raw_799 literal_800 raw_801}

raw_795 [label="raw"]

literal_796 [label="literal"]

raw_797 [label="raw"]

literal_798 [label="literal"]

raw_799 [label="raw"]

literal_800 [label="literal"]

raw_801 [label="raw"]


raw_795 -> leaf_802
leaf_802  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A class is defined as "]
literal_796 -> leaf_803
leaf_803  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":Class:"]
raw_797 -> leaf_804
leaf_804  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or "]
literal_798 -> leaf_805
leaf_805  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":class:"]
raw_799 -> leaf_806
leaf_806  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" including"]
literal_800 -> leaf_807
leaf_807  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":several:Classes:chained:"]
raw_801 -> leaf_808
leaf_808  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_786 -> { raw_809}
{rank=same; raw_809}

raw_809 [label="raw"]


raw_809 -> leaf_810
leaf_810  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A capital letter means the class inherits onto all subgroups of the block,
a miniscule means the class is associated with the indentation level it is
found within.
"]
prose_787 -> { raw_811}
{rank=same; raw_811}

raw_811 [label="raw"]


raw_811 -> leaf_812
leaf_812  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You know you're programming a computer when class and category have distinct
semantics. At least there are no objects, and only two primitive types,
structure and prose.
"]
section_470 -> { header_813 prose_814 prose_815 structure_816 prose_817 prose_818}
{rank=same; header_813 prose_814 prose_815 structure_816 prose_817 prose_818}

header_813 [label="3 : Links"]

prose_814 [label="prose"]

prose_815 [label="prose"]

structure_816 [label="structure"]

prose_817 [label="prose"]

prose_818 [label="prose"]


header_813 -> leaf_819
leaf_819  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Links"]
prose_814 -> { raw_820}
{rank=same; raw_820}

raw_820 [label="raw"]


raw_820 -> leaf_821
leaf_821  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

There's nothing at all wrong with the syntax or behavior of Babel links.
"]
prose_815 -> { raw_822}
{rank=same; raw_822}

raw_822 [label="raw"]


raw_822 -> leaf_823
leaf_823  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which look like this:
"]
structure_816 -> { hashline_824}
{rank=same; hashline_824}

hashline_824 [label="hashline"]


hashline_824 -> { hashtag_825}
{rank=same; hashtag_825}

hashtag_825 [label="hashtag"]


hashtag_825 -> leaf_826
leaf_826  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_817 -> { raw_827 literal_828 raw_829}
{rank=same; raw_827 literal_828 raw_829}

raw_827 [label="raw"]

literal_828 [label="literal"]

raw_829 [label="raw"]


raw_827 -> leaf_830
leaf_830  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We won't support legacy forms of footnoting, such as "]
literal_828 -> leaf_831
leaf_831  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[1]"]
raw_829 -> leaf_832
leaf_832  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". This applies
to legacy versions of table formulas and list syntax also.
"]
prose_818 -> { raw_833}
{rank=same; raw_833}

raw_833 [label="raw"]


raw_833 -> leaf_834
leaf_834  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In Grimoire  there's one way  to do things.  At least, we  avoid variant
syntax with identical semantics.
"]
section_471 -> { header_835 prose_836 prose_837 prose_838 prose_839 prose_840 structure_841 prose_842 prose_843 prose_844 prose_845 prose_846 prose_847 prose_848 prose_849 section_850}
{rank=same; header_835 prose_836 prose_837 prose_838 prose_839 prose_840 structure_841 prose_842 prose_843 prose_844 prose_845 prose_846 prose_847 prose_848 prose_849 section_850}

header_835 [label="3 : Cookies"]

prose_836 [label="prose"]

prose_837 [label="prose"]

prose_838 [label="prose"]

prose_839 [label="prose"]

prose_840 [label="prose"]

structure_841 [label="structure"]

prose_842 [label="prose"]

prose_843 [label="prose"]

prose_844 [label="prose"]

prose_845 [label="prose"]

prose_846 [label="prose"]

prose_847 [label="prose"]

prose_848 [label="prose"]

prose_849 [label="prose"]

section_850 [label="section: 673-690"]


header_835 -> leaf_851
leaf_851  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Cookies"]
prose_836 -> { raw_852 literal_853 raw_854}
{rank=same; raw_852 literal_853 raw_854}

raw_852 [label="raw"]

literal_853 [label="literal"]

raw_854 [label="raw"]


raw_852 -> leaf_855
leaf_855  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

List line contexts (header lines and list lines) may have cookies. A
cookie looks like "]
literal_853 -> leaf_856
leaf_856  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[ ]"]
raw_854 -> leaf_857
leaf_857  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", it must have contents and a space on both sides.
"]
prose_837 -> { raw_858}
{rank=same; raw_858}

raw_858 [label="raw"]


raw_858 -> leaf_859
leaf_859  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies are valid after the symbol that defines the list line, but before
anything else. They are also valid at the end of a list line, in which
case they are preceded by a space and followed by a newline.
"]
prose_838 -> { raw_860}
{rank=same; raw_860}

raw_860 [label="raw"]


raw_860 -> leaf_861
leaf_861  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies are distinctive in that they may only be applied to list lines.
Most other token-like groups, specifically tags, classes, and inline drawers,
may be embedded into all prose contexts excepting literal strings.
"]
prose_839 -> { raw_862}
{rank=same; raw_862}

raw_862 [label="raw"]


raw_862 -> leaf_863
leaf_863  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies are used similarly to cookies in Org, but with consistent semantics.
A simple cookie set is \"X\" and \" \", the user cycles through them. TODO and
DONE are another option.
"]
prose_840 -> { raw_864}
{rank=same; raw_864}

raw_864 [label="raw"]


raw_864 -> leaf_865
leaf_865  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't want cookies to turn into lightweight tables. Still, saying to
the user \"you may have precisely two cookies a line\" is restrictive.
It's not a violation of the [[http://c2.com/cgi/wiki?TwoIsAnImpossibleNumber][\"Two is an Impossible Number\"]] principle,
because they're head and tail. I think this is ugly:
"]
structure_841 -> { hashline_866}
{rank=same; hashline_866}

hashline_866 [label="hashline"]


hashline_866 -> { hashtag_867}
{rank=same; hashtag_867}

hashtag_867 [label="hashtag"]


hashtag_867 -> leaf_868
leaf_868  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_842 -> { raw_869}
{rank=same; raw_869}

raw_869 [label="raw"]


raw_869 -> leaf_870
leaf_870  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You can stick a table in a list. I don't know if I mentioned, it's kind
of an obvious thing, I'll write a unit for it at some point.
"]
prose_843 -> { raw_871}
{rank=same; raw_871}

raw_871 [label="raw"]


raw_871 -> leaf_872
leaf_872  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Still. I can see a case for two on the left. Once you allow two, you allow
n, without excellent reason.
"]
prose_844 -> { raw_873}
{rank=same; raw_873}

raw_873 [label="raw"]


raw_873 -> leaf_874
leaf_874  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[[*Radio%20cookies][Radio cookies]] must be the leftmost cookie on a line, only one is of course allowed.
I could allow a single-line short form multi-radio-button interface but what
is it, a fancy text slider for some value? No. Any number of ordinary cookies
can follow. Knock yourself out.
"]
prose_845 -> { raw_875}
{rank=same; raw_875}

raw_875 [label="raw"]


raw_875 -> leaf_876
leaf_876  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Anything more than a couple and one should consider a class or a table.
Handrolling data structures is perverse in a markup language, and I'm
still tempted to forbid it.
"]
prose_846 -> { raw_877 literal_878 raw_879 literal_880 raw_881}
{rank=same; raw_877 literal_878 raw_879 literal_880 raw_881}

raw_877 [label="raw"]

literal_878 [label="literal"]

raw_879 [label="raw"]

literal_880 [label="literal"]

raw_881 [label="raw"]


raw_877 -> leaf_882
leaf_882  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't like distinctions without difference. A cookie at the end of a
line is filled by Grimoire, not the user. This mirrors Org's use, which is
to display either a percent or a n/m marker for completion of list items.
The user seeds the cookie, in these cases with "]
literal_878 -> leaf_883
leaf_883  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%"]
raw_879 -> leaf_884
leaf_884  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or "]
literal_880 -> leaf_885
leaf_885  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/"]
raw_881 -> leaf_886
leaf_886  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and the runtime
does the rest.
"]
prose_847 -> { raw_887}
{rank=same; raw_887}

raw_887 [label="raw"]


raw_887 -> leaf_888
leaf_888  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Adding more than one such structure to the tail list would complicate the
reference syntax, which I haven't designed, and again, it's just not necessary.
Grimoire can fill in any data structure, \"n-dimensional end cookie array\"
isn't one we have a compelling need for.
"]
prose_848 -> { raw_889}
{rank=same; raw_889}

raw_889 [label="raw"]


raw_889 -> leaf_890
leaf_890  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Cookies could interact badly with link syntax. I don't think a [bare box]
qualifies as a link in Org, clearly it doesn't, we can follow that notion
and disallow \"[]\" as a filling for cookies.
"]
prose_849 -> { raw_891}
{rank=same; raw_891}

raw_891 [label="raw"]


raw_891 -> leaf_892
leaf_892  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I also think they should be allowed in table cells, which have their own
context which is mostly handwaved right now but is prose++.
"]
section_850 -> { header_893 prose_894 prose_895 prose_896 prose_897}
{rank=same; header_893 prose_894 prose_895 prose_896 prose_897}

header_893 [label="4 : Radio cookies"]

prose_894 [label="prose"]

prose_895 [label="prose"]

prose_896 [label="prose"]

prose_897 [label="prose"]


header_893 -> leaf_898
leaf_898  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Radio cookies"]
prose_894 -> { raw_899 literal_900 raw_901}
{rank=same; raw_899 literal_900 raw_901}

raw_899 [label="raw"]

literal_900 [label="literal"]

raw_901 [label="raw"]


raw_899 -> leaf_902
leaf_902  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We have one 'weird cookie'. A radio cookie, which looks like "]
literal_900 -> leaf_903
leaf_903  [color=Gray,shape=rectangle,fontname=Inconsolata,label="( )"]
raw_901 -> leaf_904
leaf_904  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
must be present at the head position of list line contexts. All
list lines at the same level of indentation must have one, if one does.
"]
prose_895 -> { raw_905}
{rank=same; raw_905}

raw_905 [label="raw"]


raw_905 -> leaf_906
leaf_906  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Only one is selected at any given time. These would be awkward to add
into tables, to little gain.
"]
prose_896 -> { raw_907}
{rank=same; raw_907}

raw_907 [label="raw"]


raw_907 -> leaf_908
leaf_908  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This comes perilously close to pushing us into the realm of error.
The formatter adds buttons to an entire subtree if one member has it,
and if more than one is ticked off, it warns if possible or removes
all but the first mark encountered. If none are present the first
option is selected.
"]
prose_897 -> { raw_909}
{rank=same; raw_909}

raw_909 [label="raw"]


raw_909 -> leaf_910
leaf_910  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The runtime will not normally build an invalid radio list, but
Grimoire must import plain text.
"]
section_472 -> { header_911 prose_912 structure_913 prose_914 prose_915 prose_916 structure_917 prose_918 prose_919 prose_920}
{rank=same; header_911 prose_912 structure_913 prose_914 prose_915 prose_916 structure_917 prose_918 prose_919 prose_920}

header_911 [label="3 : Drawers"]

prose_912 [label="prose"]

structure_913 [label="structure"]

prose_914 [label="prose"]

prose_915 [label="prose"]

prose_916 [label="prose"]

structure_917 [label="structure"]

prose_918 [label="prose"]

prose_919 [label="prose"]

prose_920 [label="prose"]


header_911 -> leaf_921
leaf_921  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Drawers"]
prose_912 -> { raw_922}
{rank=same; raw_922}

raw_922 [label="raw"]


raw_922 -> leaf_923
leaf_923  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A drawer is a block that's hidden by default. The computer sees it,
the user sees ⦿, or a similar rune.
"]
structure_913 -> { hashline_924}
{rank=same; hashline_924}

hashline_924 [label="hashline"]


hashline_924 -> { hashtag_925}
{rank=same; hashtag_925}

hashtag_925 [label="hashtag"]


hashtag_925 -> leaf_926
leaf_926  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_914 -> { raw_927}
{rank=same; raw_927}

raw_927 [label="raw"]


raw_927 -> leaf_928
leaf_928  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
without opening it. Deleting into an ordinary fold marker opens the fold,
deleting towards a drawer marker skips past it.
"]
prose_915 -> { raw_929 literal_930 raw_931 literal_932 raw_933 literal_934 raw_935 literal_936 raw_937}
{rank=same; raw_929 literal_930 raw_931 literal_932 raw_933 literal_934 raw_935 literal_936 raw_937}

raw_929 [label="raw"]

literal_930 [label="literal"]

raw_931 [label="raw"]

literal_932 [label="literal"]

raw_933 [label="raw"]

literal_934 [label="literal"]

raw_935 [label="raw"]

literal_936 [label="literal"]

raw_937 [label="raw"]


raw_929 -> leaf_938
leaf_938  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
literal_930 -> leaf_939
leaf_939  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a-drawer"]
raw_931 -> leaf_940
leaf_940  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  is  a type,  not  a  name, something  like  "]
literal_932 -> leaf_941
leaf_941  [color=Gray,shape=rectangle,fontname=Inconsolata,label="weave"]
raw_933 -> leaf_942
leaf_942  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  or "]
literal_934 -> leaf_943
leaf_943  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tangle"]
raw_935 -> leaf_944
leaf_944  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  in
practice. This may or  may not be supported with a "]
literal_936 -> leaf_945
leaf_945  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#weave"]
raw_937 -> leaf_946
leaf_946  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  tag. 
"]
prose_916 -> { raw_947}
{rank=same; raw_947}

raw_947 [label="raw"]


raw_947 -> leaf_948
leaf_948  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm not entirely sure how to interact names with drawers, perhaps like this:
"]
structure_917 -> { hashline_949}
{rank=same; hashline_949}

hashline_949 [label="hashline"]


hashline_949 -> { hashtag_950}
{rank=same; hashtag_950}

hashtag_950 [label="hashtag"]


hashtag_950 -> leaf_951
leaf_951  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_918 -> { raw_952}
{rank=same; raw_952}

raw_952 [label="raw"]


raw_952 -> leaf_953
leaf_953  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
should keep it closed unless it's  open, those are the only additional semantics
associated.
"]
prose_919 -> { raw_954}
{rank=same; raw_954}

raw_954 [label="raw"]


raw_954 -> leaf_955
leaf_955  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This lets master wizards embed unobtrusive magic into documents for apprentice
wizards to spell with.
"]
prose_920 -> { raw_956 literal_957 raw_958}
{rank=same; raw_956 literal_957 raw_958}

raw_956 [label="raw"]

literal_957 [label="literal"]

raw_958 [label="raw"]


raw_956 -> leaf_959
leaf_959  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An inline drawer looks like "]
literal_957 -> leaf_960
leaf_960  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":[[some contents]]:"]
raw_958 -> leaf_961
leaf_961  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  As usual when we say \"inline\" it
can be as long as you want. Being anonymous, because untagged, the only semantics
of such a drawer are to hide the contents in source mode. 
"]
section_473 -> { header_962 prose_963 prose_964 prose_965 structure_966 section_967}
{rank=same; header_962 prose_963 prose_964 prose_965 structure_966 section_967}

header_962 [label="3 : Runes"]

prose_963 [label="prose"]

prose_964 [label="prose"]

prose_965 [label="prose"]

structure_966 [label="structure"]

section_967 [label="section: 742-742"]


header_962 -> leaf_968
leaf_968  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Runes"]
prose_963 -> { raw_969}
{rank=same; raw_969}

raw_969 [label="raw"]


raw_969 -> leaf_970
leaf_970  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

After drawers is as good a place to put runes as any.
"]
prose_964 -> { raw_971}
{rank=same; raw_971}

raw_971 [label="raw"]


raw_971 -> leaf_972
leaf_972  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Runes are characters drawn from the pictographic zones of Unicode,
which describe semantic activity within a document.
"]
prose_965 -> { raw_973}
{rank=same; raw_973}

raw_973 [label="raw"]


raw_973 -> leaf_974
leaf_974  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Contra Org, when we have something like the aformentioned:
"]
structure_966 -> { hashline_975}
{rank=same; hashline_975}

hashline_975 [label="hashline"]


hashline_975 -> { hashtag_976}
{rank=same; hashtag_976}

hashtag_976 [label="hashtag"]


hashtag_976 -> leaf_977
leaf_977  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_967 -> { header_978 prose_979 section_980}
{rank=same; header_978 prose_979 section_980}

header_978 [label="1 : Top Header ▼"]

prose_979 [label="prose"]

section_980 [label="section: 743-924"]


header_978 -> leaf_981
leaf_981  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Top Header ▼"]
prose_979 -> { raw_982}
{rank=same; raw_982}

raw_982 [label="raw"]


raw_982 -> leaf_983
leaf_983  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_980 -> { header_984 structure_985 prose_986 prose_987 prose_988 prose_989 prose_990 prose_991 prose_992 section_993 section_994 section_995 section_996 section_997}
{rank=same; header_984 structure_985 prose_986 prose_987 prose_988 prose_989 prose_990 prose_991 prose_992 section_993 section_994 section_995 section_996 section_997}

header_984 [label="2 : Second Header ►"]

structure_985 [label="structure"]

prose_986 [label="prose"]

prose_987 [label="prose"]

prose_988 [label="prose"]

prose_989 [label="prose"]

prose_990 [label="prose"]

prose_991 [label="prose"]

prose_992 [label="prose"]

section_993 [label="section: 772-822"]

section_994 [label="section: 823-843"]

section_995 [label="section: 844-910"]

section_996 [label="section: 911-924"]

section_997 [label="section: 925-963"]


header_984 -> leaf_998
leaf_998  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   ** Second Header ►"]
structure_985 -> { hashline_999}
{rank=same; hashline_999}

hashline_999 [label="hashline"]


hashline_999 -> { hashtag_1000}
{rank=same; hashtag_1000}

hashtag_1000 [label="hashtag"]


hashtag_1000 -> leaf_1001
leaf_1001  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_986 -> { raw_1002}
{rank=same; raw_1002}

raw_1002 [label="raw"]


raw_1002 -> leaf_1003
leaf_1003  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
any transformation we may take. If you load up last Wednesday's
version of something, it will be in last Wednesday's fold state.
"]
prose_987 -> { raw_1004}
{rank=same; raw_1004}

raw_1004 [label="raw"]


raw_1004 -> leaf_1005
leaf_1005  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This lets us have richer folding semantics, like \"don't unfold when
cycling\". It lets us have richer drawer semantics, and so on.
"]
prose_988 -> { raw_1006}
{rank=same; raw_1006}

raw_1006 [label="raw"]


raw_1006 -> leaf_1007
leaf_1007  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We will reserve a number of characters for this purpose, at least
"]
prose_989 -> { raw_1008}
{rank=same; raw_1008}

raw_1008 [label="raw"]


raw_1008 -> leaf_1009
leaf_1009  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
| ▼ |  ► | ⦿ |
    |
"]
prose_990 -> { raw_1010}
{rank=same; raw_1010}

raw_1010 [label="raw"]


raw_1010 -> leaf_1011
leaf_1011  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's legal to delete runes, like anything else. It's also legal to
insert them manually. Neither of these paradigms is typical;
deleting into a rune may or may not cause it to disappear in
normal edit mode.
"]
prose_991 -> { raw_1012}
{rank=same; raw_1012}

raw_1012 [label="raw"]


raw_1012 -> leaf_1013
leaf_1013  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Runes, like absolutely everything in Grimoire, are prose if encountered
in a context where they aren't valid structure.
"]
prose_992 -> { raw_1014}
{rank=same; raw_1014}

raw_1014 [label="raw"]


raw_1014 -> leaf_1015
leaf_1015  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We will most likely reuse runes inside cookies, though it's just as valid
and quite typical to use normal letters or words.
"]
section_993 -> { header_1016 prose_1017 prose_1018 structure_1019 prose_1020 prose_1021 structure_1022 structure_1023}
{rank=same; header_1016 prose_1017 prose_1018 structure_1019 prose_1020 prose_1021 structure_1022 structure_1023}

header_1016 [label="3 : Lists"]

prose_1017 [label="prose"]

prose_1018 [label="prose"]

structure_1019 [label="structure"]

prose_1020 [label="prose"]

prose_1021 [label="prose"]

structure_1022 [label="structure"]

structure_1023 [label="structure"]


header_1016 -> leaf_1024
leaf_1024  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Lists"]
prose_1017 -> { raw_1025}
{rank=same; raw_1025}

raw_1025 [label="raw"]


raw_1025 -> leaf_1026
leaf_1026  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Something that irks me about Org is basically historic. It was a TODO
list first, and became a heiarchical document editor later. As a result,
the functions that let you tag, track, and so on, are in the wrong place;
an Org file has to choose whether or not it's a task list or a document,
which doesn't fit the metalanguage paradigm cleanly.
"]
prose_1018 -> { raw_1027}
{rank=same; raw_1027}

raw_1027 [label="raw"]


raw_1027 -> leaf_1028
leaf_1028  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A list looks like this:
"]
structure_1019 -> { hashline_1029}
{rank=same; hashline_1029}

hashline_1029 [label="hashline"]


hashline_1029 -> { hashtag_1030}
{rank=same; hashtag_1030}

hashtag_1030 [label="hashtag"]


hashtag_1030 -> leaf_1031
leaf_1031  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1020 -> { raw_1032}
{rank=same; raw_1032}

raw_1032 [label="raw"]


raw_1032 -> leaf_1033
leaf_1033  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
and we have radio buttons.
"]
prose_1021 -> { raw_1034}
{rank=same; raw_1034}

raw_1034 [label="raw"]


raw_1034 -> leaf_1035
leaf_1035  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We also have whitespace lists:
"]
structure_1022 -> { hashline_1036}
{rank=same; hashline_1036}

hashline_1036 [label="hashline"]


hashline_1036 -> { hashtag_1037}
{rank=same; hashtag_1037}

hashtag_1037 [label="hashtag"]


hashtag_1037 -> leaf_1038
leaf_1038  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1023 -> { hashline_1039}
{rank=same; hashline_1039}

hashline_1039 [label="hashline"]


hashline_1039 -> { hashtag_1040}
{rank=same; hashtag_1040}

hashtag_1040 [label="hashtag"]


hashtag_1040 -> leaf_1041
leaf_1041  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_994 -> { header_1042 prose_1043 prose_1044 prose_1045 prose_1046 prose_1047}
{rank=same; header_1042 prose_1043 prose_1044 prose_1045 prose_1046 prose_1047}

header_1042 [label="3 : Embedded Data"]

prose_1043 [label="prose"]

prose_1044 [label="prose"]

prose_1045 [label="prose"]

prose_1046 [label="prose"]

prose_1047 [label="prose"]


header_1042 -> leaf_1048
leaf_1048  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Embedded Data"]
prose_1043 -> { raw_1049 literal_1050 raw_1051 literal_1052 raw_1053 literal_1054 raw_1055 literal_1056 raw_1057 bold_1058 raw_1059 bold_1060 raw_1061 literal_1062 raw_1063 bold_1064 raw_1065 bold_1066 raw_1067}
{rank=same; raw_1049 literal_1050 raw_1051 literal_1052 raw_1053 literal_1054 raw_1055 literal_1056 raw_1057 bold_1058 raw_1059 bold_1060 raw_1061 literal_1062 raw_1063 bold_1064 raw_1065 bold_1066 raw_1067}

raw_1049 [label="raw"]

literal_1050 [label="literal"]

raw_1051 [label="raw"]

literal_1052 [label="literal"]

raw_1053 [label="raw"]

literal_1054 [label="literal"]

raw_1055 [label="raw"]

literal_1056 [label="literal"]

raw_1057 [label="raw"]

bold_1058 [label="bold"]

raw_1059 [label="raw"]

bold_1060 [label="bold"]

raw_1061 [label="raw"]

literal_1062 [label="literal"]

raw_1063 [label="raw"]

bold_1064 [label="bold"]

raw_1065 [label="raw"]

bold_1066 [label="bold"]

raw_1067 [label="raw"]


raw_1049 -> leaf_1068
leaf_1068  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Anything found in prose between "]
literal_1050 -> leaf_1069
leaf_1069  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{"]
raw_1051 -> leaf_1070
leaf_1070  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and "]
literal_1052 -> leaf_1071
leaf_1071  [color=Gray,shape=rectangle,fontname=Inconsolata,label="}"]
raw_1053 -> leaf_1072
leaf_1072  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is EDN. Note that the
outermost pair of curlies denotes a boundary. "]
literal_1054 -> leaf_1073
leaf_1073  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{ foo }"]
raw_1055 -> leaf_1074
leaf_1074  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the symbol
foo, "]
literal_1056 -> leaf_1075
leaf_1075  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{ foo bar }"]
raw_1057 -> leaf_1076
leaf_1076  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the symbol "]
bold_1058 -> leaf_1077
leaf_1077  [color=Gray,shape=rectangle,fontname=Inconsolata,label="foo"]
raw_1059 -> leaf_1078
leaf_1078  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and the symbol "]
bold_1060 -> leaf_1079
leaf_1079  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bar"]
raw_1061 -> leaf_1080
leaf_1080  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", "]
literal_1062 -> leaf_1081
leaf_1081  [color=Gray,shape=rectangle,fontname=Inconsolata,label="{{foo bar}}"]
raw_1063 -> leaf_1082
leaf_1082  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is
a map with key "]
bold_1064 -> leaf_1083
leaf_1083  [color=Gray,shape=rectangle,fontname=Inconsolata,label="foo"]
raw_1065 -> leaf_1084
leaf_1084  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and value "]
bold_1066 -> leaf_1085
leaf_1085  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bar"]
raw_1067 -> leaf_1086
leaf_1086  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_1044 -> { raw_1087}
{rank=same; raw_1087}

raw_1087 [label="raw"]


raw_1087 -> leaf_1088
leaf_1088  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
To quote the [[https://github.com/edn-format/edn][spec]], \"There is no enclosing element at the top level\". The
braces mark the boundaries of the data region.
"]
prose_1045 -> { raw_1089}
{rank=same; raw_1089}

raw_1089 [label="raw"]


raw_1089 -> leaf_1090
leaf_1090  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is a mapping between lists and EDN, the basics of which will be clear
to the astute reader. The non-basics are unclear to the author as well.
"]
prose_1046 -> { raw_1091}
{rank=same; raw_1091}

raw_1091 [label="raw"]


raw_1091 -> leaf_1092
leaf_1092  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Unresolved: may data be inlined into prose? What would that even mean?
slap some colors on it in the document? If we want to provide a 'this is
code but not for interpretation' mark, we will, it won't be EDN specific.
Inlining colorized code is not high on my todo list.
"]
prose_1047 -> { raw_1093}
{rank=same; raw_1093}

raw_1093 [label="raw"]


raw_1093 -> leaf_1094
leaf_1094  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't think you can. Embeds are down here with lists and
tables in 'things you can't inline', for now.
"]
section_995 -> { header_1095 prose_1096 prose_1097 prose_1098 prose_1099 structure_1100 structure_1101 structure_1102 structure_1103 prose_1104 prose_1105 structure_1106 structure_1107 structure_1108 prose_1109 prose_1110 prose_1111}
{rank=same; header_1095 prose_1096 prose_1097 prose_1098 prose_1099 structure_1100 structure_1101 structure_1102 structure_1103 prose_1104 prose_1105 structure_1106 structure_1107 structure_1108 prose_1109 prose_1110 prose_1111}

header_1095 [label="3 : Tables"]

prose_1096 [label="prose"]

prose_1097 [label="prose"]

prose_1098 [label="prose"]

prose_1099 [label="prose"]

structure_1100 [label="structure"]

structure_1101 [label="structure"]

structure_1102 [label="structure"]

structure_1103 [label="structure"]

prose_1104 [label="prose"]

prose_1105 [label="prose"]

structure_1106 [label="structure"]

structure_1107 [label="structure"]

structure_1108 [label="structure"]

prose_1109 [label="prose"]

prose_1110 [label="prose"]

prose_1111 [label="prose"]


header_1095 -> leaf_1112
leaf_1112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Tables"]
prose_1096 -> { raw_1113}
{rank=same; raw_1113}

raw_1113 [label="raw"]


raw_1113 -> leaf_1114
leaf_1114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The way tables work in Babel is fine and needs little polish. Any modest
improvements we make will be in the face of considerable experience.
"]
prose_1097 -> { raw_1115}
{rank=same; raw_1115}

raw_1115 [label="raw"]


raw_1115 -> leaf_1116
leaf_1116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For example, I expect there's a way to make multiple literal rows serve
as a single row in existing Org, but I don't know what it is. I'll be
playing around a lot in the coming weeks, I hope.
"]
prose_1098 -> { raw_1117}
{rank=same; raw_1117}

raw_1117 [label="raw"]


raw_1117 -> leaf_1118
leaf_1118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Composability being an overarching goal, we can embed anything in a table
that we would put elsewhere.
"]
prose_1099 -> { raw_1119}
{rank=same; raw_1119}

raw_1119 [label="raw"]


raw_1119 -> leaf_1120
leaf_1120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Looks something like this:
"]
structure_1100 -> { hashline_1121}
{rank=same; hashline_1121}

hashline_1121 [label="hashline"]


hashline_1121 -> { hashtag_1122}
{rank=same; hashtag_1122}

hashtag_1122 [label="hashtag"]


hashtag_1122 -> leaf_1123
leaf_1123  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1101 -> { hashline_1124}
{rank=same; hashline_1124}

hashline_1124 [label="hashline"]


hashline_1124 -> { hashtag_1125}
{rank=same; hashtag_1125}

hashtag_1125 [label="hashtag"]


hashtag_1125 -> leaf_1126
leaf_1126  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1102 -> { hashline_1127}
{rank=same; hashline_1127}

hashline_1127 [label="hashline"]


hashline_1127 -> { hashtag_1128}
{rank=same; hashtag_1128}

hashtag_1128 [label="hashtag"]


hashtag_1128 -> leaf_1129
leaf_1129  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1103 -> { hashline_1130}
{rank=same; hashline_1130}

hashline_1130 [label="hashline"]


hashline_1130 -> { hashtag_1131}
{rank=same; hashtag_1131}

hashtag_1131 [label="hashtag"]


hashtag_1131 -> leaf_1132
leaf_1132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="formulas"]
prose_1104 -> { raw_1133 literal_1134 raw_1135 literal_1136 raw_1137 literal_1138 raw_1139}
{rank=same; raw_1133 literal_1134 raw_1135 literal_1136 raw_1137 literal_1138 raw_1139}

raw_1133 [label="raw"]

literal_1134 [label="literal"]

raw_1135 [label="raw"]

literal_1136 [label="literal"]

raw_1137 [label="raw"]

literal_1138 [label="literal"]

raw_1139 [label="raw"]


raw_1133 -> leaf_1140
leaf_1140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A subtle point of parsing I'm not sure is correct is "]
literal_1134 -> leaf_1141
leaf_1141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#formulas -"]
raw_1135 -> leaf_1142
leaf_1142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
or "]
literal_1136 -> leaf_1143
leaf_1143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="- #formulas"]
raw_1137 -> leaf_1144
leaf_1144  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". I feel like by normal associativity the latter
attaches the tag to the list, then nothing to the tag,
since the rule is a tag preceded only by whitespace owns the line
after it and indentations below it. The tag doesn't affect the indentation level
of the "]
literal_1138 -> leaf_1145
leaf_1145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-"]
raw_1139 -> leaf_1146
leaf_1146  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which could be confusing but won't be.
"]
prose_1105 -> { raw_1147}
{rank=same; raw_1147}

raw_1147 [label="raw"]


raw_1147 -> leaf_1148
leaf_1148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We should be able to tag tables like this:
"]
structure_1106 -> { hashline_1149}
{rank=same; hashline_1149}

hashline_1149 [label="hashline"]


hashline_1149 -> { hashtag_1150}
{rank=same; hashtag_1150}

hashtag_1150 [label="hashtag"]


hashtag_1150 -> leaf_1151
leaf_1151  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1107 -> { hashline_1152}
{rank=same; hashline_1152}

hashline_1152 [label="hashline"]


hashline_1152 -> { hashtag_1153}
{rank=same; hashtag_1153}

hashtag_1153 [label="hashtag"]


hashtag_1153 -> leaf_1154
leaf_1154  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1108 -> { hashline_1155}
{rank=same; hashline_1155}

hashline_1155 [label="hashline"]


hashline_1155 -> { hashtag_1156}
{rank=same; hashtag_1156}

hashtag_1156 [label="hashtag"]


hashtag_1156 -> leaf_1157
leaf_1157  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1109 -> { raw_1158}
{rank=same; raw_1158}

raw_1158 [label="raw"]


raw_1158 -> leaf_1159
leaf_1159  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Totally okay in this context, doesn't trigger Nim rules because the table
associates to the tag anyway.
"]
prose_1110 -> { raw_1160}
{rank=same; raw_1160}

raw_1160 [label="raw"]


raw_1160 -> leaf_1161
leaf_1161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This gives us a nice left gutter which I propose we can use in various ways.
"]
prose_1111 -> { raw_1162}
{rank=same; raw_1162}

raw_1162 [label="raw"]


raw_1162 -> leaf_1163
leaf_1163  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This section can get much longer. Generalizing how tables work is incredibly
powerful. My dream is to embed APL into Grimoire. Give me an excuse to
finally learn it!
"]
section_996 -> { header_1164 prose_1165 prose_1166 prose_1167 prose_1168 prose_1169}
{rank=same; header_1164 prose_1165 prose_1166 prose_1167 prose_1168 prose_1169}

header_1164 [label="3 : Clocks"]

prose_1165 [label="prose"]

prose_1166 [label="prose"]

prose_1167 [label="prose"]

prose_1168 [label="prose"]

prose_1169 [label="prose"]


header_1164 -> leaf_1170
leaf_1170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Clocks"]
prose_1165 -> { raw_1171}
{rank=same; raw_1171}

raw_1171 [label="raw"]


raw_1171 -> leaf_1172
leaf_1172  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I think timestamps are just a drawer you put a timestamp in.
"]
prose_1166 -> { raw_1173}
{rank=same; raw_1173}

raw_1173 [label="raw"]


raw_1173 -> leaf_1174
leaf_1174  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That drawer can collapse and look like ⏱.
"]
prose_1167 -> { raw_1175}
{rank=same; raw_1175}

raw_1175 [label="raw"]


raw_1175 -> leaf_1176
leaf_1176  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Or we can collapse it into something from the set containing 🕞.
"]
prose_1168 -> { raw_1177}
{rank=same; raw_1177}

raw_1177 [label="raw"]


raw_1177 -> leaf_1178
leaf_1178  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which normal Emacs doesn't display. I really need to go Japanese soon.
"]
prose_1169 -> { raw_1179}
{rank=same; raw_1179}

raw_1179 [label="raw"]


raw_1179 -> leaf_1180
leaf_1180  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
But it would be just adorable to have a little clock representing the timestamp.
Emoji are quirky but the set contains useful icons, and it's Unicode.
Grimoire supports Unicode.
"]
section_997 -> { header_1181 prose_1182 prose_1183 prose_1184 prose_1185 section_1186 section_1187}
{rank=same; header_1181 prose_1182 prose_1183 prose_1184 prose_1185 section_1186 section_1187}

header_1181 [label="3 : Code"]

prose_1182 [label="prose"]

prose_1183 [label="prose"]

prose_1184 [label="prose"]

prose_1185 [label="prose"]

section_1186 [label="section: 946-963"]

section_1187 [label="section: 964-1084"]


header_1181 -> leaf_1188
leaf_1188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Code"]
prose_1182 -> { raw_1189}
{rank=same; raw_1189}

raw_1189 [label="raw"]


raw_1189 -> leaf_1190
leaf_1190  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The place where it all comes together.
"]
prose_1183 -> { raw_1191}
{rank=same; raw_1191}

raw_1191 [label="raw"]


raw_1191 -> leaf_1192
leaf_1192  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire has a servant language, Lua by default, but this
is of course configurable. Eventually we'll write Clu,
it's a race to see which project is finished first but they
have common dependencies, surprise, surprise.
"]
prose_1184 -> { raw_1193}
{rank=same; raw_1193}

raw_1193 [label="raw"]


raw_1193 -> leaf_1194
leaf_1194  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code and data are yin and yang in Grimoire. Code embedded in
documents is executed in various ways and times; comments within
code blocks are themselves in Grimoire data format, and so on.
"]
prose_1185 -> { raw_1195}
{rank=same; raw_1195}

raw_1195 [label="raw"]


raw_1195 -> leaf_1196
leaf_1196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Given a single language Grimoire text, we can perform a mechanical
figure-ground reversal, such that data blocks become comments and
code blocks become live. We have many more sophisticated weave and
tangle operations, but this is a designed-in property that will prove
handy: sometimes you want to take code, org it up, and then flip it
into a literate context. Upgrade path for existing codebases.

"]
section_1186 -> { header_1197 prose_1198 structure_1199 prose_1200 prose_1201}
{rank=same; header_1197 prose_1198 structure_1199 prose_1200 prose_1201}

header_1197 [label="4 : Inline Code"]

prose_1198 [label="prose"]

structure_1199 [label="structure"]

prose_1200 [label="prose"]

prose_1201 [label="prose"]


header_1197 -> leaf_1202
leaf_1202  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Inline Code"]
prose_1198 -> { raw_1203 literal_1204 raw_1205}
{rank=same; raw_1203 literal_1204 raw_1205}

raw_1203 [label="raw"]

literal_1204 [label="literal"]

raw_1205 [label="raw"]


raw_1203 -> leaf_1206
leaf_1206  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Inline code is written "]
literal_1204 -> leaf_1207
leaf_1207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`4 + 5`"]
raw_1205 -> leaf_1208
leaf_1208  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". It executes in something similar to
:function mode in Babel, the call is as though it were wrapped in a function
call that looks like:
"]
structure_1199 -> { hashline_1209}
{rank=same; hashline_1209}

hashline_1209 [label="hashline"]


hashline_1209 -> { hashtag_1210}
{rank=same; hashtag_1210}

hashtag_1210 [label="hashtag"]


hashtag_1210 -> leaf_1211
leaf_1211  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1200 -> { raw_1212}
{rank=same; raw_1212}

raw_1212 [label="raw"]


raw_1212 -> leaf_1213
leaf_1213  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
maintaining state between calls.
"]
prose_1201 -> { raw_1214}
{rank=same; raw_1214}

raw_1214 [label="raw"]


raw_1214 -> leaf_1215
leaf_1215  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Anything named exists as a data structure in the helper language. This makes it easy to
refer to a block that contains a self-reference, so these are stored in a cycle-safe way.
"]
section_1187 -> { header_1216 prose_1217 prose_1218 structure_1219 structure_1220 prose_1221 structure_1222 structure_1223 prose_1224 codeblock_1225 structure_1226 prose_1227 prose_1228 prose_1229 codeblock_1230 codeblock_1231 codeblock_1232 structure_1233 structure_1234 codeblock_1235 structure_1236 structure_1237 prose_1238 prose_1239 prose_1240 prose_1241 structure_1242 prose_1243 prose_1244 prose_1245 codeblock_1246 section_1247}
{rank=same; header_1216 prose_1217 prose_1218 structure_1219 structure_1220 prose_1221 structure_1222 structure_1223 prose_1224 codeblock_1225 structure_1226 prose_1227 prose_1228 prose_1229 codeblock_1230 codeblock_1231 codeblock_1232 structure_1233 structure_1234 codeblock_1235 structure_1236 structure_1237 prose_1238 prose_1239 prose_1240 prose_1241 structure_1242 prose_1243 prose_1244 prose_1245 codeblock_1246 section_1247}

header_1216 [label="4 : Code Blocks"]

prose_1217 [label="prose"]

prose_1218 [label="prose"]

structure_1219 [label="structure"]

structure_1220 [label="structure"]

prose_1221 [label="prose"]

structure_1222 [label="structure"]

structure_1223 [label="structure"]

prose_1224 [label="prose"]

codeblock_1225 [label="code block 993-995"]

structure_1226 [label="structure"]

prose_1227 [label="prose"]

prose_1228 [label="prose"]

prose_1229 [label="prose"]

codeblock_1230 [label="code block 1009-1011"]

codeblock_1231 [label="code block 1017-1019"]

codeblock_1232 [label="code block 1023-1025"]

structure_1233 [label="structure"]

structure_1234 [label="structure"]

codeblock_1235 [label="code block 1033-1035"]

structure_1236 [label="structure"]

structure_1237 [label="structure"]

prose_1238 [label="prose"]

prose_1239 [label="prose"]

prose_1240 [label="prose"]

prose_1241 [label="prose"]

structure_1242 [label="structure"]

prose_1243 [label="prose"]

prose_1244 [label="prose"]

prose_1245 [label="prose"]

codeblock_1246 [label="code block 1078-1080"]

section_1247 [label="section: 1085-1155"]


header_1216 -> leaf_1248
leaf_1248  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Code Blocks"]
prose_1217 -> { raw_1249 literal_1250 raw_1251}
{rank=same; raw_1249 literal_1250 raw_1251}

raw_1249 [label="raw"]

literal_1250 [label="literal"]

raw_1251 [label="raw"]


raw_1249 -> leaf_1252
leaf_1252  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The "]
literal_1250 -> leaf_1253
leaf_1253  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`inline`"]
raw_1251 -> leaf_1254
leaf_1254  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" syntax works like the rest, you may use any number of backticks to enclose a form.
"]
prose_1218 -> { raw_1255}
{rank=same; raw_1255}

raw_1255 [label="raw"]


raw_1255 -> leaf_1256
leaf_1256  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something like:
"]
structure_1219 -> { hashline_1257}
{rank=same; hashline_1257}

hashline_1257 [label="hashline"]


hashline_1257 -> { hashtag_1258}
{rank=same; hashtag_1258}

hashtag_1258 [label="hashtag"]


hashtag_1258 -> leaf_1259
leaf_1259  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1220 -> { hashline_1260}
{rank=same; hashline_1260}

hashline_1260 [label="hashline"]


hashline_1260 -> { hashtag_1261}
{rank=same; hashtag_1261}

hashtag_1261 [label="hashtag"]


hashtag_1261 -> leaf_1262
leaf_1262  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1221 -> { raw_1263}
{rank=same; raw_1263}

raw_1263 [label="raw"]


raw_1263 -> leaf_1264
leaf_1264  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
it is evaluated when referenced. This:
"]
structure_1222 -> { hashline_1265}
{rank=same; hashline_1265}

hashline_1265 [label="hashline"]


hashline_1265 -> { hashtag_1266}
{rank=same; hashtag_1266}

hashtag_1266 [label="hashtag"]


hashtag_1266 -> leaf_1267
leaf_1267  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1223 -> { hashline_1268}
{rank=same; hashline_1268}

hashline_1268 [label="hashline"]


hashline_1268 -> { hashtag_1269}
{rank=same; hashtag_1269}

hashtag_1269 [label="hashtag"]


hashtag_1269 -> leaf_1270
leaf_1270  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1224 -> { raw_1271}
{rank=same; raw_1271}

raw_1271 [label="raw"]


raw_1271 -> leaf_1272
leaf_1272  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Separated code blocks use special tags:
"]
codeblock_1225 -> leaf_1273
leaf_1273  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
structure_1226 -> { hashline_1274}
{rank=same; hashline_1274}

hashline_1274 [label="hashline"]


hashline_1274 -> { hashtag_1275}
{rank=same; hashtag_1275}

hashtag_1275 [label="hashtag"]


hashtag_1275 -> leaf_1276
leaf_1276  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1227 -> { raw_1277}
{rank=same; raw_1277}

raw_1277 [label="raw"]


raw_1277 -> leaf_1278
leaf_1278  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
nesting apply. As indeed they might in a Grimoire code block.
"]
prose_1228 -> { raw_1279}
{rank=same; raw_1279}

raw_1279 [label="raw"]


raw_1279 -> leaf_1280
leaf_1280  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We need a good runtime. Playing the Inception game
with Grimoire should be an amusing headache, not a dog-slow
system killer.
"]
prose_1229 -> { raw_1281}
{rank=same; raw_1281}

raw_1281 [label="raw"]


raw_1281 -> leaf_1282
leaf_1282  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They may be named like anything else:
"]
codeblock_1230 -> leaf_1283
leaf_1283  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
codeblock_1231 -> leaf_1284
leaf_1284  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
codeblock_1232 -> leaf_1285
leaf_1285  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 4 + 5"]
structure_1233 -> { hashline_1286}
{rank=same; hashline_1286}

hashline_1286 [label="hashline"]


hashline_1286 -> { hashtag_1287}
{rank=same; hashtag_1287}

hashtag_1287 [label="hashtag"]


hashtag_1287 -> leaf_1288
leaf_1288  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1234 -> { handleline_1289}
{rank=same; handleline_1289}

handleline_1289 [label="handleline"]


handleline_1289 -> { handle_1290}
{rank=same; handle_1290}

handle_1290 [label="handle"]


handle_1290 -> leaf_1291
leaf_1291  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nine"]
codeblock_1235 -> leaf_1292
leaf_1292  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 4 + 5"]
structure_1236 -> { hashline_1293}
{rank=same; hashline_1293}

hashline_1293 [label="hashline"]


hashline_1293 -> { hashtag_1294}
{rank=same; hashtag_1294}

hashtag_1294 [label="hashtag"]


hashtag_1294 -> leaf_1295
leaf_1295  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1237 -> { hashline_1296}
{rank=same; hashline_1296}

hashline_1296 [label="hashline"]


hashline_1296 -> { hashtag_1297}
{rank=same; hashtag_1297}

hashtag_1297 [label="hashtag"]


hashtag_1297 -> leaf_1298
leaf_1298  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1238 -> { raw_1299 literal_1300 raw_1301 literal_1302 raw_1303 literal_1304 raw_1305 bold_1306 raw_1307}
{rank=same; raw_1299 literal_1300 raw_1301 literal_1302 raw_1303 literal_1304 raw_1305 bold_1306 raw_1307}

raw_1299 [label="raw"]

literal_1300 [label="literal"]

raw_1301 [label="raw"]

literal_1302 [label="literal"]

raw_1303 [label="raw"]

literal_1304 [label="literal"]

raw_1305 [label="raw"]

bold_1306 [label="bold"]

raw_1307 [label="raw"]


raw_1299 -> leaf_1308
leaf_1308  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
marks an anonymous result. "]
literal_1300 -> leaf_1309
leaf_1309  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#@nine->"]
raw_1301 -> leaf_1310
leaf_1310  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the automatically generated tag for
the return value of the block named "]
literal_1302 -> leaf_1311
leaf_1311  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@nine"]
raw_1303 -> leaf_1312
leaf_1312  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", adding "]
literal_1304 -> leaf_1313
leaf_1313  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@nine()"]
raw_1305 -> leaf_1314
leaf_1314  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to a prose block will
add the number 9 to the weave at that location. "]
bold_1306 -> leaf_1315
leaf_1315  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
raw_1307 -> leaf_1316
leaf_1316  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will either display the result,
the call, or both, configurably, when editing the source, with syntax-highlighting to 
enforce the distinction. 
"]
prose_1239 -> { raw_1317}
{rank=same; raw_1317}

raw_1317 [label="raw"]


raw_1317 -> leaf_1318
leaf_1318  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code blocks may be indented as any other blocks, with the associated owership
rules. Code blocks so indented have a logical start equal to their level of
indentation, which is to say the program being called will not see indentation
that is proper to the Grimoire document.
"]
prose_1240 -> { raw_1319}
{rank=same; raw_1319}

raw_1319 [label="raw"]


raw_1319 -> leaf_1320
leaf_1320  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code blocks may be placed inside lists, as tables may be, but may not be
explicitly placed inside tables.
"]
prose_1241 -> { raw_1321 literal_1322 raw_1323 literal_1324 raw_1325}
{rank=same; raw_1321 literal_1322 raw_1323 literal_1324 raw_1325}

raw_1321 [label="raw"]

literal_1322 [label="literal"]

raw_1323 [label="raw"]

literal_1324 [label="literal"]

raw_1325 [label="raw"]


raw_1321 -> leaf_1326
leaf_1326  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You may insert the result of a named code block in the data context
by simply saying "]
literal_1322 -> leaf_1327
leaf_1327  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@a-named-block()"]
raw_1323 -> leaf_1328
leaf_1328  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". If there are variables, you may pass
them, "]
literal_1324 -> leaf_1329
leaf_1329  [color=Gray,shape=rectangle,fontname=Inconsolata,label="@a-named-block(23, true)"]
raw_1325 -> leaf_1330
leaf_1330  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or if you wish, by name:
"]
structure_1242 -> { hashline_1331}
{rank=same; hashline_1331}

hashline_1331 [label="hashline"]


hashline_1331 -> { hashtag_1332}
{rank=same; hashtag_1332}

hashtag_1332 [label="hashtag"]


hashtag_1332 -> leaf_1333
leaf_1333  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_1243 -> { raw_1334}
{rank=same; raw_1334}

raw_1334 [label="raw"]


raw_1334 -> leaf_1335
leaf_1335  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Within a formula applied to a table, it is valid to use the description
syntax for a variable to supply an argument to a function.
"]
prose_1244 -> { raw_1336}
{rank=same; raw_1336}

raw_1336 [label="raw"]


raw_1336 -> leaf_1337
leaf_1337  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There will be further syntax involved in building up the line that
begins a code block. It's considered good form to assign complex
code block headers into distinct tags, and use those, rather than
being explicit and repeating yourself or hiding file-local defaults
in drawers.
"]
prose_1245 -> { raw_1338}
{rank=same; raw_1338}

raw_1338 [label="raw"]


raw_1338 -> leaf_1339
leaf_1339  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So we prefer something like
"]
codeblock_1246 -> leaf_1340
leaf_1340  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
section_1247 -> { header_1341 prose_1342 section_1343 section_1344}
{rank=same; header_1341 prose_1342 section_1343 section_1344}

header_1341 [label="1 : Runtime"]

prose_1342 [label="prose"]

section_1343 [label="section: 1089-1123"]

section_1344 [label="section: 1156-1200"]


header_1341 -> leaf_1345
leaf_1345  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Runtime"]
prose_1342 -> { raw_1346}
{rank=same; raw_1346}

raw_1346 [label="raw"]


raw_1346 -> leaf_1347
leaf_1347  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Here, we begin to explore the interactions Grimoire is capable of.
"]
section_1343 -> { header_1348 prose_1349 prose_1350 prose_1351 prose_1352 prose_1353 prose_1354 prose_1355 prose_1356 section_1357}
{rank=same; header_1348 prose_1349 prose_1350 prose_1351 prose_1352 prose_1353 prose_1354 prose_1355 prose_1356 section_1357}

header_1348 [label="2 : Literate or Live?"]

prose_1349 [label="prose"]

prose_1350 [label="prose"]

prose_1351 [label="prose"]

prose_1352 [label="prose"]

prose_1353 [label="prose"]

prose_1354 [label="prose"]

prose_1355 [label="prose"]

prose_1356 [label="prose"]

section_1357 [label="section: 1124-1155"]


header_1348 -> leaf_1358
leaf_1358  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Literate or Live?"]
prose_1349 -> { raw_1359}
{rank=same; raw_1359}

raw_1359 [label="raw"]


raw_1359 -> leaf_1360
leaf_1360  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Babel is descended from the tradition of [[http://en.wikipedia.org/wiki/Literate_programming][literate programming]], and
Grimoire inherits this from Babel.
"]
prose_1350 -> { raw_1361}
{rank=same; raw_1361}

raw_1361 [label="raw"]


raw_1361 -> leaf_1362
leaf_1362  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is capable of producing code and documentation in the
classic literate style. This is not the aim of Grimoire: it is
a metalanguage, for working with prose, data, and code in an
integrated fashion.
"]
prose_1351 -> { raw_1363}
{rank=same; raw_1363}

raw_1363 [label="raw"]


raw_1363 -> leaf_1364
leaf_1364  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
What a compiler is to a REPL, literate programming is to living
documents.
"]
prose_1352 -> { raw_1365}
{rank=same; raw_1365}

raw_1365 [label="raw"]


raw_1365 -> leaf_1366
leaf_1366  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In a literate programming context, we have source, which integrates
code and documentation. The source is then woven into documentation,
and tangled into code. Both are compiled, one is printed, one is run.
"]
prose_1353 -> { raw_1367}
{rank=same; raw_1367}

raw_1367 [label="raw"]


raw_1367 -> leaf_1368
leaf_1368  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The word 'printed' sounds somewhat archaic, no? The number of tools
Donald Knuth had to write just to write the tools he wanted to write,
and tool the writings he wanted to tool, is simply staggering.
"]
prose_1354 -> { raw_1369 literal_1370 raw_1371}
{rank=same; raw_1369 literal_1370 raw_1371}

raw_1369 [label="raw"]

literal_1370 [label="literal"]

raw_1371 [label="raw"]


raw_1369 -> leaf_1372
leaf_1372  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Traces of that legacy remain in Grimoire. Like Babel, we allow for
LaTeX embedding, with the sugar "]
literal_1370 -> leaf_1373
leaf_1373  [color=Gray,shape=rectangle,fontname=Inconsolata,label="`\\latex`"]
raw_1371 -> leaf_1374
leaf_1374  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". Starting Lua code with
a backslash is illegal, starting Clu code with a backslash is also
illegal.
"]
prose_1355 -> { raw_1375}
{rank=same; raw_1375}

raw_1375 [label="raw"]


raw_1375 -> leaf_1376
leaf_1376  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For a Grimoire document to be printed, realistically, in today's world,
it will be translated to LaTeX, hence to PDF, sent off to a print
on demand company, and drop shipped. Some documents may in fact
make this journey, because why not? We aren't oriented around it.
"]
prose_1356 -> { raw_1377}
{rank=same; raw_1377}

raw_1377 [label="raw"]


raw_1377 -> leaf_1378
leaf_1378  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The basic flow in a Grimoire context is one of excursion and return.
We have tangling and weaving, but also unraveling, where actions taken
within the weave or tangle are integrated back into the source document.
"]
section_1357 -> { header_1379 prose_1380 prose_1381 prose_1382 prose_1383 prose_1384 prose_1385}
{rank=same; header_1379 prose_1380 prose_1381 prose_1382 prose_1383 prose_1384 prose_1385}

header_1379 [label="3 : Unraveling the Mystery"]

prose_1380 [label="prose"]

prose_1381 [label="prose"]

prose_1382 [label="prose"]

prose_1383 [label="prose"]

prose_1384 [label="prose"]

prose_1385 [label="prose"]


header_1379 -> leaf_1386
leaf_1386  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Unraveling the Mystery"]
prose_1380 -> { raw_1387}
{rank=same; raw_1387}

raw_1387 [label="raw"]


raw_1387 -> leaf_1388
leaf_1388  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

What's unraveling? When I picture Donald Knuth writing literate code,
I picture him with a notebook, writing free-flowing algorithms in a
fashion he refined his entire career. I imagine him carefully transcribing
into Web, running the compiler, going for a stroll around the Stanford
campus, and examining the changes upon his return.
"]
prose_1381 -> { raw_1389}
{rank=same; raw_1389}

raw_1389 [label="raw"]


raw_1389 -> leaf_1390
leaf_1390  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
On the days, and they did happen, when his program was in a state of error,
I picture him returning to his notebook first. While thinking. Perhaps
playing the organ for an hour or two, to relax. He would then correct the
notebook, then the code, then the program, which would be correct now,
most of the time.
"]
prose_1382 -> { raw_1391}
{rank=same; raw_1391}

raw_1391 [label="raw"]


raw_1391 -> leaf_1392
leaf_1392  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm making that all up. But I'd wager I'm not far off the mark. We
don't work like that and most of us can't.
"]
prose_1383 -> { raw_1393}
{rank=same; raw_1393}

raw_1393 [label="raw"]


raw_1393 -> leaf_1394
leaf_1394  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A tangle is named that because the mapping between it and the source
can be non-trivial. It's quite possible to make it undecidable what to
do with edits to the tangle. it's also possible to move edits from the tangle
back into the source, in most cases, if we structure things well.
"]
prose_1384 -> { raw_1395}
{rank=same; raw_1395}

raw_1395 [label="raw"]


raw_1395 -> leaf_1396
leaf_1396  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Donald Knuth was unable to print a book that would alter his code. I'm
sure he'd have been delighted to have the ability. Our weaves can easily
be living documents, through in-browser and server side empowerment.
Those changes, too, should make it back into the source.
"]
prose_1385 -> { raw_1397}
{rank=same; raw_1397}

raw_1397 [label="raw"]


raw_1397 -> leaf_1398
leaf_1398  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Ultimately I imagine many people will prefer to edit and run their
Grimoire documents entirely from a weave that provides a bit of the
ol' WYSIWYG to the experience. Well and good for them, I have my own
view of Heaven, and it isn't Heaven if we don't all fit.
"]
section_1344 -> { header_1399 prose_1400 prose_1401 prose_1402 prose_1403 section_1404 section_1405}
{rank=same; header_1399 prose_1400 prose_1401 prose_1402 prose_1403 section_1404 section_1405}

header_1399 [label="2 : Source, Tangle and Weave"]

prose_1400 [label="prose"]

prose_1401 [label="prose"]

prose_1402 [label="prose"]

prose_1403 [label="prose"]

section_1404 [label="section: 1173-1200"]

section_1405 [label="section: 1201-1219"]


header_1399 -> leaf_1406
leaf_1406  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Source, Tangle and Weave"]
prose_1400 -> { raw_1407}
{rank=same; raw_1407}

raw_1407 [label="raw"]


raw_1407 -> leaf_1408
leaf_1408  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

These classic concepts from literate programming are central to
the Grimoire paradigm.
"]
prose_1401 -> { raw_1409}
{rank=same; raw_1409}

raw_1409 [label="raw"]


raw_1409 -> leaf_1410
leaf_1410  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In Grimoire, something like a PDF is not a true weave. It is a product;
much like an image or data derived from a simulation, it is regenerated
when necessary but has no further connection to the Grimoire environment.
"]
prose_1402 -> { raw_1411}
{rank=same; raw_1411}

raw_1411 [label="raw"]


raw_1411 -> leaf_1412
leaf_1412  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Our first section discusses the format of Grimoire source code. Like Babel,
unlike Web and descendants, it is self-tangling. Grimoire will be tightly
integrated and purpose-built for this task, operating at a REPL+ level.
"]
prose_1403 -> { raw_1413}
{rank=same; raw_1413}

raw_1413 [label="raw"]


raw_1413 -> leaf_1414
leaf_1414  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We still wish to use it to compile programs written in appropriate languages.
These languages needn't be educated in the ways of Grimoire, imposing this
requirement would be so onerous as to block adoption.
"]
section_1404 -> { header_1415 prose_1416 prose_1417 prose_1418 prose_1419 prose_1420}
{rank=same; header_1415 prose_1416 prose_1417 prose_1418 prose_1419 prose_1420}

header_1415 [label="3 : Unraveling the Tangle"]

prose_1416 [label="prose"]

prose_1417 [label="prose"]

prose_1418 [label="prose"]

prose_1419 [label="prose"]

prose_1420 [label="prose"]


header_1415 -> leaf_1421
leaf_1421  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Unraveling the Tangle"]
prose_1416 -> { raw_1422}
{rank=same; raw_1422}

raw_1422 [label="raw"]


raw_1422 -> leaf_1423
leaf_1423  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Babel offers limited facilities for working within source blocks. What it
doesn't offer is the critical 'unravel' operation, which takes changes to
the tangle and integrates them back into the weave.
"]
prose_1417 -> { raw_1424}
{rank=same; raw_1424}

raw_1424 [label="raw"]


raw_1424 -> leaf_1425
leaf_1425  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is a partially-solved problem, with Babel able to put comment tags into
the source which allow Emacs to jump back into your actual source from
errors in the tangle.
"]
prose_1418 -> { raw_1426}
{rank=same; raw_1426}

raw_1426 [label="raw"]


raw_1426 -> leaf_1427
leaf_1427  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is just not good enough. For any number of reasons, we need to be able
to unravel. I'll cite one: Converting existing codebases over to literacy.
The first step is to recreate the existing program on a source-line-identical
level. The entire existing developer base is familiar with the program already
and isn't going to want to start editing a bunch of Grimoire. They can most
likely be induced to accept readable metadata, and that's it.
"]
prose_1419 -> { raw_1428}
{rank=same; raw_1428}

raw_1428 [label="raw"]


raw_1428 -> leaf_1429
leaf_1429  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That's all we need. Code is in one of three categories: either it is a single
literal copy from source, it's one of several copies from source, or
it's generated code that's dependent on information in the source.
"]
prose_1420 -> { raw_1430}
{rank=same; raw_1430}

raw_1430 [label="raw"]


raw_1430 -> leaf_1431
leaf_1431  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We incorporate all changes to the former automatically when we unravel.
Changes to a single version of multiple copies prompts user interaction: do
you want to embed the change as its own source block, propagate it to each
instance, or decline the merge? Changes to generated code are simply
forbidden. If one is doing generation on the code base, working from
the weave is the more comfortable approach.
"]
section_1405 -> { header_1432 prose_1433 prose_1434 prose_1435 prose_1436}
{rank=same; header_1432 prose_1433 prose_1434 prose_1435 prose_1436}

header_1432 [label="3 : Backweaving"]

prose_1433 [label="prose"]

prose_1434 [label="prose"]

prose_1435 [label="prose"]

prose_1436 [label="prose"]


header_1432 -> leaf_1437
leaf_1437  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Backweaving"]
prose_1433 -> { raw_1438}
{rank=same; raw_1438}

raw_1438 [label="raw"]


raw_1438 -> leaf_1439
leaf_1439  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

An analogous operation is backweaving.
"]
prose_1434 -> { raw_1440}
{rank=same; raw_1440}

raw_1440 [label="raw"]


raw_1440 -> leaf_1441
leaf_1441  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A weave in Grimoire is an HTML/CSS/JS document. In other words, a program.
The weave is much closer akin to the source than any tangle. Any Grimoire
program can have a weave view, though it isn't necessary; many will have
no tangle at all, containing the functionality within Grimoire.
"]
prose_1435 -> { raw_1442}
{rank=same; raw_1442}

raw_1442 [label="raw"]


raw_1442 -> leaf_1443
leaf_1443  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The weave may therefore be manipulated, and we need some way to reflect
those changes back into the source. This can't be automated in a general
way. What we're left with is an EDN protocol for exchanging information
to update the weave in cooperation with some server logic and git.
"]
prose_1436 -> { raw_1444}
{rank=same; raw_1444}

raw_1444 [label="raw"]


raw_1444 -> leaf_1445
leaf_1445  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So, could you write the server logic for a site as a literate program,
push it to a server that tangles and weaves it, and use the source
and Grimoire/bridge as the sysadmin view? I bet you could, it might
even be fairly popular.
"]
section_415 -> { header_1446 prose_1447 prose_1448 prose_1449 section_1450}
{rank=same; header_1446 prose_1447 prose_1448 prose_1449 section_1450}

header_1446 [label="4 : Zero-header tag"]

prose_1447 [label="prose"]

prose_1448 [label="prose"]

prose_1449 [label="prose"]

section_1450 [label="section: 420-421"]


header_1446 -> leaf_1451
leaf_1451  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Zero-header tag"]
prose_1447 -> { raw_1452 bold_1453 raw_1454}
{rank=same; raw_1452 bold_1453 raw_1454}

raw_1452 [label="raw"]

bold_1453 [label="bold"]

raw_1454 [label="raw"]


raw_1452 -> leaf_1455
leaf_1455  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The special [["]
bold_1453 -> leaf_1456
leaf_1456  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Tags][tag]] =#"]
raw_1454 -> leaf_1457
leaf_1457  [color=Gray,shape=rectangle,fontname=Inconsolata,label="=, which is only meaningful at the top of a document,
 indicates a 'zero header'. This lets you use the one-star level as a
series within a single document.
"]
prose_1448 -> { raw_1458 literal_1459 raw_1460}
{rank=same; raw_1458 literal_1459 raw_1460}

raw_1458 [label="raw"]

literal_1459 [label="literal"]

raw_1460 [label="raw"]


raw_1458 -> leaf_1461
leaf_1461  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The related tag "]
literal_1459 -> leaf_1462
leaf_1462  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#meta*"]
raw_1460 -> leaf_1463
leaf_1463  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" must be followed by a space and any number of
stars. This indicates a meta-level for the entire under-tree, that
exists somewhere else. Further semantics may be provided.
"]
prose_1449 -> { raw_1464}
{rank=same; raw_1464}

raw_1464 [label="raw"]


raw_1464 -> leaf_1465
leaf_1465  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This section belongs in some further API section.
"]
section_1450 -> { header_1466 prose_1467}
{rank=same; header_1466 prose_1467}

header_1466 [label="5 : TODO Move to API Section"]

prose_1467 [label="prose"]


header_1466 -> leaf_1468
leaf_1468  [color=Gray,shape=rectangle,fontname=Inconsolata,label="***** TODO Move to API Section"]
prose_1467 -> { raw_1469}
{rank=same; raw_1469}

raw_1469 [label="raw"]


raw_1469 -> leaf_1470
leaf_1470  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]

}
