digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 1219"]


doc_0 -> { section_1 section_2}
{rank=same; section_1 section_2}

section_1 [label="section: 1-3"]

section_2 [label="section: 34-338"]


section_1 -> { header_3 block_4 block_5 section_6}
{rank=same; header_3 block_4 block_5 section_6}

header_3 [label="0 : "]

block_4 [label="block 1-1"]

block_5 [label="block 2-3"]

section_6 [label="section: 4-33"]


block_4 -> { prose_7}
{rank=same; prose_7}

prose_7 [label="prose"]


prose_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_5 -> { structure_9 structure_10}
{rank=same; structure_9 structure_10}

structure_9 [label="structure"]

structure_10 [label="structure"]


structure_9 -> { hashline_11}
{rank=same; hashline_11}

hashline_11 [label="hashline"]


hashline_11 -> { hashtag_12}
{rank=same; hashtag_12}

hashtag_12 [label="hashtag"]


hashtag_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_10 -> { hashline_14}
{rank=same; hashline_14}

hashline_14 [label="hashline"]


hashline_14 -> { hashtag_15}
{rank=same; hashtag_15}

hashtag_15 [label="hashtag"]


hashtag_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_6 -> { header_17 block_18 block_19 block_20 block_21 block_22 block_23 block_24 block_25 block_26}
{rank=same; header_17 block_18 block_19 block_20 block_21 block_22 block_23 block_24 block_25 block_26}

header_17 [label="1 : Introduction"]

block_18 [label="block 4-7"]

block_19 [label="block 8-9"]

block_20 [label="block 10-12"]

block_21 [label="block 13-16"]

block_22 [label="block 17-19"]

block_23 [label="block 20-23"]

block_24 [label="block 24-26"]

block_25 [label="block 27-28"]

block_26 [label="block 29-33"]


block_18 -> { prose_27}
{rank=same; prose_27}

prose_27 [label="prose"]


prose_27 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is a response to Babel.
"]
block_19 -> { prose_29}
{rank=same; prose_29}

prose_29 [label="prose"]


prose_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Babel is simultaneously a kludge and the most potentially powerful language in existence.
"]
block_20 -> { prose_31}
{rank=same; prose_31}

prose_31 [label="prose"]


prose_31 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Babel is a metalanguage. The structure of Org mode lets the user weave together code into a
living document, in a flexible, powerful way.
"]
block_21 -> { prose_33}
{rank=same; prose_33}

prose_33 [label="prose"]


prose_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The name is charmingly apt. Babel exists at the top of a tower of abstractions that is teetering
on the verge of collapse. Org-mode is an extension of outline mode, which was a simple tree
editor task list.
"]
block_22 -> { prose_35}
{rank=same; prose_35}

prose_35 [label="prose"]


prose_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Various users bolted stuff on, because that's how emacs grows, you bolt stuff onto it and it
continues to function because it's [[http://lispers.org/][made with alien technology]].
"]
block_23 -> { prose_37}
{rank=same; prose_37}

prose_37 [label="prose"]


prose_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The problem with Babel is more than the syntax being clunky, though that's a problem. The issue is
more profoundly that Babel is built on Org, which is built on emacs. It's a language, yes,
parsers exist for other platforms. But as a runtime, it isn't portable without a lot of effort.
"]
block_24 -> { prose_39}
{rank=same; prose_39}

prose_39 [label="prose"]


prose_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="So much so, that we get a chance to start over. It's roughly as difficult to write Grimoire as it would be to
reimplement Babel in, say, Sublime.
"]
block_25 -> { prose_41}
{rank=same; prose_41}

prose_41 [label="prose"]


prose_41 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In the process, we can:
"]
block_26 -> { prose_43}
{rank=same; prose_43}

prose_43 [label="prose"]


prose_43 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - streamline concepts, making them more orthogonal
  - clean up the clunkiness in the grammar
  - build a toolchain that will let us write magic spells in any number of languages, amassing a powerful
    collection of same. A grimoire, if you will: a living book in which magic is both written and performed.
"]
section_2 -> { header_45 block_46 section_47 section_48 section_49}
{rank=same; header_45 block_46 section_47 section_48 section_49}

header_45 [label="1 : Musings on Metasyntax"]

block_46 [label="block 34-338"]

section_47 [label="section: 35-82"]

section_48 [label="section: 105-311"]

section_49 [label="section: 339-343"]


block_46 -> { prose_50}
{rank=same; prose_50}

prose_50 [label="prose"]


prose_50 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_47 -> { header_52 block_53 block_54 section_55 section_56 section_57}
{rank=same; header_52 block_53 block_54 section_55 section_56 section_57}

header_52 [label="2 : Constraints"]

block_53 [label="block 35-39"]

block_54 [label="block 40-82"]

section_55 [label="section: 42-68"]

section_56 [label="section: 69-82"]

section_57 [label="section: 83-104"]


block_53 -> { prose_58}
{rank=same; prose_58}

prose_58 [label="prose"]


prose_58 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There is a difference between a metalanguage and a literate programming language. Babel is a metalanguage,
as Grimoire is intended to be.
"]
block_54 -> { prose_60}
{rank=same; prose_60}

prose_60 [label="prose"]


prose_60 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="An effective metalanguage balances three concerns. It must be usable, readable, and parsable.
"]
section_55 -> { header_62 block_63 block_64 block_65 block_66 block_67 block_68 block_69}
{rank=same; header_62 block_63 block_64 block_65 block_66 block_67 block_68 block_69}

header_62 [label="3 : Usable"]

block_63 [label="block 42-45"]

block_64 [label="block 46-50"]

block_65 [label="block 51-54"]

block_66 [label="block 55-58"]

block_67 [label="block 59-63"]

block_68 [label="block 64-66"]

block_69 [label="block 67-68"]


block_63 -> { prose_70}
{rank=same; prose_70}

prose_70 [label="prose"]


prose_70 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A metalanguage is used interactively, on a deeper level than REPLs.
"]
block_64 -> { prose_72}
{rank=same; prose_72}

prose_72 [label="prose"]


prose_72 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This is what makes working with Org so amazing. The first purpose of what became Babel
was simply editing outlines. This was outline mode, which dates back to the era when
using asterisks and =- [ ]= checkboxes in a plain ASCII text file was fairly futuristic
behavior.
"]
block_65 -> { prose_74}
{rank=same; prose_74}

prose_74 [label="prose"]


prose_74 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="You can't really call that a language either, though it's a syntax. More and more features
were attached until we have modern Babel. But because each feature was build as an extension
to the editing/runtime environment, Babel is fairly smooth to work with.
"]
block_66 -> { prose_76}
{rank=same; prose_76}

prose_76 [label="prose"]


prose_76 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If you can handle Emacs. I can, some can't. A metalanguage is tightly coupled to its runtime,
because its runtime is its editing environment. Not much of a metalanguage if this isn't the
case.
"]
block_67 -> { prose_78}
{rank=same; prose_78}

prose_78 [label="prose"]


prose_78 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire is the culmination of a considerable dependency chain. We need a data structure, a
parser to work with the data structure, and an editing environment that builds on these. For
maximum enjoyment, we'll want a custom terminal that enhances the xterm protocol with a few
features, most notably graphics.
"]
block_68 -> { prose_80}
{rank=same; prose_80}

prose_80 [label="prose"]


prose_80 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Just like I have trouble writing Lua without burning huge amounts of time planning out Clu, I
can't use Org without doing the same for Grimoire. It's all related: I need a really good parser.
"]
block_69 -> { prose_82}
{rank=same; prose_82}

prose_82 [label="prose"]


prose_82 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[[https://github.com/UpstandingHackers/hammer][hammer]] is the leading contender. But back to Grimoire.
"]
section_56 -> { header_84 block_85 block_86 block_87}
{rank=same; header_84 block_85 block_86 block_87}

header_84 [label="3 : Readable"]

block_85 [label="block 69-74"]

block_86 [label="block 75-78"]

block_87 [label="block 79-82"]


block_85 -> { prose_88}
{rank=same; prose_88}

prose_88 [label="prose"]


prose_88 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is designed to be read.  It's important that the raw syntax not
 break the reader's flow.  A good metalanguage lets the user employ just
 as much magic as she's comfortable with, without imposing more.
"]
block_86 -> { prose_90}
{rank=same; prose_90}

prose_90 [label="prose"]


prose_90 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Our syntax is  designed to support this. As such  it is deeply concerned
with matters  such as indentation  and whitespacing, which are  basic to
readability.
"]
block_87 -> { prose_92}
{rank=same; prose_92}

prose_92 [label="prose"]


prose_92 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="It will be quite possible and indeed comfortable to write pure documents
such  as blog  posts in  Grimoire form.  In that  use case  it resembles
Markdown.
"]
section_57 -> { header_94 block_95 block_96 block_97 block_98 block_99}
{rank=same; header_94 block_95 block_96 block_97 block_98 block_99}

header_94 [label="3 : Parsable"]

block_95 [label="block 83-89"]

block_96 [label="block 90-93"]

block_97 [label="block 94-97"]

block_98 [label="block 98-101"]

block_99 [label="block 102-104"]


block_95 -> { prose_100}
{rank=same; prose_100}

prose_100 [label="prose"]


prose_100 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire  documents are  intended  to be  highly  convoluted. The  basic
editing operation  is the fold. The  Grimoire editor must be  capable of
handling documents in the tens of megabytes with a complex and preserved
folding structure.
"]
block_96 -> { prose_102}
{rank=same; prose_102}

prose_102 [label="prose"]


prose_102 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This requires  a ground-up  editing environment  rewrite to  employ data
structures   with   correct   big-O    complexity   and   an   efficient
implementation.
"]
block_97 -> { prose_104}
{rank=same; prose_104}

prose_104 [label="prose"]


prose_104 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This  also  requires  that  the   language  be  well-designed  for  easy
recognition of the structural elements. As this document evolves, I will
be defining a grammar in the syntax preferred by barbarian.
"]
block_98 -> { prose_106}
{rank=same; prose_106}

prose_106 [label="prose"]


prose_106 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire is  an error-free  language. There  are several  concepts which
interact to  create this, namely  structure, prose, well-  and malformed
structure, and validity.
"]
block_99 -> { prose_108}
{rank=same; prose_108}

prose_108 [label="prose"]


prose_108 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A parser for Grimoire which doesn't  succeed without error for any utf-8
string is not valid.
"]
section_48 -> { header_110 block_111 section_112 section_113 section_114 section_115 section_116 section_117}
{rank=same; header_110 block_111 section_112 section_113 section_114 section_115 section_116 section_117}

header_110 [label="2 : Structure"]

block_111 [label="block 105-311"]

section_112 [label="section: 109-149"]

section_113 [label="section: 161-190"]

section_114 [label="section: 191-200"]

section_115 [label="section: 253-285"]

section_116 [label="section: 295-311"]

section_117 [label="section: 312-338"]


block_111 -> { prose_118}
{rank=same; prose_118}

prose_118 [label="prose"]


prose_118 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is a top-down look at Grimoire's proposed syntax.
"]
section_112 -> { header_120 block_121 block_122 block_123 block_124 block_125 block_126 block_127 block_128 block_129 section_130}
{rank=same; header_120 block_121 block_122 block_123 block_124 block_125 block_126 block_127 block_128 block_129 section_130}

header_120 [label="3 : Encoding"]

block_121 [label="block 109-112"]

block_122 [label="block 113-118"]

block_123 [label="block 119-123"]

block_124 [label="block 124-128"]

block_125 [label="block 129-131"]

block_126 [label="block 132-135"]

block_127 [label="block 136-140"]

block_128 [label="block 141-143"]

block_129 [label="block 144-149"]

section_130 [label="section: 150-160"]


block_121 -> { prose_131}
{rank=same; prose_131}

prose_131 [label="prose"]


prose_131 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is defined in terms of utf-8.
"]
block_122 -> { prose_133}
{rank=same; prose_133}

prose_133 [label="prose"]


prose_133 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The core syntax is defined in terms of the reachable keys on a US keyboard.
This tradition is firmly entrenched in the mid teens, and I have no
designs on budging that at present. The miser in me likes that they're
a byte each. The lawyer in me insists that this isn't ASCII, which is a
seven-bit legacy encoding. All aspects of utf-8 are equally meaningful.
"]
block_123 -> { prose_135}
{rank=same; prose_135}

prose_135 [label="prose"]


prose_135 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We aren't at all afraid to use Unicode characters to display aspects
of the runtime. In fact we favor this, as it marks those operations
as distinctive. Most people can't type ⦿ without effort (I can't)
and it's easy to recognize as a folded drawer once you've seen a couple.
"]
block_124 -> { prose_137}
{rank=same; prose_137}

prose_137 [label="prose"]


prose_137 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire is case sensitive and uses lower-snake-case for built-in English
phrases. There is a convention (see classes) that uses capitalization of
user words to affect semantics. This may be overridden with other rules
for languages that lack the majuscule-miniscule distinction.
"]
block_125 -> { prose_139}
{rank=same; prose_139}

prose_139 [label="prose"]


prose_139 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I want Grimoire to have correct Unicode handling, for some value of
correct. It can't be considered 1.0 without this.
"]
block_126 -> { prose_141}
{rank=same; prose_141}

prose_141 [label="prose"]


prose_141 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Bidirectional handling in a context that's indentation sensitive is
an example of something subtle. Grimoire uses indentation in various
ways, so here's the rule:
"]
block_127 -> { prose_143}
{rank=same; prose_143}

prose_143 [label="prose"]


prose_143 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Any newline that has a reversed direction ends indentation. So if
you are going ltr, issue an rtl marker, and a newline, your indentation
level is zero. If you reverse direction twice in a line, you keep
your indentation level. Three times, you lose it.
"]
block_128 -> { prose_145}
{rank=same; prose_145}

prose_145 [label="prose"]


prose_145 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I'd love to get a Hebrew and/or Arabic fluent hacker on the project
early, to make sure this works correctly.
"]
block_129 -> { prose_147}
{rank=same; prose_147}

prose_147 [label="prose"]


prose_147 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Another thing I want to get right is equivalence. If you have a
variable called \"Glück\" the compiler shouldn't complain if it's
rendered in either of the valid ways. For some sequences that's
\"any of the valid ways\". If we normalized your prose, you might
have problems later, so we don't want to solve it that way.
"]
section_130 -> { header_149 block_150 block_151}
{rank=same; header_149 block_150 block_151}

header_149 [label="4 : Internationalization"]

block_150 [label="block 150-155"]

block_151 [label="block 156-160"]


block_150 -> { prose_152}
{rank=same; prose_152}

prose_152 [label="prose"]


prose_152 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
All parts of Grimoire defined in English will be namespaced
as =en:/=, and loaded by default. Other languages will be added
when there is a fluent maintainer available.
"]
block_151 -> { prose_154}
{rank=same; prose_154}

prose_154 [label="prose"]


prose_154 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Note  that  many  words  aren't  truly English.  Notably  the  names  of
programming languages are  the same in all human languages.   A tag like
=#author= can be namespaced =#fr:/auteur= and will be, but =#!python= is not
in the =en:/= namespace.
"]
section_113 -> { header_156 block_157 block_158 block_159 block_160 block_161 block_162 block_163}
{rank=same; header_156 block_157 block_158 block_159 block_160 block_161 block_162 block_163}

header_156 [label="3 : Prose and Structure"]

block_157 [label="block 161-164"]

block_158 [label="block 165-170"]

block_159 [label="block 171-175"]

block_160 [label="block 176-178"]

block_161 [label="block 179-182"]

block_162 [label="block 183-187"]

block_163 [label="block 188-190"]


block_157 -> { prose_164}
{rank=same; prose_164}

prose_164 [label="prose"]


prose_164 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The major distinction Grimoire draws is between prose and structure.
"]
block_158 -> { prose_166}
{rank=same; prose_166}

prose_166 [label="prose"]


prose_166 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Prose is the default parsing state. It is far from unstructured from the
runtime  perspective. Although  this needn't  be embedded  in the  parse
tree,  Grimoire   understands  concepts   such  as   paragraphs,  words,
punctuation,  capital letters,  languages, and  anything else  proper to
prose.
"]
block_159 -> { prose_168}
{rank=same; prose_168}

prose_168 [label="prose"]


prose_168 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I refer to human languages, but Grimoire understands programming languages
also. In principle, all of them, it shouldn't be harder to add them than
it is to call them from shell, though getting a runtime rigged up to
another runtime always calls for some finesse to derive a good experience.
"]
block_160 -> { prose_170}
{rank=same; prose_170}

prose_170 [label="prose"]


prose_170 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"Programming languages\" is overly specific. Grimoire draws a distinction
between prose and structure. Blocks may contain either, or both.
"]
block_161 -> { prose_172}
{rank=same; prose_172}

prose_172 [label="prose"]


prose_172 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Something that's nice about a language build on a prose/structure
relationship is that it can be error free. Anything *grym* can't build into
a structure is just prose.
"]
block_162 -> { prose_174}
{rank=same; prose_174}

prose_174 [label="prose"]


prose_174 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Markdown has this property. Sometimes you run into crappy parsers which
build errors into Markdown, which is just obnoxious. If you [[http://daringfireball.net/projects/markdown/syntax][RTFM]],
you'll find the word \"error\" once. Helpfully explaining how Markdown
keeps you from making one.
"]
block_163 -> { prose_176}
{rank=same; prose_176}

prose_176 [label="prose"]


prose_176 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We do what we can to make the document look the same as it is
in fact structured. Syntax highlighting handles the edge cases.
"]
section_114 -> { header_178 block_179 block_180 block_181 section_182}
{rank=same; header_178 block_179 block_180 block_181 section_182}

header_178 [label="3 : Ownership"]

block_179 [label="block 191-194"]

block_180 [label="block 195-198"]

block_181 [label="block 199-200"]

section_182 [label="section: 201-252"]


block_179 -> { prose_183}
{rank=same; prose_183}

prose_183 [label="prose"]


prose_183 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The basic structural relationship in Grimoire is ownership.
"]
block_180 -> { prose_185}
{rank=same; prose_185}

prose_185 [label="prose"]


prose_185 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Root elements of a heirarchy own their children, blocks own
lines that refer to that block. Indentation has a subtle but
regular interaction with ownership; it does what you expect.
"]
block_181 -> { prose_187}
{rank=same; prose_187}

prose_187 [label="prose"]


prose_187 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Edge cases are resolved using the cling rule.
"]
section_182 -> { header_189 block_190 block_191 block_192 block_193 block_194 block_195 block_196 block_197 block_198 block_199 block_200 block_201 block_202 block_203}
{rank=same; header_189 block_190 block_191 block_192 block_193 block_194 block_195 block_196 block_197 block_198 block_199 block_200 block_201 block_202 block_203}

header_189 [label="4 : The Cling Rule"]

block_190 [label="block 201-205"]

block_191 [label="block 206-209"]

block_192 [label="block 210-213"]

block_193 [label="block 214-217"]

block_194 [label="block 218-224"]

block_195 [label="block 225-228"]

block_196 [label="block 229-232"]

block_197 [label="block 233-235"]

block_198 [label="block 236-239"]

block_199 [label="block 240-241"]

block_200 [label="block 242-244"]

block_201 [label="block 245-247"]

block_202 [label="block 248-250"]

block_203 [label="block 251-252"]


block_190 -> { prose_204}
{rank=same; prose_204}

prose_204 [label="prose"]


prose_204 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The cling rule specifies that a group 'clings' to another group when
it is closer to that group than the other group. Ties resolve down.
"]
block_191 -> { prose_206}
{rank=same; prose_206}

prose_206 [label="prose"]


prose_206 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This should make it intuitive to group elements that aren't grouping the
way you expect: put in whitespace until the block is visually distinguished
from the surroundings.
"]
block_192 -> { prose_208}
{rank=same; prose_208}

prose_208 [label="prose"]


prose_208 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Cling applies between blocks which are at the same level of ownership.
Ownership has precedence over cling: all blocks underneath e.g. a header
line are owned by that line, newlines notwithstanding.
"]
block_193 -> { prose_210}
{rank=same; prose_210}

prose_210 [label="prose"]


prose_210 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Note that indentation of e.g. lists invokes the cling rule within the
indentation level.

"]
block_194 -> { structure_212 structure_213}
{rank=same; structure_212 structure_213}

structure_212 [label="structure"]

structure_213 [label="structure"]


structure_212 -> { hashline_214}
{rank=same; hashline_214}

hashline_214 [label="hashline"]


hashline_214 -> { hashtag_215}
{rank=same; hashtag_215}

hashtag_215 [label="hashtag"]


hashtag_215 -> leaf_216
leaf_216  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_213 -> { hashline_217}
{rank=same; hashline_217}

hashline_217 [label="hashline"]


hashline_217 -> { hashtag_218}
{rank=same; hashtag_218}

hashtag_218 [label="hashtag"]


hashtag_218 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
block_195 -> { structure_220}
{rank=same; structure_220}

structure_220 [label="structure"]


structure_220 -> { hashline_221}
{rank=same; hashline_221}

hashline_221 [label="hashline"]


hashline_221 -> { hashtag_222}
{rank=same; hashtag_222}

hashtag_222 [label="hashtag"]


hashtag_222 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_196 -> { structure_224}
{rank=same; structure_224}

structure_224 [label="structure"]


structure_224 -> { hashline_225}
{rank=same; hashline_225}

hashline_225 [label="hashline"]


hashline_225 -> { hashtag_226}
{rank=same; hashtag_226}

hashtag_226 [label="hashtag"]


hashtag_226 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_197 -> { structure_228}
{rank=same; structure_228}

structure_228 [label="structure"]


structure_228 -> { hashline_229}
{rank=same; hashline_229}

hashline_229 [label="hashline"]


hashline_229 -> { hashtag_230}
{rank=same; hashtag_230}

hashtag_230 [label="hashtag"]


hashtag_230 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
block_198 -> { structure_232}
{rank=same; structure_232}

structure_232 [label="structure"]


structure_232 -> { hashline_233}
{rank=same; hashline_233}

hashline_233 [label="hashline"]


hashline_233 -> { hashtag_234}
{rank=same; hashtag_234}

hashtag_234 [label="hashtag"]


hashtag_234 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_199 -> { prose_236}
{rank=same; prose_236}

prose_236 [label="prose"]


prose_236 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Even clings are resolved forwards:
"]
block_200 -> { structure_238}
{rank=same; structure_238}

structure_238 [label="structure"]


structure_238 -> { hashline_239}
{rank=same; hashline_239}

hashline_239 [label="hashline"]


hashline_239 -> { hashtag_240}
{rank=same; hashtag_240}

hashtag_240 [label="hashtag"]


hashtag_240 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_201 -> { structure_242}
{rank=same; structure_242}

structure_242 [label="structure"]


structure_242 -> { hashline_243}
{rank=same; hashline_243}

hashline_243 [label="hashline"]


hashline_243 -> { hashtag_244}
{rank=same; hashtag_244}

hashtag_244 [label="hashtag"]


hashtag_244 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tag"]
block_202 -> { structure_246}
{rank=same; structure_246}

structure_246 [label="structure"]


structure_246 -> { hashline_247}
{rank=same; hashline_247}

hashline_247 [label="hashline"]


hashline_247 -> { hashtag_248}
{rank=same; hashtag_248}

hashtag_248 [label="hashtag"]


hashtag_248 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_203 -> { prose_250}
{rank=same; prose_250}

prose_250 [label="prose"]


prose_250 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="be considered bad style.
"]
section_115 -> { header_252 block_253 section_254 section_255 section_256}
{rank=same; header_252 block_253 section_254 section_255 section_256}

header_252 [label="3 : Whitespace, Lines, and Indentation."]

block_253 [label="block 253-285"]

section_254 [label="section: 258-279"]

section_255 [label="section: 280-285"]

section_256 [label="section: 286-294"]


block_253 -> { prose_257}
{rank=same; prose_257}

prose_257 [label="prose"]


prose_257 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is a structured document format. There are semantics associated
with every character we encode.
"]
section_254 -> { header_259 block_260 block_261 block_262 block_263 block_264}
{rank=same; header_259 block_260 block_261 block_262 block_263 block_264}

header_259 [label="4 : Whitespace"]

block_260 [label="block 258-262"]

block_261 [label="block 263-265"]

block_262 [label="block 266-271"]

block_263 [label="block 272-276"]

block_264 [label="block 277-279"]


block_260 -> { prose_265}
{rank=same; prose_265}

prose_265 [label="prose"]


prose_265 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Whitespace is either the space or newline character. Returns are removed,
tabs resolved to two spaces by the formatter, the latter is warned against.
"]
block_261 -> { prose_267}
{rank=same; prose_267}

prose_267 [label="prose"]


prose_267 -> leaf_268
leaf_268  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Most of the token-like categories we refer to must be surrounded by
whitespace. Newlines have semantics more often than they do not.
"]
block_262 -> { prose_269}
{rank=same; prose_269}

prose_269 [label="prose"]


prose_269 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Unicode actually contains quite a number of whitespace characters. They are
all treated as a single ordinary space. If that space is semantically meaningful,
as in the space between =*** A Headline=, it is filtered into an ordinary space.
Otherwise it's considered prose, the only filtration prose receives is tab->space
conversion.
"]
block_263 -> { prose_271}
{rank=same; prose_271}

prose_271 [label="prose"]


prose_271 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire mercilessly enforces tab-space conversion, even on your code blocks.
I will cling to this tenet as long as I can, the tab character needs to die,
the world has decided, that key is special and shouldn't insert a special
dropping that looks like n spaces.
"]
block_264 -> { prose_273}
{rank=same; prose_273}

prose_273 [label="prose"]


prose_273 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*make*? Outta my face with make. Yes, we'll have a make syntax, yes, it will
put the tabs back in.
"]
section_255 -> { header_275 block_276}
{rank=same; header_275 block_276}

header_275 [label="4 : Lines"]

block_276 [label="block 280-285"]


block_276 -> { prose_277}
{rank=same; prose_277}

prose_277 [label="prose"]


prose_277 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
When we refer to the beginning of a line, this allows for spaces before the
reference point. We call the absolute beginning of a line the first
position.
"]
section_256 -> { header_279 block_280 block_281 block_282}
{rank=same; header_279 block_280 block_281 block_282}

header_279 [label="4 : Indentation"]

block_280 [label="block 286-290"]

block_281 [label="block 291-292"]

block_282 [label="block 293-294"]


block_280 -> { prose_283}
{rank=same; prose_283}

prose_283 [label="prose"]


prose_283 -> leaf_284
leaf_284  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is an indentation-aware language. Most kinds of block can be
arcically[fn:1] ordered by means of indentation.
"]
block_281 -> { prose_285}
{rank=same; prose_285}

prose_285 [label="prose"]


prose_285 -> leaf_286
leaf_286  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Indentation follows [[http://nim-lang.org/manual.html#indentation][Nim rules]].
"]
block_282 -> { prose_287}
{rank=same; prose_287}

prose_287 [label="prose"]


prose_287 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[fn:1] There's nothing sacred about ordered subrules, and if we're making up
a new word, let's drop the silent h. Webster was a cool guy."]
section_116 -> { header_289 block_290 block_291 block_292 block_293}
{rank=same; header_289 block_290 block_291 block_292 block_293}

header_289 [label="3 : Order of Recognition"]

block_290 [label="block 295-300"]

block_291 [label="block 301-305"]

block_292 [label="block 306-309"]

block_293 [label="block 310-311"]


block_290 -> { prose_294}
{rank=same; prose_294}

prose_294 [label="prose"]


prose_294 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Starting from the neutral context, which is always at a newline, Grimoire
tries to make one of its initializing special forms. Failing that, it will
begin a prose block.
"]
block_291 -> { prose_296}
{rank=same; prose_296}

prose_296 [label="prose"]


prose_296 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If there is whitespace, it affects indentation level in indicated ways.
They will not directly affect the semantics of the following form, that is,
these rules apply after any potentially block-ending newline, apart from
spaces that may be found between the newline and the character.
"]
block_292 -> { prose_298}
{rank=same; prose_298}

prose_298 [label="prose"]


prose_298 -> leaf_299
leaf_299  [color=Gray,shape=rectangle,fontname=Inconsolata,label="At present,  =*=, =#=,  =|=, =-=,  , =~=,  =@=, =:=  and ={=  all create
special  contexts.  A  special  context  creates a  block  in a  context
specific way.
"]
block_293 -> { prose_300}
{rank=same; prose_300}

prose_300 [label="prose"]


prose_300 -> leaf_301
leaf_301  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Blocks have a left associativity which can be recursive.
"]
section_117 -> { header_302 block_303 block_304 block_305 block_306 block_307}
{rank=same; header_302 block_303 block_304 block_305 block_306 block_307}

header_302 [label="3 : Blocks"]

block_303 [label="block 312-315"]

block_304 [label="block 316-318"]

block_305 [label="block 319-323"]

block_306 [label="block 324-331"]

block_307 [label="block 332-338"]


block_303 -> { prose_308}
{rank=same; prose_308}

prose_308 [label="prose"]


prose_308 -> leaf_309
leaf_309  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is oriented around blocks.
"]
block_304 -> { prose_310}
{rank=same; prose_310}

prose_310 [label="prose"]


prose_310 -> leaf_311
leaf_311  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Blocks are at least one line long,  all restarts are on a new line.  Any
syntactic structure smaller than a block we call an element.
"]
block_305 -> { prose_312}
{rank=same; prose_312}

prose_312 [label="prose"]


prose_312 -> leaf_313
leaf_313  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Some types of blocks nest.  A document is a single  block.  There may be
other semantic units such as directories, I'd think a language that uses
strict  nested heirarchy  as powerfully  as Grimoire  could dictate  the
semantics of a file system, but that's currently out of scope.
"]
block_306 -> { prose_314}
{rank=same; prose_314}

prose_314 [label="prose"]


prose_314 -> leaf_315
leaf_315  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Indentation is relevant to some  kinds of blocks. In general, whitespace
matters quite a  bit in a Grimoire  document. We keep some  of the warts
out because the tab character is  illegal, and there will be a mandatory
formatter, =grym  fmt= if  you will, that  does everything  from turning
=**bold**=  into =*bold*=  (because the  extra stars  weren't used),  to
newline stripping, and so on.  This is normally applied incrementally by
the runtime editing environment.
"]
block_307 -> { prose_316}
{rank=same; prose_316}

prose_316 [label="prose"]


prose_316 -> leaf_317
leaf_317  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Indentation is human  readable and, with some care, a  computer may come
to the  same conclusions a  human would. I'm  still wary of  Python, but
there's no good  reason, unless the headache of most  Python not working
correctly  on my  computer, for  reasons I  can't track  down that  seem
related to  there being two languages  invoked as 'python', counts  as a
good reason.
"]
section_49 -> { header_318 block_319 section_320}
{rank=same; header_318 block_319 section_320}

header_318 [label="2 : Syntax"]

block_319 [label="block 339-343"]

section_320 [label="section: 344-407"]


block_319 -> { prose_321}
{rank=same; prose_321}

prose_321 [label="prose"]


prose_321 -> leaf_322
leaf_322  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Now that we've established the basic constraints, let's
start our recursive descent into the parse.
"]
section_320 -> { header_323 block_324 block_325 block_326 block_327 block_328 block_329 block_330 section_331 section_332}
{rank=same; header_323 block_324 block_325 block_326 block_327 block_328 block_329 block_330 section_331 section_332}

header_323 [label="3 : Headers"]

block_324 [label="block 344-348"]

block_325 [label="block 349-353"]

block_326 [label="block 354-359"]

block_327 [label="block 360-361"]

block_328 [label="block 362-364"]

block_329 [label="block 365-366"]

block_330 [label="block 367-407"]

section_331 [label="section: 368-368"]

section_332 [label="section: 408-419"]


block_324 -> { prose_333}
{rank=same; prose_333}

prose_333 [label="prose"]


prose_333 -> leaf_334
leaf_334  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Grimoire is arcically constrained by structure groups,
called headers.
"]
block_325 -> { prose_335}
{rank=same; prose_335}

prose_335 [label="prose"]


prose_335 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label="These start on a new line and begin with any number of  =*=. These must
be followed by a space mark to be valid. Contra Babel, you may
have a content-free header line, provided a space is found before the
newline.
"]
block_326 -> { prose_337}
{rank=same; prose_337}

prose_337 [label="prose"]


prose_337 -> leaf_338
leaf_338  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In weaves and the like, headers represent document structure. Their
intention is structural: they support the same syntax as lists,
but the user is expected to use lists for list purposes. Putting
[TODO] in a header line should mean you have a document-specific
task to perform in that block.
"]
block_327 -> { prose_339}
{rank=same; prose_339}

prose_339 [label="prose"]


prose_339 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Contra Babel, you may put spaces before the beginning of a header line.
"]
block_328 -> { prose_341}
{rank=same; prose_341}

prose_341 [label="prose"]


prose_341 -> leaf_342
leaf_342  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The semantics of header lines are entirely determined by
the number of stars.
"]
block_329 -> { prose_343}
{rank=same; prose_343}

prose_343 [label="prose"]


prose_343 -> leaf_344
leaf_344  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If you write
"]
block_330 -> { structure_345}
{rank=same; structure_345}

structure_345 [label="structure"]


structure_345 -> { hashline_346}
{rank=same; hashline_346}

hashline_346 [label="hashline"]


hashline_346 -> { hashtag_347}
{rank=same; hashtag_347}

hashtag_347 [label="hashtag"]


hashtag_347 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_331 -> { header_349 block_350 section_351}
{rank=same; header_349 block_350 section_351}

header_349 [label="1 : Top Header"]

block_350 [label="block 368-368"]

section_351 [label="section: 369-380"]


block_350 -> { prose_352}
{rank=same; prose_352}

prose_352 [label="prose"]


prose_352 -> leaf_353
leaf_353  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_351 -> { header_354 block_355 block_356 section_357}
{rank=same; header_354 block_355 block_356 section_357}

header_354 [label="2 : Second Header"]

block_355 [label="block 369-379"]

block_356 [label="block 380-380"]

section_357 [label="section: 381-381"]


block_355 -> { structure_358}
{rank=same; structure_358}

structure_358 [label="structure"]


structure_358 -> { hashline_359}
{rank=same; hashline_359}

hashline_359 [label="hashline"]


hashline_359 -> { hashtag_360}
{rank=same; hashtag_360}

hashtag_360 [label="hashtag"]


hashtag_360 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_356 -> { structure_362}
{rank=same; structure_362}

structure_362 [label="structure"]


structure_362 -> { hashline_363}
{rank=same; hashline_363}

hashline_363 [label="hashline"]


hashline_363 -> { hashtag_364}
{rank=same; hashtag_364}

hashtag_364 [label="hashtag"]


hashtag_364 -> leaf_365
leaf_365  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_357 -> { header_366 block_367 section_368}
{rank=same; header_366 block_367 section_368}

header_366 [label="1 : Top Header ▼"]

block_367 [label="block 381-381"]

section_368 [label="section: 382-731"]


block_367 -> { prose_369}
{rank=same; prose_369}

prose_369 [label="prose"]


prose_369 -> leaf_370
leaf_370  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_368 -> { header_371 block_372 block_373 block_374 block_375 section_376 section_377 section_378 section_379 section_380 section_381 section_382 section_383 section_384 section_385}
{rank=same; header_371 block_372 block_373 block_374 block_375 section_376 section_377 section_378 section_379 section_380 section_381 section_382 section_383 section_384 section_385}

header_371 [label="2 : Second Header ►"]

block_372 [label="block 382-389"]

block_373 [label="block 390-391"]

block_374 [label="block 392-395"]

block_375 [label="block 396-731"]

section_376 [label="section: 398-407"]

section_377 [label="section: 422-440"]

section_378 [label="section: 441-481"]

section_379 [label="section: 489-501"]

section_380 [label="section: 502-558"]

section_381 [label="section: 567-593"]

section_382 [label="section: 594-611"]

section_383 [label="section: 612-672"]

section_384 [label="section: 691-731"]

section_385 [label="section: 732-741"]


block_372 -> { structure_386}
{rank=same; structure_386}

structure_386 [label="structure"]


structure_386 -> { hashline_387}
{rank=same; hashline_387}

hashline_387 [label="hashline"]


hashline_387 -> { hashtag_388}
{rank=same; hashtag_388}

hashtag_388 [label="hashtag"]


hashtag_388 -> leaf_389
leaf_389  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_373 -> { prose_390}
{rank=same; prose_390}

prose_390 [label="prose"]


prose_390 -> leaf_391
leaf_391  [color=Gray,shape=rectangle,fontname=Inconsolata,label="may contain any number of blocks.
"]
block_374 -> { prose_392}
{rank=same; prose_392}

prose_392 [label="prose"]


prose_392 -> leaf_393
leaf_393  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"begins\" means first non-whitespace character. Indentation levels are tracked by
Nim rules, obviously a Grimoire document can contain no tab marks
and if any wander in they become four spaces.
"]
block_375 -> { prose_394}
{rank=same; prose_394}

prose_394 [label="prose"]


prose_394 -> leaf_395
leaf_395  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Contra other block forms, tags may not precede a headline.
"]
section_376 -> { header_396 block_397 block_398 block_399}
{rank=same; header_396 block_397 block_398 block_399}

header_396 [label="4 : Header Lines"]

block_397 [label="block 398-402"]

block_398 [label="block 403-405"]

block_399 [label="block 406-407"]


block_397 -> { prose_400}
{rank=same; prose_400}

prose_400 [label="prose"]


prose_400 -> leaf_401
leaf_401  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Anything after a run of =*= and a space, and before a newline, is
a header line.
"]
block_398 -> { prose_402}
{rank=same; prose_402}

prose_402 [label="prose"]


prose_402 -> leaf_403
leaf_403  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Header lines and list lines are structured identically. If I discover
a necessary exception, I'll note it.
"]
block_399 -> { prose_404}
{rank=same; prose_404}

prose_404 [label="prose"]


prose_404 -> leaf_405
leaf_405  [color=Gray,shape=rectangle,fontname=Inconsolata,label="That structure is discussed under [[*Lists][lists]].
"]
section_377 -> { header_406 block_407 block_408 block_409 block_410 block_411 block_412}
{rank=same; header_406 block_407 block_408 block_409 block_410 block_411 block_412}

header_406 [label="3 : Prose blocks"]

block_407 [label="block 422-426"]

block_408 [label="block 427-428"]

block_409 [label="block 429-432"]

block_410 [label="block 433-434"]

block_411 [label="block 435-436"]

block_412 [label="block 437-440"]


block_407 -> { prose_413}
{rank=same; prose_413}

prose_413 [label="prose"]


prose_413 -> leaf_414
leaf_414  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A prose block is preceded and followed by a single newline. Extraneous
whitespace on the bare line is filtered.
"]
block_408 -> { prose_415}
{rank=same; prose_415}

prose_415 [label="prose"]


prose_415 -> leaf_416
leaf_416  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Prose blocks may not be indented in a semantically meaningful way.
"]
block_409 -> { structure_417}
{rank=same; structure_417}

structure_417 [label="structure"]


structure_417 -> { hashline_418}
{rank=same; hashline_418}

hashline_418 [label="hashline"]


hashline_418 -> { hashtag_419}
{rank=same; hashtag_419}

hashtag_419 [label="hashtag"]


hashtag_419 -> leaf_420
leaf_420  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_410 -> { prose_421}
{rank=same; prose_421}

prose_421 [label="prose"]


prose_421 -> leaf_422
leaf_422  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    prose
"]
block_411 -> { prose_423}
{rank=same; prose_423}

prose_423 [label="prose"]


prose_423 -> leaf_424
leaf_424  [color=Gray,shape=rectangle,fontname=Inconsolata,label="        prose
"]
block_412 -> { structure_425}
{rank=same; structure_425}

structure_425 [label="structure"]


structure_425 -> { hashline_426}
{rank=same; hashline_426}

hashline_426 [label="hashline"]


hashline_426 -> { hashtag_427}
{rank=same; hashtag_427}

hashtag_427 [label="hashtag"]


hashtag_427 -> leaf_428
leaf_428  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_378 -> { header_429 block_430 block_431 block_432 block_433 block_434 block_435 block_436 block_437 block_438 block_439 block_440 section_441}
{rank=same; header_429 block_430 block_431 block_432 block_433 block_434 block_435 block_436 block_437 block_438 block_439 block_440 section_441}

header_429 [label="3 : Prose markup"]

block_430 [label="block 441-444"]

block_431 [label="block 445-450"]

block_432 [label="block 451-452"]

block_433 [label="block 453-456"]

block_434 [label="block 457-460"]

block_435 [label="block 461-466"]

block_436 [label="block 467-468"]

block_437 [label="block 469-473"]

block_438 [label="block 474-477"]

block_439 [label="block 478-479"]

block_440 [label="block 480-481"]

section_441 [label="section: 482-488"]


block_430 -> { prose_442}
{rank=same; prose_442}

prose_442 [label="prose"]


prose_442 -> leaf_443
leaf_443  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Prose markup rules apply in any prose contexts, not just for prose blocks.
"]
block_431 -> { prose_444}
{rank=same; prose_444}

prose_444 [label="prose"]


prose_444 -> leaf_445
leaf_445  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We mark =*bold*=, =/italic/=, =_underline_=, =~strikethrough~=, 
and =​=literal=​=, using the indicated marks. They must not be separated 
with whitespace from the connecting prose. Any number may be used and matched,
whitespace is allowed, so =**bold math: 4 * 5**= will highlight
correctly.
"]
block_432 -> { prose_446}
{rank=same; prose_446}

prose_446 [label="prose"]


prose_446 -> leaf_447
leaf_447  [color=Gray,shape=rectangle,fontname=Inconsolata,label="There is also [[*Inline%20Code][Inline Code]], which is formatted =`code`=.
"]
block_433 -> { prose_448}
{rank=same; prose_448}

prose_448 [label="prose"]


prose_448 -> leaf_449
leaf_449  [color=Gray,shape=rectangle,fontname=Inconsolata,label="These all follow the prose markup rule: any number of the starting
character matches the same number of the ending character in the
document string.
"]
block_434 -> { prose_450}
{rank=same; prose_450}

prose_450 [label="prose"]


prose_450 -> leaf_451
leaf_451  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We make subscripts mildly annoying, =sub__script= and =super^^script=, 
to avoid colliding the former with =snake_case=. That's a lot of ways 
to parse the =_= character...
"]
block_435 -> { prose_452}
{rank=same; prose_452}

prose_452 [label="prose"]


prose_452 -> leaf_453
leaf_453  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In general, prose is more 'active'  than in Babel. There are more things
you can't say without triggering a parsed data structure.  Due to quirks
of Org  involving string  escaping, =`\\\"\\\"`=  can't be  literally quoted
without repercussions. Check  out the source if you enjoy pounding your
head in frustration at the nastiness of escaped strings.
"]
block_436 -> { prose_454}
{rank=same; prose_454}

prose_454 [label="prose"]


prose_454 -> leaf_455
leaf_455  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Let's just use a code block:
"]
block_437 -> { structure_456 structure_457}
{rank=same; structure_456 structure_457}

structure_456 [label="structure"]

structure_457 [label="structure"]


structure_456 -> { hashline_458}
{rank=same; hashline_458}

hashline_458 [label="hashline"]


hashline_458 -> { hashtag_459}
{rank=same; hashtag_459}

hashtag_459 [label="hashtag"]


hashtag_459 -> leaf_460
leaf_460  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_457 -> { hashline_461}
{rank=same; hashline_461}

hashline_461 [label="hashline"]


hashline_461 -> { hashtag_462}
{rank=same; hashtag_462}

hashtag_462 [label="hashtag"]


hashtag_462 -> leaf_463
leaf_463  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_438 -> { prose_464}
{rank=same; prose_464}

prose_464 [label="prose"]


prose_464 -> leaf_465
leaf_465  [color=Gray,shape=rectangle,fontname=Inconsolata,label="one, of the \" character. This is pretty-printed in edit mode as =‟literal”=,
but such a string does *not* create escaping, we rely on semantic highlighting
to make the distinction clear.
"]
block_439 -> { prose_466}
{rank=same; prose_466}

prose_466 [label="prose"]


prose_466 -> leaf_467
leaf_467  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Any number of \"\"\"\" collapse into one set of such balanced quites.
"]
block_440 -> { prose_468}
{rank=same; prose_468}

prose_468 [label="prose"]


prose_468 -> leaf_469
leaf_469  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In the woven documentation, no quotation marks appear, just the string.
"]
section_441 -> { header_470 block_471}
{rank=same; header_470 block_471}

header_470 [label="4 : Latex"]

block_471 [label="block 482-488"]


block_471 -> { prose_472}
{rank=same; prose_472}

prose_472 [label="prose"]


prose_472 -> leaf_473
leaf_473  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For further markup purposes in a prose context, we escape to LaTeX. The
syntax is =`\\latex`=, where the backslash causes us to use LaTeX instead
of Lua. Our TeX backend is LuaTeX, giving arbitrary levels of control from
within a Grimoire-native language.
"]
section_379 -> { header_474 block_475 block_476 block_477}
{rank=same; header_474 block_475 block_476 block_477}

header_474 [label="3 : Comments"]

block_475 [label="block 489-493"]

block_476 [label="block 494-497"]

block_477 [label="block 498-501"]


block_475 -> { prose_478}
{rank=same; prose_478}

prose_478 [label="prose"]


prose_478 -> leaf_479
leaf_479  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In a structure context, you may place line comments. These begin with =--=
and continue to the end of a line.
"]
block_476 -> { prose_480}
{rank=same; prose_480}

prose_480 [label="prose"]


prose_480 -> leaf_481
leaf_481  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Commenting out a header line, or anything else, causes it to be ignored.
It does *not* result in any subdata being commented out, though it will
in the case of a headline change the ownership of the owned blocks.
"]
block_477 -> { prose_482}
{rank=same; prose_482}

prose_482 [label="prose"]


prose_482 -> leaf_483
leaf_483  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The  tag =#comment=  in a  valid tag  content position  marks the  owned
region  of  the tagged  block  as  a  comment.  Nothing within  will  be
evaluated or exported, though it will be parsed.
"]
section_380 -> { header_484 block_485 block_486 block_487 block_488 block_489 block_490 block_491 block_492 block_493 block_494 block_495 block_496 block_497 block_498 block_499 block_500 section_501}
{rank=same; header_484 block_485 block_486 block_487 block_488 block_489 block_490 block_491 block_492 block_493 block_494 block_495 block_496 block_497 block_498 block_499 block_500 section_501}

header_484 [label="3 : Marks"]

block_485 [label="block 502-506"]

block_486 [label="block 507-509"]

block_487 [label="block 510-512"]

block_488 [label="block 513-515"]

block_489 [label="block 516-517"]

block_490 [label="block 518-522"]

block_491 [label="block 523-526"]

block_492 [label="block 527-528"]

block_493 [label="block 529-530"]

block_494 [label="block 531-535"]

block_495 [label="block 536-538"]

block_496 [label="block 539-542"]

block_497 [label="block 543-546"]

block_498 [label="block 547-549"]

block_499 [label="block 550-551"]

block_500 [label="block 552-558"]

section_501 [label="section: 559-566"]


block_485 -> { prose_502}
{rank=same; prose_502}

prose_502 [label="prose"]


prose_502 -> leaf_503
leaf_503  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Marks provide global semantic categories for Grimoire. They may appear
anywhere, including a prose context, whitespace is required on both sides.
"]
block_486 -> { prose_504}
{rank=same; prose_504}

prose_504 [label="prose"]


prose_504 -> leaf_505
leaf_505  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We use  a couple kinds  of marks:  =@names= name things,  and =#tags=
categorize them. Tags are semantics, while names are nominal. 
"]
block_487 -> { prose_506}
{rank=same; prose_506}

prose_506 [label="prose"]


prose_506 -> leaf_507
leaf_507  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Tags that  are boundaries are  paired as  =#tag= and =#/tag=,  plus some
light sugaring. Names are never bounded
"]
block_488 -> { prose_508}
{rank=same; prose_508}

prose_508 [label="prose"]


prose_508 -> leaf_509
leaf_509  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Marks in the first position own the following line. If there is indentation
below that line, they own that too. This doesn't affect the associativity.
"]
block_489 -> { prose_510}
{rank=same; prose_510}

prose_510 [label="prose"]


prose_510 -> leaf_511
leaf_511  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Marks may be namespaced, as =@name.subname= or =#tag.sub-tag.sub-tag=.
"]
block_490 -> { prose_512}
{rank=same; prose_512}

prose_512 [label="prose"]


prose_512 -> leaf_513
leaf_513  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If  you  require   further  namespacing,  =@many/levels/java.class=  and
=#mojo/nation.space/station=  is your  friend. Codices (that is, projects
following the bridge conventions for organization) will use namespacing
in a consistent way. 
"]
block_491 -> { prose_514}
{rank=same; prose_514}

prose_514 [label="prose"]


prose_514 -> leaf_515
leaf_515  [color=Gray,shape=rectangle,fontname=Inconsolata,label="As I continue to muse on it, I  can think of no reason why marks couldn't follow
URI syntax,  or at  least mirror  it closely.  Chaining marks  is not  valid, so
=@named@example.com= could be a valid name. 
"]
block_492 -> { prose_516}
{rank=same; prose_516}

prose_516 [label="prose"]


prose_516 -> leaf_517
leaf_517  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This would mean we could say something like =@file://~/usr/blah=.
"]
block_493 -> { prose_518}
{rank=same; prose_518}

prose_518 [label="prose"]


prose_518 -> leaf_519
leaf_519  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Or =#!/usr/bin/perl/=...
"]
block_494 -> { prose_520}
{rank=same; prose_520}

prose_520 [label="prose"]


prose_520 -> leaf_521
leaf_521  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Yes. This  is a good idea.  Let's do this.  It doesn't displace [[*Links][link]]  syntax, it
enhances it. A  URI [[http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax][may not begin with  a slash]] so this is  parse-clean for tags
and names both. Tags aren't intended to  be user extensible in the narrow sense,
but uniformity is a virtue.
"]
block_495 -> { prose_522}
{rank=same; prose_522}

prose_522 [label="prose"]


prose_522 -> leaf_523
leaf_523  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I don't know why you might want to stick a query in a tag. It's not my
place to know. We just slap a parser on that puppy and continue.
"]
block_496 -> { prose_524}
{rank=same; prose_524}

prose_524 [label="prose"]


prose_524 -> leaf_525
leaf_525  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Implication: The hash or at should be syntax highlighted a different color
from the tag. I'd say hash and at get the same color, with categories and
symbols getting different ones.
"]
block_497 -> { prose_526}
{rank=same; prose_526}

prose_526 [label="prose"]


prose_526 -> leaf_527
leaf_527  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Apparently, [[http://blog.nig.gl/post/48802013022/although-parentheses-are-technically-allowed-in][parentheses are allowed in URLs]], but follow the link, they
suck and you should never use them. They play badly with our calling
convention for named structures, and aren't allowed in our schema.
"]
block_498 -> { prose_528}
{rank=same; prose_528}

prose_528 [label="prose"]


prose_528 -> leaf_529
leaf_529  [color=Gray,shape=rectangle,fontname=Inconsolata,label="It's not a real URI anyway, or it can be but it's also allowed to be a legal
fragment without the handle. In our case the assumed handle is =grimoire://=?
"]
block_499 -> { prose_530}
{rank=same; prose_530}

prose_530 [label="prose"]


prose_530 -> leaf_531
leaf_531  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Not a real URI. But an acceptable fake one.
"]
block_500 -> { prose_532}
{rank=same; prose_532}

prose_532 [label="prose"]


prose_532 -> leaf_533
leaf_533  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The actual rule for a mark is that it begins with =@= or =#= and is surrounded
by whitespace. Internal parsing of the mark is part of recognition, anything 
not recognized is subsequently ignored. It's still considered a mark for e.g. 
weaving purposes. 


"]
section_501 -> { header_534 block_535 block_536}
{rank=same; header_534 block_535 block_536}

header_534 [label="4 : Plural Hashtags"]

block_535 [label="block 559-563"]

block_536 [label="block 564-566"]


block_535 -> { prose_537}
{rank=same; prose_537}

prose_537 [label="prose"]


prose_537 -> leaf_538
leaf_538  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In some cases, such as =#formula= and =#formulas=, a tag may have a
singular or plural form. These are equivalent from the runtimes perspective.
"]
block_536 -> { prose_539}
{rank=same; prose_539}

prose_539 [label="prose"]


prose_539 -> leaf_540
leaf_540  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The same concept applies to pairs such as =#export= and =#exports=, though
the linguistic distinction is not that of plurality.
"]
section_381 -> { header_541 block_542 block_543 block_544 block_545 block_546 block_547}
{rank=same; header_541 block_542 block_543 block_544 block_545 block_546 block_547}

header_541 [label="3 : Classes"]

block_542 [label="block 567-574"]

block_543 [label="block 575-578"]

block_544 [label="block 579-582"]

block_545 [label="block 583-585"]

block_546 [label="block 586-589"]

block_547 [label="block 590-593"]


block_542 -> { prose_548}
{rank=same; prose_548}

prose_548 [label="prose"]


prose_548 -> leaf_549
leaf_549  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tags are for Grimoire. A category provides runtime semantics,
cooperating with structure groups to provide the API. Names
play the role of a value in languages which provide a
value-variable distinction: every name within a documents reachable
namespace must be globally unique.
"]
block_543 -> { prose_550}
{rank=same; prose_550}

prose_550 [label="prose"]


prose_550 -> leaf_551
leaf_551  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Specifically names are globally hyperstatic: any redefinition affects
the referent from the moment the parser receives it forward. Redefinitions
are warned against and have no utility, don't do it.
"]
block_544 -> { prose_552}
{rank=same; prose_552}

prose_552 [label="prose"]


prose_552 -> leaf_553
leaf_553  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Classes are roughly equivalent to categories/hashtags, but
for the user. They have a light semantics similar to their
function in Org.
"]
block_545 -> { prose_554}
{rank=same; prose_554}

prose_554 [label="prose"]


prose_554 -> leaf_555
leaf_555  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A class is defined as =:Class:= or =:class:= including
=:several:Classes:chained:=.
"]
block_546 -> { prose_556}
{rank=same; prose_556}

prose_556 [label="prose"]


prose_556 -> leaf_557
leaf_557  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A capital letter means the class inherits onto all subgroups of the block,
a miniscule means the class is associated with the indentation level it is
found within.
"]
block_547 -> { prose_558}
{rank=same; prose_558}

prose_558 [label="prose"]


prose_558 -> leaf_559
leaf_559  [color=Gray,shape=rectangle,fontname=Inconsolata,label="You know you're programming a computer when class and category have distinct
semantics. At least there are no objects, and only two primitive types,
structure and prose.
"]
section_382 -> { header_560 block_561 block_562 block_563 block_564 block_565}
{rank=same; header_560 block_561 block_562 block_563 block_564 block_565}

header_560 [label="3 : Links"]

block_561 [label="block 594-597"]

block_562 [label="block 598-599"]

block_563 [label="block 600-605"]

block_564 [label="block 606-608"]

block_565 [label="block 609-611"]


block_561 -> { prose_566}
{rank=same; prose_566}

prose_566 [label="prose"]


prose_566 -> leaf_567
leaf_567  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There's nothing at all wrong with the syntax or behavior of Babel links.
"]
block_562 -> { prose_568}
{rank=same; prose_568}

prose_568 [label="prose"]


prose_568 -> leaf_569
leaf_569  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Which look like this:
"]
block_563 -> { structure_570 structure_571}
{rank=same; structure_570 structure_571}

structure_570 [label="structure"]

structure_571 [label="structure"]


structure_570 -> { hashline_572}
{rank=same; hashline_572}

hashline_572 [label="hashline"]


hashline_572 -> { hashtag_573}
{rank=same; hashtag_573}

hashtag_573 [label="hashtag"]


hashtag_573 -> leaf_574
leaf_574  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_571 -> { hashline_575}
{rank=same; hashline_575}

hashline_575 [label="hashline"]


hashline_575 -> { hashtag_576}
{rank=same; hashtag_576}

hashtag_576 [label="hashtag"]


hashtag_576 -> leaf_577
leaf_577  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_564 -> { prose_578}
{rank=same; prose_578}

prose_578 [label="prose"]


prose_578 -> leaf_579
leaf_579  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We won't support legacy forms of footnoting, such as =[1]=. This applies
to legacy versions of table formulas and list syntax also.
"]
block_565 -> { prose_580}
{rank=same; prose_580}

prose_580 [label="prose"]


prose_580 -> leaf_581
leaf_581  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In Grimoire  there's one way  to do things.  At least, we  avoid variant
syntax with identical semantics.
"]
section_383 -> { header_582 block_583 block_584 block_585 block_586 block_587 block_588 block_589 block_590 block_591 block_592 block_593 block_594 block_595 block_596 section_597}
{rank=same; header_582 block_583 block_584 block_585 block_586 block_587 block_588 block_589 block_590 block_591 block_592 block_593 block_594 block_595 block_596 section_597}

header_582 [label="3 : Cookies"]

block_583 [label="block 612-616"]

block_584 [label="block 617-620"]

block_585 [label="block 621-624"]

block_586 [label="block 625-628"]

block_587 [label="block 629-633"]

block_588 [label="block 634-639"]

block_589 [label="block 640-642"]

block_590 [label="block 643-645"]

block_591 [label="block 646-650"]

block_592 [label="block 651-654"]

block_593 [label="block 655-660"]

block_594 [label="block 661-665"]

block_595 [label="block 666-669"]

block_596 [label="block 670-672"]

section_597 [label="section: 673-690"]


block_583 -> { prose_598}
{rank=same; prose_598}

prose_598 [label="prose"]


prose_598 -> leaf_599
leaf_599  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
List line contexts (header lines and list lines) may have cookies. A
cookie looks like =[ ]=, it must have contents and a space on both sides.
"]
block_584 -> { prose_600}
{rank=same; prose_600}

prose_600 [label="prose"]


prose_600 -> leaf_601
leaf_601  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Cookies are valid after the symbol that defines the list line, but before
anything else. They are also valid at the end of a list line, in which
case they are preceded by a space and followed by a newline.
"]
block_585 -> { prose_602}
{rank=same; prose_602}

prose_602 [label="prose"]


prose_602 -> leaf_603
leaf_603  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Cookies are distinctive in that they may only be applied to list lines.
Most other token-like groups, specifically tags, classes, and inline drawers,
may be embedded into all prose contexts excepting literal strings.
"]
block_586 -> { prose_604}
{rank=same; prose_604}

prose_604 [label="prose"]


prose_604 -> leaf_605
leaf_605  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Cookies are used similarly to cookies in Org, but with consistent semantics.
A simple cookie set is \"X\" and \" \", the user cycles through them. TODO and
DONE are another option.
"]
block_587 -> { prose_606}
{rank=same; prose_606}

prose_606 [label="prose"]


prose_606 -> leaf_607
leaf_607  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I don't want cookies to turn into lightweight tables. Still, saying to
the user \"you may have precisely two cookies a line\" is restrictive.
It's not a violation of the [[http://c2.com/cgi/wiki?TwoIsAnImpossibleNumber][\"Two is an Impossible Number\"]] principle,
because they're head and tail. I think this is ugly:
"]
block_588 -> { structure_608 structure_609}
{rank=same; structure_608 structure_609}

structure_608 [label="structure"]

structure_609 [label="structure"]


structure_608 -> { hashline_610}
{rank=same; hashline_610}

hashline_610 [label="hashline"]


hashline_610 -> { hashtag_611}
{rank=same; hashtag_611}

hashtag_611 [label="hashtag"]


hashtag_611 -> leaf_612
leaf_612  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_609 -> { hashline_613}
{rank=same; hashline_613}

hashline_613 [label="hashline"]


hashline_613 -> { hashtag_614}
{rank=same; hashtag_614}

hashtag_614 [label="hashtag"]


hashtag_614 -> leaf_615
leaf_615  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_589 -> { prose_616}
{rank=same; prose_616}

prose_616 [label="prose"]


prose_616 -> leaf_617
leaf_617  [color=Gray,shape=rectangle,fontname=Inconsolata,label="You can stick a table in a list. I don't know if I mentioned, it's kind
of an obvious thing, I'll write a unit for it at some point.
"]
block_590 -> { prose_618}
{rank=same; prose_618}

prose_618 [label="prose"]


prose_618 -> leaf_619
leaf_619  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Still. I can see a case for two on the left. Once you allow two, you allow
n, without excellent reason.
"]
block_591 -> { prose_620}
{rank=same; prose_620}

prose_620 [label="prose"]


prose_620 -> leaf_621
leaf_621  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[[*Radio%20cookies][Radio cookies]] must be the leftmost cookie on a line, only one is of course allowed.
I could allow a single-line short form multi-radio-button interface but what
is it, a fancy text slider for some value? No. Any number of ordinary cookies
can follow. Knock yourself out.
"]
block_592 -> { prose_622}
{rank=same; prose_622}

prose_622 [label="prose"]


prose_622 -> leaf_623
leaf_623  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Anything more than a couple and one should consider a class or a table.
Handrolling data structures is perverse in a markup language, and I'm
still tempted to forbid it.
"]
block_593 -> { prose_624}
{rank=same; prose_624}

prose_624 [label="prose"]


prose_624 -> leaf_625
leaf_625  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I don't like distinctions without difference. A cookie at the end of a
line is filled by Grimoire, not the user. This mirrors Org's use, which is
to display either a percent or a n/m marker for completion of list items.
The user seeds the cookie, in these cases with =%= or =/=, and the runtime
does the rest.
"]
block_594 -> { prose_626}
{rank=same; prose_626}

prose_626 [label="prose"]


prose_626 -> leaf_627
leaf_627  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Adding more than one such structure to the tail list would complicate the
reference syntax, which I haven't designed, and again, it's just not necessary.
Grimoire can fill in any data structure, \"n-dimensional end cookie array\"
isn't one we have a compelling need for.
"]
block_595 -> { prose_628}
{rank=same; prose_628}

prose_628 [label="prose"]


prose_628 -> leaf_629
leaf_629  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Cookies could interact badly with link syntax. I don't think a [bare box]
qualifies as a link in Org, clearly it doesn't, we can follow that notion
and disallow \"[]\" as a filling for cookies.
"]
block_596 -> { prose_630}
{rank=same; prose_630}

prose_630 [label="prose"]


prose_630 -> leaf_631
leaf_631  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I also think they should be allowed in table cells, which have their own
context which is mostly handwaved right now but is prose++.
"]
section_597 -> { header_632 block_633 block_634 block_635 block_636}
{rank=same; header_632 block_633 block_634 block_635 block_636}

header_632 [label="4 : Radio cookies"]

block_633 [label="block 673-678"]

block_634 [label="block 679-681"]

block_635 [label="block 682-687"]

block_636 [label="block 688-690"]


block_633 -> { prose_637}
{rank=same; prose_637}

prose_637 [label="prose"]


prose_637 -> leaf_638
leaf_638  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We have one 'weird cookie'. A radio cookie, which looks like =( )=,
must be present at the head position of list line contexts. All
list lines at the same level of indentation must have one, if one does.
"]
block_634 -> { prose_639}
{rank=same; prose_639}

prose_639 [label="prose"]


prose_639 -> leaf_640
leaf_640  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Only one is selected at any given time. These would be awkward to add
into tables, to little gain.
"]
block_635 -> { prose_641}
{rank=same; prose_641}

prose_641 [label="prose"]


prose_641 -> leaf_642
leaf_642  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This comes perilously close to pushing us into the realm of error.
The formatter adds buttons to an entire subtree if one member has it,
and if more than one is ticked off, it warns if possible or removes
all but the first mark encountered. If none are present the first
option is selected.
"]
block_636 -> { prose_643}
{rank=same; prose_643}

prose_643 [label="prose"]


prose_643 -> leaf_644
leaf_644  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The runtime will not normally build an invalid radio list, but
Grimoire must import plain text.
"]
section_384 -> { header_645 block_646 block_647 block_648 block_649 block_650 block_651 block_652 block_653 block_654}
{rank=same; header_645 block_646 block_647 block_648 block_649 block_650 block_651 block_652 block_653 block_654}

header_645 [label="3 : Drawers"]

block_646 [label="block 691-695"]

block_647 [label="block 696-702"]

block_648 [label="block 703-705"]

block_649 [label="block 706-708"]

block_650 [label="block 709-710"]

block_651 [label="block 711-721"]

block_652 [label="block 722-724"]

block_653 [label="block 725-727"]

block_654 [label="block 728-731"]


block_646 -> { prose_655}
{rank=same; prose_655}

prose_655 [label="prose"]


prose_655 -> leaf_656
leaf_656  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A drawer is a block that's hidden by default. The computer sees it,
the user sees ⦿, or a similar rune.
"]
block_647 -> { structure_657 structure_658}
{rank=same; structure_657 structure_658}

structure_657 [label="structure"]

structure_658 [label="structure"]


structure_657 -> { hashline_659}
{rank=same; hashline_659}

hashline_659 [label="hashline"]


hashline_659 -> { hashtag_660}
{rank=same; hashtag_660}

hashtag_660 [label="hashtag"]


hashtag_660 -> leaf_661
leaf_661  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_658 -> { hashline_662}
{rank=same; hashline_662}

hashline_662 [label="hashline"]


hashline_662 -> { hashtag_663}
{rank=same; hashtag_663}

hashtag_663 [label="hashtag"]


hashtag_663 -> leaf_664
leaf_664  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_648 -> { prose_665}
{rank=same; prose_665}

prose_665 [label="prose"]


prose_665 -> leaf_666
leaf_666  [color=Gray,shape=rectangle,fontname=Inconsolata,label="without opening it. Deleting into an ordinary fold marker opens the fold,
deleting towards a drawer marker skips past it.
"]
block_649 -> { prose_667}
{rank=same; prose_667}

prose_667 [label="prose"]


prose_667 -> leaf_668
leaf_668  [color=Gray,shape=rectangle,fontname=Inconsolata,label="=a-drawer=  is  a type,  not  a  name, something  like  =weave=  or =tangle=  in
practice. This may or  may not be supported with a =#weave=  tag. 
"]
block_650 -> { prose_669}
{rank=same; prose_669}

prose_669 [label="prose"]


prose_669 -> leaf_670
leaf_670  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I'm not entirely sure how to interact names with drawers, perhaps like this:
"]
block_651 -> { structure_671 structure_672 structure_673}
{rank=same; structure_671 structure_672 structure_673}

structure_671 [label="structure"]

structure_672 [label="structure"]

structure_673 [label="structure"]


structure_671 -> { hashline_674}
{rank=same; hashline_674}

hashline_674 [label="hashline"]


hashline_674 -> { hashtag_675}
{rank=same; hashtag_675}

hashtag_675 [label="hashtag"]


hashtag_675 -> leaf_676
leaf_676  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_672 -> { handleline_677}
{rank=same; handleline_677}

handleline_677 [label="handleline"]


handleline_677 -> { handle_678}
{rank=same; handle_678}

handle_678 [label="handle"]


handle_678 -> leaf_679
leaf_679  [color=Gray,shape=rectangle,fontname=Inconsolata,label="drawer-name"]
structure_673 -> { hashline_680}
{rank=same; hashline_680}

hashline_680 [label="hashline"]


hashline_680 -> { hashtag_681}
{rank=same; hashtag_681}

hashtag_681 [label="hashtag"]


hashtag_681 -> leaf_682
leaf_682  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_652 -> { prose_683}
{rank=same; prose_683}

prose_683 [label="prose"]


prose_683 -> leaf_684
leaf_684  [color=Gray,shape=rectangle,fontname=Inconsolata,label="should keep it closed unless it's  open, those are the only additional semantics
associated.
"]
block_653 -> { prose_685}
{rank=same; prose_685}

prose_685 [label="prose"]


prose_685 -> leaf_686
leaf_686  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This lets master wizards embed unobtrusive magic into documents for apprentice
wizards to spell with.
"]
block_654 -> { prose_687}
{rank=same; prose_687}

prose_687 [label="prose"]


prose_687 -> leaf_688
leaf_688  [color=Gray,shape=rectangle,fontname=Inconsolata,label="An inline drawer looks like =:[[some contents]]:=.  As usual when we say \"inline\" it
can be as long as you want. Being anonymous, because untagged, the only semantics
of such a drawer are to hide the contents in source mode. 
"]
section_385 -> { header_689 block_690 block_691 block_692 block_693 section_694}
{rank=same; header_689 block_690 block_691 block_692 block_693 section_694}

header_689 [label="3 : Runes"]

block_690 [label="block 732-735"]

block_691 [label="block 736-738"]

block_692 [label="block 739-740"]

block_693 [label="block 741-741"]

section_694 [label="section: 742-742"]


block_690 -> { prose_695}
{rank=same; prose_695}

prose_695 [label="prose"]


prose_695 -> leaf_696
leaf_696  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
After drawers is as good a place to put runes as any.
"]
block_691 -> { prose_697}
{rank=same; prose_697}

prose_697 [label="prose"]


prose_697 -> leaf_698
leaf_698  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Runes are characters drawn from the pictographic zones of Unicode,
which describe semantic activity within a document.
"]
block_692 -> { prose_699}
{rank=same; prose_699}

prose_699 [label="prose"]


prose_699 -> leaf_700
leaf_700  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Contra Org, when we have something like the aformentioned:
"]
block_693 -> { structure_701}
{rank=same; structure_701}

structure_701 [label="structure"]


structure_701 -> { hashline_702}
{rank=same; hashline_702}

hashline_702 [label="hashline"]


hashline_702 -> { hashtag_703}
{rank=same; hashtag_703}

hashtag_703 [label="hashtag"]


hashtag_703 -> leaf_704
leaf_704  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_694 -> { header_705 block_706 section_707}
{rank=same; header_705 block_706 section_707}

header_705 [label="1 : Top Header ▼"]

block_706 [label="block 742-742"]

section_707 [label="section: 743-924"]


block_706 -> { prose_708}
{rank=same; prose_708}

prose_708 [label="prose"]


prose_708 -> leaf_709
leaf_709  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_707 -> { header_710 block_711 block_712 block_713 block_714 block_715 block_716 block_717 block_718 section_719 section_720 section_721 section_722 section_723}
{rank=same; header_710 block_711 block_712 block_713 block_714 block_715 block_716 block_717 block_718 section_719 section_720 section_721 section_722 section_723}

header_710 [label="2 : Second Header ►"]

block_711 [label="block 743-749"]

block_712 [label="block 750-752"]

block_713 [label="block 753-755"]

block_714 [label="block 756-757"]

block_715 [label="block 758-760"]

block_716 [label="block 761-765"]

block_717 [label="block 766-768"]

block_718 [label="block 769-924"]

section_719 [label="section: 772-822"]

section_720 [label="section: 823-843"]

section_721 [label="section: 844-910"]

section_722 [label="section: 911-924"]

section_723 [label="section: 925-963"]


block_711 -> { structure_724}
{rank=same; structure_724}

structure_724 [label="structure"]


structure_724 -> { hashline_725}
{rank=same; hashline_725}

hashline_725 [label="hashline"]


hashline_725 -> { hashtag_726}
{rank=same; hashtag_726}

hashtag_726 [label="hashtag"]


hashtag_726 -> leaf_727
leaf_727  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_712 -> { prose_728}
{rank=same; prose_728}

prose_728 [label="prose"]


prose_728 -> leaf_729
leaf_729  [color=Gray,shape=rectangle,fontname=Inconsolata,label="any transformation we may take. If you load up last Wednesday's
version of something, it will be in last Wednesday's fold state.
"]
block_713 -> { prose_730}
{rank=same; prose_730}

prose_730 [label="prose"]


prose_730 -> leaf_731
leaf_731  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This lets us have richer folding semantics, like \"don't unfold when
cycling\". It lets us have richer drawer semantics, and so on.
"]
block_714 -> { prose_732}
{rank=same; prose_732}

prose_732 [label="prose"]


prose_732 -> leaf_733
leaf_733  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We will reserve a number of characters for this purpose, at least
"]
block_715 -> { prose_734}
{rank=same; prose_734}

prose_734 [label="prose"]


prose_734 -> leaf_735
leaf_735  [color=Gray,shape=rectangle,fontname=Inconsolata,label="| ▼ |  ► | ⦿ |
    |
"]
block_716 -> { prose_736}
{rank=same; prose_736}

prose_736 [label="prose"]


prose_736 -> leaf_737
leaf_737  [color=Gray,shape=rectangle,fontname=Inconsolata,label="It's legal to delete runes, like anything else. It's also legal to
insert them manually. Neither of these paradigms is typical;
deleting into a rune may or may not cause it to disappear in
normal edit mode.
"]
block_717 -> { prose_738}
{rank=same; prose_738}

prose_738 [label="prose"]


prose_738 -> leaf_739
leaf_739  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Runes, like absolutely everything in Grimoire, are prose if encountered
in a context where they aren't valid structure.
"]
block_718 -> { prose_740}
{rank=same; prose_740}

prose_740 [label="prose"]


prose_740 -> leaf_741
leaf_741  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We will most likely reuse runes inside cookies, though it's just as valid
and quite typical to use normal letters or words.
"]
section_719 -> { header_742 block_743 block_744 block_745 block_746 block_747 block_748 block_749}
{rank=same; header_742 block_743 block_744 block_745 block_746 block_747 block_748 block_749}

header_742 [label="3 : Lists"]

block_743 [label="block 772-779"]

block_744 [label="block 780-781"]

block_745 [label="block 782-796"]

block_746 [label="block 797-798"]

block_747 [label="block 799-800"]

block_748 [label="block 801-820"]

block_749 [label="block 821-822"]


block_743 -> { prose_750}
{rank=same; prose_750}

prose_750 [label="prose"]


prose_750 -> leaf_751
leaf_751  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Something that irks me about Org is basically historic. It was a TODO
list first, and became a heiarchical document editor later. As a result,
the functions that let you tag, track, and so on, are in the wrong place;
an Org file has to choose whether or not it's a task list or a document,
which doesn't fit the metalanguage paradigm cleanly.
"]
block_744 -> { prose_752}
{rank=same; prose_752}

prose_752 [label="prose"]


prose_752 -> leaf_753
leaf_753  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A list looks like this:
"]
block_745 -> { structure_754 structure_755}
{rank=same; structure_754 structure_755}

structure_754 [label="structure"]

structure_755 [label="structure"]


structure_754 -> { hashline_756}
{rank=same; hashline_756}

hashline_756 [label="hashline"]


hashline_756 -> { hashtag_757}
{rank=same; hashtag_757}

hashtag_757 [label="hashtag"]


hashtag_757 -> leaf_758
leaf_758  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_755 -> { hashline_759}
{rank=same; hashline_759}

hashline_759 [label="hashline"]


hashline_759 -> { hashtag_760}
{rank=same; hashtag_760}

hashtag_760 [label="hashtag"]


hashtag_760 -> leaf_761
leaf_761  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_746 -> { prose_762}
{rank=same; prose_762}

prose_762 [label="prose"]


prose_762 -> leaf_763
leaf_763  [color=Gray,shape=rectangle,fontname=Inconsolata,label="and we have radio buttons.
"]
block_747 -> { prose_764}
{rank=same; prose_764}

prose_764 [label="prose"]


prose_764 -> leaf_765
leaf_765  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We also have whitespace lists:
"]
block_748 -> { structure_766}
{rank=same; structure_766}

structure_766 [label="structure"]


structure_766 -> { hashline_767}
{rank=same; hashline_767}

hashline_767 [label="hashline"]


hashline_767 -> { hashtag_768}
{rank=same; hashtag_768}

hashtag_768 [label="hashtag"]


hashtag_768 -> leaf_769
leaf_769  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_749 -> { structure_770}
{rank=same; structure_770}

structure_770 [label="structure"]


structure_770 -> { hashline_771}
{rank=same; hashline_771}

hashline_771 [label="hashline"]


hashline_771 -> { hashtag_772}
{rank=same; hashtag_772}

hashtag_772 [label="hashtag"]


hashtag_772 -> leaf_773
leaf_773  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_720 -> { header_774 block_775 block_776 block_777 block_778 block_779}
{rank=same; header_774 block_775 block_776 block_777 block_778 block_779}

header_774 [label="3 : Embedded Data"]

block_775 [label="block 823-829"]

block_776 [label="block 830-832"]

block_777 [label="block 833-835"]

block_778 [label="block 836-840"]

block_779 [label="block 841-843"]


block_775 -> { prose_780}
{rank=same; prose_780}

prose_780 [label="prose"]


prose_780 -> leaf_781
leaf_781  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Anything found in prose between ={= and =}= is EDN. Note that the
outermost pair of curlies denotes a boundary. ={ foo }= is the symbol
foo, ={ foo bar }= is the symbol *foo* and the symbol *bar*, ={{foo bar}}= is
a map with key *foo* and value *bar*.
"]
block_776 -> { prose_782}
{rank=same; prose_782}

prose_782 [label="prose"]


prose_782 -> leaf_783
leaf_783  [color=Gray,shape=rectangle,fontname=Inconsolata,label="To quote the [[https://github.com/edn-format/edn][spec]], \"There is no enclosing element at the top level\". The
braces mark the boundaries of the data region.
"]
block_777 -> { prose_784}
{rank=same; prose_784}

prose_784 [label="prose"]


prose_784 -> leaf_785
leaf_785  [color=Gray,shape=rectangle,fontname=Inconsolata,label="There is a mapping between lists and EDN, the basics of which will be clear
to the astute reader. The non-basics are unclear to the author as well.
"]
block_778 -> { prose_786}
{rank=same; prose_786}

prose_786 [label="prose"]


prose_786 -> leaf_787
leaf_787  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Unresolved: may data be inlined into prose? What would that even mean?
slap some colors on it in the document? If we want to provide a 'this is
code but not for interpretation' mark, we will, it won't be EDN specific.
Inlining colorized code is not high on my todo list.
"]
block_779 -> { prose_788}
{rank=same; prose_788}

prose_788 [label="prose"]


prose_788 -> leaf_789
leaf_789  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I don't think you can. Embeds are down here with lists and
tables in 'things you can't inline', for now.
"]
section_721 -> { header_790 block_791 block_792 block_793 block_794 block_795 block_796 block_797 block_798 block_799 block_800 block_801 block_802 block_803 block_804 block_805 block_806}
{rank=same; header_790 block_791 block_792 block_793 block_794 block_795 block_796 block_797 block_798 block_799 block_800 block_801 block_802 block_803 block_804 block_805 block_806}

header_790 [label="3 : Tables"]

block_791 [label="block 844-848"]

block_792 [label="block 849-852"]

block_793 [label="block 853-855"]

block_794 [label="block 856-857"]

block_795 [label="block 858-863"]

block_796 [label="block 864-869"]

block_797 [label="block 870-875"]

block_798 [label="block 876-882"]

block_799 [label="block 883-889"]

block_800 [label="block 890-891"]

block_801 [label="block 892-896"]

block_802 [label="block 897-898"]

block_803 [label="block 899-901"]

block_804 [label="block 902-904"]

block_805 [label="block 905-906"]

block_806 [label="block 907-910"]


block_791 -> { prose_807}
{rank=same; prose_807}

prose_807 [label="prose"]


prose_807 -> leaf_808
leaf_808  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The way tables work in Babel is fine and needs little polish. Any modest
improvements we make will be in the face of considerable experience.
"]
block_792 -> { prose_809}
{rank=same; prose_809}

prose_809 [label="prose"]


prose_809 -> leaf_810
leaf_810  [color=Gray,shape=rectangle,fontname=Inconsolata,label="For example, I expect there's a way to make multiple literal rows serve
as a single row in existing Org, but I don't know what it is. I'll be
playing around a lot in the coming weeks, I hope.
"]
block_793 -> { prose_811}
{rank=same; prose_811}

prose_811 [label="prose"]


prose_811 -> leaf_812
leaf_812  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Composability being an overarching goal, we can embed anything in a table
that we would put elsewhere.
"]
block_794 -> { prose_813}
{rank=same; prose_813}

prose_813 [label="prose"]


prose_813 -> leaf_814
leaf_814  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Looks something like this:
"]
block_795 -> { structure_815}
{rank=same; structure_815}

structure_815 [label="structure"]


structure_815 -> { hashline_816}
{rank=same; hashline_816}

hashline_816 [label="hashline"]


hashline_816 -> { hashtag_817}
{rank=same; hashtag_817}

hashtag_817 [label="hashtag"]


hashtag_817 -> leaf_818
leaf_818  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_796 -> { structure_819 structure_820}
{rank=same; structure_819 structure_820}

structure_819 [label="structure"]

structure_820 [label="structure"]


structure_819 -> { hashline_821}
{rank=same; hashline_821}

hashline_821 [label="hashline"]


hashline_821 -> { hashtag_822}
{rank=same; hashtag_822}

hashtag_822 [label="hashtag"]


hashtag_822 -> leaf_823
leaf_823  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_820 -> { hashline_824}
{rank=same; hashline_824}

hashline_824 [label="hashline"]


hashline_824 -> { hashtag_825}
{rank=same; hashtag_825}

hashtag_825 [label="hashtag"]


hashtag_825 -> leaf_826
leaf_826  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_797 -> { structure_827}
{rank=same; structure_827}

structure_827 [label="structure"]


structure_827 -> { hashline_828}
{rank=same; hashline_828}

hashline_828 [label="hashline"]


hashline_828 -> { hashtag_829}
{rank=same; hashtag_829}

hashtag_829 [label="hashtag"]


hashtag_829 -> leaf_830
leaf_830  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_798 -> { structure_831 structure_832}
{rank=same; structure_831 structure_832}

structure_831 [label="structure"]

structure_832 [label="structure"]


structure_831 -> { hashline_833}
{rank=same; hashline_833}

hashline_833 [label="hashline"]


hashline_833 -> { hashtag_834}
{rank=same; hashtag_834}

hashtag_834 [label="hashtag"]


hashtag_834 -> leaf_835
leaf_835  [color=Gray,shape=rectangle,fontname=Inconsolata,label="formulas"]
structure_832 -> { hashline_836}
{rank=same; hashline_836}

hashline_836 [label="hashline"]


hashline_836 -> { hashtag_837}
{rank=same; hashtag_837}

hashtag_837 [label="hashtag"]


hashtag_837 -> leaf_838
leaf_838  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_799 -> { prose_839}
{rank=same; prose_839}

prose_839 [label="prose"]


prose_839 -> leaf_840
leaf_840  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A subtle point of parsing I'm not sure is correct is =#formulas -=
or =- #formulas=. I feel like by normal associativity the latter
attaches the tag to the list, then nothing to the tag,
since the rule is a tag preceded only by whitespace owns the line
after it and indentations below it. The tag doesn't affect the indentation level
of the =-=, which could be confusing but won't be.
"]
block_800 -> { prose_841}
{rank=same; prose_841}

prose_841 [label="prose"]


prose_841 -> leaf_842
leaf_842  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We should be able to tag tables like this:
"]
block_801 -> { structure_843 structure_844}
{rank=same; structure_843 structure_844}

structure_843 [label="structure"]

structure_844 [label="structure"]


structure_843 -> { hashline_845}
{rank=same; hashline_845}

hashline_845 [label="hashline"]


hashline_845 -> { hashtag_846}
{rank=same; hashtag_846}

hashtag_846 [label="hashtag"]


hashtag_846 -> leaf_847
leaf_847  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_844 -> { handleline_848}
{rank=same; handleline_848}

handleline_848 [label="handleline"]


handleline_848 -> { handle_849}
{rank=same; handle_849}

handle_849 [label="handle"]


handle_849 -> leaf_850
leaf_850  [color=Gray,shape=rectangle,fontname=Inconsolata,label="named-table"]
block_802 -> { structure_851}
{rank=same; structure_851}

structure_851 [label="structure"]


structure_851 -> { hashline_852}
{rank=same; hashline_852}

hashline_852 [label="hashline"]


hashline_852 -> { hashtag_853}
{rank=same; hashtag_853}

hashtag_853 [label="hashtag"]


hashtag_853 -> leaf_854
leaf_854  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_803 -> { structure_855}
{rank=same; structure_855}

structure_855 [label="structure"]


structure_855 -> { hashline_856}
{rank=same; hashline_856}

hashline_856 [label="hashline"]


hashline_856 -> { hashtag_857}
{rank=same; hashtag_857}

hashtag_857 [label="hashtag"]


hashtag_857 -> leaf_858
leaf_858  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_804 -> { prose_859}
{rank=same; prose_859}

prose_859 [label="prose"]


prose_859 -> leaf_860
leaf_860  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Totally okay in this context, doesn't trigger Nim rules because the table
associates to the tag anyway.
"]
block_805 -> { prose_861}
{rank=same; prose_861}

prose_861 [label="prose"]


prose_861 -> leaf_862
leaf_862  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This gives us a nice left gutter which I propose we can use in various ways.
"]
block_806 -> { prose_863}
{rank=same; prose_863}

prose_863 [label="prose"]


prose_863 -> leaf_864
leaf_864  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This section can get much longer. Generalizing how tables work is incredibly
powerful. My dream is to embed APL into Grimoire. Give me an excuse to
finally learn it!
"]
section_722 -> { header_865 block_866 block_867 block_868 block_869 block_870}
{rank=same; header_865 block_866 block_867 block_868 block_869 block_870}

header_865 [label="3 : Clocks"]

block_866 [label="block 911-914"]

block_867 [label="block 915-916"]

block_868 [label="block 917-918"]

block_869 [label="block 919-920"]

block_870 [label="block 921-924"]


block_866 -> { prose_871}
{rank=same; prose_871}

prose_871 [label="prose"]


prose_871 -> leaf_872
leaf_872  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I think timestamps are just a drawer you put a timestamp in.
"]
block_867 -> { prose_873}
{rank=same; prose_873}

prose_873 [label="prose"]


prose_873 -> leaf_874
leaf_874  [color=Gray,shape=rectangle,fontname=Inconsolata,label="That drawer can collapse and look like ⏱.
"]
block_868 -> { prose_875}
{rank=same; prose_875}

prose_875 [label="prose"]


prose_875 -> leaf_876
leaf_876  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Or we can collapse it into something from the set containing 🕞.
"]
block_869 -> { prose_877}
{rank=same; prose_877}

prose_877 [label="prose"]


prose_877 -> leaf_878
leaf_878  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Which normal Emacs doesn't display. I really need to go Japanese soon.
"]
block_870 -> { prose_879}
{rank=same; prose_879}

prose_879 [label="prose"]


prose_879 -> leaf_880
leaf_880  [color=Gray,shape=rectangle,fontname=Inconsolata,label="But it would be just adorable to have a little clock representing the timestamp.
Emoji are quirky but the set contains useful icons, and it's Unicode.
Grimoire supports Unicode.
"]
section_723 -> { header_881 block_882 block_883 block_884 block_885 section_886 section_887}
{rank=same; header_881 block_882 block_883 block_884 block_885 section_886 section_887}

header_881 [label="3 : Code"]

block_882 [label="block 925-928"]

block_883 [label="block 929-933"]

block_884 [label="block 934-937"]

block_885 [label="block 938-963"]

section_886 [label="section: 946-963"]

section_887 [label="section: 964-1084"]


block_882 -> { prose_888}
{rank=same; prose_888}

prose_888 [label="prose"]


prose_888 -> leaf_889
leaf_889  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The place where it all comes together.
"]
block_883 -> { prose_890}
{rank=same; prose_890}

prose_890 [label="prose"]


prose_890 -> leaf_891
leaf_891  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire has a servant language, Lua by default, but this
is of course configurable. Eventually we'll write Clu,
it's a race to see which project is finished first but they
have common dependencies, surprise, surprise.
"]
block_884 -> { prose_892}
{rank=same; prose_892}

prose_892 [label="prose"]


prose_892 -> leaf_893
leaf_893  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Code and data are yin and yang in Grimoire. Code embedded in
documents is executed in various ways and times; comments within
code blocks are themselves in Grimoire data format, and so on.
"]
block_885 -> { prose_894}
{rank=same; prose_894}

prose_894 [label="prose"]


prose_894 -> leaf_895
leaf_895  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Given a single language Grimoire text, we can perform a mechanical
figure-ground reversal, such that data blocks become comments and
code blocks become live. We have many more sophisticated weave and
tangle operations, but this is a designed-in property that will prove
handy: sometimes you want to take code, org it up, and then flip it
into a literate context. Upgrade path for existing codebases.

"]
section_886 -> { header_896 block_897 block_898 block_899 block_900}
{rank=same; header_896 block_897 block_898 block_899 block_900}

header_896 [label="4 : Inline Code"]

block_897 [label="block 946-951"]

block_898 [label="block 952-958"]

block_899 [label="block 959-960"]

block_900 [label="block 961-963"]


block_897 -> { prose_901}
{rank=same; prose_901}

prose_901 [label="prose"]


prose_901 -> leaf_902
leaf_902  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Inline code is written =`4 + 5`=. It executes in something similar to
:function mode in Babel, the call is as though it were wrapped in a function
call that looks like:
"]
block_898 -> { structure_903 structure_904}
{rank=same; structure_903 structure_904}

structure_903 [label="structure"]

structure_904 [label="structure"]


structure_903 -> { hashline_905}
{rank=same; hashline_905}

hashline_905 [label="hashline"]


hashline_905 -> { hashtag_906}
{rank=same; hashtag_906}

hashtag_906 [label="hashtag"]


hashtag_906 -> leaf_907
leaf_907  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_904 -> { hashline_908}
{rank=same; hashline_908}

hashline_908 [label="hashline"]


hashline_908 -> { hashtag_909}
{rank=same; hashtag_909}

hashtag_909 [label="hashtag"]


hashtag_909 -> leaf_910
leaf_910  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_899 -> { prose_911}
{rank=same; prose_911}

prose_911 [label="prose"]


prose_911 -> leaf_912
leaf_912  [color=Gray,shape=rectangle,fontname=Inconsolata,label="maintaining state between calls.
"]
block_900 -> { prose_913}
{rank=same; prose_913}

prose_913 [label="prose"]


prose_913 -> leaf_914
leaf_914  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Anything named exists as a data structure in the helper language. This makes it easy to
refer to a block that contains a self-reference, so these are stored in a cycle-safe way.
"]
section_887 -> { header_915 block_916 block_917 block_918 block_919 block_920 block_921 block_922 block_923 block_924 block_925 block_926 block_927 block_928 block_929 block_930 block_931 block_932 block_933 block_934 block_935 block_936 block_937 block_938 block_939 block_940 block_941 block_942 block_943 block_944 block_945 section_946}
{rank=same; header_915 block_916 block_917 block_918 block_919 block_920 block_921 block_922 block_923 block_924 block_925 block_926 block_927 block_928 block_929 block_930 block_931 block_932 block_933 block_934 block_935 block_936 block_937 block_938 block_939 block_940 block_941 block_942 block_943 block_944 block_945 section_946}

header_915 [label="4 : Code Blocks"]

block_916 [label="block 964-967"]

block_917 [label="block 968-969"]

block_918 [label="block 970-974"]

block_919 [label="block 975-977"]

block_920 [label="block 978-979"]

block_921 [label="block 980-982"]

block_922 [label="block 983-988"]

block_923 [label="block 989-990"]

block_924 [label="block 991-996"]

block_925 [label="block 997-999"]

block_926 [label="block 1000-1001"]

block_927 [label="block 1002-1005"]

block_928 [label="block 1006-1007"]

block_929 [label="block 1008-1015"]

block_930 [label="block 1016-1020"]

block_931 [label="block 1021-1026"]

block_932 [label="block 1027-1031"]

block_933 [label="block 1032-1032"]

block_934 [label="block 1033-1036"]

block_935 [label="block 1037-1038"]

block_936 [label="block 1039-1041"]

block_937 [label="block 1042-1047"]

block_938 [label="block 1048-1052"]

block_939 [label="block 1053-1055"]

block_940 [label="block 1056-1059"]

block_941 [label="block 1060-1065"]

block_942 [label="block 1066-1068"]

block_943 [label="block 1069-1074"]

block_944 [label="block 1075-1076"]

block_945 [label="block 1077-1084"]

section_946 [label="section: 1085-1155"]


block_916 -> { prose_947}
{rank=same; prose_947}

prose_947 [label="prose"]


prose_947 -> leaf_948
leaf_948  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The =`inline`= syntax works like the rest, you may use any number of backticks to enclose a form.
"]
block_917 -> { prose_949}
{rank=same; prose_949}

prose_949 [label="prose"]


prose_949 -> leaf_950
leaf_950  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Something like:
"]
block_918 -> { structure_951}
{rank=same; structure_951}

structure_951 [label="structure"]


structure_951 -> { hashline_952}
{rank=same; hashline_952}

hashline_952 [label="hashline"]


hashline_952 -> { hashtag_953}
{rank=same; hashtag_953}

hashtag_953 [label="hashtag"]


hashtag_953 -> leaf_954
leaf_954  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_919 -> { structure_955}
{rank=same; structure_955}

structure_955 [label="structure"]


structure_955 -> { hashline_956}
{rank=same; hashline_956}

hashline_956 [label="hashline"]


hashline_956 -> { hashtag_957}
{rank=same; hashtag_957}

hashtag_957 [label="hashtag"]


hashtag_957 -> leaf_958
leaf_958  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_920 -> { prose_959}
{rank=same; prose_959}

prose_959 [label="prose"]


prose_959 -> leaf_960
leaf_960  [color=Gray,shape=rectangle,fontname=Inconsolata,label="it is evaluated when referenced. This:
"]
block_921 -> { structure_961 structure_962}
{rank=same; structure_961 structure_962}

structure_961 [label="structure"]

structure_962 [label="structure"]


structure_961 -> { hashline_963}
{rank=same; hashline_963}

hashline_963 [label="hashline"]


hashline_963 -> { hashtag_964}
{rank=same; hashtag_964}

hashtag_964 [label="hashtag"]


hashtag_964 -> leaf_965
leaf_965  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_962 -> { handleline_966}
{rank=same; handleline_966}

handleline_966 [label="handleline"]


handleline_966 -> { handle_967}
{rank=same; handle_967}

handle_967 [label="handle"]


handle_967 -> leaf_968
leaf_968  [color=Gray,shape=rectangle,fontname=Inconsolata,label="named-block"]
block_922 -> { structure_969}
{rank=same; structure_969}

structure_969 [label="structure"]


structure_969 -> { hashline_970}
{rank=same; hashline_970}

hashline_970 [label="hashline"]


hashline_970 -> { hashtag_971}
{rank=same; hashtag_971}

hashtag_971 [label="hashtag"]


hashtag_971 -> leaf_972
leaf_972  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_923 -> { prose_973}
{rank=same; prose_973}

prose_973 [label="prose"]


prose_973 -> leaf_974
leaf_974  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Separated code blocks use special tags:
"]
block_924 -> { codeblock_975}
{rank=same; codeblock_975}

codeblock_975 [label="code block 993-995"]


codeblock_975 -> leaf_976
leaf_976  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
block_925 -> { structure_977}
{rank=same; structure_977}

structure_977 [label="structure"]


structure_977 -> { hashline_978}
{rank=same; hashline_978}

hashline_978 [label="hashline"]


hashline_978 -> { hashtag_979}
{rank=same; hashtag_979}

hashtag_979 [label="hashtag"]


hashtag_979 -> leaf_980
leaf_980  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_926 -> { prose_981}
{rank=same; prose_981}

prose_981 [label="prose"]


prose_981 -> leaf_982
leaf_982  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nesting apply. As indeed they might in a Grimoire code block.
"]
block_927 -> { prose_983}
{rank=same; prose_983}

prose_983 [label="prose"]


prose_983 -> leaf_984
leaf_984  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We need a good runtime. Playing the Inception game
with Grimoire should be an amusing headache, not a dog-slow
system killer.
"]
block_928 -> { prose_985}
{rank=same; prose_985}

prose_985 [label="prose"]


prose_985 -> leaf_986
leaf_986  [color=Gray,shape=rectangle,fontname=Inconsolata,label="They may be named like anything else:
"]
block_929 -> { codeblock_987 structure_988}
{rank=same; codeblock_987 structure_988}

codeblock_987 [label="code block 1009-1011"]

structure_988 [label="structure"]


codeblock_987 -> leaf_989
leaf_989  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
structure_988 -> { hashline_990}
{rank=same; hashline_990}

hashline_990 [label="hashline"]


hashline_990 -> { hashtag_991}
{rank=same; hashtag_991}

hashtag_991 [label="hashtag"]


hashtag_991 -> leaf_992
leaf_992  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_930 -> { codeblock_993}
{rank=same; codeblock_993}

codeblock_993 [label="code block 1017-1019"]


codeblock_993 -> leaf_994
leaf_994  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
block_931 -> { codeblock_995}
{rank=same; codeblock_995}

codeblock_995 [label="code block 1023-1025"]


codeblock_995 -> leaf_996
leaf_996  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 4 + 5"]
block_932 -> { structure_997}
{rank=same; structure_997}

structure_997 [label="structure"]


structure_997 -> { hashline_998}
{rank=same; hashline_998}

hashline_998 [label="hashline"]


hashline_998 -> { hashtag_999}
{rank=same; hashtag_999}

hashtag_999 [label="hashtag"]


hashtag_999 -> leaf_1000
leaf_1000  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_933 -> { structure_1001}
{rank=same; structure_1001}

structure_1001 [label="structure"]


structure_1001 -> { handleline_1002}
{rank=same; handleline_1002}

handleline_1002 [label="handleline"]


handleline_1002 -> { handle_1003}
{rank=same; handle_1003}

handle_1003 [label="handle"]


handle_1003 -> leaf_1004
leaf_1004  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nine"]
block_934 -> { codeblock_1005}
{rank=same; codeblock_1005}

codeblock_1005 [label="code block 1033-1035"]


codeblock_1005 -> leaf_1006
leaf_1006  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 4 + 5"]
block_935 -> { structure_1007}
{rank=same; structure_1007}

structure_1007 [label="structure"]


structure_1007 -> { hashline_1008}
{rank=same; hashline_1008}

hashline_1008 [label="hashline"]


hashline_1008 -> { hashtag_1009}
{rank=same; hashtag_1009}

hashtag_1009 [label="hashtag"]


hashtag_1009 -> leaf_1010
leaf_1010  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_936 -> { structure_1011}
{rank=same; structure_1011}

structure_1011 [label="structure"]


structure_1011 -> { hashline_1012}
{rank=same; hashline_1012}

hashline_1012 [label="hashline"]


hashline_1012 -> { hashtag_1013}
{rank=same; hashtag_1013}

hashtag_1013 [label="hashtag"]


hashtag_1013 -> leaf_1014
leaf_1014  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_937 -> { prose_1015}
{rank=same; prose_1015}

prose_1015 [label="prose"]


prose_1015 -> leaf_1016
leaf_1016  [color=Gray,shape=rectangle,fontname=Inconsolata,label="marks an anonymous result. =#@nine->= is the automatically generated tag for
the return value of the block named =@nine=, adding =@nine()= to a prose block will
add the number 9 to the weave at that location. *bridge* will either display the result,
the call, or both, configurably, when editing the source, with syntax-highlighting to 
enforce the distinction. 
"]
block_938 -> { prose_1017}
{rank=same; prose_1017}

prose_1017 [label="prose"]


prose_1017 -> leaf_1018
leaf_1018  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Code blocks may be indented as any other blocks, with the associated owership
rules. Code blocks so indented have a logical start equal to their level of
indentation, which is to say the program being called will not see indentation
that is proper to the Grimoire document.
"]
block_939 -> { prose_1019}
{rank=same; prose_1019}

prose_1019 [label="prose"]


prose_1019 -> leaf_1020
leaf_1020  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Code blocks may be placed inside lists, as tables may be, but may not be
explicitly placed inside tables.
"]
block_940 -> { prose_1021}
{rank=same; prose_1021}

prose_1021 [label="prose"]


prose_1021 -> leaf_1022
leaf_1022  [color=Gray,shape=rectangle,fontname=Inconsolata,label="You may insert the result of a named code block in the data context
by simply saying =@a-named-block()=. If there are variables, you may pass
them, =@a-named-block(23, true)= or if you wish, by name:
"]
block_941 -> { structure_1023 structure_1024 structure_1025}
{rank=same; structure_1023 structure_1024 structure_1025}

structure_1023 [label="structure"]

structure_1024 [label="structure"]

structure_1025 [label="structure"]


structure_1023 -> { hashline_1026}
{rank=same; hashline_1026}

hashline_1026 [label="hashline"]


hashline_1026 -> { hashtag_1027}
{rank=same; hashtag_1027}

hashtag_1027 [label="hashtag"]


hashtag_1027 -> leaf_1028
leaf_1028  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_1024 -> { handleline_1029}
{rank=same; handleline_1029}

handleline_1029 [label="handleline"]


handleline_1029 -> { handle_1030}
{rank=same; handle_1030}

handle_1030 [label="handle"]


handle_1030 -> leaf_1031
leaf_1031  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a-named-block"]
structure_1025 -> { hashline_1032}
{rank=same; hashline_1032}

hashline_1032 [label="hashline"]


hashline_1032 -> { hashtag_1033}
{rank=same; hashtag_1033}

hashtag_1033 [label="hashtag"]


hashtag_1033 -> leaf_1034
leaf_1034  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_942 -> { prose_1035}
{rank=same; prose_1035}

prose_1035 [label="prose"]


prose_1035 -> leaf_1036
leaf_1036  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Within a formula applied to a table, it is valid to use the description
syntax for a variable to supply an argument to a function.
"]
block_943 -> { prose_1037}
{rank=same; prose_1037}

prose_1037 [label="prose"]


prose_1037 -> leaf_1038
leaf_1038  [color=Gray,shape=rectangle,fontname=Inconsolata,label="There will be further syntax involved in building up the line that
begins a code block. It's considered good form to assign complex
code block headers into distinct tags, and use those, rather than
being explicit and repeating yourself or hiding file-local defaults
in drawers.
"]
block_944 -> { prose_1039}
{rank=same; prose_1039}

prose_1039 [label="prose"]


prose_1039 -> leaf_1040
leaf_1040  [color=Gray,shape=rectangle,fontname=Inconsolata,label="So we prefer something like
"]
block_945 -> { codeblock_1041 structure_1042}
{rank=same; codeblock_1041 structure_1042}

codeblock_1041 [label="code block 1078-1080"]

structure_1042 [label="structure"]


codeblock_1041 -> leaf_1043
leaf_1043  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- some lua code"]
structure_1042 -> { hashline_1044}
{rank=same; hashline_1044}

hashline_1044 [label="hashline"]


hashline_1044 -> { hashtag_1045}
{rank=same; hashtag_1045}

hashtag_1045 [label="hashtag"]


hashtag_1045 -> leaf_1046
leaf_1046  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_946 -> { header_1047 block_1048 section_1049 section_1050}
{rank=same; header_1047 block_1048 section_1049 section_1050}

header_1047 [label="1 : Runtime"]

block_1048 [label="block 1085-1155"]

section_1049 [label="section: 1089-1123"]

section_1050 [label="section: 1156-1200"]


block_1048 -> { prose_1051}
{rank=same; prose_1051}

prose_1051 [label="prose"]


prose_1051 -> leaf_1052
leaf_1052  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Here, we begin to explore the interactions Grimoire is capable of.
"]
section_1049 -> { header_1053 block_1054 block_1055 block_1056 block_1057 block_1058 block_1059 block_1060 block_1061 section_1062}
{rank=same; header_1053 block_1054 block_1055 block_1056 block_1057 block_1058 block_1059 block_1060 block_1061 section_1062}

header_1053 [label="2 : Literate or Live?"]

block_1054 [label="block 1089-1093"]

block_1055 [label="block 1094-1098"]

block_1056 [label="block 1099-1101"]

block_1057 [label="block 1102-1105"]

block_1058 [label="block 1106-1109"]

block_1059 [label="block 1110-1114"]

block_1060 [label="block 1115-1119"]

block_1061 [label="block 1120-1123"]

section_1062 [label="section: 1124-1155"]


block_1054 -> { prose_1063}
{rank=same; prose_1063}

prose_1063 [label="prose"]


prose_1063 -> leaf_1064
leaf_1064  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Babel is descended from the tradition of [[http://en.wikipedia.org/wiki/Literate_programming][literate programming]], and
Grimoire inherits this from Babel.
"]
block_1055 -> { prose_1065}
{rank=same; prose_1065}

prose_1065 [label="prose"]


prose_1065 -> leaf_1066
leaf_1066  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grimoire is capable of producing code and documentation in the
classic literate style. This is not the aim of Grimoire: it is
a metalanguage, for working with prose, data, and code in an
integrated fashion.
"]
block_1056 -> { prose_1067}
{rank=same; prose_1067}

prose_1067 [label="prose"]


prose_1067 -> leaf_1068
leaf_1068  [color=Gray,shape=rectangle,fontname=Inconsolata,label="What a compiler is to a REPL, literate programming is to living
documents.
"]
block_1057 -> { prose_1069}
{rank=same; prose_1069}

prose_1069 [label="prose"]


prose_1069 -> leaf_1070
leaf_1070  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In a literate programming context, we have source, which integrates
code and documentation. The source is then woven into documentation,
and tangled into code. Both are compiled, one is printed, one is run.
"]
block_1058 -> { prose_1071}
{rank=same; prose_1071}

prose_1071 [label="prose"]


prose_1071 -> leaf_1072
leaf_1072  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The word 'printed' sounds somewhat archaic, no? The number of tools
Donald Knuth had to write just to write the tools he wanted to write,
and tool the writings he wanted to tool, is simply staggering.
"]
block_1059 -> { prose_1073}
{rank=same; prose_1073}

prose_1073 [label="prose"]


prose_1073 -> leaf_1074
leaf_1074  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Traces of that legacy remain in Grimoire. Like Babel, we allow for
LaTeX embedding, with the sugar =`\\latex`=. Starting Lua code with
a backslash is illegal, starting Clu code with a backslash is also
illegal.
"]
block_1060 -> { prose_1075}
{rank=same; prose_1075}

prose_1075 [label="prose"]


prose_1075 -> leaf_1076
leaf_1076  [color=Gray,shape=rectangle,fontname=Inconsolata,label="For a Grimoire document to be printed, realistically, in today's world,
it will be translated to LaTeX, hence to PDF, sent off to a print
on demand company, and drop shipped. Some documents may in fact
make this journey, because why not? We aren't oriented around it.
"]
block_1061 -> { prose_1077}
{rank=same; prose_1077}

prose_1077 [label="prose"]


prose_1077 -> leaf_1078
leaf_1078  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The basic flow in a Grimoire context is one of excursion and return.
We have tangling and weaving, but also unraveling, where actions taken
within the weave or tangle are integrated back into the source document.
"]
section_1062 -> { header_1079 block_1080 block_1081 block_1082 block_1083 block_1084 block_1085}
{rank=same; header_1079 block_1080 block_1081 block_1082 block_1083 block_1084 block_1085}

header_1079 [label="3 : Unraveling the Mystery"]

block_1080 [label="block 1124-1131"]

block_1081 [label="block 1132-1137"]

block_1082 [label="block 1138-1140"]

block_1083 [label="block 1141-1145"]

block_1084 [label="block 1146-1150"]

block_1085 [label="block 1151-1155"]


block_1080 -> { prose_1086}
{rank=same; prose_1086}

prose_1086 [label="prose"]


prose_1086 -> leaf_1087
leaf_1087  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
What's unraveling? When I picture Donald Knuth writing literate code,
I picture him with a notebook, writing free-flowing algorithms in a
fashion he refined his entire career. I imagine him carefully transcribing
into Web, running the compiler, going for a stroll around the Stanford
campus, and examining the changes upon his return.
"]
block_1081 -> { prose_1088}
{rank=same; prose_1088}

prose_1088 [label="prose"]


prose_1088 -> leaf_1089
leaf_1089  [color=Gray,shape=rectangle,fontname=Inconsolata,label="On the days, and they did happen, when his program was in a state of error,
I picture him returning to his notebook first. While thinking. Perhaps
playing the organ for an hour or two, to relax. He would then correct the
notebook, then the code, then the program, which would be correct now,
most of the time.
"]
block_1082 -> { prose_1090}
{rank=same; prose_1090}

prose_1090 [label="prose"]


prose_1090 -> leaf_1091
leaf_1091  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I'm making that all up. But I'd wager I'm not far off the mark. We
don't work like that and most of us can't.
"]
block_1083 -> { prose_1092}
{rank=same; prose_1092}

prose_1092 [label="prose"]


prose_1092 -> leaf_1093
leaf_1093  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A tangle is named that because the mapping between it and the source
can be non-trivial. It's quite possible to make it undecidable what to
do with edits to the tangle. it's also possible to move edits from the tangle
back into the source, in most cases, if we structure things well.
"]
block_1084 -> { prose_1094}
{rank=same; prose_1094}

prose_1094 [label="prose"]


prose_1094 -> leaf_1095
leaf_1095  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Donald Knuth was unable to print a book that would alter his code. I'm
sure he'd have been delighted to have the ability. Our weaves can easily
be living documents, through in-browser and server side empowerment.
Those changes, too, should make it back into the source.
"]
block_1085 -> { prose_1096}
{rank=same; prose_1096}

prose_1096 [label="prose"]


prose_1096 -> leaf_1097
leaf_1097  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Ultimately I imagine many people will prefer to edit and run their
Grimoire documents entirely from a weave that provides a bit of the
ol' WYSIWYG to the experience. Well and good for them, I have my own
view of Heaven, and it isn't Heaven if we don't all fit.
"]
section_1050 -> { header_1098 block_1099 block_1100 block_1101 block_1102 section_1103 section_1104}
{rank=same; header_1098 block_1099 block_1100 block_1101 block_1102 section_1103 section_1104}

header_1098 [label="2 : Source, Tangle and Weave"]

block_1099 [label="block 1156-1160"]

block_1100 [label="block 1161-1164"]

block_1101 [label="block 1165-1168"]

block_1102 [label="block 1169-1200"]

section_1103 [label="section: 1173-1200"]

section_1104 [label="section: 1201-1219"]


block_1099 -> { prose_1105}
{rank=same; prose_1105}

prose_1105 [label="prose"]


prose_1105 -> leaf_1106
leaf_1106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These classic concepts from literate programming are central to
the Grimoire paradigm.
"]
block_1100 -> { prose_1107}
{rank=same; prose_1107}

prose_1107 [label="prose"]


prose_1107 -> leaf_1108
leaf_1108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In Grimoire, something like a PDF is not a true weave. It is a product;
much like an image or data derived from a simulation, it is regenerated
when necessary but has no further connection to the Grimoire environment.
"]
block_1101 -> { prose_1109}
{rank=same; prose_1109}

prose_1109 [label="prose"]


prose_1109 -> leaf_1110
leaf_1110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Our first section discusses the format of Grimoire source code. Like Babel,
unlike Web and descendants, it is self-tangling. Grimoire will be tightly
integrated and purpose-built for this task, operating at a REPL+ level.
"]
block_1102 -> { prose_1111}
{rank=same; prose_1111}

prose_1111 [label="prose"]


prose_1111 -> leaf_1112
leaf_1112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We still wish to use it to compile programs written in appropriate languages.
These languages needn't be educated in the ways of Grimoire, imposing this
requirement would be so onerous as to block adoption.
"]
section_1103 -> { header_1113 block_1114 block_1115 block_1116 block_1117 block_1118}
{rank=same; header_1113 block_1114 block_1115 block_1116 block_1117 block_1118}

header_1113 [label="3 : Unraveling the Tangle"]

block_1114 [label="block 1173-1178"]

block_1115 [label="block 1179-1182"]

block_1116 [label="block 1183-1189"]

block_1117 [label="block 1190-1193"]

block_1118 [label="block 1194-1200"]


block_1114 -> { prose_1119}
{rank=same; prose_1119}

prose_1119 [label="prose"]


prose_1119 -> leaf_1120
leaf_1120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Babel offers limited facilities for working within source blocks. What it
doesn't offer is the critical 'unravel' operation, which takes changes to
the tangle and integrates them back into the weave.
"]
block_1115 -> { prose_1121}
{rank=same; prose_1121}

prose_1121 [label="prose"]


prose_1121 -> leaf_1122
leaf_1122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This is a partially-solved problem, with Babel able to put comment tags into
the source which allow Emacs to jump back into your actual source from
errors in the tangle.
"]
block_1116 -> { prose_1123}
{rank=same; prose_1123}

prose_1123 [label="prose"]


prose_1123 -> leaf_1124
leaf_1124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This is just not good enough. For any number of reasons, we need to be able
to unravel. I'll cite one: Converting existing codebases over to literacy.
The first step is to recreate the existing program on a source-line-identical
level. The entire existing developer base is familiar with the program already
and isn't going to want to start editing a bunch of Grimoire. They can most
likely be induced to accept readable metadata, and that's it.
"]
block_1117 -> { prose_1125}
{rank=same; prose_1125}

prose_1125 [label="prose"]


prose_1125 -> leaf_1126
leaf_1126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="That's all we need. Code is in one of three categories: either it is a single
literal copy from source, it's one of several copies from source, or
it's generated code that's dependent on information in the source.
"]
block_1118 -> { prose_1127}
{rank=same; prose_1127}

prose_1127 [label="prose"]


prose_1127 -> leaf_1128
leaf_1128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We incorporate all changes to the former automatically when we unravel.
Changes to a single version of multiple copies prompts user interaction: do
you want to embed the change as its own source block, propagate it to each
instance, or decline the merge? Changes to generated code are simply
forbidden. If one is doing generation on the code base, working from
the weave is the more comfortable approach.
"]
section_1104 -> { header_1129 block_1130 block_1131 block_1132 block_1133}
{rank=same; header_1129 block_1130 block_1131 block_1132 block_1133}

header_1129 [label="3 : Backweaving"]

block_1130 [label="block 1201-1204"]

block_1131 [label="block 1205-1209"]

block_1132 [label="block 1210-1214"]

block_1133 [label="block 1215-1219"]


block_1130 -> { prose_1134}
{rank=same; prose_1134}

prose_1134 [label="prose"]


prose_1134 -> leaf_1135
leaf_1135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
An analogous operation is backweaving.
"]
block_1131 -> { prose_1136}
{rank=same; prose_1136}

prose_1136 [label="prose"]


prose_1136 -> leaf_1137
leaf_1137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="A weave in Grimoire is an HTML/CSS/JS document. In other words, a program.
The weave is much closer akin to the source than any tangle. Any Grimoire
program can have a weave view, though it isn't necessary; many will have
no tangle at all, containing the functionality within Grimoire.
"]
block_1132 -> { prose_1138}
{rank=same; prose_1138}

prose_1138 [label="prose"]


prose_1138 -> leaf_1139
leaf_1139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The weave may therefore be manipulated, and we need some way to reflect
those changes back into the source. This can't be automated in a general
way. What we're left with is an EDN protocol for exchanging information
to update the weave in cooperation with some server logic and git.
"]
block_1133 -> { prose_1140}
{rank=same; prose_1140}

prose_1140 [label="prose"]


prose_1140 -> leaf_1141
leaf_1141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="So, could you write the server logic for a site as a literate program,
push it to a server that tangles and weaves it, and use the source
and Grimoire/bridge as the sysadmin view? I bet you could, it might
even be fairly popular.
"]
section_332 -> { header_1142 block_1143 block_1144 block_1145 section_1146}
{rank=same; header_1142 block_1143 block_1144 block_1145 section_1146}

header_1142 [label="4 : Zero-header tag"]

block_1143 [label="block 408-413"]

block_1144 [label="block 414-417"]

block_1145 [label="block 418-419"]

section_1146 [label="section: 420-421"]


block_1143 -> { prose_1147}
{rank=same; prose_1147}

prose_1147 [label="prose"]


prose_1147 -> leaf_1148
leaf_1148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The special [[*Tags][tag]] =#*=, which is only meaningful at the top of a document,
 indicates a 'zero header'. This lets you use the one-star level as a
series within a single document.
"]
block_1144 -> { prose_1149}
{rank=same; prose_1149}

prose_1149 [label="prose"]


prose_1149 -> leaf_1150
leaf_1150  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The related tag =#meta*= must be followed by a space and any number of
stars. This indicates a meta-level for the entire under-tree, that
exists somewhere else. Further semantics may be provided.
"]
block_1145 -> { prose_1151}
{rank=same; prose_1151}

prose_1151 [label="prose"]


prose_1151 -> leaf_1152
leaf_1152  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This section belongs in some further API section.
"]
section_1146 -> { header_1153 block_1154}
{rank=same; header_1153 block_1154}

header_1153 [label="5 : TODO Move to API Section"]

block_1154 [label="block 420-421"]


block_1154 -> { prose_1155}
{rank=same; prose_1155}

prose_1155 [label="prose"]


prose_1155 -> leaf_1156
leaf_1156  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]

}
