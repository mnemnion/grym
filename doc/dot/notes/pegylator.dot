digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 40"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-35"]


section_1 -> { header_2 prose_3 prose_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 prose_4 section_5 section_6 section_7}

header_2 [label="1 : Pegylator and the Node class"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 10-13"]

section_6 [label="section: 31-35"]

section_7 [label="section: 36-40"]


header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Pegylator and the Node class"]
prose_3 -> { raw_9 literal_10 raw_11}
{rank=same; raw_9 literal_10 raw_11}

raw_9 [label="raw"]

literal_10 [label="literal"]

raw_11 [label="raw"]


raw_9 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  Current grym has a nodule of undigested code in the "]
literal_10 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/peg"]
raw_11 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" directory.
This is early 2015 era stuff, and is built somewhat blindly upon epnf as I
found it on the internet.
"]
prose_4 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It needs a substantial refactor. 
"]
section_5 -> { header_17 prose_18 section_19}
{rank=same; header_17 prose_18 section_19}

header_17 [label="2 : Grammar class"]

prose_18 [label="prose"]

section_19 [label="section: 14-30"]


header_17 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Grammar class"]
prose_18 -> { raw_21}
{rank=same; raw_21}

raw_21 [label="raw"]


raw_21 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This has the verbs:
"]
section_19 -> { header_23 prose_24 prose_25 prose_26 prose_27}
{rank=same; header_23 prose_24 prose_25 prose_26 prose_27}

header_23 [label="3 : Grammar / new(Grammar, g_func, meta_tables)"]

prose_24 [label="prose"]

prose_25 [label="prose"]

prose_26 [label="prose"]

prose_27 [label="prose"]


header_23 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Grammar / new(Grammar, g_func, meta_tables)"]
prose_24 -> { raw_29}
{rank=same; raw_29}

raw_29 [label="raw"]


raw_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This takes a function, building and returning a grammar over it.
"]
prose_25 -> { raw_31}
{rank=same; raw_31}

raw_31 [label="raw"]


raw_31 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - #params
    - Grammar :  The __call object
    - g_func  :  The function(_ENV) grammar
    - meta_tables :  A map of rule ids to metatables.  These should themsevles
             inherit from Node.
"]
prose_26 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The constructor handles building the metatable stack so that the table it returns
works like a function over a string returning a Node. 
"]
prose_27 -> { raw_35 literal_36 raw_37 link_38 raw_39}
{rank=same; raw_35 literal_36 raw_37 link_38 raw_39}

raw_35 [label="raw"]

literal_36 [label="literal"]

raw_37 [label="raw"]

link_38 [label="link"]

raw_39 [label="raw"]


raw_35 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Also automated: If a string isn't provided in "]
literal_36 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="meta_tables"]
raw_37 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", the Node metatable
is assigned. I also have some notes on the "]
link_38 -> { anchortext_43 url_44}
{rank=same; anchortext_43 url_44}

anchortext_43 [label="anchortext"]

url_44 [label="url"]


anchortext_43 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Node class"]
url_44 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="./node"]
raw_39 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

"]
section_6 -> { header_48 prose_49}
{rank=same; header_48 prose_49}

header_48 [label="2 : Node class"]

prose_49 [label="prose"]


header_48 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ode class

  C"]
prose_49 -> { raw_51 link_52 raw_53}
{rank=same; raw_51 link_52 raw_53}

raw_51 [label="raw"]

link_52 [label="link"]

raw_53 [label="raw"]


raw_51 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Covered "]
link_52 -> { anchortext_55 url_56}
{rank=same; anchortext_55 url_56}

anchortext_55 [label="anchortext"]

url_56 [label="url"]


anchortext_55 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="here"]
url_56 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="./node"]
raw_53 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
section_7 -> { header_60 prose_61 prose_62}
{rank=same; header_60 prose_61 prose_62}

header_60 [label="2 : Forest class"]

prose_61 [label="prose"]

prose_62 [label="prose"]


header_60 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orest class

  T"]
prose_61 -> { raw_64 literal_65 raw_66}
{rank=same; raw_64 literal_65 raw_66}

raw_64 [label="raw"]

literal_65 [label="literal"]

raw_66 [label="raw"]


raw_64 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This is just an array of Nodes offering a familiar "]
literal_65 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="select"]
raw_66 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" etc interface.
"]
prose_62 -> { raw_70}
{rank=same; raw_70}

raw_70 [label="raw"]


raw_70 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These are the only classes which should exist once this is cleaned up. "]

}
