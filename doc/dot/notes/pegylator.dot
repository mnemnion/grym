digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 40"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-35"]


section_1 -> { header_2 prose_3 prose_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 prose_4 section_5 section_6 section_7}

header_2 [label="1 : Pegylator and the Node class"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 10-13"]

section_6 [label="section: 31-35"]

section_7 [label="section: 36-40"]


header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Pegylator and the Node class"]
prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  Current grym has a nodule of undigested code in the =/peg= directory.
This is early 2015 era stuff, and is built somewhat blindly upon epnf as I
found it on the internet.
"]
prose_4 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It needs a substantial refactor. 
"]
section_5 -> { header_13 prose_14 section_15}
{rank=same; header_13 prose_14 section_15}

header_13 [label="2 : Grammar class"]

prose_14 [label="prose"]

section_15 [label="section: 14-30"]


header_13 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Grammar class"]
prose_14 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This has the verbs:
"]
section_15 -> { header_19 prose_20 prose_21 prose_22 prose_23}
{rank=same; header_19 prose_20 prose_21 prose_22 prose_23}

header_19 [label="3 : Grammar / new(Grammar, g_func, meta_tables)"]

prose_20 [label="prose"]

prose_21 [label="prose"]

prose_22 [label="prose"]

prose_23 [label="prose"]


header_19 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Grammar / new(Grammar, g_func, meta_tables)"]
prose_20 -> { raw_25}
{rank=same; raw_25}

raw_25 [label="raw"]


raw_25 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This takes a function, building and returning a grammar over it.
"]
prose_21 -> { raw_27}
{rank=same; raw_27}

raw_27 [label="raw"]


raw_27 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - #params
    - Grammar :  The __call object
    - g_func  :  The function(_ENV) grammar
    - meta_tables :  A map of rule ids to metatables.  These should themsevles
             inherit from Node.
"]
prose_22 -> { raw_29}
{rank=same; raw_29}

raw_29 [label="raw"]


raw_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The constructor handles building the metatable stack so that the table it returns
works like a function over a string returning a Node. 
"]
prose_23 -> { raw_31 link_32 raw_33}
{rank=same; raw_31 link_32 raw_33}

raw_31 [label="raw"]

link_32 [label="link"]

raw_33 [label="raw"]


raw_31 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Also automated: If a string isn't provided in =meta_tables=, the Node metatable
is assigned. I also have some notes on the "]
link_32 -> { anchortext_35 url_36}
{rank=same; anchortext_35 url_36}

anchortext_35 [label="anchortext"]

url_36 [label="url"]


anchortext_35 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Node class"]
url_36 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="./node"]
raw_33 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

"]
section_6 -> { header_40 prose_41}
{rank=same; header_40 prose_41}

header_40 [label="2 : Node class"]

prose_41 [label="prose"]


header_40 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ode class

  C"]
prose_41 -> { raw_43 link_44 raw_45}
{rank=same; raw_43 link_44 raw_45}

raw_43 [label="raw"]

link_44 [label="link"]

raw_45 [label="raw"]


raw_43 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Covered "]
link_44 -> { anchortext_47 url_48}
{rank=same; anchortext_47 url_48}

anchortext_47 [label="anchortext"]

url_48 [label="url"]


anchortext_47 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="here"]
url_48 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="./node"]
raw_45 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
section_7 -> { header_52 prose_53 prose_54}
{rank=same; header_52 prose_53 prose_54}

header_52 [label="2 : Forest class"]

prose_53 [label="prose"]

prose_54 [label="prose"]


header_52 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orest class

  T"]
prose_53 -> { raw_56}
{rank=same; raw_56}

raw_56 [label="raw"]


raw_56 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This is just an array of Nodes offering a familiar =select= etc interface.
"]
prose_54 -> { raw_58}
{rank=same; raw_58}

raw_58 [label="raw"]


raw_58 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These are the only classes which should exist once this is cleaned up. "]

}
