digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 40"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-35"]


section_1 -> { header_2 block_3 block_4 section_5 section_6 section_7}
{rank=same; header_2 block_3 block_4 section_5 section_6 section_7}

header_2 [label="1 : Pegylator and the Node class"]

block_3 [label="block 1-7"]

block_4 [label="block 8-35"]

section_5 [label="section: 10-13"]

section_6 [label="section: 31-35"]

section_7 [label="section: 36-40"]


block_3 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Current grym has a nodule of undigested code in the =/peg= directory.
This is early 2015 era stuff, and is built somewhat blindly upon epnf as I
found it on the internet.
"]
block_4 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="It needs a substantial refactor. 
"]
section_5 -> { header_10 block_11 section_12}
{rank=same; header_10 block_11 section_12}

header_10 [label="2 : Grammar class"]

block_11 [label="block 10-13"]

section_12 [label="section: 14-30"]


block_11 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This has the verbs:
"]
section_12 -> { header_14 block_15 block_16 block_17 block_18}
{rank=same; header_14 block_15 block_16 block_17 block_18}

header_14 [label="3 : Grammar / new(Grammar, g_func, meta_tables)"]

block_15 [label="block 14-17"]

block_16 [label="block 18-23"]

block_17 [label="block 24-26"]

block_18 [label="block 27-30"]


block_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This takes a function, building and returning a grammar over it.
"]
block_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - #params
    - Grammar :  The __call object
    - g_func  :  The function(_ENV) grammar
    - meta_tables :  A map of rule ids to metatables.  These should themsevles
             inherit from Node.
"]
block_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The constructor handles building the metatable stack so that the table it returns
works like a function over a string returning a Node. 
"]
block_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Also automated: If a string isn't provided in =meta_tables=, the Node metatable
is assigned. I also have some notes on the [[Node class][./node]].

"]
section_12 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Grammar / new(Grammar, g_func, meta_tables)

This takes a function, building and returning a grammar over it.

  - #params
    - Grammar :  The __call object
    - g_func  :  The function(_ENV) grammar
    - meta_tables :  A map of rule ids to metatables.  These should themsevles
    				 inherit from Node.

The constructor handles building the metatable stack so that the table it returns
works like a function over a string returning a Node. 

Also automated: If a string isn't provided in =meta_tables=, the Node metatable
is assigned. I also have some notes on the [[Node class][./node]].


** No"]
section_5 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Grammar class

This has the verbs:

*"]
section_6 -> { header_25 block_26}
{rank=same; header_25 block_26}

header_25 [label="2 : Node class"]

block_26 [label="block 31-35"]


block_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Covered [[here][./node]]

"]
section_6 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ode class

  Covered [[here][./node]]


** Fo"]
section_7 -> { header_29 block_30 block_31}
{rank=same; header_29 block_30 block_31}

header_29 [label="2 : Forest class"]

block_30 [label="block 36-39"]

block_31 [label="block 40-40"]


block_30 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  This is just an array of Nodes offering a familiar =select= etc interface.
"]
block_31 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="These are the only classes which should exist once this is cleaned up. "]
section_7 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orest class

  This is just an array of Nodes offering a familiar =select= etc interface.

These are the only classes which should exist once this is cleaned up. "]
section_1 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Pegylator and the Node class


  Current grym has a nodule of undigested code in the =/peg= directory.
This is early 2015 era stuff, and is built somewhat blindly upon epnf as I
found it on the internet.

It needs a substantial refactor. 

** Grammar class

This has the verbs:

*** Grammar / new(Grammar, g_func, meta_tables)

This takes a function, building and returning a grammar over it.

  - #params
    - Grammar :  The __call object
    - g_func  :  The function(_ENV) grammar
    - meta_tables :  A map of rule ids to metatables.  These should themsevles
    				 inherit from Node.

The constructor handles building the metatable stack so that the table it returns
works like a function over a string returning a Node. 

Also automated: If a string isn't provided in =meta_tables=, the Node metatable
is assigned. I also have some notes on the [[Node class][./node]].


** Node class

  Covered [[here][./node]]


** Fo"]

}
