digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 40"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-35"]


section_1 -> { header_2 prose_3 prose_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 prose_4 section_5 section_6 section_7}

header_2 [label="1 : Pegylator and the Node class"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 10-13"]

section_6 [label="section: 31-35"]

section_7 [label="section: 36-40"]


prose_3 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  Current grym has a nodule of undigested code in the =/peg= directory.
This is early 2015 era stuff, and is built somewhat blindly upon epnf as I
found it on the internet.
"]
prose_4 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It needs a substantial refactor. 
"]
section_5 -> { header_10 prose_11 section_12}
{rank=same; header_10 prose_11 section_12}

header_10 [label="2 : Grammar class"]

prose_11 [label="prose"]

section_12 [label="section: 14-30"]


prose_11 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This has the verbs:
"]
section_12 -> { header_14 prose_15 prose_16 prose_17 prose_18}
{rank=same; header_14 prose_15 prose_16 prose_17 prose_18}

header_14 [label="3 : Grammar / new(Grammar, g_func, meta_tables)"]

prose_15 [label="prose"]

prose_16 [label="prose"]

prose_17 [label="prose"]

prose_18 [label="prose"]


prose_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This takes a function, building and returning a grammar over it.
"]
prose_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - #params
    - Grammar :  The __call object
    - g_func  :  The function(_ENV) grammar
    - meta_tables :  A map of rule ids to metatables.  These should themsevles
             inherit from Node.
"]
prose_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The constructor handles building the metatable stack so that the table it returns
works like a function over a string returning a Node. 
"]
prose_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Also automated: If a string isn't provided in =meta_tables=, the Node metatable
is assigned. I also have some notes on the [[Node class][./node]].

"]
section_6 -> { header_23 prose_24}
{rank=same; header_23 prose_24}

header_23 [label="2 : Node class"]

prose_24 [label="prose"]


prose_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Covered [[here][./node]]

"]
section_7 -> { header_26 prose_27 prose_28}
{rank=same; header_26 prose_27 prose_28}

header_26 [label="2 : Forest class"]

prose_27 [label="prose"]

prose_28 [label="prose"]


prose_27 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This is just an array of Nodes offering a familiar =select= etc interface.
"]
prose_28 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These are the only classes which should exist once this is cleaned up. "]

}
