digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 155"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-124"]


section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7}

header_2 [label="1 : A Grimoire Parser"]

prose_3 [label="prose"]

section_4 [label="section: 3-42"]

section_5 [label="section: 43-96"]

section_6 [label="section: 102-124"]

section_7 [label="section: 125-146"]


header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * A Grimoire Parser"]
prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
section_4 -> { header_11 prose_12 prose_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 prose_21 prose_22}
{rank=same; header_11 prose_12 prose_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 prose_21 prose_22}

header_11 [label="2 : Introduction"]

prose_12 [label="prose"]

prose_13 [label="prose"]

prose_14 [label="prose"]

prose_15 [label="prose"]

prose_16 [label="prose"]

prose_17 [label="prose"]

prose_18 [label="prose"]

prose_19 [label="prose"]

prose_20 [label="prose"]

prose_21 [label="prose"]

prose_22 [label="prose"]


header_11 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Introduction"]
prose_12 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I need a literate toolchain stat. I'm unwilling to write it on
Org. I've been having fun with Org but it has to go, and now is
the time.
"]
prose_13 -> { raw_26}
{rank=same; raw_26}

raw_26 [label="raw"]


raw_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I need this before the quipu, to write the quipu, so we're going to
forget reusable parsers and general editing structures and everything
like that for now. We're going to cut a fast parser out of Lua and
start hooking it up to things. 
"]
prose_14 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Pegylator is proving remarkably useful for software I thought I was
abandoning in mid-February. But I digress.
"]
prose_15 -> { raw_30}
{rank=same; raw_30}

raw_30 [label="raw"]


raw_30 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There are important structural similarities between Grimoire and Markdown.
More with Org, of course, but Markdown is more widely parsed. Let's see
what we can find.
"]
prose_16 -> { raw_32}
{rank=same; raw_32}

raw_32 [label="raw"]


raw_32 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Oh hey this looks good:
"]
prose_17 -> { raw_34}
{rank=same; raw_34}

raw_34 [label="raw"]


raw_34 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
[[https://github.com/jgm/lunamark][lunamark]]
"]
prose_18 -> { raw_36 prespace_37 bold_38 raw_39}
{rank=same; raw_36 prespace_37 bold_38 raw_39}

raw_36 [label="raw"]

prespace_37 [label="prespace"]

bold_38 [label="bold"]

raw_39 [label="raw"]


raw_36 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In fact this looks very good. If I can trick lunamark into thinking that
Grimoire is just some exotic flavor of Markdown I can get a"]
prespace_37 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
bold_38 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="lot"]
raw_39 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" of 
functionality for free.
"]
prose_19 -> { raw_44}
{rank=same; raw_44}

raw_44 [label="raw"]


raw_44 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Let's try this approach and see if it flies. 
"]
prose_20 -> { raw_46}
{rank=same; raw_46}

raw_46 [label="raw"]


raw_46 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Hmm. There's a lot of useful code and approaches to lpeg to steal here.
But I'm just too well-equipped with my toolchain to want to switch horses.
"]
prose_21 -> { raw_48}
{rank=same; raw_48}

raw_48 [label="raw"]


raw_48 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The Node class is a little janky but not particularly broken and is shaping
up as my common AST format when in Lualand. If those get out of whack there will
be pain sooner or later. That's worth more than being able to use the lunamark
toolchain for export and the like. 
"]
prose_22 -> { raw_50}
{rank=same; raw_50}

raw_50 [label="raw"]


raw_50 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
At least for now. I'll try to hold on to some of the naming conventions and see
if maybe I can talk the author into adapting the module once we're the popular
kids. 
"]
section_5 -> { header_52 prose_53 section_54 section_55 section_56 section_57 section_58}
{rank=same; header_52 prose_53 section_54 section_55 section_56 section_57 section_58}

header_52 [label="2 : Structure"]

prose_53 [label="prose"]

section_54 [label="section: 47-61"]

section_55 [label="section: 62-67"]

section_56 [label="section: 81-91"]

section_57 [label="section: 92-96"]

section_58 [label="section: 97-101"]


header_52 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Structure"]
prose_53 -> { raw_60}
{rank=same; raw_60}

raw_60 [label="raw"]


raw_60 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We're going to do this in several passes. 
"]
section_54 -> { header_62 prose_63 prose_64 prose_65 prose_66}
{rank=same; header_62 prose_63 prose_64 prose_65 prose_66}

header_62 [label="3 : Chunking"]

prose_63 [label="prose"]

prose_64 [label="prose"]

prose_65 [label="prose"]

prose_66 [label="prose"]


header_62 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Chunking"]
prose_63 -> { raw_68}
{rank=same; raw_68}

raw_68 [label="raw"]


raw_68 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Our top-level of structure is determined by [[file:grimoire.org::*Header%20Lines][header lines]], which
cooperate to form the structure of a Grimoire document.
"]
prose_64 -> { raw_70}
{rank=same; raw_70}

raw_70 [label="raw"]


raw_70 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
While we're doing this, we'll chunk everything else into arrays
of lines, this will split into structure lines, blank lines,
and TBD. 
"]
prose_65 -> { raw_72}
{rank=same; raw_72}

raw_72 [label="raw"]


raw_72 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I believe we can get everything into blocks on this first pass.
"]
prose_66 -> { raw_74}
{rank=same; raw_74}

raw_74 [label="raw"]


raw_74 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
At this point, the data structure is still flat, but chunky, and
we have a separate vector of the header lines and their index
into the chunks. 
"]
section_55 -> { header_76 prose_77 section_78}
{rank=same; header_76 prose_77 section_78}

header_76 [label="3 : Ownership"]

prose_77 [label="prose"]

section_78 [label="section: 68-80"]


header_76 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Ownership"]
prose_77 -> { raw_80}
{rank=same; raw_80}

raw_80 [label="raw"]


raw_80 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We next determine basic ownership. This we do by counting all the stars 
in the header lines and building a tree accordingly. This is a 
recursive map of vectors containing chunks. 
"]
section_78 -> { header_82 prose_83 prose_84 prose_85}
{rank=same; header_82 prose_83 prose_84 prose_85}

header_82 [label="4 : Cling Rule"]

prose_83 [label="prose"]

prose_84 [label="prose"]

prose_85 [label="prose"]


header_82 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Cling Rule"]
prose_83 -> { raw_87}
{rank=same; raw_87}

raw_87 [label="raw"]


raw_87 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Various kinds of block have [[file:grimoire.org::*The%20Cling%20Rule][cling rules]] associated with them. How this
works is still somewhat opaque, no substitute for code in actually
working it out. 
"]
prose_84 -> { raw_89}
{rank=same; raw_89}

raw_89 [label="raw"]


raw_89 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We apply these rules, attaching tags to associated lists, tables and
code blocks, for example. 
"]
prose_85 -> { raw_91}
{rank=same; raw_91}

raw_91 [label="raw"]


raw_91 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I think the secret sauce of the cling rule is that it never matters if 
marks cling up or cling down, tags and names can come before, after, or
around the blocks they cling to. 
"]
section_56 -> { header_93 prose_94 prose_95 prose_96}
{rank=same; header_93 prose_94 prose_95 prose_96}

header_93 [label="3 : Block Parsing"]

prose_94 [label="prose"]

prose_95 [label="prose"]

prose_96 [label="prose"]


header_93 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Block Parsing"]
prose_94 -> { raw_98}
{rank=same; raw_98}

raw_98 [label="raw"]


raw_98 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Next we go into certain kinds of block and parse them.
"]
prose_95 -> { raw_100}
{rank=same; raw_100}

raw_100 [label="raw"]


raw_100 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This resolves the inner structure of 'structure' lines, which includes
all lists, tables, and similar. Some of these will not have been detected
yet, when this stage is done, what's left is prose, and unparsed code,
and we know which is which. 
"]
prose_96 -> { raw_102}
{rank=same; raw_102}

raw_102 [label="raw"]


raw_102 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We haven't found all code, just code blocks. 
"]
section_57 -> { header_104 prose_105}
{rank=same; header_104 prose_105}

header_104 [label="3 : Prose Parsing"]

prose_105 [label="prose"]


header_104 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Prose Parsing"]
prose_105 -> { raw_107}
{rank=same; raw_107}

raw_107 [label="raw"]


raw_107 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We next parse these prose regions, looking for structural elements and 
handling them accordingly. 
"]
section_58 -> { header_109 prose_110}
{rank=same; header_109 prose_110}

header_109 [label="3 : Mark Parsing"]

prose_110 [label="prose"]


header_109 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Mark Parsing"]
prose_110 -> { raw_112}
{rank=same; raw_112}

raw_112 [label="raw"]


raw_112 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

As a final step, we parse within marks. Marks are either tags or names,
and both have a complex, TBD internal structure. 
"]
section_6 -> { header_114 prose_115 prose_116 prose_117 prose_118 prose_119}
{rank=same; header_114 prose_115 prose_116 prose_117 prose_118 prose_119}

header_114 [label="2 : Result"]

prose_115 [label="prose"]

prose_116 [label="prose"]

prose_117 [label="prose"]

prose_118 [label="prose"]

prose_119 [label="prose"]


header_114 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Result"]
prose_115 -> { raw_121}
{rank=same; raw_121}

raw_121 [label="raw"]


raw_121 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Code is not parsed by this parser, not explicitly. 
"]
prose_116 -> { raw_123}
{rank=same; raw_123}

raw_123 [label="raw"]


raw_123 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Eventually, the document will have to be executed within an appropriate 
sandbox before it can be either tangled or woven. We'll skip that little
refinement, Lua is the runtime for that stage so it's comfortable to add 
it later. 
"]
prose_117 -> { raw_125}
{rank=same; raw_125}

raw_125 [label="raw"]


raw_125 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
What we do next depends on whether we're weaving or tangling. Weaving
is less interesting to me, at least for now; I'm hoping that if we get a 
bit of traction some wonk at Pandoc will add our biological distinctiveness
to that collective and we'll get a big boost in the right direction. 
"]
prose_118 -> { raw_127}
{rank=same; raw_127}

raw_127 [label="raw"]


raw_127 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Weaving is one of those things we can just iterate on endlesssly, and indeed
have to, document formats being what they are. 
"]
prose_119 -> { raw_129}
{rank=same; raw_129}

raw_129 [label="raw"]


raw_129 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For simple tangling, we're interested in marks, edn blocks, and code blocks,
for now. Lists are the next data structure I'm interested in, with tables in
last place. I'm just not a grid kind of thinker. 


"]
section_7 -> { header_131 prose_132 section_133 section_134 section_135 section_136}
{rank=same; header_131 prose_132 section_133 section_134 section_135 section_136}

header_131 [label="2 : Subsequent Actions"]

prose_132 [label="prose"]

section_133 [label="section: 129-132"]

section_134 [label="section: 133-136"]

section_135 [label="section: 137-146"]

section_136 [label="section: 147-155"]


header_131 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Subsequent Actions"]
prose_132 -> { raw_138}
{rank=same; raw_138}

raw_138 [label="raw"]


raw_138 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Each of these needs its own document.
"]
section_133 -> { header_140 prose_141}
{rank=same; header_140 prose_141}

header_140 [label="3 : Filtration"]

prose_141 [label="prose"]


header_140 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Filtration"]
prose_141 -> { raw_143}
{rank=same; raw_143}

raw_143 [label="raw"]


raw_143 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We normalize certain aspects, including a rigorous and unflinching programme of tab removal. 
"]
section_134 -> { header_145 prose_146}
{rank=same; header_145 prose_146}

header_145 [label="3 : Tangling"]

prose_146 [label="prose"]


header_145 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Tangling"]
prose_146 -> { raw_148}
{rank=same; raw_148}

raw_148 [label="raw"]


raw_148 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The tangler is the first thing I intend to write. 
"]
section_135 -> { header_150 prose_151 prose_152 prose_153 prose_154}
{rank=same; header_150 prose_151 prose_152 prose_153 prose_154}

header_150 [label="3 : Unraveling"]

prose_151 [label="prose"]

prose_152 [label="prose"]

prose_153 [label="prose"]

prose_154 [label="prose"]


header_150 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Unraveling"]
prose_151 -> { raw_156}
{rank=same; raw_156}

raw_156 [label="raw"]


raw_156 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I'm designing the tangler specifically so that I can unravel from source. 
"]
prose_152 -> { raw_158}
{rank=same; raw_158}

raw_158 [label="raw"]


raw_158 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
How does that work? I intend to work out those details quite soon. 
"]
prose_153 -> { raw_160}
{rank=same; raw_160}

raw_160 [label="raw"]


raw_160 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Having a sense of how the structure is parsed internally is important here.
"]
prose_154 -> { raw_162}
{rank=same; raw_162}

raw_162 [label="raw"]


raw_162 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This subject has its [[file:unraveler.org::*grym%20unravel][own section]] already.
"]
section_136 -> { header_164 prose_165 prose_166 prose_167}
{rank=same; header_164 prose_165 prose_166 prose_167}

header_164 [label="3 : Weaving"]

prose_165 [label="prose"]

prose_166 [label="prose"]

prose_167 [label="prose"]


header_164 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Weaving"]
prose_165 -> { raw_169}
{rank=same; raw_169}

raw_169 [label="raw"]


raw_169 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Naturally, we need to weave. 
"]
prose_166 -> { raw_171}
{rank=same; raw_171}

raw_171 [label="raw"]


raw_171 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I don't know if this ever needs to be more customized than adding Grimoire 
format to a few canonical documentation engines. 
"]
prose_167 -> { raw_173}
{rank=same; raw_173}

raw_173 [label="raw"]


raw_173 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If we want to do fancy stuff with React and that, it does. 
"]

}
