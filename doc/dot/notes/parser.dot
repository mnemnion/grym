digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 155"]

doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-2"]

section_1 -> { header_2 block_3 section_4 section_5}
{rank=same; header_2 block_3 section_4 section_5}

header_2 [label="A Grimoire Parser"]
block_3 [label="block 1-nil"]
section_4 [label="section: 3-42"]
section_5 [label="section: 102-124"]


block_3 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]section_4 -> { header_7 block_8 block_9 block_10 block_11 block_12 block_13 block_14 block_15 block_16 block_17 block_18 section_19}
{rank=same; header_7 block_8 block_9 block_10 block_11 block_12 block_13 block_14 block_15 block_16 block_17 block_18 section_19}

header_7 [label="Introduction"]
block_8 [label="block 3-8"]
block_9 [label="block 9-13"]
block_10 [label="block 14-16"]
block_11 [label="block 17-20"]
block_12 [label="block 21-22"]
block_13 [label="block 23-24"]
block_14 [label="block 25-28"]
block_15 [label="block 29-30"]
block_16 [label="block 31-33"]
block_17 [label="block 34-38"]
block_18 [label="block 39-nil"]
section_19 [label="section: 43-46"]


block_8 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I need a literate toolchain stat. I'm unwilling to write it on
Org. I've been having fun with Org but it has to go, and now is
the time.

"]
block_9 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I need this before the quipu, to write the quipu, so we're going to
forget reusable parsers and general editing structures and everything
like that for now. We're going to cut a fast parser out of Lua and
start hooking it up to things. 

"]
block_10 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Pegylator is proving remarkably useful for software I thought I was
abandoning in mid-February. But I digress.

"]
block_11 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="There are important structural similarities between Grimoire and Markdown.
More with Org, of course, but Markdown is more widely parsed. Let's see
what we can find.

"]
block_12 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Oh hey this looks good:

"]
block_13 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[[https://github.com/jgm/lunamark][lunamark]]

"]
block_14 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In fact this looks very good. If I can trick lunamark into thinking that
Grimoire is just some exotic flavor of Markdown I can get a *lot* of 
functionality for free.

"]
block_15 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Let's try this approach and see if it flies. 

"]
block_16 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Hmm. There's a lot of useful code and approaches to lpeg to steal here.
But I'm just too well-equipped with my toolchain to want to switch horses.

"]
block_17 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The Node class is a little janky but not particularly broken and is shaping
up as my common AST format when in Lualand. If those get out of whack there will
be pain sooner or later. That's worth more than being able to use the lunamark
toolchain for export and the like. 

"]
block_18 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="At least for now. I'll try to hold on to some of the naming conventions and see
if maybe I can talk the author into adapting the module once we're the popular
kids. 

"]section_19 -> { header_31 block_32 section_33 section_34}
{rank=same; header_31 block_32 section_33 section_34}

header_31 [label="Structure"]
block_32 [label="block 43-nil"]
section_33 [label="section: 47-61"]
section_34 [label="section: 81-91"]


block_32 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We're going to do this in several passes. 

"]section_33 -> { header_36 block_37 block_38 block_39 block_40 section_41}
{rank=same; header_36 block_37 block_38 block_39 block_40 section_41}

header_36 [label="Chunking"]
block_37 [label="block 47-51"]
block_38 [label="block 52-55"]
block_39 [label="block 56-57"]
block_40 [label="block 58-nil"]
section_41 [label="section: 62-67"]


block_37 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Our top-level of structure is determined by [[file:grimoire.org::*Header%20Lines][header lines]], which
cooperate to form the structure of a Grimoire document.

"]
block_38 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="While we're doing this, we'll chunk everything else into arrays
of lines, this will split into structure lines, blank lines,
and TBD. 

"]
block_39 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I believe we can get everything into blocks on this first pass.

"]
block_40 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="At this point, the data structure is still flat, but chunky, and
we have a separate vector of the header lines and their index
into the chunks. 

"]section_41 -> { header_46 block_47 section_48}
{rank=same; header_46 block_47 section_48}

header_46 [label="Ownership"]
block_47 [label="block 62-nil"]
section_48 [label="section: 68-80"]


block_47 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We next determine basic ownership. This we do by counting all the stars 
in the header lines and building a tree accordingly. This is a 
recursive map of vectors containing chunks. 

"]section_48 -> { header_50 block_51 block_52 block_53}
{rank=same; header_50 block_51 block_52 block_53}

header_50 [label="Cling Rule"]
block_51 [label="block 68-73"]
block_52 [label="block 74-76"]
block_53 [label="block 77-nil"]


block_51 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Various kinds of block have [[file:grimoire.org::*The%20Cling%20Rule][cling rules]] associated with them. How this
works is still somewhat opaque, no substitute for code in actually
working it out. 

"]
block_52 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We apply these rules, attaching tags to associated lists, tables and
code blocks, for example. 

"]
block_53 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I think the secret sauce of the cling rule is that it never matters if 
marks cling up or cling down, tags and names can come before, after, or
around the blocks they cling to. 

"]section_34 -> { header_57 block_58 block_59 block_60 section_61}
{rank=same; header_57 block_58 block_59 block_60 section_61}

header_57 [label="Block Parsing"]
block_58 [label="block 81-84"]
block_59 [label="block 85-89"]
block_60 [label="block 90-nil"]
section_61 [label="section: 92-96"]


block_58 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Next we go into certain kinds of block and parse them.

"]
block_59 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This resolves the inner structure of 'structure' lines, which includes
all lists, tables, and similar. Some of these will not have been detected
yet, when this stage is done, what's left is prose, and unparsed code,
and we know which is which. 

"]
block_60 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We haven't found all code, just code blocks. 

"]section_61 -> { header_65 block_66 section_67}
{rank=same; header_65 block_66 section_67}

header_65 [label="Prose Parsing"]
block_66 [label="block 92-nil"]
section_67 [label="section: 97-101"]


block_66 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We next parse these prose regions, looking for structural elements and 
handling them accordingly. 

"]section_67 -> { header_69 block_70}
{rank=same; header_69 block_70}

header_69 [label="Mark Parsing"]
block_70 [label="block 97-nil"]


block_70 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
As a final step, we parse within marks. Marks are either tags or names,
and both have a complex, TBD internal structure. 

"]section_5 -> { header_72 block_73 block_74 block_75 block_76 block_77 section_78}
{rank=same; header_72 block_73 block_74 block_75 block_76 block_77 section_78}

header_72 [label="Result"]
block_73 [label="block 102-105"]
block_74 [label="block 106-110"]
block_75 [label="block 111-115"]
block_76 [label="block 116-118"]
block_77 [label="block 119-nil"]
section_78 [label="section: 125-128"]


block_73 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Code is not parsed by this parser, not explicitly. 

"]
block_74 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Eventually, the document will have to be executed within an appropriate 
sandbox before it can be either tangled or woven. We'll skip that little
refinement, Lua is the runtime for that stage so it's comfortable to add 
it later. 

"]
block_75 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="What we do next depends on whether we're weaving or tangling. Weaving
is less interesting to me, at least for now; I'm hoping that if we get a 
bit of traction some wonk at Pandoc will add our biological distinctiveness
to that collective and we'll get a big boost in the right direction. 

"]
block_76 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Weaving is one of those things we can just iterate on endlesssly, and indeed
have to, document formats being what they are. 

"]
block_77 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="For simple tangling, we're interested in marks, edn blocks, and code blocks,
for now. Lists are the next data structure I'm interested in, with tables in
last place. I'm just not a grid kind of thinker. 



"]section_78 -> { header_84 block_85 section_86}
{rank=same; header_84 block_85 section_86}

header_84 [label="Subsequent Actions"]
block_85 [label="block 125-nil"]
section_86 [label="section: 129-132"]


block_85 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Each of these needs its own document.

"]section_86 -> { header_88 block_89 section_90}
{rank=same; header_88 block_89 section_90}

header_88 [label="Filtration"]
block_89 [label="block 129-nil"]
section_90 [label="section: 133-136"]


block_89 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We normalize certain aspects, including a rigorous and unflinching programme of tab removal. 

"]section_90 -> { header_92 block_93 section_94}
{rank=same; header_92 block_93 section_94}

header_92 [label="Tangling"]
block_93 [label="block 133-nil"]
section_94 [label="section: 137-146"]


block_93 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The tangler is the first thing I intend to write. 

"]section_94 -> { header_96 block_97 block_98 block_99 block_100 section_101}
{rank=same; header_96 block_97 block_98 block_99 block_100 section_101}

header_96 [label="Unraveling"]
block_97 [label="block 137-140"]
block_98 [label="block 141-142"]
block_99 [label="block 143-144"]
block_100 [label="block 145-nil"]
section_101 [label="section: 147-155"]


block_97 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm designing the tangler specifically so that I can unravel from source. 

"]
block_98 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="How does that work? I intend to work out those details quite soon. 

"]
block_99 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Having a sense of how the structure is parsed internally is important here.

"]
block_100 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This subject has its [[file:unraveler.org::*grym%20unravel][own section]] already.

"]section_101 -> { header_106 block_107 block_108 block_109}
{rank=same; header_106 block_107 block_108 block_109}

header_106 [label="Weaving"]
block_107 [label="block 147-150"]
block_108 [label="block 151-153"]
block_109 [label="block 154-nil"]


block_107 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Naturally, we need to weave. 

"]
block_108 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I don't know if this ever needs to be more customized than adding Grimoire 
format to a few canonical documentation engines. 

"]
block_109 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If we want to do fancy stuff with React and that, it does. 

"]
}
