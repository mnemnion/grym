digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 157"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-15"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 section_6}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6}

header_2 [label="1 : Code Block Module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 16-77"]


// END RANK section_1

header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Code Block Module"]
// END RANK header_2

prose_3 -> { raw_8}
{rank=same; raw_8}

raw_8 [label="raw"]


// END RANK prose_3

raw_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


   Code blocks are the motivating object for Grimoire.  Perforce they
 will do a lot of the heavy lifting.
"]
// END RANK raw_8

prose_4 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


// END RANK prose_4

raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 From the compiler's perspective, Code, Structure, and Prose are the
 three basic genres of Grimmorian text.  In this implementation,
 you may think of Code as a clade diverged early from both Structure
 and Prose, with some later convergence toward the former.
"]
// END RANK raw_10

prose_5 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_5

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Specifically, Structure and Prose will actually inherit from Block, and
 Code block, name notwithstanding, merely imitates some behaviours.

"]
// END RANK raw_12

section_6 -> { header_14 prose_15 prose_16 prose_17 codeblock_18 prose_19 codeblock_20 section_21}
{rank=same; header_14 prose_15 prose_16 prose_17 codeblock_18 prose_19 codeblock_20 section_21}

header_14 [label="2 : Fields"]

prose_15 [label="prose"]

prose_16 [label="prose"]

prose_17 [label="prose"]

codeblock_18 [label="code block 35-48"]

prose_19 [label="prose"]

codeblock_20 [label="code block 53-76"]

section_21 [label="section: 78-157"]


// END RANK section_6

header_14 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" ** Fields"]
// END RANK header_14

prose_15 -> { raw_23}
{rank=same; raw_23}

raw_23 [label="raw"]


// END RANK prose_15

raw_23 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   Codeblock inherits from Node directly, and is born with these
 additional fields:
"]
// END RANK raw_23

prose_16 -> { raw_25}
{rank=same; raw_25}

raw_25 [label="raw"]


// END RANK prose_16

raw_25 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - level  :  The number of !s, which is the number of / needed to close
             the block.
 - header :  The line after # and at least one !.
 - footer :  The line closing the block. Optional, as a code block may
             end a file without a closing line.
 - lines  :  Array containing the lines of code.  Header and footer
             are not included.
 - line_first :  The first (header) line of the block.
 - line_last  :  The closing line of the block. Note that code blocks also
                 collect blank lines and may have a clinging tag.
"]
// END RANK raw_25

prose_17 -> { raw_27}
{rank=same; raw_27}

raw_27 [label="raw"]


// END RANK prose_17

raw_27 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 To be added:
 - [ ] lang : The language, derived from the header line.
"]
// END RANK raw_27

codeblock_18 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local Node = require \"espalier/node\"

local m = require \"Orbit/morphemes\"

local CB = setmetatable({}, Node)
CB.id = \"codeblock\"

CB.__index = CB

CB.__tostring = function() return \"codeblock\" end"]
// END RANK codeblock_18

prose_19 -> { raw_30}
{rank=same; raw_30}

raw_30 [label="raw"]


// END RANK prose_19

raw_30 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Adds a .val field which is the union of all lines.
 Useful in visualization.
"]
// END RANK raw_30

codeblock_20 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function CB.toValue(codeblock)
    codeblock.val = \"\"
    for _,v in ipairs(codeblock.lines) do
        codeblock.val = codeblock.val .. v .. \"\\n\"
    end

    return codeblock.val
end

function CB.toMarkdown(codeblock)
  -- hardcode lua
  local lang = codeblock.lang or \"orbdefault\"
  return \"```\" .. lang .. \"\\n\"
         .. codeblock:toValue() .. \"```\\n\"
end

function CB.dotLabel(codeblock)
    return \"code block \" .. tostring(codeblock.line_first)
        .. \"-\" .. tostring(codeblock.line_last)
end

local cb = {}"]
// END RANK codeblock_20

section_21 -> { header_33 prose_34 codeblock_35 prose_36 prose_37 codeblock_38 prose_39 prose_40 prose_41 codeblock_42 prose_43 codeblock_44}
{rank=same; header_33 prose_34 codeblock_35 prose_36 prose_37 codeblock_38 prose_39 prose_40 prose_41 codeblock_42 prose_43 codeblock_44}

header_33 [label="3 : asserts"]

prose_34 [label="prose"]

codeblock_35 [label="code block 80-85"]

prose_36 [label="prose"]

prose_37 [label="prose"]

codeblock_38 [label="code block 98-109"]

prose_39 [label="prose"]

prose_40 [label="prose"]

prose_41 [label="prose"]

codeblock_42 [label="code block 123-134"]

prose_43 [label="prose"]

codeblock_44 [label="code block 138-156"]


// END RANK section_21

header_33 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** asserts"]
// END RANK header_33

prose_34 -> { raw_46}
{rank=same; raw_46}

raw_46 [label="raw"]


// END RANK prose_34

raw_46 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_46

codeblock_35 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function CB.check(codeblock)
  assert(codeblock.line_first)
  assert(codeblock.line_last)
end"]
// END RANK codeblock_35

prose_36 -> { raw_49}
{rank=same; raw_49}

raw_49 [label="raw"]


// END RANK prose_36

raw_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - #args
   - str :  The string to match against.
"]
// END RANK raw_49

prose_37 -> { raw_51}
{rank=same; raw_51}

raw_51 [label="raw"]


// END RANK prose_37

raw_51 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - #return 3
   - boolean :  For header match
   - number  :  Level of header
   - string  :  Header stripped of left whitespace and tars

"]
// END RANK raw_51

codeblock_38 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function cb.matchHead(str)
    if str ~= \"\" and L.match(m.codestart, str) then
        local trimmed = str:sub(L.match(m.WS * m.hax, str))
        local level = L.match(m.zaps, trimmed) - 1
        local bareline = trimmed:sub(L.match(m.zaps, trimmed))
        return true, level, bareline
    else
        return false, 0, \"\"
    end
end"]
// END RANK codeblock_38

prose_39 -> { raw_54}
{rank=same; raw_54}

raw_54 [label="raw"]


// END RANK prose_39

raw_54 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Matches a code block footer line.
"]
// END RANK raw_54

prose_40 -> { raw_56}
{rank=same; raw_56}

raw_56 [label="raw"]


// END RANK prose_40

raw_56 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - #args
   - str   :  The string to match against.
   - level :  Required level for a match.
"]
// END RANK raw_56

prose_41 -> { raw_58}
{rank=same; raw_58}

raw_58 [label="raw"]


// END RANK prose_41

raw_58 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - #return 3
   - boolean :  For footer match
   - number  :  Level of header
   - string  :  Header stripped of left whitespace and tars

"]
// END RANK raw_58

codeblock_42 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function cb.matchFoot(str)
    if str ~= \"\" and L.match(m.codefinish, str) then
        local trimmed = str:sub(L.match(m.WS * m.hax    , str))
        local level = L.match(m.fass, trimmed) - 1
        local bareline = trimmed:sub(L.match(m.fass, trimmed))
        return true, level, bareline
    else
        return false, 0, \"\"
    end
end"]
// END RANK codeblock_42

prose_43 -> { raw_61}
{rank=same; raw_61}

raw_61 [label="raw"]


// END RANK prose_43

raw_61 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Constructor
"]
// END RANK raw_61

codeblock_44 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Codeblock, level, headline, linum)
    local codeblock = setmetatable({}, CB)
    codeblock.level = level
    codeblock.header = headline
    codeblock.lang = L.match(L.C(m.symbol), headline) or \"\"
    codeblock.footer = \"\"
    codeblock.line_first = linum
    codeblock.lines = {}

    return codeblock
end


cb.__call = new
cb.__index = cb

return setmetatable({}, cb)"]
// END RANK codeblock_44


}
