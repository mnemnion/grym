digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 67"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-67"]


// END RANK doc_0

section_1 -> { header_2 prose_3 codeblock_4 codeblock_5}
{rank=same; header_2 prose_3 codeblock_4 codeblock_5}

header_2 [label="1 : Spec for Walk classes"]

prose_3 [label="prose"]

codeblock_4 [label="code block 3-41"]

codeblock_5 [label="code block 43-66"]


// END RANK section_1

header_2 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Spec for Walk classes"]
// END RANK header_2

prose_3 -> { raw_7}
{rank=same; raw_7}

raw_7 [label="raw"]


// END RANK prose_3

raw_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_7

codeblock_4 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Path = require \"walk/path\"
local Dir  = require \"walk/directory\"

local Spec = {}

Spec.folder = \"walk\"

function Spec.path()
  local a = Path \"/core/build/\"
  local b = a .. \"codex.orb\"
  local c = a .. \"bar/\"
  local a1, b1
  -- new way
  b, b1 = b: it(\"a file Path\")
     : must(\"have some fields\")
        : have \"str\"
        : equalTo \"/core/build/codex.orb\"
        : ofLen(#b.str)
        -- : should()
        : have \"isPath\"
        : equalTo(Path) -- it does not
        : have \"filename\"
        : equalTo(\"codex.orb\")
        : stash()

  c = c : it (\"equals itself\")
        : must ()
            : equal(c)
            : stash()

  a, a1 = a: it(\"a well-behaved Path\")
             : mustnt()
                : have \"brack\"
                : have \"broil\"
                : have \"badAttitude\"
                : stash()
end"]
// END RANK codeblock_4

codeblock_5 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Spec.dir()
  a = Dir \"/usr/\"
         : it (\"the /usr/ directory\")
            : has (\"exists\")
            : calling()
            : gives(true)
            : stash()

  b = Dir \"/imaginary-in-almost-any-conceivable-case/\"
         : it(\"imaginary directory\")
         : should()
              : calledWith \"exists\"
              : gives(true)
              : stash()
              : allReports()
end


return function()
          Spec.path()
          Spec.dir()
       end"]
// END RANK codeblock_5


}
