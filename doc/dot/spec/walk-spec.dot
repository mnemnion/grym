digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 85"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-85"]


// END RANK doc_0

section_1 -> { header_2 prose_3 codeblock_4 codeblock_5}
{rank=same; header_2 prose_3 codeblock_4 codeblock_5}

header_2 [label="1 : Spec for Walk classes"]

prose_3 [label="prose"]

codeblock_4 [label="code block 3-51"]

codeblock_5 [label="code block 53-84"]


// END RANK section_1

header_2 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Spec for Walk classes"]
// END RANK header_2

prose_3 -> { raw_7}
{rank=same; raw_7}

raw_7 [label="raw"]


// END RANK prose_3

raw_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_7

codeblock_4 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Path = require \"walk/path\"
local Dir  = require \"walk/directory\"

local Spec = {}

Spec.folder = \"walk\"

function Spec.path()
  local a = Path \"/core/build/\"
  local b = a .. \"codex.orb\"
  local c = a .. \"orb/\"
  local d = Path \"/core/build/orb/\"
  local a1, b1
  -- new way
  b, b1 = b: it \"file-path\"
     : must \"have some fields\"
        : have \"str\"
        : equalTo \"/core/build/codex.orb\"
        : ofLen(#b.str)
     : must (\"return the requested directory path\")
        : have \"isPath\"
        : equalTo(Path)
        : have \"parentDir\"
        : calling (\"build\")
        : gives (Path \"/core/build/\")
     : must()
        : have \"filename\"
        : equalTo \"codex.orb\"
        : fin()()

  c = c : it \"equals-d\"
        : must ()
            : equal(d)
            : have \"isDir\"
            : equalTo(true)
        : mustnt ()
            : have \"filename\"
            : fin()()

  a, a1 = a: it \"a well-behaved Path\"
             : mustnt ()
                : have \"brack\"
                : have \"broil\"
             : shouldnt()
                : have \"badAttitude\"
                : fin()()
end"]
// END RANK codeblock_4

codeblock_5 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Spec.dir()
  a = Dir \"/usr/\"
         : it (\"the /usr/ directory\")
            : has (\"exists\")
            : calling()
            : gives(true)
            : fin()

  b = Dir \"/imaginary-in-almost-any-conceivable-case/\"
         : it(\"imaginary directory\")
         : should()
              : calledWith \"exists\"
              : gives(false)
              : fin()

   c = Dir \"/usr/tmp/\"
          : it \"swap-directory\"
         : must \"swap /usr/ for /tmp/\"
          : have \"swapDirFor\"
          : calling(\"/usr/\", \"/tmp/\")
          : gives(Dir \"/tmp/tmp/\")
          : fin()
         : allReports()
end


return function()
          Spec.path()
          Spec.dir()
       end"]
// END RANK codeblock_5


}
