digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 33"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-33"]


// END RANK doc_0

section_1 -> { header_2 prose_3 codeblock_4}
{rank=same; header_2 prose_3 codeblock_4}

header_2 [label="1 : Spec for Walk classes"]

prose_3 [label="prose"]

codeblock_4 [label="code block 3-32"]


// END RANK section_1

header_2 -> leaf_5
leaf_5  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Spec for Walk classes"]
// END RANK header_2

prose_3 -> { raw_6}
{rank=same; raw_6}

raw_6 [label="raw"]


// END RANK prose_3

raw_6 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_6

codeblock_4 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Path = require \"walk/path\"
local Dir  = require \"walk/path\"

local Spec = {}

Spec.folder = \"walk\"

function Spec.path()
  local a = new(_, \"/core/build/\")
  local b = clone(a) .. \"codex.orb\"
  local c = a .. \"bar/\"
  local a1, b1
  -- new way
  b, b1 = b: it(\"a file Path\")
     : must(\"have some fields\")
        : have \"str\"
        : equalTo \"/core/build/codex.orb\"
        : ofLen(12)
        : have \"isPath\"
        : equalTo(Path)
        : report()

  a, a1 = a: it(): mustnt()
     : have \"brack\"
     : have \"broil\"
     : have \"badAttitude\"
     : report()
end"]
// END RANK codeblock_4


}
