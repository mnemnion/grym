digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 90"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-46"]


section_1 -> { header_2}
{rank=same; header_2}

header_2 [label="1 : Knitter Module"]


section_3 -> { header_6}
{rank=same; header_6}

header_6 [label="3 : An Aside"]


section_4 -> { header_7}
{rank=same; header_7}

header_7 [label="2 : Design"]


codeblock_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local u = require \"lib/util\"

local K, k = u.inherit()"]
section_5 -> { header_10}
{rank=same; header_10}

header_10 [label="2 : knit method"]


codeblock_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function K.knit(knitter, doc)
    local codeblocks = doc:select(\"codeblock\")
    local phrase = \"\"
    local linum = 0
    for _, cb in ipairs(codeblocks) do
        cb:check()
        -- Pad code with blank lines to line up errors
        local pad_count = cb.line_first - linum

        local pad = (\"\\n\"):rep(pad_count)
        -- cat codeblock value
        phrase = phrase .. pad .. cb.val 

        -- update linum
        linum = cb.line_last - 1
    end

    return phrase
end

local function new(Knitter, lang)
    local knitter = setmetatable({}, K)
    knitter.lang = lang or \"lua\"
    return knitter
end

return u.export(k, new)"]

}
