digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 90"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-46"]


section_1 -> { header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8}

header_2 [label="1 : Knitter Module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 14-25"]

section_7 [label="section: 26-46"]

section_8 [label="section: 47-90"]


prose_3 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   A knitter is the actor responsible for knitting together our source
 code.  They are defined by language, which is to say that the unit of 
 action is not a runtime or document, knitters will expand to be 
 responsible for an arbitrary number of these.
"]
prose_4 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 The bootstrap knitter does what a knitter will do by default:  go through
 =.../org/*/*.gm= and generate =.../src/*.*.lang= for all code blocks in
 =#lang=. 
"]
prose_5 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 It must do so through an interface which will let it grow up.
"]
section_6 -> { header_12 prose_13 prose_14 prose_15}
{rank=same; header_12 prose_13 prose_14 prose_15}

header_12 [label="3 : An Aside"]

prose_13 [label="prose"]

prose_14 [label="prose"]

prose_15 [label="prose"]


prose_13 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   This is the last verb in Grimoire which needs to be written in pure
 Lua.  Huzzah! Typing -- all the time is tiresome and I didn't want to
 patch Sublime just for that.
"]
prose_14 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 I do intend to design a 
 [syntax highligher for Sublime](etc/Grimoire.sublime_syntax), just
 a simple minimum-viable that will make editing the Lua inside =grym= 
 pleasant while I polish up femto. 
"]
prose_15 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 "]
section_7 -> { header_19 prose_20 prose_21 codeblock_22}
{rank=same; header_19 prose_20 prose_21 codeblock_22}

header_19 [label="2 : Design"]

prose_20 [label="prose"]

prose_21 [label="prose"]

codeblock_22 [label="code block 41-45"]


prose_20 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   =grym invert= is an isolated module.  It's a shim; if better tools 
 succeeds, we'll stop using it within the Arc in fairly short order.
"]
prose_21 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 =grym knit=, by contrast, is part of the core system.  Software tends
 to stick around, and a Grimoire is a language-as-in-human-language
 sort of project.  An advantage we intend to offer over Org is a 
 nice Unix-flavor toolkit for munging flat files from your choice of
 editor.
 
 =knit= methods receive a parsed document, not a string.  The Knitter 
 modules generates language specific transformers for various Nodes,
 and the Knit module uses them when called for. 
"]
codeblock_22 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local u = require \"lib/util\"

local K, k = u.inherit()"]
section_8 -> { header_26 prose_27 prose_28 prose_29 codeblock_30}
{rank=same; header_26 prose_27 prose_28 prose_29 codeblock_30}

header_26 [label="2 : knit method"]

prose_27 [label="prose"]

prose_28 [label="prose"]

prose_29 [label="prose"]

codeblock_30 [label="code block 61-89"]


prose_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   This is where it all comes together.
"]
prose_28 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 We're still bootstrapping.  The only language is lua, we don't know 
 what hashtags are yet, and we go in simple linear order.
 
 - knitter :  the knit module. That is, K, rather than a given k in 
              K.langs.
 - doc     :  a Doc.
"]
prose_29 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - #return : the knit file as a string.

"]
codeblock_30 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function K.knit(knitter, doc)
    local codeblocks = doc:select(\"codeblock\")
    local phrase = \"\"
    local linum = 0
    for _, cb in ipairs(codeblocks) do
        cb:check()
        -- Pad code with blank lines to line up errors
        local pad_count = cb.line_first - linum

        local pad = (\"\\n\"):rep(pad_count)
        -- cat codeblock value
        phrase = phrase .. pad .. cb.val 

        -- update linum
        linum = cb.line_last - 1
    end

    return phrase
end

local function new(Knitter, lang)
    local knitter = setmetatable({}, K)
    knitter.lang = lang or \"lua\"
    return knitter
end

return u.export(k, new)"]

}
