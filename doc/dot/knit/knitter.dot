digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 94"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-47"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8}

header_2 [label="1 : Knitter Module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 14-25"]

section_7 [label="section: 26-47"]

section_8 [label="section: 48-94"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Knitter Module"]
// END RANK header_2

prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   A knitter is the actor responsible for knitting together our source
 code.  They are defined by language, which is to say that the unit of
 action is not a runtime or document, knitters will expand to be
 responsible for an arbitrary number of these.
"]
// END RANK raw_10

prose_4 -> { raw_12 prespace_13 literal_14 raw_15 prespace_16 literal_17 raw_18 prespace_19 literal_20 raw_21}
{rank=same; raw_12 prespace_13 literal_14 raw_15 prespace_16 literal_17 raw_18 prespace_19 literal_20 raw_21}

raw_12 [label="raw"]

prespace_13 [label="prespace"]

literal_14 [label="literal"]

raw_15 [label="raw"]

prespace_16 [label="prespace"]

literal_17 [label="literal"]

raw_18 [label="raw"]

prespace_19 [label="prespace"]

literal_20 [label="literal"]

raw_21 [label="raw"]


// END RANK prose_4

raw_12 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 The bootstrap knitter does what a knitter will do by default:  go through"]
// END RANK raw_12

prespace_13 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_13

literal_14 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".../org/*/*.gm"]
// END RANK literal_14

raw_15 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and generate"]
// END RANK raw_15

prespace_16 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_16

literal_17 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".../src/*.*.lang"]
// END RANK literal_17

raw_18 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for all code blocks in"]
// END RANK raw_18

prespace_19 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_19

literal_20 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#lang"]
// END RANK literal_20

raw_21 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_21

prose_5 -> { raw_32}
{rank=same; raw_32}

raw_32 [label="raw"]


// END RANK prose_5

raw_32 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 It must do so through an interface which will let it grow up.
"]
// END RANK raw_32

section_6 -> { header_34 prose_35 prose_36}
{rank=same; header_34 prose_35 prose_36}

header_34 [label="3 : An Aside"]

prose_35 [label="prose"]

prose_36 [label="prose"]


// END RANK section_6

header_34 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" *** An Aside"]
// END RANK header_34

prose_35 -> { raw_38}
{rank=same; raw_38}

raw_38 [label="raw"]


// END RANK prose_35

raw_38 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   This is the last verb in Grimoire which needs to be written in pure
 Lua.  Huzzah! Typing -- all the time is tiresome and I didn't want to
 patch Sublime just for that.
"]
// END RANK raw_38

prose_36 -> { raw_40 prespace_41 literal_42 raw_43}
{rank=same; raw_40 prespace_41 literal_42 raw_43}

raw_40 [label="raw"]

prespace_41 [label="prespace"]

literal_42 [label="literal"]

raw_43 [label="raw"]


// END RANK prose_36

raw_40 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 I do intend to design a
 [syntax highligher for Sublime](etc/Grimoire.sublime_syntax), just
 a simple minimum-viable that will make editing the Lua inside"]
// END RANK raw_40

prespace_41 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_41

literal_42 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym"]
// END RANK literal_42

raw_43 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 pleasant while I polish up femto.

"]
// END RANK raw_43

section_7 -> { header_48 prose_49 prose_50 prose_51 codeblock_52}
{rank=same; header_48 prose_49 prose_50 prose_51 codeblock_52}

header_48 [label="2 : Design"]

prose_49 [label="prose"]

prose_50 [label="prose"]

prose_51 [label="prose"]

codeblock_52 [label="code block 41-46"]


// END RANK section_7

header_48 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" ** Design"]
// END RANK header_48

prose_49 -> { raw_54 prespace_55 literal_56 raw_57}
{rank=same; raw_54 prespace_55 literal_56 raw_57}

raw_54 [label="raw"]

prespace_55 [label="prespace"]

literal_56 [label="literal"]

raw_57 [label="raw"]


// END RANK prose_49

raw_54 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  "]
// END RANK raw_54

prespace_55 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_55

literal_56 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym invert"]
// END RANK literal_56

raw_57 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is an isolated module.  It's a shim; if better tools
 succeeds, we'll stop using it within the Arc in fairly short order.
"]
// END RANK raw_57

prose_50 -> { raw_62 prespace_63 literal_64 raw_65}
{rank=same; raw_62 prespace_63 literal_64 raw_65}

raw_62 [label="raw"]

prespace_63 [label="prespace"]

literal_64 [label="literal"]

raw_65 [label="raw"]


// END RANK prose_50

raw_62 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_62

prespace_63 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_63

literal_64 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym knit"]
// END RANK literal_64

raw_65 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", by contrast, is part of the core system.  Software tends
 to stick around, and a Grimoire is a language-as-in-human-language
 sort of project.  An advantage we intend to offer over Org is a
 nice Unix-flavor toolkit for munging flat files from your choice of
 editor.
"]
// END RANK raw_65

prose_51 -> { raw_70 prespace_71 literal_72 raw_73}
{rank=same; raw_70 prespace_71 literal_72 raw_73}

raw_70 [label="raw"]

prespace_71 [label="prespace"]

literal_72 [label="literal"]

raw_73 [label="raw"]


// END RANK prose_51

raw_70 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_70

prespace_71 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_71

literal_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="knit"]
// END RANK literal_72

raw_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" methods receive a parsed document, not a string.  The Knitter
 modules generates language specific transformers for various Nodes,
 and the Knit module uses them when called for.
"]
// END RANK raw_73

codeblock_52 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local u = require \"lib/util\"

local K, k = u.inherit()
K.it = require \"core/check\""]
// END RANK codeblock_52

section_8 -> { header_79 prose_80 prose_81 prose_82 prose_83 codeblock_84}
{rank=same; header_79 prose_80 prose_81 prose_82 prose_83 codeblock_84}

header_79 [label="2 : knit method"]

prose_80 [label="prose"]

prose_81 [label="prose"]

prose_82 [label="prose"]

prose_83 [label="prose"]

codeblock_84 [label="code block 62-93"]


// END RANK section_8

header_79 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" ** knit method"]
// END RANK header_79

prose_80 -> { raw_86}
{rank=same; raw_86}

raw_86 [label="raw"]


// END RANK prose_80

raw_86 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   This is where it all comes together.
"]
// END RANK raw_86

prose_81 -> { raw_88}
{rank=same; raw_88}

raw_88 [label="raw"]


// END RANK prose_81

raw_88 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 We're still bootstrapping.  The only language is lua, we don't know
 what hashtags are yet, and we go in simple linear order.
"]
// END RANK raw_88

prose_82 -> { raw_90}
{rank=same; raw_90}

raw_90 [label="raw"]


// END RANK prose_82

raw_90 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - knitter :  the knit module. That is, K, rather than a given k in
              K.langs.
 - doc     :  a Doc.
"]
// END RANK raw_90

prose_83 -> { raw_92}
{rank=same; raw_92}

raw_92 [label="raw"]


// END RANK prose_83

raw_92 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - #return : the knit file as a string.

"]
// END RANK raw_92

codeblock_84 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function K.knit(knitter, doc)
    local phrase = \"\"
    local linum = 0
    for cb in doc:select(\"codeblock\") do
        cb:check()
        if cb.lang == \"lua\" then
           -- Pad code with blank lines to line up errors
           local pad_count = cb.line_first - linum

           local pad = (\"\\n\"):rep(pad_count)
           -- cat codeblock value
           phrase = phrase .. pad .. cb.val

           -- update linum
           linum = cb.line_last - 1
        else
          -- other languages
        end
    end

    return phrase
end

local function new(Knitter, lang)
    local knitter = setmetatable({}, K)
    knitter.lang = lang or \"lua\"
    return knitter
end

return u.export(k, new)"]
// END RANK codeblock_84


}
