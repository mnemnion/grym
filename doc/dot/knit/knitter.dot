digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 93"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-46"]


section_1 -> { header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6 section_7 section_8}

header_2 [label="1 : Knitter Module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 14-25"]

section_7 [label="section: 26-46"]

section_8 [label="section: 47-93"]


header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Knitter Module"]
prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   A knitter is the actor responsible for knitting together our source
 code.  They are defined by language, which is to say that the unit of 
 action is not a runtime or document, knitters will expand to be 
 responsible for an arbitrary number of these.
"]
prose_4 -> { raw_12 prespace_13 literal_14 raw_15 prespace_16 literal_17 raw_18 prespace_19 literal_20 raw_21}
{rank=same; raw_12 prespace_13 literal_14 raw_15 prespace_16 literal_17 raw_18 prespace_19 literal_20 raw_21}

raw_12 [label="raw"]

prespace_13 [label="prespace"]

literal_14 [label="literal"]

raw_15 [label="raw"]

prespace_16 [label="prespace"]

literal_17 [label="literal"]

raw_18 [label="raw"]

prespace_19 [label="prespace"]

literal_20 [label="literal"]

raw_21 [label="raw"]


raw_12 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 The bootstrap knitter does what a knitter will do by default:  go through"]
prespace_13 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_14 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".../org/*/*.gm"]
raw_15 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and generate"]
prespace_16 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_17 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".../src/*.*.lang"]
raw_18 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for all code blocks in"]
prespace_19 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_20 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#lang"]
raw_21 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". 
"]
prose_5 -> { raw_32}
{rank=same; raw_32}

raw_32 [label="raw"]


raw_32 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 It must do so through an interface which will let it grow up.
"]
section_6 -> { header_34 prose_35 prose_36 prose_37}
{rank=same; header_34 prose_35 prose_36 prose_37}

header_34 [label="3 : An Aside"]

prose_35 [label="prose"]

prose_36 [label="prose"]

prose_37 [label="prose"]


header_34 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" *** An Aside"]
prose_35 -> { raw_39}
{rank=same; raw_39}

raw_39 [label="raw"]


raw_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   This is the last verb in Grimoire which needs to be written in pure
 Lua.  Huzzah! Typing -- all the time is tiresome and I didn't want to
 patch Sublime just for that.
"]
prose_36 -> { raw_41 prespace_42 literal_43 raw_44}
{rank=same; raw_41 prespace_42 literal_43 raw_44}

raw_41 [label="raw"]

prespace_42 [label="prespace"]

literal_43 [label="literal"]

raw_44 [label="raw"]


raw_41 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 I do intend to design a 
 [syntax highligher for Sublime](etc/Grimoire.sublime_syntax), just
 a simple minimum-viable that will make editing the Lua inside"]
prespace_42 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_43 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym"]
raw_44 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" 
 pleasant while I polish up femto. 
"]
prose_37 -> { raw_49}
{rank=same; raw_49}

raw_49 [label="raw"]


raw_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 "]
section_7 -> { header_51 prose_52 prose_53 codeblock_54}
{rank=same; header_51 prose_52 prose_53 codeblock_54}

header_51 [label="2 : Design"]

prose_52 [label="prose"]

prose_53 [label="prose"]

codeblock_54 [label="code block 41-45"]


header_51 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" ** Design"]
prose_52 -> { raw_56 prespace_57 literal_58 raw_59}
{rank=same; raw_56 prespace_57 literal_58 raw_59}

raw_56 [label="raw"]

prespace_57 [label="prespace"]

literal_58 [label="literal"]

raw_59 [label="raw"]


raw_56 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  "]
prespace_57 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_58 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym invert"]
raw_59 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is an isolated module.  It's a shim; if better tools 
 succeeds, we'll stop using it within the Arc in fairly short order.
"]
prose_53 -> { raw_64 prespace_65 literal_66 raw_67 prespace_68 literal_69 raw_70}
{rank=same; raw_64 prespace_65 literal_66 raw_67 prespace_68 literal_69 raw_70}

raw_64 [label="raw"]

prespace_65 [label="prespace"]

literal_66 [label="literal"]

raw_67 [label="raw"]

prespace_68 [label="prespace"]

literal_69 [label="literal"]

raw_70 [label="raw"]


raw_64 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prespace_65 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_66 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym knit"]
raw_67 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", by contrast, is part of the core system.  Software tends
 to stick around, and a Grimoire is a language-as-in-human-language
 sort of project.  An advantage we intend to offer over Org is a 
 nice Unix-flavor toolkit for munging flat files from your choice of
 editor.
 "]
prespace_68 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_69 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="knit"]
raw_70 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" methods receive a parsed document, not a string.  The Knitter 
 modules generates language specific transformers for various Nodes,
 and the Knit module uses them when called for. 
"]
codeblock_54 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local u = require \"lib/util\"

local K, k = u.inherit()"]
section_8 -> { header_79 prose_80 prose_81 prose_82 codeblock_83}
{rank=same; header_79 prose_80 prose_81 prose_82 codeblock_83}

header_79 [label="2 : knit method"]

prose_80 [label="prose"]

prose_81 [label="prose"]

prose_82 [label="prose"]

codeblock_83 [label="code block 61-92"]


header_79 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" ** knit method"]
prose_80 -> { raw_85}
{rank=same; raw_85}

raw_85 [label="raw"]


raw_85 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   This is where it all comes together.
"]
prose_81 -> { raw_87}
{rank=same; raw_87}

raw_87 [label="raw"]


raw_87 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 We're still bootstrapping.  The only language is lua, we don't know 
 what hashtags are yet, and we go in simple linear order.
 
 - knitter :  the knit module. That is, K, rather than a given k in 
              K.langs.
 - doc     :  a Doc.
"]
prose_82 -> { raw_89}
{rank=same; raw_89}

raw_89 [label="raw"]


raw_89 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - #return : the knit file as a string.

"]
codeblock_83 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function K.knit(knitter, doc)
    local phrase = \"\"
    local linum = 0
    for cb in doc:select(\"codeblock\") do
        cb:check()
        if cb.lang == \"lua\" then
           -- Pad code with blank lines to line up errors
           local pad_count = cb.line_first - linum

           local pad = (\"\\n\"):rep(pad_count)
           -- cat codeblock value
           phrase = phrase .. pad .. cb.val 

           -- update linum
           linum = cb.line_last - 1
        else
          io.write(\"codeblock of lang \" .. cb.lang .. \"\\n\")
        end
    end

    return phrase
end

local function new(Knitter, lang)
    local knitter = setmetatable({}, K)
    knitter.lang = lang or \"lua\"
    return knitter
end

return u.export(k, new)"]

}
