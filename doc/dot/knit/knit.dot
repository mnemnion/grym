digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 137"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-103"]


// END RANK doc_0

section_1 -> { header_2 prose_3 codeblock_4 section_5 section_6}
{rank=same; header_2 prose_3 codeblock_4 section_5 section_6}

header_2 [label="1 : Knit module"]

prose_3 [label="prose"]

codeblock_4 [label="code block 6-40"]

section_5 [label="section: 43-103"]

section_6 [label="section: 104-137"]


// END RANK section_1

header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Knit module"]
// END RANK header_2

prose_3 -> { raw_8}
{rank=same; raw_8}

raw_8 [label="raw"]


// END RANK prose_3

raw_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


 This is due for a complete overhaul.
"]
// END RANK raw_8

codeblock_4 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local s = require \"status\" ()
local a = require \"ansi\"
s.chatty = true
s.verbose = false

local pl_file = require \"pl.file\"
local pl_dir = require \"pl.dir\"
local pl_path = require \"pl.path\"
local getfiles = pl_dir.getfiles
local getdirectories = pl_dir.getdirectories
local makepath = pl_dir.makepath
local extension = pl_path.extension
local dirname = pl_path.dirname
local basename = pl_path.basename
local read = pl_file.read
local write = pl_file.write
local delete = pl_file.delete
local isdir = pl_path.isdir


local knitter = require \"knit/knitter\"

local walk = require \"walk\"
local Dir, Path, File = walk.Dir, walk.Path, walk.File
local strHas = walk.strHas
local endsWith = walk.endsWith
local subLastFor = walk.subLastFor
local writeOnChange = walk.writeOnChange

local Doc = require \"Orbit/doc\"
"]
// END RANK codeblock_4

section_5 -> { header_11 prose_12 prose_13 codeblock_14 prose_15}
{rank=same; header_11 prose_12 prose_13 codeblock_14 prose_15}

header_11 [label="3 : knit_dir(knitter, pwd, depth)"]

prose_12 [label="prose"]

prose_13 [label="prose"]

codeblock_14 [label="code block 51-98"]

prose_15 [label="prose"]


// END RANK section_5

header_11 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** knit_dir(knitter, pwd, depth)"]
// END RANK header_11

prose_12 -> { raw_17 prespace_18 literal_19 raw_20 prespace_21 literal_22 raw_23}
{rank=same; raw_17 prespace_18 literal_19 raw_20 prespace_21 literal_22 raw_23}

raw_17 [label="raw"]

prespace_18 [label="prespace"]

literal_19 [label="literal"]

raw_20 [label="raw"]

prespace_21 [label="prespace"]

literal_22 [label="literal"]

raw_23 [label="raw"]


// END RANK prose_12

raw_17 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 Walks a given directory, kniting the contents of"]
// END RANK raw_17

prespace_18 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_18

literal_19 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/org/"]
// END RANK literal_19

raw_20 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 into"]
// END RANK raw_20

prespace_21 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_21

literal_22 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/src/"]
// END RANK literal_22

raw_23 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_23

prose_13 -> { raw_31}
{rank=same; raw_31}

raw_31 [label="raw"]


// END RANK prose_13

raw_31 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - [X] TODO fix up the orb/notes directory so it doesn't explode
       the knit.
"]
// END RANK raw_31

codeblock_14 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function knit_dir(knitter, orb_dir, pwd)
    local knits = {}
    for dir in pl_dir.walk(orb_dir.path.str, false, false) do
        if not strHas(\".git\", dir) and isdir(dir)
            and not strHas(\"src/lib\", dir) then

            local files = getfiles(dir)
            s:chat(\"  * \" .. dir)
            local subdirs = getdirectories(dir)
            for _, f in ipairs(files) do
                if extension(f) == \".orb\" then
                    -- read and knit
                    s:verb(\"    - \" .. f)
                    local orb_f = read(f)
                    local knitted = knitter:knit(Doc(orb_f))
                    local src_dir = subLastFor(\"/orb\", \"/src\", dirname(f))
                    makepath(src_dir)
                    local bare_name = basename(f):sub(1, -5) -- 4 == #\".orb\"
                    local out_name = src_dir .. \"/\" .. bare_name .. \".lua\"
                    local current_src = read(out_name) or \"\"
                    local changed = writeOnChange(knitted, current_src, out_name, 0)
                    if changed then
                        local tmp_dir = \"../tmp\" .. src_dir
                        makepath(tmp_dir)
                        local tmp_out = \"../tmp\" .. out_name
                        write(tmp_out, current_src)
                        knits[#knits + 1] = out_name
                    end
                end
            end
        end
    end

    -- collect changed files if any
    local orbbacks = \"\"
    for _, v in ipairs(knits) do
        orbbacks = orbbacks .. v .. \"\\n\"
    end
    if orbbacks ~= \"\" then
        s:chat(\"orbbacks: \\n\" .. orbbacks)
    end
    -- if nothing changes, no rollback is needed, empty file
    write(tostring(pwd) .. \"/.orbback\", orbbacks)
    return true
end
"]
// END RANK codeblock_14

prose_15 -> { raw_34}
{rank=same; raw_34}

raw_34 [label="raw"]


// END RANK prose_15

raw_34 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ] #todo add some proper codex detection and correction

"]
// END RANK raw_34

section_6 -> { header_36 prose_37 prose_38 codeblock_39}
{rank=same; header_36 prose_37 prose_38 codeblock_39}

header_36 [label="2 : knit_all(knitter, pwd_str)"]

prose_37 [label="prose"]

prose_38 [label="prose"]

codeblock_39 [label="code block 112-136"]


// END RANK section_6

header_36 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** knit_all(knitter, pwd_str)"]
// END RANK header_36

prose_37 -> { raw_41}
{rank=same; raw_41}

raw_41 [label="raw"]


// END RANK prose_37

raw_41 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Both sides of the interface to this are wrong, but let's build
the Dir locally and go from there.
"]
// END RANK raw_41

prose_38 -> { prespace_43 literal_44 raw_45}
{rank=same; prespace_43 literal_44 raw_45}

prespace_43 [label="prespace"]

literal_44 [label="literal"]

raw_45 [label="raw"]


// END RANK prose_38

prespace_43 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_43

literal_44 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="knitter"]
// END RANK literal_44

raw_45 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" isn't wrong externally, the internal interface it
presents needs considerable refinement to work correctly.
"]
// END RANK raw_45

codeblock_39 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local function knit_all(knitter, pwd_str)
    local did_knit = false
    local pwd = Dir(pwd_str)
    pwd.codex_type = \"base\"
    s:chat(\"pwd:\" .. tostring(pwd))
    local orbDir = pwd .. \"/orb\"
    s:chat(\"orbDir: \" .. tostring(orbDir))
    if orbDir:exists() then
        s:chat(a.cyan(\"Knit: \") .. tostring(orbDir))
        orbDir.codex_type = \"home\"
        did_knit = knit_dir(knitter, orbDir, pwd)
    else
        s:chat(\"No orb directory to knit. No action taken.\")
        return false
    end
    return did_knit
end

knitter.knit_all = knit_all


return knitter"]
// END RANK codeblock_39


}
