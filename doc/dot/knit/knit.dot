digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 118"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-39"]


section_1 -> { header_2 prose_3 codeblock_4 section_5}
{rank=same; header_2 prose_3 codeblock_4 section_5}

header_2 [label="1 : Knit module"]

prose_3 [label="prose"]

codeblock_4 [label="code block 4-37"]

section_5 [label="section: 40-118"]


prose_3 -> { raw_6}
{rank=same; raw_6}

raw_6 [label="raw"]


raw_6 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 
"]
codeblock_4 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local s = require \"status\"
local a = require \"ansi\"
s.chatty = true

local pl_file = require \"pl.file\"
local pl_dir = require \"pl.dir\"
local pl_path = require \"pl.path\"
local getfiles = pl_dir.getfiles
local getdirectories = pl_dir.getdirectories
local makepath = pl_dir.makepath
local extension = pl_path.extension
local dirname = pl_path.dirname
local basename = pl_path.basename
local read = pl_file.read
local write = pl_file.write
local delete = pl_file.delete
local isdir = pl_path.isdir

local epeg = require \"peg/epeg\"

local knitter = require \"knit/knitter\"

local walk = require \"walk\"
local strHas = walk.strHas
local endsWith = walk.endsWith
local subLastFor = walk.subLastFor
local writeOnChange = walk.writeOnChange

local Doc = require \"grym/doc\"
"]
section_5 -> { header_9 prose_10 prose_11 codeblock_12}
{rank=same; header_9 prose_10 prose_11 codeblock_12}

header_9 [label="3 : knit_dir(knitter, pwd, depth)"]

prose_10 [label="prose"]

prose_11 [label="prose"]

codeblock_12 [label="code block 48-117"]


prose_10 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 Walks a given directory, kniting the contents of =/org/=
 into =/src/=. 
"]
prose_11 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - [X] TODO fix up the orb/notes directory so it doesn't explode
       the knit.
"]
codeblock_12 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function knit_dir(knitter, orb_dir, pwd)
    local knits = {}
    for dir in pl_dir.walk(orb_dir, false, false) do
        if not strHas(\".git\", dir) and isdir(dir)
            and not strHas(\"src/lib\", dir) then

            local files = getfiles(dir)
            s:chat(\"  * \" .. dir)
            local subdirs = getdirectories(dir)
            for _, f in ipairs(files) do
                if extension(f) == \".orb\" then
                    -- read and knit
                    s:verb(\"    - \" .. f)
                    local orb_f = read(f)
                    local knitted = knitter:knit(Doc(orb_f))
                    local src_dir = subLastFor(\"/orb\", \"/src\", dirname(f))
                    makepath(src_dir)
                    local bare_name = basename(f):sub(1, -5) -- 4 == #\".orb\"
                    local out_name = src_dir .. \"/\" .. bare_name .. \".lua\"
                    local current_src = read(out_name) or \"\"
                    local changed = writeOnChange(knitted, current_src, out_name, 0)
                    if changed then
                        local tmp_dir = \"../tmp\" .. src_dir
                        makepath(tmp_dir)
                        local tmp_out = \"../tmp\" .. out_name
                        write(tmp_out, current_src)
                        knits[#knits + 1] = out_name
                    end     
                end
            end
        end
    end



    -- collect changed files if any
    local grymbacks = \"\"
    for _, v in ipairs(knits) do
        grymbacks = grymbacks .. v .. \"\\n\"
    end
    if grymbacks ~= \"\" then
        s:chat(\"grymbacks: \\n\" .. grymbacks)
    end
    -- if nothing changes, no rollback is needed, empty file
    write(pwd .. \"/.grymback\", grymbacks)
    return true
end

local function knit_all(knitter, pwd)
    local did_knit = false
    for dir in pl_dir.walk(pwd, false, false) do
        if not strHas(\".git\", dir) and isdir(dir) 
            and endsWith(\"orb\", dir) then

            s:chat(a.green(\"Knit: \" .. dir))
            did_knit = knit_dir(knitter, dir, pwd)
        end
    end
    if not did_knit then
        s:chat(\"No orb directory to knit. No action taken.\")
    end
    return did_knit
end

knitter.knit_all = knit_all


return knitter"]

}
