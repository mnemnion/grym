digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 180"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-126"]


section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9 section_10 section_11}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9 section_10 section_11}

header_2 [label="1 : Block module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

section_8 [label="section: 33-50"]

section_9 [label="section: 51-75"]

section_10 [label="section: 76-91"]

section_11 [label="section: 127-180"]


header_2 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Block module"]
prose_3 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   A Block is the container for the next level of granularity below
 a Section. Any Section has a Header and one or more Blocks. Both the
 Header and the Block may be virtual, that is, without contents.
"]
prose_4 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 The most general premise is that Blocks are delineated by blank line
 whitespace. 

"]
prose_5 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 A paragraph of prose is the simplest block, and the default.  A list with
 a tag line is a block also, as is a table.  Most importantly for our short
 path, code blocks are enclosed in blocks as well.
"]
prose_6 -> { raw_19}
{rank=same; raw_19}

raw_19 [label="raw"]


raw_19 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Blocking needs to identify when it has structure, and when prose, on a 
 line-by-line basis.  It must also apply the cling rule to make sure that
 e.g. tags are part of the block indicated by whitespacing. 
 
 Blocking need not, and mostly should not, parse within structure or prose.
 These categories are determined by the beginning of a line, making this
 tractable. 
 
 The cling rule requires lookahead. LPEG is quite capable of this, as is 
 packrat PEG parsing generally.  In the bootstrap implementation, we will
 parse once for ownership, again (in the `lines` array of each Section) for
 blocking, and a final time to parse within blocks. 
"]
prose_7 -> { raw_21}
{rank=same; raw_21}

raw_21 [label="raw"]


raw_21 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Grimoire is intended to work, in linear time, as a single-pass PEG
 grammar.  Presently (Feb 2018) I'm intending to prototype that with 
 PEGylator and port it to `hammer` with a `quipu` back-end. 

"]
section_8 -> { header_23 prose_24 codeblock_25}
{rank=same; header_23 prose_24 codeblock_25}

header_23 [label="3 : includes"]

prose_24 [label="prose"]

codeblock_25 [label="code block 35-48"]


header_23 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** includes"]
prose_24 -> { raw_27}
{rank=same; raw_27}

raw_27 [label="raw"]


raw_27 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_25 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local Node = require \"peg/node\"
local Codeblock = require \"grym/codeblock\"
local Structure = require \"grym/structure\"
local Prose = require \"grym/prose\"

local s = require \"status\"

local m = require \"grym/morphemes\"
local util = require \"../lib/util\"
local freeze = util.freeze"]
section_9 -> { header_30 prose_31 codeblock_32}
{rank=same; header_30 prose_31 codeblock_32}

header_30 [label="2 : Metatable for Blocks"]

prose_31 [label="prose"]

codeblock_32 [label="code block 53-73"]


header_30 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Metatable for Blocks"]
prose_31 -> { raw_34}
{rank=same; raw_34}

raw_34 [label="raw"]


raw_34 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_32 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local B = setmetatable({}, { __index = Node })
B.__index = B

B.__tostring = function(block) 
    return \"Block\"
end

function B.addLine(block, line)
    if L.match(m.tagline_hash_p, line) then
        block[#block + 1] = Structure(line, \"hashline\", block.str)
    elseif L.match(m.tagline_handle_p, line) then
        block[#block + 1] = Structure(line, \"handleline\", block.str)
        -- Eventually Blocks won't have lines, meantime:
    else
        block.lines[#block.lines + 1] = line
    end

    return block
end"]
section_10 -> { header_37 prose_38 codeblock_39 section_40}
{rank=same; header_37 prose_38 codeblock_39 section_40}

header_37 [label="2 : Parse the prose within a block"]

prose_38 [label="prose"]

codeblock_39 [label="code block 78-90"]

section_40 [label="section: 92-126"]


header_37 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Parse the prose within a block"]
prose_38 -> { raw_42}
{rank=same; raw_42}

raw_42 [label="raw"]


raw_42 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_39 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function B.parseProse(block)
    if block[1] then
        if block[1].id == \"codeblock\" then
            return \"\"
        end
    else
        block[1] = Prose(block)
        block.lines = nil
        return block[1]
    end
end"]
section_40 -> { header_45 prose_46 codeblock_47}
{rank=same; header_45 prose_46 codeblock_47}

header_45 [label="3 : toValue"]

prose_46 [label="prose"]

codeblock_47 [label="code block 97-124"]


header_45 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** toValue"]
prose_46 -> { raw_49}
{rank=same; raw_49}

raw_49 [label="raw"]


raw_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 Adds a .val field which is the union of all lines.
 Useful in visualization. 
"]
codeblock_47 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function B.toString(block)
    local phrase = \"\"
    for _,v in ipairs(block.lines) do
        phrase = phrase .. v .. \"\\n\"
    end
    return phrase
end

function B.toValue(block)
    block.val = block:toString()
    return block.val
end

function B.toMarkdown(block)
    if block[1] and (block[1].id == \"codeblock\"
      or block[1].id == \"prose\") then
        return block[1]:toMarkdown()
    else
        return block:toString()
    end
end

function B.dotLabel(block)
    return \"block \" .. tostring(block.line_first) 
        .. \"-\" .. tostring(block.line_last)
end"]
section_11 -> { header_52 prose_53 codeblock_54 prose_55 codeblock_56}
{rank=same; header_52 prose_53 codeblock_54 prose_55 codeblock_56}

header_52 [label="2 : Constructor/module"]

prose_53 [label="prose"]

codeblock_54 [label="code block 129-151"]

prose_55 [label="prose"]

codeblock_56 [label="code block 163-179"]


header_52 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Constructor/module"]
prose_53 -> { raw_58}
{rank=same; raw_58}

raw_58 [label="raw"]


raw_58 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_54 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local b = {}

local function new(Block, lines, linum, str)
    local block = setmetatable({}, B)
    block.lines = {}
    block.line_first = linum
    if (lines) then 
        if type(lines) == \"string\" then
            block:addLine(lines)
        elseif type(lines) == \"table\" then
            for _, l in ipairs(lines) do
                block:addLine(l)
            end
        else
            freeze(\"Error: in block.new type of `lines` is \" .. type(lines))
        end
    end

    block.id = \"block\"
    return block
end"]
prose_55 -> { raw_61}
{rank=same; raw_61}

raw_61 [label="raw"]


raw_61 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - returns: 
        1. true for structure, false for prose
        2. id of structure line or \"\" for prose

"]
codeblock_56 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function structureOrProse(line)
    if L.match(m.tagline_p, line) then
        return true, \"tagline\"
    elseif L.match(m.listline_p, line) then
        return true, \"listline\"
    elseif L.match(m.tableline_p, line) then
        return true, \"tableline\"
    end
    return false, \"\"
end

b[\"__call\"] = new
b[\"__index\"] = b

return setmetatable({}, b)"]

}
