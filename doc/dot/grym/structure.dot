digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="54  "]

doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="34  "]

section_1 -> { header_2 block_3 block_4 block_5 block_6 section_7 section_8}
{rank=same; header_2 block_3 block_4 block_5 block_6 section_7 section_8}

header_2 [label="le  "]
block_3 [label="-6  "]
block_4 [label="-9  "]
block_5 [label="11  "]
block_6 [label="34  "]
section_7 [label="34  "]
section_8 [label="54  "]


block_3 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
   Structure is our holding block for anything which is neither
 prose nor code.  This includes taglines, lists, tables, and some
 more advanced forms such as drawers.

"]
block_4 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" For now we need them as containers for taglines, which are part of the short
 path for knitting source code.

"]
block_5 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Note that structures do not have a =.lines= field.

"]block_6 -> { codeblock_12}
{rank=same; codeblock_12}

codeblock_12 [label="18  "]


codeblock_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Node = require \"peg/node\"
local u = require \"../lib/util\"

local Hashline = require \"grym/hashline\"
local Handleline = require \"grym/handleline\"
"]
block_6 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]section_7 -> { header_15 block_16 block_17}
{rank=same; header_15 block_16 block_17}

header_15 [label="es  "]
block_16 [label="21  "]
block_17 [label="34  "]


block_16 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]block_17 -> { codeblock_19}
{rank=same; codeblock_19}

codeblock_19 [label="33  "]


codeblock_19 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local S, s = u.inherit(Node)

function S.dotLabel(structure)
    -- This is a shim and will break.
    if structure.temp_id then 
        return structure.temp_id
    else
        return \"structure\"
    end
end
"]
block_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]section_8 -> { header_22 block_23 block_24}
{rank=same; header_22 block_23 block_24}

header_22 [label="le  "]
block_23 [label="37  "]
block_24 [label="54  "]


block_23 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]block_24 -> { codeblock_26}
{rank=same; codeblock_26}

codeblock_26 [label="53  "]


codeblock_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Structure, line, line_id)
    local structure = setmetatable({}, S)
    structure.id = \"structure\"
    if line_id == \"hashline\" then
        structure[1] = Hashline(line)
    elseif line_id == \"handleline\" then
        structure[1] = Handleline(line)
    end

    return structure
end


return u.export(s, new)
"]
block_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
}
