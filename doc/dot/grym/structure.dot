digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 63"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-42"]


section_1 -> { header_2 prose_3 prose_4 prose_5 codeblock_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 prose_5 codeblock_6 section_7 section_8}

header_2 [label="1 : Structure Module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

codeblock_6 [label="code block 12-18"]

section_7 [label="section: 20-42"]

section_8 [label="section: 43-63"]


header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   Structure is our holding block for anything which is neither
 prose nor code.  This includes taglines, lists, tables, and some
 more advanced forms such as drawers.
"]
prose_4 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 For now we need them as containers for taglines, which are part of the short
 path for knitting source code.
"]
prose_5 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Note that structures do not have a =.lines= field.
"]
codeblock_6 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Node = require \"peg/node\"
local u = require \"../lib/util\"

local Hashline = require \"grym/hashline\"
local Handleline = require \"grym/handleline\""]
section_7 -> { header_17 prose_18 codeblock_19}
{rank=same; header_17 prose_18 codeblock_19}

header_17 [label="2 : Metatable for Structures"]

prose_18 [label="prose"]

codeblock_19 [label="code block 22-41"]


header_17 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_18 -> { raw_21}
{rank=same; raw_21}

raw_21 [label="raw"]


raw_21 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local S, s = u.inherit(Node)

function S.dotLabel(structure)
    -- This is a shim and will break.
    if structure.temp_id then 
        return structure.temp_id
    else
        return \"structure\"
    end
end

function S.toMarkdown(structure)
    if structure[1] and structure[1].toMarkdown then
        return structure[1]:toMarkdown()
    else
        return structure.__VALUE
    end
end"]
section_8 -> { header_24 prose_25 codeblock_26}
{rank=same; header_24 prose_25 codeblock_26}

header_24 [label="2 : Constructor module"]

prose_25 [label="prose"]

codeblock_26 [label="code block 46-62"]


header_24 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_25 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
codeblock_26 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Structure, line, line_id)
    local structure = setmetatable({}, S)
    structure.__VALUE = line
    structure.id = \"structure\"
    if line_id == \"hashline\" then
        structure[1] = Hashline(line)
    elseif line_id == \"handleline\" then
        structure[1] = Handleline(line)
    end

    return structure
end


return u.export(s, new)"]

}
