digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 75"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-17"]


section_1 -> { header_2}
{rank=same; header_2}

header_2 [label="1 : Link module"]


codeblock_3 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local m = require \"grym/morphemes\"
local u = require \"util\"

local Node = require \"peg/node\""]
codeblock_4 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Li, li = u.inherit(Node)
Li.id = \"link\""]
section_5 -> { header_8}
{rank=same; header_8}

header_8 [label="2 : Transformers"]


section_9 -> { header_12}
{rank=same; header_12}

header_12 [label="3 : toMarkdown"]


codeblock_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Li.toMarkdown(link)
  return \"[\" .. link.prose .. \"]\"
      .. \"(\" .. link.url .. \")\"
end"]
section_10 -> { header_15}
{rank=same; header_15}

header_15 [label="3 : dotLabel"]


codeblock_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Li.dotLabel(link)
  return \"link: \" .. link.prose
end"]
codeblock_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Li.parse(link, line)
  -- This only parses double links, expand
  local WS, sel, ser = m.WS, m.sel, m.ser
  local link_content = L.match(L.Ct(sel * WS * sel * L.C(m.link_prose)
                * ser * WS * sel * L.C(m.url) * WS * ser * WS * ser),
                line)
  link.prose = link_content[1] or \"\"
  link.url   = link_content[2] or \"\"
  return link
end"]
codeblock_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Link, line)
  local link = setmetatable({},Li)
  link.id = \"link\"
  link.val = line -- refine this
  link:parse(line)
  return link
end"]
codeblock_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function linkbuild(link, line)
  io.write(\"   ~~ built a link\\n\")
  link = setmetatable({}, Li)
  return Li.parse(link, line)
end"]
section_11 -> { header_24}
{rank=same; header_24}

header_24 [label="3 : export"]


codeblock_25 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return linkbuild"]

}
