digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 79"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-17"]


section_1 -> { header_2 block_3 block_4 block_5 section_6}
{rank=same; header_2 block_3 block_4 block_5 section_6}

header_2 [label="1 : Link module"]

block_3 [label="block 1-2"]

block_4 [label="block 3-12"]

block_5 [label="block 13-17"]

section_6 [label="section: 18-74"]


block_3 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_4 -> { codeblock_8}
{rank=same; codeblock_8}

codeblock_8 [label="code block 3-10"]


codeblock_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local m = require \"grym/morphemes\"
local u = require \"util\"

local Node = require \"node/node\""]
block_4 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
block_5 -> { codeblock_11}
{rank=same; codeblock_11}

codeblock_11 [label="code block 13-16"]


codeblock_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Li, li = u.inherit(Node)
Li.id = \"link\""]
block_5 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_6 -> { header_14 block_15 section_16 section_17 section_18}
{rank=same; header_14 block_15 section_16 section_17 section_18}

header_14 [label="2 : Transformers"]

block_15 [label="block 18-74"]

section_16 [label="section: 20-30"]

section_17 [label="section: 31-74"]

section_18 [label="section: 75-79"]


block_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_16 -> { header_20 block_21 block_22}
{rank=same; header_20 block_21 block_22}

header_20 [label="3 : toMarkdown"]

block_21 [label="block 20-21"]

block_22 [label="block 22-30"]


block_21 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_22 -> { codeblock_24}
{rank=same; codeblock_24}

codeblock_24 [label="code block 22-29"]


codeblock_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Li.toMarkdown(link)
  url = link.url or \"\"
  prose = link.prose or \"\"
  return \"[\" .. prose .. \"]\"
      .. \"(\" .. url .. \")\"
end"]
block_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_17 -> { header_27 block_28 block_29 block_30 block_31 block_32}
{rank=same; header_27 block_28 block_29 block_30 block_31 block_32}

header_27 [label="3 : dotLabel"]

block_28 [label="block 31-32"]

block_29 [label="block 33-38"]

block_30 [label="block 39-55"]

block_31 [label="block 56-66"]

block_32 [label="block 67-74"]


block_28 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_29 -> { codeblock_34}
{rank=same; codeblock_34}

codeblock_34 [label="code block 33-37"]


codeblock_34 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Li.dotLabel(link)
  return \"link: \" .. link.prose
end"]
block_29 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_30 -> { codeblock_37}
{rank=same; codeblock_37}

codeblock_37 [label="code block 39-52"]


codeblock_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Li.parse(link, line)
  -- This only parses double links, expand
  local WS, sel, ser = m.WS, m.sel, m.ser
  local link_content = L.match(L.Ct(sel * WS * sel * L.C(m.link_prose)
                * ser * WS * sel * L.C(m.url) * WS * ser * WS * ser),
                line)
  if link_content then
    link.prose = link_content[1] or \"\"
    link.url   = link_content[2] or \"\"
  end
  return link
end"]
block_30 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
block_31 -> { codeblock_40}
{rank=same; codeblock_40}

codeblock_40 [label="code block 56-64"]


codeblock_40 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Link, line)
  local link = setmetatable({},Li)
  link.id = \"link\"
  link.val = line -- refine this
  link:parse(line)
  return link
end"]
block_31 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
block_32 -> { codeblock_43}
{rank=same; codeblock_43}

codeblock_43 [label="code block 67-73"]


codeblock_43 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function linkbuild(link, str)
  io.write(\"   ~~ built a link\\n\")
  setmetatable(link, Li)
  return Li.parse(link, str:sub(link.first, link.last))
end"]
block_32 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_18 -> { header_46 block_47 block_48}
{rank=same; header_46 block_47 block_48}

header_46 [label="3 : export"]

block_47 [label="block 75-76"]

block_48 [label="block 77-79"]


block_47 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_48 -> { codeblock_50}
{rank=same; codeblock_50}

codeblock_50 [label="code block 77-79"]


codeblock_50 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return linkbuild"]
block_48 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]

}
