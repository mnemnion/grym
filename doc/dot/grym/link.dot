digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 64"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-17"]


section_1 -> { header_2 prose_3 codeblock_4 codeblock_5 section_6}
{rank=same; header_2 prose_3 codeblock_4 codeblock_5 section_6}

header_2 [label="1 : Link module"]

prose_3 [label="prose"]

codeblock_4 [label="code block 3-11"]

codeblock_5 [label="code block 14-16"]

section_6 [label="section: 18-59"]


header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Link module"]
prose_3 -> { raw_8}
{rank=same; raw_8}

raw_8 [label="raw"]


raw_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_4 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local m = require \"grym/morphemes\"
local u = require \"util\"
local s = require \"status\" ()

local Node = require \"node/node\""]
codeblock_5 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Li, li = u.inherit(Node)"]
section_6 -> { header_12 prose_13 section_14 section_15}
{rank=same; header_12 prose_13 section_14 section_15}

header_12 [label="2 : Transformers"]

prose_13 [label="prose"]

section_14 [label="section: 21-59"]

section_15 [label="section: 60-64"]


header_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Transformers"]
prose_13 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
section_14 -> { header_19 prose_20 prose_21 codeblock_22 codeblock_23}
{rank=same; header_19 prose_20 prose_21 codeblock_22 codeblock_23}

header_19 [label="3 : toMarkdown"]

prose_20 [label="prose"]

prose_21 [label="prose"]

codeblock_22 [label="code block 28-42"]

codeblock_23 [label="code block 44-57"]


header_19 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** toMarkdown"]
prose_20 -> { raw_25}
{rank=same; raw_25}

raw_25 [label="raw"]


raw_25 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Our Markdown link parser will need to be moderately sophisticated,
and soon, to deal with internal links. 
"]
prose_21 -> { raw_27}
{rank=same; raw_27}

raw_27 [label="raw"]


raw_27 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
For now we are more limited in our pattern recognition.
"]
codeblock_22 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Li.toMarkdown(link)
  local anchor_text = \"\"
  local url = \"\"
  if link[1].id == \"anchortext\" then
    anchor_text = link[1]:toValue()
  end
  if link[2].id == \"url\" then
    url = link[2]:toValue()
  end

  return \"[\" .. anchor_text .. \"]\"
      .. \"(\" .. url .. \")\"
end"]
codeblock_23 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Li.parse(link, line)
  -- This only parses double links, expand
  local WS, sel, ser = m.WS, m.sel, m.ser
  local link_content = L.match(L.Ct(sel * WS * sel * L.C(m.anchor_text)
                * ser * WS * sel * L.C(m.url) * WS * ser * WS * ser),
                line)
  if link_content then
    link.prose = link_content[1] or \"\"
    link.url   = link_content[2] or \"\"
  end
  return link
end"]
section_15 -> { header_31 prose_32 codeblock_33}
{rank=same; header_31 prose_32 codeblock_33}

header_31 [label="3 : export"]

prose_32 [label="prose"]

codeblock_33 [label="code block 62-64"]


header_31 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_32 -> { raw_35}
{rank=same; raw_35}

raw_35 [label="raw"]


raw_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_33 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return Li"]

}
