digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 71"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-52"]


section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7}

header_2 [label="1 : Rich Text Metas"]

prose_3 [label="prose"]

section_4 [label="section: 8-18"]

section_5 [label="section: 19-29"]

section_6 [label="section: 43-52"]

section_7 [label="section: 53-63"]


header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Rich Text Metas"]
prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  This is a collection of related methods for handling rich text markup
inside of prose blocks. 

"]
section_4 -> { header_11 prose_12 codeblock_13}
{rank=same; header_11 prose_12 codeblock_13}

header_11 [label="3 : includes"]

prose_12 [label="prose"]

codeblock_13 [label="code block 10-16"]


header_11 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** includes"]
prose_12 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Node = require \"node\"

local u = require \"util\"

local L = require \"lpeg\""]
section_5 -> { header_18 prose_19 codeblock_20 section_21}
{rank=same; header_18 prose_19 codeblock_20 section_21}

header_18 [label="2 : Literal"]

prose_19 [label="prose"]

codeblock_20 [label="code block 26-28"]

section_21 [label="section: 30-42"]


header_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Literal"]
prose_19 -> { raw_23 literal_24 raw_25}
{rank=same; raw_23 literal_24 raw_25}

raw_23 [label="raw"]

literal_24 [label="literal"]

raw_25 [label="raw"]


raw_23 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  I am preparing the Literal table in the usual fashion, because "]
literal_24 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grammar.define"]
raw_25 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" doesn't as yet incorporate simply receiving a
metatable, it needs to take the fancy builder even if it isn't
going to use it. 
"]
codeblock_20 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Lit, lit = u.inherit(Node)"]
section_21 -> { header_30 prose_31 prose_32 codeblock_33}
{rank=same; header_30 prose_31 prose_32 codeblock_33}

header_30 [label="3 : toMarkdown"]

prose_31 [label="prose"]

prose_32 [label="prose"]

codeblock_33 [label="code block 37-41"]


header_30 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** toMarkdown"]
prose_31 -> { raw_35}
{rank=same; raw_35}

raw_35 [label="raw"]


raw_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The all-important!
"]
prose_32 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ] #todo  Actually count internal backticks instead of just
             whanging on the count past any plausible inclusion.
"]
codeblock_33 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Lit.toMarkdown(literal)
  return \"`````\" .. literal:toValue() .. \"`````\"
end"]
section_6 -> { header_40 prose_41 codeblock_42}
{rank=same; header_40 prose_41 codeblock_42}

header_40 [label="2 : Italic"]

prose_41 [label="prose"]

codeblock_42 [label="code block 45-51"]


header_40 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Italic
"]
prose_41 -> { raw_44}
{rank=same; raw_44}

raw_44 [label="raw"]


raw_44 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_42 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Ita = u.inherit(Node)

function Ita.toMarkdown(italic)
  return \"_\" .. italic:toValue():gsub(\"_\", \"\\\\_\") .. \"_\"
end"]
section_7 -> { header_47 prose_48 codeblock_49 section_50}
{rank=same; header_47 prose_48 codeblock_49 section_50}

header_47 [label="2 : Bold"]

prose_48 [label="prose"]

codeblock_49 [label="code block 55-61"]

section_50 [label="section: 64-71"]


header_47 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Bold

#"]
prose_48 -> { raw_52}
{rank=same; raw_52}

raw_52 [label="raw"]


raw_52 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_49 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Bold = u.inherit(Node)

function Bold.toMarkdown(bold)
  return \"**\" .. bold:toValue():gsub(\"*\", \"\\\\*\") .. \"**\"
end"]
section_50 -> { header_55 prose_56 codeblock_57}
{rank=same; header_55 prose_56 codeblock_57}

header_55 [label="3 : Constructor"]

prose_56 [label="prose"]

codeblock_57 [label="code block 67-71"]


header_55 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Constructor


#"]
prose_56 -> { raw_59}
{rank=same; raw_59}

raw_59 [label="raw"]


raw_59 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
codeblock_57 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return { literal = Lit, 
     italic  = Ita,
     bold    = Bold }"]

}
