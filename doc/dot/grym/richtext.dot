digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 94"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-68"]


section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7 section_8}

header_2 [label="1 : Rich Text Metas"]

prose_3 [label="prose"]

section_4 [label="section: 8-18"]

section_5 [label="section: 19-29"]

section_6 [label="section: 48-57"]

section_7 [label="section: 58-68"]

section_8 [label="section: 69-85"]


header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Rich Text Metas"]
prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  This is a collection of related methods for handling rich text markup
inside of prose blocks. 

"]
section_4 -> { header_12 prose_13 codeblock_14}
{rank=same; header_12 prose_13 codeblock_14}

header_12 [label="3 : includes"]

prose_13 [label="prose"]

codeblock_14 [label="code block 10-16"]


header_12 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** includes"]
prose_13 -> { raw_16}
{rank=same; raw_16}

raw_16 [label="raw"]


raw_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Node = require \"node\"

local u = require \"util\"

local L = require \"lpeg\""]
section_5 -> { header_19 prose_20 codeblock_21 section_22}
{rank=same; header_19 prose_20 codeblock_21 section_22}

header_19 [label="2 : Literal"]

prose_20 [label="prose"]

codeblock_21 [label="code block 26-28"]

section_22 [label="section: 30-47"]


header_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Literal"]
prose_20 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  I am preparing the Literal table in the usual fashion, because 
=Grammar.define= doesn't as yet incorporate simply receiving a
metatable, it needs to take the fancy builder even if it isn't
going to use it. 
"]
codeblock_21 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Lit, lit = u.inherit(Node)"]
section_22 -> { header_27 prose_28 prose_29 prose_30 codeblock_31}
{rank=same; header_27 prose_28 prose_29 prose_30 codeblock_31}

header_27 [label="3 : toMarkdown"]

prose_28 [label="prose"]

prose_29 [label="prose"]

prose_30 [label="prose"]

codeblock_31 [label="code block 42-46"]


header_27 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** toMarkdown"]
prose_28 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The all-important!
"]
prose_29 -> { raw_35 prespace_36 literal_37 raw_38}
{rank=same; raw_35 prespace_36 literal_37 raw_38}

raw_35 [label="raw"]

prespace_36 [label="prespace"]

literal_37 [label="literal"]

raw_38 [label="raw"]


raw_35 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ] #todo  This will overflow with more than one backtick.
       We need to count the longest internal sequence of
       '`' in the"]
prespace_36 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_37 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="toValue()"]
raw_38 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" string.
"]
prose_30 -> { raw_43}
{rank=same; raw_43}

raw_43 [label="raw"]


raw_43 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
       Since this is an operation we'll be doing a lot,
       it's an early candidate for an enhanced String
       library.
"]
codeblock_31 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Lit.toMarkdown(literal)
  return \"``\" .. literal:toValue() .. \"``\"
end"]
section_6 -> { header_46 prose_47 codeblock_48}
{rank=same; header_46 prose_47 codeblock_48}

header_46 [label="2 : Italic"]

prose_47 [label="prose"]

codeblock_48 [label="code block 50-56"]


header_46 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local Ita"]
prose_47 -> { raw_50}
{rank=same; raw_50}

raw_50 [label="raw"]


raw_50 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_48 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Ita = u.inherit(Node)

function Ita.toMarkdown(italic)
  return \"_\" .. italic:toValue():gsub(\"_\", \"\\\\_\") .. \"_\"
end"]
section_7 -> { header_53 prose_54 codeblock_55}
{rank=same; header_53 prose_54 codeblock_55}

header_53 [label="2 : Bold"]

prose_54 [label="prose"]

codeblock_55 [label="code block 60-66"]


header_53 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cal Bold"]
prose_54 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_55 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Bold = u.inherit(Node)

function Bold.toMarkdown(bold)
  return \"**\" .. bold:toValue():gsub(\"*\", \"\\\\*\") .. \"**\"
end"]
section_8 -> { header_60 prose_61 prose_62 codeblock_63 section_64}
{rank=same; header_60 prose_61 prose_62 codeblock_63 section_64}

header_60 [label="2 : Interpolated"]

prose_61 [label="prose"]

prose_62 [label="prose"]

codeblock_63 [label="code block 77-84"]

section_64 [label="section: 86-94"]


header_60 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" This will event"]
prose_61 -> { raw_66}
{rank=same; raw_66}

raw_66 [label="raw"]


raw_66 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This will eventually be quite the complex class, and likely moved to
its own file.
"]
prose_62 -> { raw_68}
{rank=same; raw_68}

raw_68 [label="raw"]


raw_68 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Right now, we just need to strip the wrapper so that toMarkdown doesn't
turn it into a code block. 
"]
codeblock_63 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Interpol = u.inherit(Node)

function Interpol.toMarkdown(interpol)
  return interpol:toValue()
end 
"]
section_64 -> { header_71 prose_72 codeblock_73}
{rank=same; header_71 prose_72 codeblock_73}

header_71 [label="3 : Constructor"]

prose_72 [label="prose"]

codeblock_73 [label="code block 89-94"]


header_71 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="!lua
return { li"]
prose_72 -> { raw_75}
{rank=same; raw_75}

raw_75 [label="raw"]


raw_75 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
codeblock_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return { literal = Lit, 
     italic  = Ita,
     bold    = Bold,
     interpolated = Interpol }"]

}
