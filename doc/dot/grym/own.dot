digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 144"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-48"]


section_1 -> { header_2 block_3 block_4 block_5 block_6 section_7}
{rank=same; header_2 block_3 block_4 block_5 block_6 section_7}

header_2 [label="1 : Ownership function"]

block_3 [label="block 1-5"]

block_4 [label="block 6-8"]

block_5 [label="block 9-13"]

block_6 [label="block 14-48"]

section_7 [label="section: 49-144"]


block_3 -> { prose_8}
{rank=same; prose_8}

prose_8 [label="prose"]


prose_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Taking a multi-pass approach to this Grimoire instance will benefit us 
in a few ways. 
"]
block_4 -> { prose_10}
{rank=same; prose_10}

prose_10 [label="prose"]


prose_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="First, Grimoire itself is structured in a certain fashion. The 
straightforward thing is to mirror that fashion in code.
"]
block_5 -> { prose_12}
{rank=same; prose_12}

prose_12 [label="prose"]


prose_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Second, the critical path right now is simple code generation from 
Grimoire documents. Parsing prose gets useful later, for now I simply
wish to unravel some existing code into Grimoire format and start working
on it accordingly. 
"]
block_6 -> { codeblock_14}
{rank=same; codeblock_14}

codeblock_14 [label="code block 14-46"]


codeblock_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local epeg = require \"peg/epeg\"

local util = require \"../lib/util\"
local freeze = util.freeze

local Csp = epeg.Csp

local a = require \"../lib/ansi\"
local u = require \"lib/util\"


local ast = require \"peg/ast\"

local Node = require \"peg/node\"

local m = require \"grym/morphemes\"

local Header = require \"grym/header\"
local Section = require \"grym/section\"
local Block = require \"grym/block\"
local Codeblock = require \"grym/codeblock\"

local own = {}

local blue = tostring(a.blue)
local red = tostring(a.red)
local dim = tostring(a.dim)
local green = tostring(a.green)
local cl   = tostring(a.clear)"]
section_7 -> { header_16 block_17 block_18 block_19 block_20}
{rank=same; header_16 block_17 block_18 block_19 block_20}

header_16 [label="3 : Helper functions for own.parse"]

block_17 [label="block 49-54"]

block_18 [label="block 55-67"]

block_19 [label="block 68-71"]

block_20 [label="block 72-144"]


block_17 -> { prose_21}
{rank=same; prose_21}

prose_21 [label="prose"]


prose_21 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Trims leading whitespace, returning the amount taken and
the trimmed string.
 
"]
block_18 -> { codeblock_23}
{rank=same; codeblock_23}

codeblock_23 [label="code block 55-65"]


codeblock_23 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function lead_whitespace(str)
    local lead_ws = L.match(m.WS, str)
    if lead_ws > 1 then
        --  io.write(green..(\"%\"):rep(lead_ws - 1)..cl)
        return lead_ws, str:sub(lead_ws)
    else
        return 0, str
    end
end"]
block_19 -> { prose_25}
{rank=same; prose_25}

prose_25 [label="prose"]


prose_25 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Takes a string, parsing ownership.
 Returns a Doc.

"]
block_20 -> { codeblock_27}
{rank=same; codeblock_27}

codeblock_27 [label="code block 72-143"]


codeblock_27 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function own(doc, str)
    local linum = 1
    local doc_level = 0
    local start = 1
    local num_lines = #(epeg.split(str,\"\\n\"))
    -- Track code blocks separately to avoid `* A` type collisions in code
    local code_block = false
    for _, line in ipairs(epeg.split(str, \"\\n\")) do
        local finish = start + #line
        -- tab and return filtration
        local l, err = line:gsub(\"\\t\", \"  \"):gsub(\"\\r\", \"\") 
        -- We should always have a string but..
        if l then
            if not code_block then
                local indent, l_trim = lead_whitespace(l)
                local code_head = Codeblock.matchHead(l)
                if code_head then 
                    code_block = true 
                end
                local isHeader, level, bareline = Header.match(l_trim) 

                if isHeader then              
                    local header = Header(bareline, level, start, finish, doc)

                    -- make new block and append to doc
                    doc:addSection(Section(header, linum), linum)

                else 
                    doc:addLine(l, linum)
                end
            else 
                -- code block logic, including restarts
                --
                -- NOTE that this will choke on unmatched code headers,
                -- which I intend to fix. But it's fiddly.
                local code_foot = Codeblock.matchFoot(l)
                if code_foot then 
                    code_block = false
                end
                doc:addLine(l, linum)
            end
        elseif ER then
            freeze(\"HUH?\")
        end
        linum = linum + 1
        start = finish
        if linum < num_lines then start = start + 1 end
    end
    if (doc.latest) then
        doc.latest.line_last = linum - 1
    end
    local sections = doc:select(\"section\")
    for _, s in ipairs(sections) do
        s:check()
        s:block()
    end
    local blocks = doc:select(\"block\")
    for _, block in ipairs(blocks) do
       -- block:toValue()
        block:parseProse()
    end
    local cbs = doc:select(\"codeblock\")
    for _, cb in ipairs(cbs) do
        cb:toValue()
    end
    doc.linum = linum - 1
    return doc
end

return own"]

}
