digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 171"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-48"]


section_1 -> { header_2 prose_3 prose_4 prose_5 codeblock_6 section_7}
{rank=same; header_2 prose_3 prose_4 prose_5 codeblock_6 section_7}

header_2 [label="1 : Ownership function"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

codeblock_6 [label="code block 14-46"]

section_7 [label="section: 49-171"]


prose_3 -> { raw_8}
{rank=same; raw_8}

raw_8 [label="raw"]


raw_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Taking a multi-pass approach to this Grimoire instance will benefit us 
in a few ways. 
"]
prose_4 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
First, Grimoire itself is structured in a certain fashion. The 
straightforward thing is to mirror that fashion in code.
"]
prose_5 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Second, the critical path right now is simple code generation from 
Grimoire documents. Parsing prose gets useful later, for now I simply
wish to unravel some existing code into Grimoire format and start working
on it accordingly. 
"]
codeblock_6 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local epeg = require \"peg/epeg\"

local util = require \"../lib/util\"
local freeze = util.freeze

local Csp = epeg.Csp

local a = require \"../lib/ansi\"
local u = require \"lib/util\"


local ast = require \"peg/ast\"

local Node = require \"peg/node\"

local m = require \"grym/morphemes\"

local Header = require \"grym/header\"
local Section = require \"grym/section\"
local Block = require \"grym/block\"
local Codeblock = require \"grym/codeblock\"

local own = {}

local blue = tostring(a.blue)
local red = tostring(a.red)
local dim = tostring(a.dim)
local green = tostring(a.green)
local cl   = tostring(a.clear)"]
section_7 -> { header_15 prose_16 codeblock_17 prose_18 codeblock_19}
{rank=same; header_15 prose_16 codeblock_17 prose_18 codeblock_19}

header_15 [label="3 : Helper functions for own.parse"]

prose_16 [label="prose"]

codeblock_17 [label="code block 55-65"]

prose_18 [label="prose"]

codeblock_19 [label="code block 72-170"]


prose_16 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Trims leading whitespace, returning the amount taken and
the trimmed string.
 
"]
codeblock_17 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function lead_whitespace(str)
    local lead_ws = L.match(m.WS, str)
    if lead_ws > 1 then
        --  io.write(green..(\"%\"):rep(lead_ws - 1)..cl)
        return lead_ws, str:sub(lead_ws)
    else
        return 0, str
    end
end"]
prose_18 -> { raw_23}
{rank=same; raw_23}

raw_23 [label="raw"]


raw_23 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Takes a string, parsing ownership.
 Returns a Doc.

"]
codeblock_19 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function own(doc, str)
    local linum = 1
    local doc_level = 0
    local start = 1
    local num_lines = #(epeg.split(str,\"\\n\"))
    -- Track code blocks separately to avoid `* A` type collisions in code
    local code_block = false
    for _, line in ipairs(epeg.split(str, \"\\n\")) do
        
        -- tab and return filtration
        local l, err = line:gsub(\"\\t\", \"  \"):gsub(\"\\r\", \"\") 
        local finish = start + #l
        -- We should always have a string but..
        if l then
            if not code_block then
                local indent, l_trim = lead_whitespace(l)
                local code_head = Codeblock.matchHead(l)
                if code_head then 
                    code_block = true 
                end
                local isHeader, level, bareline = Header.match(l_trim) 

                if isHeader then              
                    local header = Header(bareline, level, start, finish, doc)

                    -- make new block and append to doc
                    doc:addSection(Section(header, linum, start, finish, doc.str), 
                                      linum, start)

                else 
                    doc:addLine(l, linum, finish)
                end
            else 
                -- code block logic, including restarts
                --
                -- NOTE that this will choke on unmatched code headers,
                -- which I intend to fix. But it's fiddly.
                local code_foot = Codeblock.matchFoot(l)
                if code_foot then 
                    code_block = false
                end
                doc:addLine(l, linum, finish)
            end
        elseif ER then
            freeze(\"HUH?\")
        end
        linum = linum + 1
        start = finish
        if linum < num_lines then start = start + 1 end
    end
    if (doc.latest) then
        doc.latest.line_last = linum - 1
        assert(type(start) == 'number')
        doc.latest.last = start
    else
        assert(false, \"no doc.latest\")
    end
    if doc.isnode then 
        local sections = doc:select(\"section\")
        for _, s in ipairs(sections) do
            s:check()
            s:block()
            s:weed()
        end
        local blocks = doc:select(\"block\")
        for _, block in ipairs(blocks) do
            block:toValue()
            block:parseProse()
        end
        for _, sec in ipairs(sections) do
            sec:weed()
        end
        local cbs = doc:select(\"codeblock\")
        for _, v in ipairs(cbs) do
            v:toValue()
        end
    else
        for sec in doc:select(\"section\") do
            sec:check()
            sec:block()
        end
        for block in doc:select(\"block\") do
            block:toValue()
            block:parseProse()
        end
        for sec in doc:select(\"section\") do
            sec:weed()
        end
        for cbs in doc:select(\"codeblock\") do
            cbs:toValue()
        end
    end
    doc.linum = linum - 1
    return doc
end

return own"]

}
