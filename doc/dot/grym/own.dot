digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 147"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-48"]


section_1 -> { header_2}
{rank=same; header_2}

header_2 [label="1 : Ownership function"]


codeblock_3 -> leaf_5
leaf_5  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local epeg = require \"peg/epeg\"

local util = require \"../lib/util\"
local freeze = util.freeze

local Csp = epeg.Csp

local a = require \"../lib/ansi\"
local u = require \"lib/util\"


local ast = require \"peg/ast\"

local Node = require \"peg/node\"

local m = require \"grym/morphemes\"

local Header = require \"grym/header\"
local Section = require \"grym/section\"
local Block = require \"grym/block\"
local Codeblock = require \"grym/codeblock\"

local own = {}

local blue = tostring(a.blue)
local red = tostring(a.red)
local dim = tostring(a.dim)
local green = tostring(a.green)
local cl   = tostring(a.clear)"]
section_4 -> { header_6}
{rank=same; header_6}

header_6 [label="3 : Helper functions for own.parse"]


codeblock_7 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function lead_whitespace(str)
    local lead_ws = L.match(m.WS, str)
    if lead_ws > 1 then
        --  io.write(green..(\"%\"):rep(lead_ws - 1)..cl)
        return lead_ws, str:sub(lead_ws)
    else
        return 0, str
    end
end"]
codeblock_8 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function own(doc, str)
    local linum = 1
    local doc_level = 0
    local start = 1
    local num_lines = #(epeg.split(str,\"\\n\"))
    -- Track code blocks separately to avoid `* A` type collisions in code
    local code_block = false
    for _, line in ipairs(epeg.split(str, \"\\n\")) do
        local finish = start + #line
        -- tab and return filtration
        local l, err = line:gsub(\"\\t\", \"  \"):gsub(\"\\r\", \"\") 
        -- We should always have a string but..
        if l then
            if not code_block then
                local indent, l_trim = lead_whitespace(l)
                local code_head = Codeblock.matchHead(l)
                if code_head then 
                    code_block = true 
                end
                local isHeader, level, bareline = Header.match(l_trim) 

                if isHeader then              
                    local header = Header(bareline, level, start, finish, doc)

                    -- make new block and append to doc
                    doc:addSection(Section(header, linum), linum)

                else 
                    doc:addLine(l, linum)
                end
            else 
                -- code block logic, including restarts
                --
                -- NOTE that this will choke on unmatched code headers,
                -- which I intend to fix. But it's fiddly.
                local code_foot = Codeblock.matchFoot(l)
                if code_foot then 
                    code_block = false
                end
                doc:addLine(l, linum)
            end
        elseif ER then
            freeze(\"HUH?\")
        end
        linum = linum + 1
        start = finish
        if linum < num_lines then start = start + 1 end
    end
    if (doc.latest) then
        doc.latest.line_last = linum - 1
    end
    local sections = doc:select(\"section\")
    for _, s in ipairs(sections) do
        s:check()
        s:block()
    end
    local blocks = doc:select(\"block\")
    for _, block in ipairs(blocks) do
       -- block:toValue()
        block:parseProse()
    end
    for _, s in ipairs(sections) do
        s:weed()
    end
    local cbs = doc:select(\"codeblock\")
    for _, cb in ipairs(cbs) do
        cb:toValue()
    end
    doc.linum = linum - 1
    return doc
end

return own"]

}
