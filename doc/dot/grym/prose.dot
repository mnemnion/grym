digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 114"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-16"]


section_1 -> { header_2 block_3 block_4 section_5}
{rank=same; header_2 block_3 block_4 section_5}

header_2 [label="1 : Prose module"]

block_3 [label="block 1-4"]

block_4 [label="block 5-16"]

section_5 [label="section: 17-75"]


block_3 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Here we need a proper recursive parser.  Eventually.
"]
block_4 -> { codeblock_7}
{rank=same; codeblock_7}

codeblock_7 [label="code block 5-14"]


codeblock_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"
local u = require \"util\"
local m = require \"grym/morphemes\"

local epnf = require \"peg/epnf\"
local Node = require \"peg/node\"

local P, p = u.inherit(Node)"]
block_4 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
section_5 -> { header_10 block_11 block_12 block_13 block_14 block_15 block_16 section_17 section_18}
{rank=same; header_10 block_11 block_12 block_13 block_14 block_15 block_16 section_17 section_18}

header_10 [label="2 : Bookend parsing"]

block_11 [label="block 17-21"]

block_12 [label="block 22-25"]

block_13 [label="block 26-29"]

block_14 [label="block 30-33"]

block_15 [label="block 34-38"]

block_16 [label="block 39-75"]

section_17 [label="section: 42-75"]

section_18 [label="section: 76-114"]


block_11 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  We need to generate parsers to match sequences of single characters, so
that *bold*, **bold**, ***bold*** etc all work correctly.
"]
block_12 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Bookends are a fun construct borrowed from the [[LPEG manual][httk://]]]]
model for Lua long strings.  The GGG/Pegylator form of a bookend construct
is 
"]
block_13 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~#!peg
    bookend = \"`\":a !\"`\":a pattern  \"`\":a
~#/peg
"]
block_14 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The =lpeg= engine doesn't model this directly but it's possible to provide
it.  We only need the subset of this where =a= is unique, that is, =pattern=
does not contain =bookend= at any level of expansion. 
"]
block_15 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="GGG being a specification format needn't respect this limitation.  Orb
does so by design.  It is a simple consquence of the sort of markup we are
using; there is no need to parse ***bold **inside bold** still bold*** twice,
and this generalizes to all text styles. 
"]
block_16 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We do have to wire them up so that we don't cross the streams.  Sans macros.
By hand. 
"]
section_17 -> { header_25 block_26 block_27 block_28}
{rank=same; header_25 block_26 block_27 block_28}

header_25 [label="3 : Lpeg locals"]

block_26 [label="block 42-43"]

block_27 [label="block 44-51"]

block_28 [label="block 52-75"]


block_26 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_27 -> { codeblock_30}
{rank=same; codeblock_30}

codeblock_30 [label="code block 44-50"]


codeblock_30 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Cg = L.Cg
local C = L.C
local P = L.P
local Cmt = L.Cmt
local Cb = L.Cb"]
block_27 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_28 -> { codeblock_33}
{rank=same; codeblock_33}

codeblock_33 [label="code block 52-73"]


codeblock_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function equal_strings(s, i, a, b)
   -- Returns true if a and b are equal.
   -- s and i are not used, provided because expected by Cb.
   return a == b
end

local function bookends(sigil)
   -- Returns a pair of patterns, _open and _close,
   -- which will match a brace of sigil.
   -- sigil must be a string. 
   local _open = Cg(C(P(sigil)^1), sigil .. \"_init\")
   local _close =  Cmt(C(P(sigil)^1) * Cb(sigil .. \"_init\"), equal_strings)
   return _open, _close
end

local bold_open, bold_close     =  bookends(\"*\")
local italic_open, italic_close =  bookends(\"/\")
local under_open, under_close   =  bookends(\"_\")
local strike_open, strike_close =  bookends(\"-\")
local lit_open, lit_close       =  bookends(\"=\")"]
block_28 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
section_18 -> { header_36 block_37 block_38 block_39 block_40 block_41 block_42}
{rank=same; header_36 block_37 block_38 block_39 block_40 block_41 block_42}

header_36 [label="3 : Link or Raw"]

block_37 [label="block 76-80"]

block_38 [label="block 81-83"]

block_39 [label="block 84-88"]

block_40 [label="block 89-90"]

block_41 [label="block 91-99"]

block_42 [label="block 100-114"]


block_37 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  The prose parser will be a proper recursive grammar.  This calls for some
enhancements to epnf to allow assignment of Node metatables to matched spans.
"]
block_38 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I've been sloppy with the node constructor interface and will need to go through
the whole =grym= directory and fix it into a consistent state.  At some point.
"]
block_39 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Links give me a chance to design that interface to fit grammatically. For now,
we're going to handroll another Link class, and write a simple either-or parser
over prose strings that finds links and puts the rest in a =raw= class, which
shouldn't need an intermediate Node class. 
"]
block_40 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This Link class needs to fit the constructor semantics of =epeg.Csp=.
"]
block_41 -> { codeblock_47}
{rank=same; codeblock_47}

codeblock_47 [label="code block 91-98"]


codeblock_47 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local function new(Prose, block)
    local prose = setmetatable({},P)

    return prose
end"]
block_41 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_42 -> { codeblock_50}
{rank=same; codeblock_50}

codeblock_50 [label="code block 100-102"]


codeblock_50 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return u.export(p, new)"]
block_42 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="










"]

}
