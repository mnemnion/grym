digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 190"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-160"]


section_1 -> { header_2 prose_3 codeblock_4 codeblock_5 section_6 section_7}
{rank=same; header_2 prose_3 codeblock_4 codeblock_5 section_6 section_7}

header_2 [label="1 : Prose module"]

prose_3 [label="prose"]

codeblock_4 [label="code block 5-22"]

codeblock_5 [label="code block 24-26"]

section_6 [label="section: 28-93"]

section_7 [label="section: 161-190"]


header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Prose module"]
prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Here we need a proper recursive parser.  Eventually.
"]
codeblock_4 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local u = require \"util\"
local s = require (\"status\")()
local epeg = require \"epeg\"
local Csp = epeg.Csp
local Node = require \"node/node\"

local m = require \"grym/morphemes\"
local Link = require \"grym/link\"
local Richtext = require \"grym/richtext\"
local Grammar = require \"node/grammar\"


local Pr, pr = u.inherit(Node)
Pr.id = \"prose\""]
codeblock_5 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s.chatty = false  "]
section_6 -> { header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 codeblock_20 codeblock_21 section_22}
{rank=same; header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 codeblock_20 codeblock_21 section_22}

header_13 [label="2 : Bookend parsing"]

prose_14 [label="prose"]

prose_15 [label="prose"]

prose_16 [label="prose"]

prose_17 [label="prose"]

prose_18 [label="prose"]

prose_19 [label="prose"]

codeblock_20 [label="code block 54-77"]

codeblock_21 [label="code block 79-91"]

section_22 [label="section: 94-160"]


header_13 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Bookend parsing"]
prose_14 -> { raw_24 prespace_25 bold_26 raw_27 prespace_28 bold_29 raw_30 prespace_31 bold_32 raw_33}
{rank=same; raw_24 prespace_25 bold_26 raw_27 prespace_28 bold_29 raw_30 prespace_31 bold_32 raw_33}

raw_24 [label="raw"]

prespace_25 [label="prespace"]

bold_26 [label="bold"]

raw_27 [label="raw"]

prespace_28 [label="prespace"]

bold_29 [label="bold"]

raw_30 [label="raw"]

prespace_31 [label="prespace"]

bold_32 [label="bold"]

raw_33 [label="raw"]


raw_24 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  We need to generate parsers to match sequences of single characters, so
that"]
prespace_25 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
bold_26 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bold"]
raw_27 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
prespace_28 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
bold_29 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bold"]
raw_30 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
prespace_31 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
bold_32 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bold"]
raw_33 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" etc all work correctly.
"]
prose_15 -> { raw_44 link_45 raw_46}
{rank=same; raw_44 link_45 raw_46}

raw_44 [label="raw"]

link_45 [label="link"]

raw_46 [label="raw"]


raw_44 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Bookends are a fun construct borrowed from the "]
link_45 -> { anchortext_48 url_49}
{rank=same; anchortext_48 url_49}

anchortext_48 [label="anchortext"]

url_49 [label="url"]


anchortext_48 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="LPEG manual"]
url_49 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_46 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="]]
model for Lua long strings.  The GGG/Pegylator form of a bookend construct
is 
"]
prose_16 -> { raw_53}
{rank=same; raw_53}

raw_53 [label="raw"]


raw_53 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
~#!peg
    bookend = \"`\":a !\"`\":a pattern  \"`\":a
~#/peg
"]
prose_17 -> { raw_55 prespace_56 literal_57 raw_58 prespace_59 literal_60 raw_61 prespace_62 literal_63 raw_64 prespace_65 literal_66 raw_67}
{rank=same; raw_55 prespace_56 literal_57 raw_58 prespace_59 literal_60 raw_61 prespace_62 literal_63 raw_64 prespace_65 literal_66 raw_67}

raw_55 [label="raw"]

prespace_56 [label="prespace"]

literal_57 [label="literal"]

raw_58 [label="raw"]

prespace_59 [label="prespace"]

literal_60 [label="literal"]

raw_61 [label="raw"]

prespace_62 [label="prespace"]

literal_63 [label="literal"]

raw_64 [label="raw"]

prespace_65 [label="prespace"]

literal_66 [label="literal"]

raw_67 [label="raw"]


raw_55 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The"]
prespace_56 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_57 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="lpeg"]
raw_58 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" engine doesn't model this directly but it's possible to provide
it.  We only need the subset of this where"]
prespace_59 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_60 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a"]
raw_61 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is unique, that is,"]
prespace_62 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_63 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pattern"]
raw_64 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
does not contain"]
prespace_65 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_66 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bookend"]
raw_67 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" at any level of expansion. 
"]
prose_18 -> { raw_81 prespace_82 bold_83 raw_84}
{rank=same; raw_81 prespace_82 bold_83 raw_84}

raw_81 [label="raw"]

prespace_82 [label="prespace"]

bold_83 [label="bold"]

raw_84 [label="raw"]


raw_81 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
GGG being a specification format needn't respect this limitation.  Orb
does so by design.  It is a simple consquence of the sort of markup we are
using; there is no need to parse"]
prespace_82 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
bold_83 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bold **inside bold** still bold"]
raw_84 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" twice,
and this generalizes to all text styles. 
"]
prose_19 -> { raw_89}
{rank=same; raw_89}

raw_89 [label="raw"]


raw_89 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do have to wire them up so that we don't cross the streams.  Sans macros.
By hand. 

"]
codeblock_20 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function equal_strings(s, i, a, b)
   -- Returns true if a and b are equal.
   -- s and i are not used, provided because expected by Cb.
   return a == b
end

local function bookends(sigil)
  local Cg, C, P, Cmt, Cb = L.Cg, L.C, L.P, L.Cmt, L.Cb
   -- Returns a pair of patterns, _open and _close,
   -- which will match a brace of sigil.
   -- sigil must be a string. 
   local _open = Cg(C(P(sigil)^1), sigil .. \"_init\")
   local _close =  Cmt(C(P(sigil)^1) * Cb(sigil .. \"_init\"), equal_strings)
   return _open, _close
end

local bold_open, bold_close     =  bookends(\"*\")
local italic_open, italic_close =  bookends(\"/\")
local under_open, under_close   =  bookends(\"_\")
local strike_open, strike_close =  bookends(\"-\")
local lit_open, lit_close       =  bookends(\"=\")
local inter_open, inter_close   =  bookends(\"`\")"]
codeblock_21 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Pr.toMarkdown(prose)
   local phrase = \"\"
   for _, node in ipairs(prose) do
      if node.toMarkdown then
        phrase = phrase .. node:toMarkdown()
      elseif node.id == \"raw\" then
         phrase = phrase  .. node:toValue()
      end
   end
   return phrase
end"]
section_22 -> { header_93 prose_94 prose_95 prose_96 codeblock_97}
{rank=same; header_93 prose_94 prose_95 prose_96 codeblock_97}

header_93 [label="3 : prose grammar"]

prose_94 [label="prose"]

prose_95 [label="prose"]

prose_96 [label="prose"]

codeblock_97 [label="code block 105-158"]


header_93 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** prose grammar"]
prose_94 -> { raw_99}
{rank=same; raw_99}

raw_99 [label="raw"]


raw_99 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The Prose module is the first one to use our shiny-new Node module.  Which
finally works the way I intend it to and I'm pretty happy about this. 

"]
prose_95 -> { raw_101}
{rank=same; raw_101}

raw_101 [label="raw"]


raw_101 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Currently, we do a decent job of parsing into links and markup.  It's in 
need of refinement, to be sure:
"]
prose_96 -> { raw_103}
{rank=same; raw_103}

raw_103 [label="raw"]


raw_103 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - [ ] #todo Allow recursive parsing for italic and bold. 
"]
codeblock_97 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local punct = m.punctuation

local function prose_gm(_ENV)
   START \"prose\"

   SUPPRESS (\"anchorboxed\", \"urlboxed\", \"richtext\",
             \"literalwrap\", \"boldwrap\", \"italicwrap\", \"interpolwrap\")

   prose = (V\"link\" + (V\"prespace\" * V\"richtext\") + V\"raw\")^1

   link = m.sel * m.WS * V\"anchorboxed\" * m.WS * V\"urlboxed\" * m.ser
   anchorboxed = m.sel * m.WS * V\"anchortext\" * m.ser
   urlboxed = m.sel * m.WS * V\"url\" * m.WS * m.ser
   anchortext = m.anchor_text
   url = m.url

   richtext = (V\"literalwrap\"
            +  V\"boldwrap\" 
            +  V\"italicwrap\" 
            +  V\"interpolwrap\") * #(m.WS + m.punctuation)
   literalwrap = lit_open * V\"literal\" * lit_close
   literal = (P(1) - lit_close)^1 -- These are not even close to correct
   boldwrap = bold_open * V\"bold\" * bold_close
   bold = (P(1) - bold_close)^1
   italicwrap = italic_open * V\"italic\" * italic_close
   italic = (P(1) - italic_close)^1
   interpolwrap = inter_open * V\"interpolated\" * inter_close
   interpolated = (P(1) - inter_close)^1 -- This may even be true

   -- This is the catch bucket.
   raw = (P(1) - (V\"link\" + (V\"prespace\" * V\"richtext\")))^1

   -- This is another one. 
   prespace = m._
end

local function proseBuild(prose, str)
   return setmetatable(prose, {__index = Pr})
end

local proseMetas = { prose = proseBuild,
                     -- ßprespace = proseBuild,
                     link  = Link }

for k, v in pairs(Richtext) do
  proseMetas[k] = v
end

local parse = Grammar(prose_gm, proseMetas)  

"]
section_7 -> { header_106 prose_107 codeblock_108 codeblock_109}
{rank=same; header_106 prose_107 codeblock_108 codeblock_109}

header_106 [label="2 : Constructor"]

prose_107 [label="prose"]

codeblock_108 [label="code block 165-174"]

codeblock_109 [label="code block 176-178"]


header_106 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Constructor"]
prose_107 -> { raw_111 prespace_112 literal_113 raw_114}
{rank=same; raw_111 prespace_112 literal_113 raw_114}

raw_111 [label="raw"]

prespace_112 [label="prespace"]

literal_113 [label="literal"]

raw_114 [label="raw"]


raw_111 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

- [ ] #todo smuggle in that offset in"]
prespace_112 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_113 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="parse"]
raw_114 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_108 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Prose, block)
    local phrase = \"\\n\"
    for _,l in ipairs(block.lines) do
      phrase = phrase .. l .. \"\\n\"
    end
    local prose = parse(phrase, 0) 
    return prose
end"]
codeblock_109 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return u.export(pr, new)"]

}
