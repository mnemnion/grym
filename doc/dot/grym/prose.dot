digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 150"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-120"]


section_1 -> { header_2 block_3 codeblock_4 codeblock_5 section_6 section_7}
{rank=same; header_2 block_3 codeblock_4 codeblock_5 section_6 section_7}

header_2 [label="1 : Prose module"]

block_3 [label="block 1-4"]

codeblock_4 [label="code block 5-24"]

codeblock_5 [label="code block 26-28"]

section_6 [label="section: 30-94"]

section_7 [label="section: 121-150"]


header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_3 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Here we need a proper recursive parser.  Eventually.
"]
codeblock_4 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local u = require \"util\"
local s = require (\"status\")()
local epnf = require \"peg/epnf\"
local epeg = require \"peg/epeg\"
local Csp = epeg.Csp
local Node = require \"node/node\"

local m = require \"grym/morphemes\"

local Link = require \"grym/link\"
assert(type(Link) == 'function')
local Grammar = require \"node/grammar\"


local Pr, pr = u.inherit(Node)
Pr.id = \"prose\""]
codeblock_5 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s.chatty = false  "]
section_6 -> { header_12 block_13 block_14 block_15 block_16 block_17 block_18 codeblock_19 codeblock_20 section_21}
{rank=same; header_12 block_13 block_14 block_15 block_16 block_17 block_18 codeblock_19 codeblock_20 section_21}

header_12 [label="2 : Bookend parsing"]

block_13 [label="block 30-34"]

block_14 [label="block 35-38"]

block_15 [label="block 39-42"]

block_16 [label="block 43-46"]

block_17 [label="block 47-51"]

block_18 [label="block 52-55"]

codeblock_19 [label="code block 56-78"]

codeblock_20 [label="code block 80-92"]

section_21 [label="section: 95-120"]


header_12 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_13 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  We need to generate parsers to match sequences of single characters, so
that *bold*, **bold**, ***bold*** etc all work correctly.
"]
block_14 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Bookends are a fun construct borrowed from the [[LPEG manual][httk://]]]]
model for Lua long strings.  The GGG/Pegylator form of a bookend construct
is 
"]
block_15 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~#!peg
    bookend = \"`\":a !\"`\":a pattern  \"`\":a
~#/peg
"]
block_16 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The =lpeg= engine doesn't model this directly but it's possible to provide
it.  We only need the subset of this where =a= is unique, that is, =pattern=
does not contain =bookend= at any level of expansion. 
"]
block_17 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="GGG being a specification format needn't respect this limitation.  Orb
does so by design.  It is a simple consquence of the sort of markup we are
using; there is no need to parse ***bold **inside bold** still bold*** twice,
and this generalizes to all text styles. 
"]
block_18 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="We do have to wire them up so that we don't cross the streams.  Sans macros.
By hand. 

"]
codeblock_19 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function equal_strings(s, i, a, b)
   -- Returns true if a and b are equal.
   -- s and i are not used, provided because expected by Cb.
   return a == b
end

local function bookends(sigil)
  local Cg, C, P, Cmt, Cb = L.Cg, L.C, L.P, L.Cmt, L.Cb
   -- Returns a pair of patterns, _open and _close,
   -- which will match a brace of sigil.
   -- sigil must be a string. 
   local _open = Cg(C(P(sigil)^1), sigil .. \"_init\")
   local _close =  Cmt(C(P(sigil)^1) * Cb(sigil .. \"_init\"), equal_strings)
   return _open, _close
end

local bold_open, bold_close     =  bookends(\"*\")
local italic_open, italic_close =  bookends(\"/\")
local under_open, under_close   =  bookends(\"_\")
local strike_open, strike_close =  bookends(\"-\")
local lit_open, lit_close       =  bookends(\"=\")"]
codeblock_20 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Pr.toMarkdown(prose)
   local phrase = \"\"
   for _, node in ipairs(prose) do
      if node.toMarkdown then
        phrase = phrase .. node:toMarkdown()
      elseif node.id == \"raw\" then
         phrase = phrase  .. node:toValue()
      end
   end
   return phrase
end"]
section_21 -> { header_31 block_32 block_33 codeblock_34}
{rank=same; header_31 block_32 block_33 codeblock_34}

header_31 [label="3 : prose grammar"]

block_32 [label="block 95-99"]

block_33 [label="block 100-101"]

codeblock_34 [label="code block 102-118"]


header_31 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_32 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  The Prose module is the first one to use our shiny-new Node module.  Which
finally works the way I intend it to and I'm pretty happy about this. 
"]
block_33 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="It's pure link-or-raw, but it has everything it needs to be so much more.
"]
codeblock_34 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function prose_gm(_ENV)
   START \"prose\"
   prose = (V\"link\" + V\"raw\")^1
   link = m.link
   raw = (P(1) - m.link)^1
end

local function proseBuild(prose, str)
   return setmetatable(prose, {__index = Pr })
end

local parse = Grammar(prose_gm, { prose = proseBuild,
                                  link  = Link })  

"]
section_7 -> { header_39 block_40 codeblock_41 codeblock_42}
{rank=same; header_39 block_40 codeblock_41 codeblock_42}

header_39 [label="2 : Constructor"]

block_40 [label="block 121-124"]

codeblock_41 [label="code block 125-134"]

codeblock_42 [label="code block 136-138"]


header_39 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_40 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ] #todo smuggle in that offset in =parse=
"]
codeblock_41 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Prose, block)
    local phrase = \"\\n\"
    for _,l in ipairs(block.lines) do
      phrase = phrase .. l .. \"\\n\"
    end
    local prose = parse(phrase, 0) 
    return prose
end"]
codeblock_42 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return u.export(pr, new)"]

}
