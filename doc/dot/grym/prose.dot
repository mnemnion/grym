digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 155"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-125"]


section_1 -> { header_2 prose_3 codeblock_4 codeblock_5 section_6 section_7}
{rank=same; header_2 prose_3 codeblock_4 codeblock_5 section_6 section_7}

header_2 [label="1 : Prose module"]

prose_3 [label="prose"]

codeblock_4 [label="code block 5-23"]

codeblock_5 [label="code block 25-27"]

section_6 [label="section: 29-93"]

section_7 [label="section: 126-155"]


header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Prose module"]
prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Here we need a proper recursive parser.  Eventually.
"]
codeblock_4 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local u = require \"util\"
local s = require (\"status\")()
local epeg = require \"epeg\"
local Csp = epeg.Csp
local Node = require \"node/node\"

local m = require \"grym/morphemes\"

local Link = require \"grym/link\"
assert(type(Link) == 'function')
local Grammar = require \"lib/node/grammar\"


local Pr, pr = u.inherit(Node)
Pr.id = \"prose\""]
codeblock_5 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s.chatty = false  "]
section_6 -> { header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 codeblock_20 codeblock_21 section_22}
{rank=same; header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 codeblock_20 codeblock_21 section_22}

header_13 [label="2 : Bookend parsing"]

prose_14 [label="prose"]

prose_15 [label="prose"]

prose_16 [label="prose"]

prose_17 [label="prose"]

prose_18 [label="prose"]

prose_19 [label="prose"]

codeblock_20 [label="code block 55-77"]

codeblock_21 [label="code block 79-91"]

section_22 [label="section: 94-125"]


header_13 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Bookend parsing"]
prose_14 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  We need to generate parsers to match sequences of single characters, so
that *bold*, **bold**, ***bold*** etc all work correctly.
"]
prose_15 -> { raw_26 link_27 raw_28}
{rank=same; raw_26 link_27 raw_28}

raw_26 [label="raw"]

link_27 [label="link"]

raw_28 [label="raw"]


raw_26 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Bookends are a fun construct borrowed from the "]
link_27 -> { anchortext_30 url_31}
{rank=same; anchortext_30 url_31}

anchortext_30 [label="anchortext"]

url_31 [label="url"]


anchortext_30 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="LPEG manual"]
url_31 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_28 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="]]
model for Lua long strings.  The GGG/Pegylator form of a bookend construct
is 
"]
prose_16 -> { raw_35}
{rank=same; raw_35}

raw_35 [label="raw"]


raw_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
~#!peg
    bookend = \"`\":a !\"`\":a pattern  \"`\":a
~#/peg
"]
prose_17 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The =lpeg= engine doesn't model this directly but it's possible to provide
it.  We only need the subset of this where =a= is unique, that is, =pattern=
does not contain =bookend= at any level of expansion. 
"]
prose_18 -> { raw_39}
{rank=same; raw_39}

raw_39 [label="raw"]


raw_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
GGG being a specification format needn't respect this limitation.  Orb
does so by design.  It is a simple consquence of the sort of markup we are
using; there is no need to parse ***bold **inside bold** still bold*** twice,
and this generalizes to all text styles. 
"]
prose_19 -> { raw_41}
{rank=same; raw_41}

raw_41 [label="raw"]


raw_41 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We do have to wire them up so that we don't cross the streams.  Sans macros.
By hand. 

"]
codeblock_20 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function equal_strings(s, i, a, b)
   -- Returns true if a and b are equal.
   -- s and i are not used, provided because expected by Cb.
   return a == b
end

local function bookends(sigil)
  local Cg, C, P, Cmt, Cb = L.Cg, L.C, L.P, L.Cmt, L.Cb
   -- Returns a pair of patterns, _open and _close,
   -- which will match a brace of sigil.
   -- sigil must be a string. 
   local _open = Cg(C(P(sigil)^1), sigil .. \"_init\")
   local _close =  Cmt(C(P(sigil)^1) * Cb(sigil .. \"_init\"), equal_strings)
   return _open, _close
end

local bold_open, bold_close     =  bookends(\"*\")
local italic_open, italic_close =  bookends(\"/\")
local under_open, under_close   =  bookends(\"_\")
local strike_open, strike_close =  bookends(\"-\")
local lit_open, lit_close       =  bookends(\"=\")"]
codeblock_21 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Pr.toMarkdown(prose)
   local phrase = \"\"
   for _, node in ipairs(prose) do
      if node.toMarkdown then
        phrase = phrase .. node:toMarkdown()
      elseif node.id == \"raw\" then
         phrase = phrase  .. node:toValue()
      end
   end
   return phrase
end"]
section_22 -> { header_45 prose_46 prose_47 codeblock_48}
{rank=same; header_45 prose_46 prose_47 codeblock_48}

header_45 [label="3 : prose grammar"]

prose_46 [label="prose"]

prose_47 [label="prose"]

codeblock_48 [label="code block 101-123"]


header_45 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** prose grammar"]
prose_46 -> { raw_50}
{rank=same; raw_50}

raw_50 [label="raw"]


raw_50 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The Prose module is the first one to use our shiny-new Node module.  Which
finally works the way I intend it to and I'm pretty happy about this. 
"]
prose_47 -> { raw_52}
{rank=same; raw_52}

raw_52 [label="raw"]


raw_52 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's pure link-or-raw, but it has everything it needs to be so much more.
"]
codeblock_48 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function prose_gm(_ENV)
   START \"prose\"
   SUPPRESS (\"anchorboxed\", \"urlboxed\")
   prose = (V\"link\" + V\"raw\")^1
   link = m.sel * m.WS * V\"anchorboxed\" * m.WS * V\"urlboxed\" * m.ser
   anchorboxed = m.sel * m.WS * V\"anchortext\" * m.WS * m.ser
   urlboxed = m.sel * m.WS * V\"url\" * m.WS * m.ser
   anchortext = m.anchor_text
   url = m.url

   raw = (P(1) - m.link)^1
end

local function proseBuild(prose, str)
   return setmetatable(prose, {__index = Pr })
end

local parse = Grammar(prose_gm, { prose = proseBuild,
                                  link  = Link })  

"]
section_7 -> { header_55 prose_56 codeblock_57 codeblock_58}
{rank=same; header_55 prose_56 codeblock_57 codeblock_58}

header_55 [label="2 : Constructor"]

prose_56 [label="prose"]

codeblock_57 [label="code block 130-139"]

codeblock_58 [label="code block 141-143"]


header_55 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Constructor"]
prose_56 -> { raw_60}
{rank=same; raw_60}

raw_60 [label="raw"]


raw_60 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

- [ ] #todo smuggle in that offset in =parse=
"]
codeblock_57 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Prose, block)
    local phrase = \"\\n\"
    for _,l in ipairs(block.lines) do
      phrase = phrase .. l .. \"\\n\"
    end
    local prose = parse(phrase, 0) 
    return prose
end"]
codeblock_58 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return u.export(pr, new)"]

}
