digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 34"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-34"]


section_1 -> { header_2 prose_3 codeblock_4}
{rank=same; header_2 prose_3 codeblock_4}

header_2 [label="1 : Hashtag module"]

prose_3 [label="prose"]

codeblock_4 [label="code block 3-33"]


header_2 -> leaf_5
leaf_5  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_3 -> { raw_6}
{rank=same; raw_6}

raw_6 [label="raw"]


raw_6 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_4 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local Node = require \"peg/node\"
local u = require \"../lib/util\"

local m = require \"grym/morphemes\"

local H, h = u.inherit(Node)

function h.matchHashtag(line)
    local hashlen = L.match(L.C(m.hashtag), line)
    if hashlen then
        return hashlen
    else
        return \"\"
        -- This is what it /should/ do, but
        -- u.freeze(\"Hashtag constructor did not match m.hashtag rule on:  \" .. line)
    end
end

local function new(Hashtag, line)
    local hashtag = setmetatable({}, H)
    hashtag.id = \"hashtag\"
    hashtag.val = h.matchHashtag(line):sub(2, -1)

    return hashtag
end

return u.export(h, new)"]

}
