digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 158"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-15"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5}
{rank=same; header_2 prose_3 prose_4 section_5}

header_2 [label="1 : Code Block Module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 16-78"]


// END RANK section_1

header_2 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Code Block Module"]
// END RANK header_2

prose_3 -> { raw_7}
{rank=same; raw_7}

raw_7 [label="raw"]


// END RANK prose_3

raw_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


   Code blocks are the motivating object for Grimoire.  Perforce they
 will do a lot of the heavy lifting.
"]
// END RANK raw_7

prose_4 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


// END RANK prose_4

raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 From the compiler's perspective, Code, Structure, and Prose are the
 three basic genres of Grimmorian text.  In this implementation,
 you may think of Code as a clade diverged early from both Structure
 and Prose, with some later convergence toward the former.

 Specifically, Structure and Prose will actually inherit from Block, and
 Code block, name notwithstanding, merely imitates some behaviours.

"]
// END RANK raw_9

section_5 -> { header_11 prose_12 prose_13 codeblock_14 prose_15 codeblock_16 section_17}
{rank=same; header_11 prose_12 prose_13 codeblock_14 prose_15 codeblock_16 section_17}

header_11 [label="2 : Fields"]

prose_12 [label="prose"]

prose_13 [label="prose"]

codeblock_14 [label="code block 36-49"]

prose_15 [label="prose"]

codeblock_16 [label="code block 54-77"]

section_17 [label="section: 79-158"]


// END RANK section_5

header_11 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" ** Fields"]
// END RANK header_11

prose_12 -> { raw_19}
{rank=same; raw_19}

raw_19 [label="raw"]


// END RANK prose_12

raw_19 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


   Codeblock inherits from Node directly, and is born with these
 additional fields:
"]
// END RANK raw_19

prose_13 -> { raw_21}
{rank=same; raw_21}

raw_21 [label="raw"]


// END RANK prose_13

raw_21 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - level  :  The number of !s, which is the number of / needed to close
             the block.
 - header :  The line after # and at least one !.
 - footer :  The line closing the block. Optional, as a code block may
             end a file without a closing line.
 - lines  :  Array containing the lines of code.  Header and footer
             are not included.
 - line_first :  The first (header) line of the block.
 - line_last  :  The closing line of the block. Note that code blocks also
                 collect blank lines and may have a clinging tag.

 To be added:
 - [ ] lang : The language, derived from the header line.
"]
// END RANK raw_21

codeblock_14 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local Node = require \"espalier/node\"

local m = require \"Orbit/morphemes\"

local CB = setmetatable({}, Node)
CB.id = \"codeblock\"

CB.__index = CB

CB.__tostring = function() return \"codeblock\" end"]
// END RANK codeblock_14

prose_15 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


// END RANK prose_15

raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Adds a .val field which is the union of all lines.
 Useful in visualization.
"]
// END RANK raw_24

codeblock_16 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function CB.toValue(codeblock)
    codeblock.val = \"\"
    for _,v in ipairs(codeblock.lines) do
        codeblock.val = codeblock.val .. v .. \"\\n\"
    end

    return codeblock.val
end

function CB.toMarkdown(codeblock)
  -- hardcode lua
  local lang = codeblock.lang or \"orbdefault\"
  return \"```\" .. lang .. \"\\n\"
         .. codeblock:toValue() .. \"```\\n\"
end

function CB.dotLabel(codeblock)
    return \"code block \" .. tostring(codeblock.line_first)
        .. \"-\" .. tostring(codeblock.line_last)
end

local cb = {}"]
// END RANK codeblock_16

section_17 -> { header_27 prose_28 codeblock_29 prose_30 codeblock_31 prose_32 prose_33 codeblock_34 prose_35 codeblock_36}
{rank=same; header_27 prose_28 codeblock_29 prose_30 codeblock_31 prose_32 prose_33 codeblock_34 prose_35 codeblock_36}

header_27 [label="3 : asserts"]

prose_28 [label="prose"]

codeblock_29 [label="code block 81-86"]

prose_30 [label="prose"]

codeblock_31 [label="code block 99-110"]

prose_32 [label="prose"]

prose_33 [label="prose"]

codeblock_34 [label="code block 124-135"]

prose_35 [label="prose"]

codeblock_36 [label="code block 139-157"]


// END RANK section_17

header_27 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** asserts"]
// END RANK header_27

prose_28 -> { raw_38}
{rank=same; raw_38}

raw_38 [label="raw"]


// END RANK prose_28

raw_38 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_38

codeblock_29 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function CB.check(codeblock)
  assert(codeblock.line_first)
  assert(codeblock.line_last)
end"]
// END RANK codeblock_29

prose_30 -> { raw_41}
{rank=same; raw_41}

raw_41 [label="raw"]


// END RANK prose_30

raw_41 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - #args
   - str :  The string to match against.

 - #return 3
   - boolean :  For header match
   - number  :  Level of header
   - string  :  Header stripped of left whitespace and tars

"]
// END RANK raw_41

codeblock_31 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function cb.matchHead(str)
    if str ~= \"\" and L.match(m.codestart, str) then
        local trimmed = str:sub(L.match(m.WS * m.hax, str))
        local level = L.match(m.zaps, trimmed) - 1
        local bareline = trimmed:sub(L.match(m.zaps, trimmed))
        return true, level, bareline
    else
        return false, 0, \"\"
    end
end"]
// END RANK codeblock_31

prose_32 -> { raw_44}
{rank=same; raw_44}

raw_44 [label="raw"]


// END RANK prose_32

raw_44 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Matches a code block footer line.
"]
// END RANK raw_44

prose_33 -> { raw_46}
{rank=same; raw_46}

raw_46 [label="raw"]


// END RANK prose_33

raw_46 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - #args
   - str   :  The string to match against.
   - level :  Required level for a match.

 - #return 3
   - boolean :  For footer match
   - number  :  Level of header
   - string  :  Header stripped of left whitespace and tars

"]
// END RANK raw_46

codeblock_34 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function cb.matchFoot(str)
    if str ~= \"\" and L.match(m.codefinish, str) then
        local trimmed = str:sub(L.match(m.WS * m.hax    , str))
        local level = L.match(m.fass, trimmed) - 1
        local bareline = trimmed:sub(L.match(m.fass, trimmed))
        return true, level, bareline
    else
        return false, 0, \"\"
    end
end"]
// END RANK codeblock_34

prose_35 -> { raw_49}
{rank=same; raw_49}

raw_49 [label="raw"]


// END RANK prose_35

raw_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Constructor
"]
// END RANK raw_49

codeblock_36 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Codeblock, level, headline, linum)
    local codeblock = setmetatable({}, CB)
    codeblock.level = level
    codeblock.header = headline
    codeblock.lang = L.match(L.C(m.symbol), headline) or \"\"
    codeblock.footer = \"\"
    codeblock.line_first = linum
    codeblock.lines = {}

    return codeblock
end


cb.__call = new
cb.__index = cb

return setmetatable({}, cb)"]
// END RANK codeblock_36


}
