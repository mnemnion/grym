digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 157"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-15"]


section_1 -> { header_2 prose_3 prose_4 section_5}
{rank=same; header_2 prose_3 prose_4 section_5}

header_2 [label="1 : Code Block Module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 16-77"]


header_2 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_3 -> { raw_7}
{rank=same; raw_7}

raw_7 [label="raw"]


raw_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


   Code blocks are the motivating object for Grimoire.  Perforce they
 will do a lot of the heavy lifting.
"]
prose_4 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 From the compiler's perspective, Code, Structure, and Prose are the
 three basic genres of Grimmorian text.  In this implementation,
 you may think of Code as a clade diverged early from both Structure
 and Prose, with some later convergence toward the former. 
 
 Specifically, Structure and Prose will actually inherit from Block, and
 Code block, name notwithstanding, merely imitates some behaviours.
 
"]
section_5 -> { header_11 prose_12 prose_13 codeblock_14 prose_15 codeblock_16 section_17}
{rank=same; header_11 prose_12 prose_13 codeblock_14 prose_15 codeblock_16 section_17}

header_11 [label="2 : Fields"]

prose_12 [label="prose"]

prose_13 [label="prose"]

codeblock_14 [label="code block 36-49"]

prose_15 [label="prose"]

codeblock_16 [label="code block 54-76"]

section_17 [label="section: 78-157"]


header_11 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_12 -> { raw_19}
{rank=same; raw_19}

raw_19 [label="raw"]


raw_19 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


   Codeblock inherits from Node directly, and is born with these 
 additional fields:
"]
prose_13 -> { raw_21}
{rank=same; raw_21}

raw_21 [label="raw"]


raw_21 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - level  :  The number of !s, which is the number of / needed to close
             the block.
 - header :  The line after # and at least one !.
 - footer :  The line closing the block. Optional, as a code block may
             end a file without a closing line.
 - lines  :  Array containing the lines of code.  Header and footer
             are not included.
 - line_first :  The first (header) line of the block. 
 - line_last  :  The closing line of the block. Note that code blocks also
                 collect blank lines and may have a clinging tag. 
 
 To be added:
 - [ ] lang : The language, derived from the header line.
"]
codeblock_14 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local Node = require \"peg/node\"

local m = require \"grym/morphemes\"

local CB = setmetatable({}, Node)
CB.id = \"codeblock\"

CB.__index = CB

CB.__tostring = function() return \"codeblock\" end"]
prose_15 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Adds a .val field which is the union of all lines.
 Useful in visualization. 
"]
codeblock_16 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function CB.toValue(codeblock)
    codeblock.val = \"\"
    for _,v in ipairs(codeblock.lines) do
        codeblock.val = codeblock.val .. v .. \"\\n\"
    end

    return codeblock.val
end

function CB.toMarkdown(codeblock)
  -- hardcode lua
  return \"```\" .. codeblock.lang .. \"\\n\" 
         .. codeblock:toValue() .. \"```\\n\"
end

function CB.dotLabel(codeblock)
    return \"code block \" .. tostring(codeblock.line_first)
        .. \"-\" .. tostring(codeblock.line_last)
end

local cb = {}"]
section_17 -> { header_27 prose_28 codeblock_29 prose_30 codeblock_31 prose_32 prose_33 codeblock_34 prose_35 codeblock_36}
{rank=same; header_27 prose_28 codeblock_29 prose_30 codeblock_31 prose_32 prose_33 codeblock_34 prose_35 codeblock_36}

header_27 [label="3 : asserts"]

prose_28 [label="prose"]

codeblock_29 [label="code block 80-85"]

prose_30 [label="prose"]

codeblock_31 [label="code block 98-109"]

prose_32 [label="prose"]

prose_33 [label="prose"]

codeblock_34 [label="code block 123-134"]

prose_35 [label="prose"]

codeblock_36 [label="code block 138-156"]


header_27 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_28 -> { raw_38}
{rank=same; raw_38}

raw_38 [label="raw"]


raw_38 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_29 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function CB.check(codeblock)
  assert(codeblock.line_first)
  assert(codeblock.line_last)
end"]
prose_30 -> { raw_41}
{rank=same; raw_41}

raw_41 [label="raw"]


raw_41 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - #args
   - str :  The string to match against.
 
 - #return 3
   - boolean :  For header match
   - number  :  Level of header
   - string  :  Header stripped of left whitespace and tars

"]
codeblock_31 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function cb.matchHead(str)
    if str ~= \"\" and L.match(m.codestart, str) then
        local trimmed = str:sub(L.match(m.WS * m.hax, str))
        local level = L.match(m.zaps, trimmed) - 1
        local bareline = trimmed:sub(L.match(m.zaps, trimmed))
        return true, level, bareline
    else 
        return false, 0, \"\"
    end
end"]
prose_32 -> { raw_44}
{rank=same; raw_44}

raw_44 [label="raw"]


raw_44 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Matches a code block footer line.
"]
prose_33 -> { raw_46}
{rank=same; raw_46}

raw_46 [label="raw"]


raw_46 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - #args
   - str   :  The string to match against.
   - level :  Required level for a match.
 
 - #return 3
   - boolean :  For footer match
   - number  :  Level of header
   - string  :  Header stripped of left whitespace and tars

"]
codeblock_34 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function cb.matchFoot(str)
    if str ~= \"\" and L.match(m.codefinish, str) then
        local trimmed = str:sub(L.match(m.WS * m.hax    , str))
        local level = L.match(m.fass, trimmed) - 1
        local bareline = trimmed:sub(L.match(m.fass, trimmed))
        return true, level, bareline
    else 
        return false, 0, \"\"
    end
end"]
prose_35 -> { raw_49}
{rank=same; raw_49}

raw_49 [label="raw"]


raw_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Constructor
"]
codeblock_36 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Codeblock, level, headline, linum)
    local codeblock = setmetatable({}, CB)
    codeblock.level = level
    codeblock.header = headline
    codeblock.lang = L.match(L.C(m.symbol), headline) or \"\"
    codeblock.footer = \"\"
    codeblock.line_first = linum
    codeblock.lines = {}

    return codeblock
end


cb.__call = new
cb.__index = cb

return setmetatable({}, cb)"]

}
