digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 186"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-158"]


section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7}

header_2 [label="1 : Morphemes"]

prose_3 [label="prose"]

section_4 [label="section: 6-25"]

section_5 [label="section: 26-94"]

section_6 [label="section: 105-134"]

section_7 [label="section: 159-172"]


header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Morphemes"]
prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 Morphemes are the basic structures of any language.

"]
section_4 -> { header_11 prose_12 codeblock_13}
{rank=same; header_11 prose_12 codeblock_13}

header_11 [label="3 : Includes"]

prose_12 [label="prose"]

codeblock_13 [label="code block 8-24"]


header_11 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    *** Includes"]
prose_12 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local lpeg = require \"lpeg\"
local epeg = require \"epeg\"

local match = lpeg.match -- match a pattern against a string
local P = lpeg.P -- match a string literally
local S = lpeg.S  -- match anything in a set
local R = epeg.R  -- match anything in a range
local B = lpeg.B  -- match iff the pattern precedes the use of B
local C = lpeg.C  -- captures a match
local Csp = epeg.Csp -- captures start and end position of match
local Cg = lpeg.Cg -- named capture group (for **balanced highlighting**)
local Cb = lpeg.Cb -- Mysterious! TODO make not mysterious
local Cmt = lpeg.Cmt -- match-time capture
local Ct = lpeg.Ct -- a table with all captures from the pattern
local V = lpeg.V -- create a variable within a grammar"]
section_5 -> { header_18 prose_19 codeblock_20 section_21 section_22 section_23 section_24}
{rank=same; header_18 prose_19 codeblock_20 section_21 section_22 section_23 section_24}

header_18 [label="2 : Morpheme module"]

prose_19 [label="prose"]

codeblock_20 [label="code block 28-30"]

section_21 [label="section: 32-53"]

section_22 [label="section: 54-88"]

section_23 [label="section: 89-94"]

section_24 [label="section: 95-104"]


header_18 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  ** Morpheme module"]
prose_19 -> { raw_26}
{rank=same; raw_26}

raw_26 [label="raw"]


raw_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_20 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local m = {}"]
section_21 -> { header_29 prose_30 codeblock_31}
{rank=same; header_29 prose_30 codeblock_31}

header_29 [label="3 : Fundamentals"]

prose_30 [label="prose"]

codeblock_31 [label="code block 37-51"]


header_29 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    *** Fundamentals"]
prose_30 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  These sequences are designed to be fundamental to several languages, Clu
in particular.
"]
codeblock_31 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.letter = R\"AZ\" + R\"az\"

m.digit = R\"09\"

m.number = m.digit^1 -- We will improve this

m._ = P\" \"

m.WS = P\" \"^0

m.NL = P\"\\n\"

m.__TAB__ = P\"\\t\" -- First thing we do is eliminate these"]
section_22 -> { header_36 prose_37 codeblock_38}
{rank=same; header_36 prose_37 codeblock_38}

header_36 [label="3 : Hoon layer"]

prose_37 [label="prose"]

codeblock_38 [label="code block 60-87"]


header_36 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    *** Hoon layer"]
prose_37 -> { raw_40}
{rank=same; raw_40}

raw_40 [label="raw"]


raw_40 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  I find mixing literals and token-likes in with variables distracting.
We use the Hoon names for ASCII tier glyphs.  It's one of the better urbit
innovations.
"]
codeblock_38 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.tar = P\"*\"
m.tars = P\"*\"^1
m.hax = P\"#\"
m.pat = P\"@\"
m.hep = P\"-\"
m.bar = P\"|\"

m.fas = P\"/\"
m.fass = P\"/\"^1


m.wut = P\"?\"
m.zap = P\"!\"
m.zaps = P\"!\"^1
m.dot = P\".\"
m.col = P\":\"
m.sem = P\";\"

m.sel = P\"[\"
m.ser = P\"]\"
m.pal = P\"(\"
m.par = P\")\"
m.kel = P\"{\"
m.ker = P\"}\"
m.gal = P\"<\"
m.gar = P\">\""]
section_23 -> { header_43 prose_44 codeblock_45}
{rank=same; header_43 prose_44 codeblock_45}

header_43 [label="3 : Sets"]

prose_44 [label="prose"]

codeblock_45 [label="code block 91-93"]


header_43 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Sets"]
prose_44 -> { raw_47}
{rank=same; raw_47}

raw_47 [label="raw"]


raw_47 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_45 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.punctuation = m.zap + m.wut + m.dot + m.col + m.sem"]
section_24 -> { header_50 prose_51 codeblock_52}
{rank=same; header_50 prose_51 codeblock_52}

header_50 [label="3 : Compounds"]

prose_51 [label="prose"]

codeblock_52 [label="code block 97-102"]


header_50 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Compounds"]
prose_51 -> { raw_54}
{rank=same; raw_54}

raw_54 [label="raw"]


raw_54 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_52 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.symbol = m.letter * (m.letter + m.digit + m.hep + m.zap + m.wut)^0

m.hashtag = m.hax * m.symbol
m.handle = m.pat * m.symbol"]
section_6 -> { header_57 prose_58 section_59 section_60 section_61}
{rank=same; header_57 prose_58 section_59 section_60 section_61}

header_57 [label="2 : Lines"]

prose_58 [label="prose"]

section_59 [label="section: 112-122"]

section_60 [label="section: 123-134"]

section_61 [label="section: 135-158"]


header_57 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Lines"]
prose_58 -> { raw_63}
{rank=same; raw_63}

raw_63 [label="raw"]


raw_63 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  These patterns are used in line detection.  Grimoire is designed such that
the first characters of a line are a reliable guide to the substance of what
is to follow. 

"]
section_59 -> { header_65 prose_66 codeblock_67}
{rank=same; header_65 prose_66 codeblock_67}

header_65 [label="3 : Tagline"]

prose_66 [label="prose"]

codeblock_67 [label="code block 116-120"]


header_65 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Tagline"]
prose_66 -> { raw_69}
{rank=same; raw_69}

raw_69 [label="raw"]


raw_69 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Taglines begin with hashtags, which are system directives.
"]
codeblock_67 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.tagline_hash_p = #(m.WS * m.hax - (m.hax * m._))
m.tagline_handle_p = #(m.WS * m.pat - (m.pat * m._))
m.tagline_p = m.tagline_hash_p + m.tagline_hash_p"]
section_60 -> { header_72 prose_73 codeblock_74}
{rank=same; header_72 prose_73 codeblock_74}

header_72 [label="3 : Listline "]

prose_73 [label="prose"]

codeblock_74 [label="code block 128-132"]


header_72 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Listline "]
prose_73 -> { raw_76}
{rank=same; raw_76}

raw_76 [label="raw"]


raw_76 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Listlines are blocked into lists, our YAML-inspired arcical data
structure. 
"]
codeblock_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.listline_base_p = #(m.WS * m.hep * m._)
m.listline_num_p = #(m.WS * m.digit^1 * m.dot)
m.listline_p = m.listline_base_p + m.listline_num_p"]
section_61 -> { header_79 prose_80 prose_81 codeblock_82 prose_83}
{rank=same; header_79 prose_80 prose_81 codeblock_82 prose_83}

header_79 [label="3 : Tableline"]

prose_80 [label="prose"]

prose_81 [label="prose"]

codeblock_82 [label="code block 144-154"]

prose_83 [label="prose"]


header_79 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Tableline"]
prose_80 -> { raw_85 prespace_86 literal_87 raw_88}
{rank=same; raw_85 prespace_86 literal_87 raw_88}

raw_85 [label="raw"]

prespace_86 [label="prespace"]

literal_87 [label="literal"]

raw_88 [label="raw"]


raw_85 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A table, our matrix data structure, is delineated by a"]
prespace_86 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
literal_87 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="|"]
raw_88 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  These
are blocked by whitespace in the familiar way. 
"]
prose_81 -> { raw_93}
{rank=same; raw_93}

raw_93 [label="raw"]


raw_93 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tables, and lists for that matter, will support leading handles at 
some point.  I'm leaning towards hashtags behaving differently in that
respect.
"]
codeblock_82 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.tableline_p = #(m.WS * m.bar)

m.codestart_p = #(m.WS * m.hax * m.zaps)
m.codefinish_p = #(m.WS * m.hax * m.fass)

m.codestart = m.WS * m.hax * m.zaps * P(1)^1
m.codefinish = m.WS * m.hax * m.fass * P(1)^1

m.header = m.WS * m.tars * m._ * P(1)^1 "]
prose_83 -> { raw_96}
{rank=same; raw_96}

raw_96 [label="raw"]


raw_96 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 The symbol rule will be made less restrictive eventually. 

"]
section_7 -> { header_98 prose_99 codeblock_100 section_101}
{rank=same; header_98 prose_99 codeblock_100 section_101}

header_98 [label="2 : Structures"]

prose_99 [label="prose"]

codeblock_100 [label="code block 164-170"]

section_101 [label="section: 173-186"]


header_98 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Structures"]
prose_99 -> { raw_103}
{rank=same; raw_103}

raw_103 [label="raw"]


raw_103 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  These will ultimately need to be propertly recursive.  Prose in particular
has the inner markups as a mutual loop that always advances. 
"]
codeblock_100 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- This is definitely not right at all
m.url = (m.letter + m.dot) * (m.symbol + m.dot + m.fas + m.col)^0 - m.ser

m.prose = (m.symbol + m._)^1 -- Or this
m.anchor_text = m.prose - m.ser -- accurate"]
section_101 -> { header_106 prose_107 codeblock_108 codeblock_109}
{rank=same; header_106 prose_107 codeblock_108 codeblock_109}

header_106 [label="3 : Links"]

prose_107 [label="prose"]

codeblock_108 [label="code block 175-180"]

codeblock_109 [label="code block 183-185"]


header_106 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Links"]
prose_107 -> { raw_111}
{rank=same; raw_111}

raw_111 [label="raw"]


raw_111 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_108 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.url_link = m.sel * m.url * m.ser
m.anchor_link = m.sel * m.anchor_text * m.ser
m.link =  (m.sel * m.anchor_link * m.url_link * m.ser)
       +  (m.sel * m.url_link * m.ser)"]
codeblock_109 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return m"]

}
