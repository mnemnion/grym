digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 173"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-147"]


section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7}

header_2 [label="1 : Morphemes"]

prose_3 [label="prose"]

section_4 [label="section: 6-26"]

section_5 [label="section: 27-83"]

section_6 [label="section: 94-123"]

section_7 [label="section: 148-160"]


prose_3 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Morphemes are the basic structures of any language.

"]
section_4 -> { header_9 prose_10 codeblock_11}
{rank=same; header_9 prose_10 codeblock_11}

header_9 [label="3 : Includes"]

prose_10 [label="prose"]

codeblock_11 [label="code block 8-25"]


prose_10 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_11 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local lpeg = require \"lpeg\"
local epeg = require \"../peg/epeg\"
local epnf = require \"../peg/epnf\"

local match = lpeg.match -- match a pattern against a string
local P = lpeg.P -- match a string literally
local S = lpeg.S  -- match anything in a set
local R = epeg.R  -- match anything in a range
local B = lpeg.B  -- match iff the pattern precedes the use of B
local C = lpeg.C  -- captures a match
local Csp = epeg.Csp -- captures start and end position of match
local Cg = lpeg.Cg -- named capture group (for **balanced highlighting**)
local Cb = lpeg.Cb -- Mysterious! TODO make not mysterious
local Cmt = lpeg.Cmt -- match-time capture
local Ct = lpeg.Ct -- a table with all captures from the pattern
local V = lpeg.V -- create a variable within a grammar"]
section_5 -> { header_14 prose_15 codeblock_16 section_17 section_18 section_19}
{rank=same; header_14 prose_15 codeblock_16 section_17 section_18 section_19}

header_14 [label="2 : Morpheme module"]

prose_15 [label="prose"]

codeblock_16 [label="code block 29-31"]

section_17 [label="section: 33-52"]

section_18 [label="section: 53-83"]

section_19 [label="section: 84-93"]


prose_15 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_16 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local m = {}"]
section_17 -> { header_22 prose_23 codeblock_24}
{rank=same; header_22 prose_23 codeblock_24}

header_22 [label="3 : Fundamentals"]

prose_23 [label="prose"]

codeblock_24 [label="code block 38-50"]


prose_23 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  These sequences are designed to be fundamental to several languages, Clu
in particular.
"]
codeblock_24 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.letter = R\"AZ\" + R\"az\"

m.digit = R\"09\"

m._ = P\" \"

m.WS = m._^0

m.NL = P\"\\n\"

m.__TAB__ = P\"\\t\" -- First thing we do is eliminate these"]
section_18 -> { header_27 prose_28 codeblock_29}
{rank=same; header_27 prose_28 codeblock_29}

header_27 [label="3 : Hoon layer"]

prose_28 [label="prose"]

codeblock_29 [label="code block 59-82"]


prose_28 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  I find mixing literals and token-likes in with variables distracting.
We use the Hoon names for ASCII tier glyphs.  It's one of the better urbit
innovations.
"]
codeblock_29 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.tar = P\"*\"
m.tars = P\"*\"^1
m.hax = P\"#\"
m.pat = P\"@\"
m.hep = P\"-\"
m.bar = P\"|\"
m.zap = P\"!\"
m.wut = P\"?\"
m.zaps = P\"!\"^1
m.fas = P\"/\"
m.fass = P\"/\"^1
m.dot = P\".\"
m.col = P\":\"

m.sel = P\"[\"
m.ser = P\"]\"
m.pal = P\"(\"
m.par = P\")\"
m.kel = P\"{\"
m.ker = P\"}\"
m.gal = P\"<\"
m.gar = P\">\""]
section_19 -> { header_32 prose_33 codeblock_34}
{rank=same; header_32 prose_33 codeblock_34}

header_32 [label="3 : Compounds"]

prose_33 [label="prose"]

codeblock_34 [label="code block 86-91"]


prose_33 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_34 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.symbol = m.letter * (m.letter + m.digit + m.hep + m.zap + m.wut)^0

m.hashtag = m.hax * m.symbol
m.handle = m.pat * m.symbol"]
section_6 -> { header_37 prose_38 section_39 section_40 section_41}
{rank=same; header_37 prose_38 section_39 section_40 section_41}

header_37 [label="2 : Lines"]

prose_38 [label="prose"]

section_39 [label="section: 101-111"]

section_40 [label="section: 112-123"]

section_41 [label="section: 124-147"]


prose_38 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  These patterns are used in line detection.  Grimoire is designed such that
the first characters of a line are a reliable guide to the substance of what
is to follow. 

"]
section_39 -> { header_43 prose_44 codeblock_45}
{rank=same; header_43 prose_44 codeblock_45}

header_43 [label="3 : Tagline"]

prose_44 [label="prose"]

codeblock_45 [label="code block 105-109"]


prose_44 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Taglines begin with hashtags, which are system directives.
"]
codeblock_45 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.tagline_hash_p = #(m.WS * m.hax - (m.hax * m._))
m.tagline_handle_p = #(m.WS * m.pat - (m.pat * m._))
m.tagline_p = m.tagline_hash_p + m.tagline_hash_p"]
section_40 -> { header_48 prose_49 codeblock_50}
{rank=same; header_48 prose_49 codeblock_50}

header_48 [label="3 : Listline "]

prose_49 [label="prose"]

codeblock_50 [label="code block 117-121"]


prose_49 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Listlines are blocked into lists, our YAML-inspired arcical data
structure. 
"]
codeblock_50 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.listline_base_p = #(m.WS * m.hep * m._)
m.listline_num_p = #(m.WS * m.digit^1 * m.dot)
m.listline_p = m.listline_base_p + m.listline_num_p"]
section_41 -> { header_53 prose_54 prose_55 codeblock_56 prose_57}
{rank=same; header_53 prose_54 prose_55 codeblock_56 prose_57}

header_53 [label="3 : Tableline"]

prose_54 [label="prose"]

prose_55 [label="prose"]

codeblock_56 [label="code block 133-143"]

prose_57 [label="prose"]


prose_54 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  A table, our matrix data structure, is delineated by a =|=.  These
are blocked by whitespace in the familiar way. 
"]
prose_55 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Tables, and lists for that matter, will support leading handles at 
some point.  I'm leaning towards hashtags behaving differently in that
respect.
"]
codeblock_56 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.tableline_p = #(m.WS * m.bar)

m.codestart_p = #(m.WS * m.hax * m.zaps)
m.codefinish_p = #(m.WS * m.hax * m.fass)

m.codestart = m.WS * m.hax * m.zaps * P(1)^1
m.codefinish = m.WS * m.hax * m.fass * P(1)^1

m.header = m.WS * m.tars * m._ * P(1)^1 "]
prose_57 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" The symbol rule will be made less restrictive eventually. 

"]
section_7 -> { header_62 prose_63 codeblock_64 section_65}
{rank=same; header_62 prose_63 codeblock_64 section_65}

header_62 [label="2 : Structures"]

prose_63 [label="prose"]

codeblock_64 [label="code block 153-158"]

section_65 [label="section: 161-173"]


prose_63 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  These will ultimately need to be propertly recursive.  Prose in particular
has the inner markups as a mutual loop that always advances. 
"]
codeblock_64 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.url = m.letter * (m.symbol + m.dot + m.fas + m.col)^0 - m.ser -- This is definitely not right at all

m.prose = (m.symbol + m._)^1 -- Or this
m.link_prose = m.prose - m.ser -- accurate"]
section_65 -> { header_68 prose_69 codeblock_70 codeblock_71}
{rank=same; header_68 prose_69 codeblock_70 codeblock_71}

header_68 [label="3 : Links"]

prose_69 [label="prose"]

codeblock_70 [label="code block 163-167"]

codeblock_71 [label="code block 170-172"]


prose_69 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_70 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.inner_link = m.sel * m.url * m.ser
m.text_link = m.sel * m.link_prose * m.ser
m.link = m.sel * m.text_link * m.inner_link^-1 * m.ser "]
codeblock_71 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return m"]

}
