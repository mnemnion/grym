digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 175"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-149"]


section_1 -> { header_2 block_3 section_4 section_5 section_6 section_7}
{rank=same; header_2 block_3 section_4 section_5 section_6 section_7}

header_2 [label="1 : Morphemes"]

block_3 [label="block 1-149"]

section_4 [label="section: 6-26"]

section_5 [label="section: 27-85"]

section_6 [label="section: 96-125"]

section_7 [label="section: 150-162"]


header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_3 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Morphemes are the basic structures of any language.

"]
section_4 -> { header_10 block_11 codeblock_12}
{rank=same; header_10 block_11 codeblock_12}

header_10 [label="3 : Includes"]

block_11 [label="block 6-7"]

codeblock_12 [label="code block 8-25"]


header_10 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_11 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_12 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local lpeg = require \"lpeg\"
local epeg = require \"../peg/epeg\"
local epnf = require \"../peg/epnf\"

local match = lpeg.match -- match a pattern against a string
local P = lpeg.P -- match a string literally
local S = lpeg.S  -- match anything in a set
local R = epeg.R  -- match anything in a range
local B = lpeg.B  -- match iff the pattern precedes the use of B
local C = lpeg.C  -- captures a match
local Csp = epeg.Csp -- captures start and end position of match
local Cg = lpeg.Cg -- named capture group (for **balanced highlighting**)
local Cb = lpeg.Cb -- Mysterious! TODO make not mysterious
local Cmt = lpeg.Cmt -- match-time capture
local Ct = lpeg.Ct -- a table with all captures from the pattern
local V = lpeg.V -- create a variable within a grammar"]
section_5 -> { header_16 block_17 codeblock_18 section_19 section_20 section_21}
{rank=same; header_16 block_17 codeblock_18 section_19 section_20 section_21}

header_16 [label="2 : Morpheme module"]

block_17 [label="block 27-28"]

codeblock_18 [label="code block 29-31"]

section_19 [label="section: 33-54"]

section_20 [label="section: 55-85"]

section_21 [label="section: 86-95"]


header_16 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_17 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_18 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local m = {}"]
section_19 -> { header_25 block_26 codeblock_27}
{rank=same; header_25 block_26 codeblock_27}

header_25 [label="3 : Fundamentals"]

block_26 [label="block 33-37"]

codeblock_27 [label="code block 38-52"]


header_25 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_26 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  These sequences are designed to be fundamental to several languages, Clu
in particular.
"]
codeblock_27 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.letter = R\"AZ\" + R\"az\"

m.digit = R\"09\"

m.number = m.digit^1 -- We will improve this

m._ = P\" \"

m.WS = m._^0

m.NL = P\"\\n\"

m.__TAB__ = P\"\\t\" -- First thing we do is eliminate these"]
section_20 -> { header_31 block_32 codeblock_33}
{rank=same; header_31 block_32 codeblock_33}

header_31 [label="3 : Hoon layer"]

block_32 [label="block 55-60"]

codeblock_33 [label="code block 61-84"]


header_31 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_32 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  I find mixing literals and token-likes in with variables distracting.
We use the Hoon names for ASCII tier glyphs.  It's one of the better urbit
innovations.
"]
codeblock_33 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.tar = P\"*\"
m.tars = P\"*\"^1
m.hax = P\"#\"
m.pat = P\"@\"
m.hep = P\"-\"
m.bar = P\"|\"
m.zap = P\"!\"
m.wut = P\"?\"
m.zaps = P\"!\"^1
m.fas = P\"/\"
m.fass = P\"/\"^1
m.dot = P\".\"
m.col = P\":\"

m.sel = P\"[\"
m.ser = P\"]\"
m.pal = P\"(\"
m.par = P\")\"
m.kel = P\"{\"
m.ker = P\"}\"
m.gal = P\"<\"
m.gar = P\">\""]
section_21 -> { header_37 block_38 codeblock_39}
{rank=same; header_37 block_38 codeblock_39}

header_37 [label="3 : Compounds"]

block_38 [label="block 86-87"]

codeblock_39 [label="code block 88-93"]


header_37 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_38 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_39 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.symbol = m.letter * (m.letter + m.digit + m.hep + m.zap + m.wut)^0

m.hashtag = m.hax * m.symbol
m.handle = m.pat * m.symbol"]
section_6 -> { header_43 block_44 section_45 section_46 section_47}
{rank=same; header_43 block_44 section_45 section_46 section_47}

header_43 [label="2 : Lines"]

block_44 [label="block 96-125"]

section_45 [label="section: 103-113"]

section_46 [label="section: 114-125"]

section_47 [label="section: 126-149"]


header_43 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_44 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  These patterns are used in line detection.  Grimoire is designed such that
the first characters of a line are a reliable guide to the substance of what
is to follow. 

"]
section_45 -> { header_50 block_51 codeblock_52}
{rank=same; header_50 block_51 codeblock_52}

header_50 [label="3 : Tagline"]

block_51 [label="block 103-106"]

codeblock_52 [label="code block 107-111"]


header_50 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_51 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Taglines begin with hashtags, which are system directives.
"]
codeblock_52 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.tagline_hash_p = #(m.WS * m.hax - (m.hax * m._))
m.tagline_handle_p = #(m.WS * m.pat - (m.pat * m._))
m.tagline_p = m.tagline_hash_p + m.tagline_hash_p"]
section_46 -> { header_56 block_57 codeblock_58}
{rank=same; header_56 block_57 codeblock_58}

header_56 [label="3 : Listline "]

block_57 [label="block 114-118"]

codeblock_58 [label="code block 119-123"]


header_56 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_57 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Listlines are blocked into lists, our YAML-inspired arcical data
structure. 
"]
codeblock_58 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.listline_base_p = #(m.WS * m.hep * m._)
m.listline_num_p = #(m.WS * m.digit^1 * m.dot)
m.listline_p = m.listline_base_p + m.listline_num_p"]
section_47 -> { header_62 block_63 block_64 codeblock_65 block_66}
{rank=same; header_62 block_63 block_64 codeblock_65 block_66}

header_62 [label="3 : Tableline"]

block_63 [label="block 126-130"]

block_64 [label="block 131-134"]

codeblock_65 [label="code block 135-145"]

block_66 [label="block 147-149"]


header_62 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_63 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  A table, our matrix data structure, is delineated by a =|=.  These
are blocked by whitespace in the familiar way. 
"]
block_64 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Tables, and lists for that matter, will support leading handles at 
some point.  I'm leaning towards hashtags behaving differently in that
respect.
"]
codeblock_65 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.tableline_p = #(m.WS * m.bar)

m.codestart_p = #(m.WS * m.hax * m.zaps)
m.codefinish_p = #(m.WS * m.hax * m.fass)

m.codestart = m.WS * m.hax * m.zaps * P(1)^1
m.codefinish = m.WS * m.hax * m.fass * P(1)^1

m.header = m.WS * m.tars * m._ * P(1)^1 "]
block_66 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" The symbol rule will be made less restrictive eventually. 

"]
section_7 -> { header_72 block_73 codeblock_74 section_75}
{rank=same; header_72 block_73 codeblock_74 section_75}

header_72 [label="2 : Structures"]

block_73 [label="block 150-154"]

codeblock_74 [label="code block 155-160"]

section_75 [label="section: 163-175"]


header_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  These will ultimately need to be propertly recursive.  Prose in particular
has the inner markups as a mutual loop that always advances. 
"]
codeblock_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.url = m.letter * (m.symbol + m.dot + m.fas + m.col)^0 - m.ser -- This is definitely not right at all

m.prose = (m.symbol + m._)^1 -- Or this
m.link_prose = m.prose - m.ser -- accurate"]
section_75 -> { header_79 block_80 codeblock_81 codeblock_82}
{rank=same; header_79 block_80 codeblock_81 codeblock_82}

header_79 [label="3 : Links"]

block_80 [label="block 163-164"]

codeblock_81 [label="code block 165-169"]

codeblock_82 [label="code block 172-174"]


header_79 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_80 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_81 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.inner_link = m.sel * m.url * m.ser
m.text_link = m.sel * m.link_prose * m.ser
m.link = m.sel * m.text_link * m.inner_link^-1 * m.ser "]
codeblock_82 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return m"]

}
