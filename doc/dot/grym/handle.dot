digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="33  "]

doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="33  "]

section_1 -> { header_2 block_3 block_4}
{rank=same; header_2 block_3 block_4}

header_2 [label="le  "]
block_3 [label="-3  "]
block_4 [label="33  "]


block_3 -> leaf_5
leaf_5  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]block_4 -> { codeblock_6}
{rank=same; codeblock_6}

codeblock_6 [label="32  "]


codeblock_6 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local Node = require \"peg/node\"
local u = require \"../lib/util\"

local m = require \"grym/morphemes\"

local H, h = u.inherit(Node)

function h.matchHandle(line)
    local handlen = L.match(L.C(m.handle), line)
    if handlen then
        return handlen
    else
        return \"\"
        --u.freeze(\"h.matchHandle fails to match a handle\")
    end
end

local function new(Handle, line)
    local handle = setmetatable({}, H)
    handle.id = \"handle\"
    handle.val = h.matchHandle(line):sub(2, -1)
    return handle
end

return u.export(h, new)
"]
block_4 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
}
