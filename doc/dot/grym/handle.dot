digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 33"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-33"]


section_1 -> { header_2 block_3 block_4}
{rank=same; header_2 block_3 block_4}

header_2 [label="1 : Handle Module"]

block_3 [label="block 1-3"]

block_4 [label="block 4-33"]


block_3 -> { prose_5}
{rank=same; prose_5}

prose_5 [label="prose"]


prose_5 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
block_4 -> { codeblock_7}
{rank=same; codeblock_7}

codeblock_7 [label="code block 4-32"]


codeblock_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local Node = require \"peg/node\"
local u = require \"../lib/util\"

local m = require \"grym/morphemes\"

local H, h = u.inherit(Node)

function h.matchHandle(line)
    local handlen = L.match(L.C(m.handle), line)
    if handlen then
        return handlen
    else
        return \"\"
        --u.freeze(\"h.matchHandle fails to match a handle\")
    end
end

local function new(Handle, line)
    local handle = setmetatable({}, H)
    handle.id = \"handle\"
    handle.val = h.matchHandle(line):sub(2, -1)
    return handle
end

return u.export(h, new)"]

}
