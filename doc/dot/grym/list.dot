digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 27"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-27"]


section_1 -> { header_2 prose_3 codeblock_4 prose_5}
{rank=same; header_2 prose_3 codeblock_4 prose_5}

header_2 [label="1 : List module"]

prose_3 [label="prose"]

codeblock_4 [label="code block 6-25"]

prose_5 [label="prose"]


header_2 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* List module"]
prose_3 -> { raw_7}
{rank=same; raw_7}

raw_7 [label="raw"]


raw_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  List collection requires paying attention to indentation, so we parse all
of the following correctly:
"]
codeblock_4 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="- List
- Same list

- New list
  
  - Same list!

  - Still same
- Same

- New

Prose break

   - New

      - Same
"]
prose_5 -> { raw_10 literal_11 raw_12}
{rank=same; raw_10 literal_11 raw_12}

raw_10 [label="raw"]

literal_11 [label="literal"]

raw_12 [label="raw"]


raw_10 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which means we'll need to work it into the "]
literal_11 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="own"]
raw_12 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" state machine. "]

}
