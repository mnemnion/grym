digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 175"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-10"]


section_1 -> { header_2 prose_3 prose_4 prose_5 section_6}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6}

header_2 [label="1 : Doc module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 11-175"]


prose_3 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Represents a Document, which is generally the same as a file, at first.
"]
prose_4 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" A document contains an array of blocks. 
"]
prose_5 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" At some point documents can also contain documents, this is not
 currently supported.

"]
section_6 -> { header_10 prose_11 codeblock_12 prose_13 codeblock_14 prose_15 codeblock_16 prose_17 prose_18 prose_19 codeblock_20 prose_21 block_22 block_23 codeblock_24}
{rank=same; header_10 prose_11 codeblock_12 prose_13 codeblock_14 prose_15 codeblock_16 prose_17 prose_18 prose_19 codeblock_20 prose_21 block_22 block_23 codeblock_24}

header_10 [label="2 : Fields"]

prose_11 [label="prose"]

codeblock_12 [label="code block 22-28"]

prose_13 [label="prose"]

codeblock_14 [label="code block 33-67"]

prose_15 [label="prose"]

codeblock_16 [label="code block 72-90"]

prose_17 [label="prose"]

prose_18 [label="prose"]

prose_19 [label="prose"]

codeblock_20 [label="code block 103-145"]

prose_21 [label="prose"]

block_22 [label="block 150-152"]

block_23 [label="block 153-155"]

codeblock_24 [label="code block 156-174"]


prose_11 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 In addition to the standard Node fields, a doc has:
 
 - latest: The current block.  This will be in `doc[#doc]` but may
           be several layers deep.
 - lastOf: An array containing references to the last block of a
           given level.

"]
codeblock_12 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local u = require \"lib/util\"

local Node = require \"peg/node\"
local Block = require \"grym/section\"
local own = require \"grym/own\""]
prose_13 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Metatable for Docs.

"]
codeblock_14 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local D = setmetatable({}, { __index = Node })

D.__tostring = function (doc)
    local phrase = \"\"
    for _,v in ipairs(doc) do
        local repr = tostring(v)
        if repr ~= \"\" and repr ~= \"\\n\" then
            phrase = phrase .. repr .. \"\\n\"
        end
    end

    return phrase 
end

D.__index = D

D.own = own

function D.dotLabel(doc)
    return \"doc - \" .. tostring(doc.linum)
end 

function D.toMarkdown(doc)
    local phrase = \"\"
    for _, node in ipairs(doc) do
        if node.toMarkdown then
            phrase = phrase .. node:toMarkdown()
        else 
            u.freeze(\"no toMarkdown method for \" .. node.id)
        end
    end
    return phrase
end"]
prose_15 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Doc constructor.

"]
codeblock_16 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local d = {}


function D.parentOf(doc, level)
    local i = level - 1
    local parent = nil
    while i > 0 do
        parent = doc.lastOf[i]
        if parent then
            return parent
        else
            i = i - 1
        end
    end

    return doc
end"]
prose_17 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Adds a block to a document.
"]
prose_18 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" This function looks at document level and places the block
 accordingly.
 
 - doc : the document
 - block : block to be appended
"]
prose_19 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" returns: the document

"]
codeblock_20 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function D.addSection(doc, section, linum)
    if not doc.latest then
        doc[1] =  section
    else
        if linum > 0 then
            doc.latest.line_last = linum - 1
        end
        local atLevel = doc.latest.level 
        if atLevel < section.level then
            -- add the section under the latest section
            doc.latest:addSection(section, linum)
        else
            local parentis = doc:parentOf(section.level)
            if parentis.id == \"doc\" then
                if section.level == 1 and doc.latest.level == 1 then
                    doc[#doc + 1] = section
                else
                    doc.latest:addSection(section, linum)
                end
            else
                parentis:addSection(section, linum)
            end
        end
    end
    doc.latest = section
    doc.lastOf[section.level] = section
    return doc
end

function D.addLine(doc, line, linum)
    if doc.latest then
        doc.latest:addLine(line)
    else
        -- a virtual zero block
        doc[1] = Block(0, linum)
        doc.latest = doc[1]
        doc.latest:addLine(line)
    end

    return doc
end"]
prose_21 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Creates a Doc Node.
"]
block_22 -> { structure_36 structure_37}
{rank=same; structure_36 structure_37}

structure_36 [label="structure"]

structure_37 [label="structure"]


structure_36 -> { handleline_38}
{rank=same; handleline_38}

handleline_38 [label="handleline"]


handleline_38 -> { handle_39}
{rank=same; handle_39}

handle_39 [label="handle"]


handle_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_37 -> { handleline_41}
{rank=same; handleline_41}

handleline_41 [label="handleline"]


handleline_41 -> { handle_42}
{rank=same; handle_42}

handle_42 [label="handle"]


handle_42 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_23 -> { structure_44}
{rank=same; structure_44}

structure_44 [label="structure"]


structure_44 -> { handleline_45}
{rank=same; handleline_45}

handleline_45 [label="handleline"]


handleline_45 -> { handle_46}
{rank=same; handle_46}

handle_46 [label="handle"]


handle_46 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_24 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Doc, str)
    local doc = setmetatable({}, D)
    doc.str = str
    doc.id = \"doc\"
    doc.latest = nil
    doc.lines = {}
    doc.lastOf = {}
    -- for now lets set root to 'false'
    doc.root = false
    return doc:own(str)
end

setmetatable(D, Node)

d[\"__call\"] = new

return setmetatable({}, d)"]

}
