digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 185"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-10"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 section_6}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6}

header_2 [label="1 : Doc module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 11-70"]


// END RANK section_1

header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Doc module"]
// END RANK header_2

prose_3 -> { raw_8}
{rank=same; raw_8}

raw_8 [label="raw"]


// END RANK prose_3

raw_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 Represents a Document, which is generally the same as a file, at first.
"]
// END RANK raw_8

prose_4 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


// END RANK prose_4

raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 A document contains an array of blocks.
"]
// END RANK raw_10

prose_5 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_5

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 At some point documents can also contain documents, this is not
 currently supported.

"]
// END RANK raw_12

section_6 -> { header_14 prose_15 prose_16 codeblock_17 section_18 section_19}
{rank=same; header_14 prose_15 prose_16 codeblock_17 section_18 section_19}

header_14 [label="2 : Fields"]

prose_15 [label="prose"]

prose_16 [label="prose"]

codeblock_17 [label="code block 22-28"]

section_18 [label="section: 30-70"]

section_19 [label="section: 71-185"]


// END RANK section_6

header_14 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" ** Fields"]
// END RANK header_14

prose_15 -> { raw_21}
{rank=same; raw_21}

raw_21 [label="raw"]


// END RANK prose_15

raw_21 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
«quote endquote»
"]
// END RANK raw_21

prose_16 -> { raw_23 prespace_24 interpolated_25 raw_26}
{rank=same; raw_23 prespace_24 interpolated_25 raw_26}

raw_23 [label="raw"]

prespace_24 [label="prespace"]

interpolated_25 [label="interpolated"]

raw_26 [label="raw"]


// END RANK prose_16

raw_23 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 In addition to the standard Node fields, a doc has:

 - latest: The current block.  This will be in"]
// END RANK raw_23

prespace_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_24

interpolated_25 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="doc[#doc]"]
// END RANK interpolated_25

raw_26 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" but may
           be several layers deep.
 - lastOf: An array containing references to the last block of a
           given level.

"]
// END RANK raw_26

codeblock_17 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local u = require \"lib/util\"

local Node = require \"lib/espalier/node\"
local Section = require \"Orbit/section\"
local own = require \"Orbit/own\""]
// END RANK codeblock_17

section_18 -> { header_32 prose_33 codeblock_34}
{rank=same; header_32 prose_33 codeblock_34}

header_32 [label="3 : Metatable for Docs."]

prose_33 [label="prose"]

codeblock_34 [label="code block 32-68"]


// END RANK section_18

header_32 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Metatable for Docs."]
// END RANK header_32

prose_33 -> { raw_36}
{rank=same; raw_36}

raw_36 [label="raw"]


// END RANK prose_33

raw_36 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_36

codeblock_34 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local D = setmetatable({}, { __index = Node })
D.id = \"doc\"

D.__tostring = function (doc)
    local phrase = \"\"
    for _,v in ipairs(doc) do
        local repr = tostring(v)
        if repr ~= \"\" and repr ~= \"\\n\" then
            phrase = phrase .. repr .. \"\\n\"
        end
    end

    return phrase
end


D.__index = D

D.own = own

function D.dotLabel(doc)
    return \"doc - \" .. tostring(doc.linum)
end

function D.toMarkdown(doc)
    local phrase = \"\"
    for _, node in ipairs(doc) do
        if node.toMarkdown then
            phrase = phrase .. node:toMarkdown()
        else
            u.freeze(\"no toMarkdown method for \" .. node.id)
        end
    end
    return phrase
end"]
// END RANK codeblock_34

section_19 -> { header_39 prose_40 codeblock_41 prose_42 prose_43 codeblock_44 prose_45 structure_46 structure_47 codeblock_48}
{rank=same; header_39 prose_40 codeblock_41 prose_42 prose_43 codeblock_44 prose_45 structure_46 structure_47 codeblock_48}

header_39 [label="3 : Doc Constructor"]

prose_40 [label="prose"]

codeblock_41 [label="code block 74-92"]

prose_42 [label="prose"]

prose_43 [label="prose"]

codeblock_44 [label="code block 105-154"]

prose_45 [label="prose"]

structure_46 [label="structure"]

structure_47 [label="structure"]

codeblock_48 [label="code block 165-184"]


// END RANK section_19

header_39 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Doc Constructor"]
// END RANK header_39

prose_40 -> { raw_50}
{rank=same; raw_50}

raw_50 [label="raw"]


// END RANK prose_40

raw_50 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_50

codeblock_41 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local d = {}


function D.parentOf(doc, level)
    local i = level - 1
    local parent = nil
    while i >= 0 do
        parent = doc.lastOf[i]
        if parent then
            return parent
        else
            i = i - 1
        end
    end

    return doc
end"]
// END RANK codeblock_41

prose_42 -> { raw_53}
{rank=same; raw_53}

raw_53 [label="raw"]


// END RANK prose_42

raw_53 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 This function looks at document level and places the block
 accordingly.

 - doc : the document
 - block : block to be appended
"]
// END RANK raw_53

prose_43 -> { raw_55}
{rank=same; raw_55}

raw_55 [label="raw"]


// END RANK prose_43

raw_55 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 returns: the document

"]
// END RANK raw_55

codeblock_44 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function D.addSection(doc, section, linum, finish)
    assert(section.id == \"section\", \"type of putative section is \" .. section.id)
    assert(section.first, \"no first in section at line \" .. tostring(linum))
    assert(type(finish) == \"number\", \"finish is of type \" .. type(finish))
    if not doc.latest then
        doc[1] =  section
    else
        if linum > 0 then
            doc.latest.line_last = linum - 1
            doc.latest.last = finish
        end
        local atLevel = doc.latest.level
        if atLevel < section.level then
            -- add the section under the latest section
            doc.latest:addSection(section, linum, finish)
        else
            local parent = doc:parentOf(section.level)
            if parent.id == \"doc\" then
                if section.level == 1 and doc.latest.level == 1 then
                    doc[#doc + 1] = section
                else
                    doc.latest:addSection(section, linum, finish)
                end
            else
                parent:addSection(section, linum, finish)
            end
        end
    end
    doc.latest = section
    doc.lastOf[section.level] = section
    return doc
end


function D.addLine(doc, line, linum, finish)
    if doc.latest then
        doc.latest:addLine(line)
        doc.latest.last = finish
    else
        -- a virtual zero block
        doc[1] = Section(0, linum, 1, #line, doc.str)
        doc.latest = doc[1]
        doc.latest:addLine(line)
        doc.latest.last = finish
    end

    return doc
end"]
// END RANK codeblock_44

prose_45 -> { raw_58}
{rank=same; raw_58}

raw_58 [label="raw"]


// END RANK prose_45

raw_58 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Creates a Doc Node.
"]
// END RANK raw_58

structure_46 -> { handleline_60}
{rank=same; handleline_60}

handleline_60 [label="handleline"]


// END RANK structure_46

handleline_60 -> { handle_61}
{rank=same; handle_61}

handle_61 [label="handle"]


// END RANK handleline_60

handle_61 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK handle_61

structure_47 -> { handleline_63}
{rank=same; handleline_63}

handleline_63 [label="handleline"]


// END RANK structure_47

handleline_63 -> { handle_64}
{rank=same; handle_64}

handle_64 [label="handle"]


// END RANK handleline_63

handle_64 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK handle_64

codeblock_48 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Doc, str)
    local doc = setmetatable({}, D)
    doc.str = str
    doc.first = 1
    doc.last = #str
    doc.latest = nil
    doc.lines = {}
    doc.lastOf = {}
    -- for now lets set root to 'false'
    doc.root = false
    return doc:own(str)
end

setmetatable(D, Node)

d[\"__call\"] = new

return setmetatable({}, d)"]
// END RANK codeblock_48


}
