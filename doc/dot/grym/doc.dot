digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 185"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-10"]


section_1 -> { header_2 prose_3 prose_4 prose_5 section_6}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6}

header_2 [label="1 : Doc module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 11-70"]


header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Doc module"]
prose_3 -> { raw_8}
{rank=same; raw_8}

raw_8 [label="raw"]


raw_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 Represents a Document, which is generally the same as a file, at first.
"]
prose_4 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 A document contains an array of blocks. 
"]
prose_5 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 At some point documents can also contain documents, this is not
 currently supported.

"]
section_6 -> { header_14 prose_15 codeblock_16 section_17 section_18}
{rank=same; header_14 prose_15 codeblock_16 section_17 section_18}

header_14 [label="2 : Fields"]

prose_15 [label="prose"]

codeblock_16 [label="code block 22-28"]

section_17 [label="section: 30-70"]

section_18 [label="section: 71-185"]


header_14 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" ** Fields"]
prose_15 -> { raw_20 prespace_21 interpolated_22 raw_23}
{rank=same; raw_20 prespace_21 interpolated_22 raw_23}

raw_20 [label="raw"]

prespace_21 [label="prespace"]

interpolated_22 [label="interpolated"]

raw_23 [label="raw"]


raw_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


 In addition to the standard Node fields, a doc has:
 
 - latest: The current block.  This will be in"]
prespace_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
interpolated_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="doc[#doc]"]
raw_23 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" but may
           be several layers deep.
 - lastOf: An array containing references to the last block of a
           given level.

"]
codeblock_16 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local u = require \"lib/util\"

local Node = require \"lib/node/node\"
local Section = require \"grym/section\"
local own = require \"grym/own\""]
section_17 -> { header_29 prose_30 codeblock_31}
{rank=same; header_29 prose_30 codeblock_31}

header_29 [label="3 : Metatable for Docs."]

prose_30 [label="prose"]

codeblock_31 [label="code block 32-68"]


header_29 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Metatable for Docs."]
prose_30 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_31 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local D = setmetatable({}, { __index = Node })
D.id = \"doc\"

D.__tostring = function (doc)
    local phrase = \"\"
    for _,v in ipairs(doc) do
        local repr = tostring(v)
        if repr ~= \"\" and repr ~= \"\\n\" then
            phrase = phrase .. repr .. \"\\n\"
        end
    end

    return phrase 
end


D.__index = D

D.own = own

function D.dotLabel(doc)
    return \"doc - \" .. tostring(doc.linum)
end 

function D.toMarkdown(doc)
    local phrase = \"\"
    for _, node in ipairs(doc) do
        if node.toMarkdown then
            phrase = phrase .. node:toMarkdown()
        else 
            u.freeze(\"no toMarkdown method for \" .. node.id)
        end
    end
    return phrase
end"]
section_18 -> { header_36 prose_37 codeblock_38 prose_39 prose_40 codeblock_41 prose_42 structure_43 structure_44 codeblock_45}
{rank=same; header_36 prose_37 codeblock_38 prose_39 prose_40 codeblock_41 prose_42 structure_43 structure_44 codeblock_45}

header_36 [label="3 : Doc Constructor"]

prose_37 [label="prose"]

codeblock_38 [label="code block 74-92"]

prose_39 [label="prose"]

prose_40 [label="prose"]

codeblock_41 [label="code block 105-154"]

prose_42 [label="prose"]

structure_43 [label="structure"]

structure_44 [label="structure"]

codeblock_45 [label="code block 165-184"]


header_36 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Doc Constructor"]
prose_37 -> { raw_47}
{rank=same; raw_47}

raw_47 [label="raw"]


raw_47 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
codeblock_38 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local d = {}


function D.parentOf(doc, level)
    local i = level - 1
    local parent = nil
    while i >= 0 do
        parent = doc.lastOf[i]
        if parent then
            return parent
        else
            i = i - 1
        end
    end

    return doc
end"]
prose_39 -> { raw_50}
{rank=same; raw_50}

raw_50 [label="raw"]


raw_50 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 This function looks at document level and places the block
 accordingly.
 
 - doc : the document
 - block : block to be appended
"]
prose_40 -> { raw_52}
{rank=same; raw_52}

raw_52 [label="raw"]


raw_52 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 returns: the document

"]
codeblock_41 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function D.addSection(doc, section, linum, finish)
    assert(section.id == \"section\", \"type of putative section is \" .. section.id)
    assert(section.first, \"no first in section at line \" .. tostring(linum))
    assert(type(finish) == \"number\", \"finish is of type \" .. type(finish))
    if not doc.latest then
        doc[1] =  section
    else
        if linum > 0 then
            doc.latest.line_last = linum - 1
            doc.latest.last = finish   
        end
        local atLevel = doc.latest.level 
        if atLevel < section.level then
            -- add the section under the latest section
            doc.latest:addSection(section, linum, finish)
        else
            local parent = doc:parentOf(section.level)
            if parent.id == \"doc\" then
                if section.level == 1 and doc.latest.level == 1 then
                    doc[#doc + 1] = section
                else
                    doc.latest:addSection(section, linum, finish)
                end
            else
                parent:addSection(section, linum, finish)
            end
        end
    end
    doc.latest = section
    doc.lastOf[section.level] = section
    return doc
end


function D.addLine(doc, line, linum, finish)
    if doc.latest then
        doc.latest:addLine(line)
        doc.latest.last = finish
    else
        -- a virtual zero block
        doc[1] = Section(0, linum, 1, #line, doc.str)
        doc.latest = doc[1]
        doc.latest:addLine(line)
        doc.latest.last = finish
    end

    return doc
end"]
prose_42 -> { raw_55}
{rank=same; raw_55}

raw_55 [label="raw"]


raw_55 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Creates a Doc Node.
"]
structure_43 -> { handleline_57}
{rank=same; handleline_57}

handleline_57 [label="handleline"]


handleline_57 -> { handle_58}
{rank=same; handle_58}

handle_58 [label="handle"]


handle_58 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_44 -> { handleline_60}
{rank=same; handleline_60}

handleline_60 [label="handleline"]


handleline_60 -> { handle_61}
{rank=same; handle_61}

handle_61 [label="handle"]


handle_61 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_45 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Doc, str)
    local doc = setmetatable({}, D)
    doc.str = str
    doc.first = 1
    doc.last = #str
    doc.latest = nil
    doc.lines = {}
    doc.lastOf = {}
    -- for now lets set root to 'false'
    doc.root = false
    return doc:own(str)
end

setmetatable(D, Node)

d[\"__call\"] = new

return setmetatable({}, d)"]

}
