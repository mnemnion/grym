digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 175"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-10"]


section_1 -> { header_2}
{rank=same; header_2}

header_2 [label="1 : Doc module"]


section_3 -> { header_4}
{rank=same; header_4}

header_4 [label="2 : Fields"]


codeblock_5 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local u = require \"lib/util\"

local Node = require \"peg/node\"
local Block = require \"grym/section\"
local own = require \"grym/own\""]
codeblock_6 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local D = setmetatable({}, { __index = Node })

D.__tostring = function (doc)
    local phrase = \"\"
    for _,v in ipairs(doc) do
        local repr = tostring(v)
        if repr ~= \"\" and repr ~= \"\\n\" then
            phrase = phrase .. repr .. \"\\n\"
        end
    end

    return phrase 
end

D.__index = D

D.own = own

function D.dotLabel(doc)
    return \"doc - \" .. tostring(doc.linum)
end 

function D.toMarkdown(doc)
    local phrase = \"\"
    for _, node in ipairs(doc) do
        if node.toMarkdown then
            phrase = phrase .. node:toMarkdown()
        else 
            u.freeze(\"no toMarkdown method for \" .. node.id)
        end
    end
    return phrase
end"]
codeblock_7 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local d = {}


function D.parentOf(doc, level)
    local i = level - 1
    local parent = nil
    while i > 0 do
        parent = doc.lastOf[i]
        if parent then
            return parent
        else
            i = i - 1
        end
    end

    return doc
end"]
codeblock_8 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function D.addSection(doc, section, linum)
    if not doc.latest then
        doc[1] =  section
    else
        if linum > 0 then
            doc.latest.line_last = linum - 1    
        end
        local atLevel = doc.latest.level 
        if atLevel < section.level then
            -- add the section under the latest section
            doc.latest:addSection(section, linum)
        else
            local parent = doc:parentOf(section.level)
            if parent.id == \"doc\" then
                if section.level == 1 and doc.latest.level == 1 then
                    doc[#doc + 1] = section
                else
                    doc.latest:addSection(section, linum)
                end
            else
                parent:addSection(section, linum)
            end
        end
    end
    doc.latest = section
    doc.lastOf[section.level] = section
    return doc
end

function D.addLine(doc, line, linum)
    if doc.latest then
        doc.latest:addLine(line)
    else
        -- a virtual zero block
        doc[1] = Block(0, linum)
        doc.latest = doc[1]
        doc.latest:addLine(line)
    end

    return doc
end"]
block_9 -> { structure_16 structure_17}
{rank=same; structure_16 structure_17}

structure_16 [label="structure"]

structure_17 [label="structure"]


structure_16 -> { handleline_18}
{rank=same; handleline_18}

handleline_18 [label="handleline"]


handleline_18 -> { handle_19}
{rank=same; handle_19}

handle_19 [label="handle"]


handle_19 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_17 -> { handleline_21}
{rank=same; handleline_21}

handleline_21 [label="handleline"]


handleline_21 -> { handle_22}
{rank=same; handle_22}

handle_22 [label="handle"]


handle_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_10 -> { structure_24}
{rank=same; structure_24}

structure_24 [label="structure"]


structure_24 -> { handleline_25}
{rank=same; handleline_25}

handleline_25 [label="handleline"]


handleline_25 -> { handle_26}
{rank=same; handle_26}

handle_26 [label="handle"]


handle_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_11 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Doc, str)
    local doc = setmetatable({}, D)
    doc.str = str
    doc.id = \"doc\"
    doc.latest = nil
    doc.lines = {}
    doc.lastOf = {}
    -- for now lets set root to 'false'
    doc.root = false
    return doc:own(str)
end

setmetatable(D, Node)

d[\"__call\"] = new

return setmetatable({}, d)"]

}
