digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 185"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-10"]


section_1 -> { header_2 block_3 block_4 block_5 section_6}
{rank=same; header_2 block_3 block_4 block_5 section_6}

header_2 [label="1 : Doc module"]

block_3 [label="block 1-4"]

block_4 [label="block 5-6"]

block_5 [label="block 7-10"]

section_6 [label="section: 11-70"]


header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_3 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Represents a Document, which is generally the same as a file, at first.
"]
block_4 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" A document contains an array of blocks. 
"]
block_5 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" At some point documents can also contain documents, this is not
 currently supported.

"]
section_6 -> { header_11 block_12 block_13 section_14 section_15}
{rank=same; header_11 block_12 block_13 section_14 section_15}

header_11 [label="2 : Fields"]

block_12 [label="block 11-21"]

block_13 [label="block 22-70"]

section_14 [label="section: 30-70"]

section_15 [label="section: 71-185"]


header_11 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_12 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 In addition to the standard Node fields, a doc has:
 
 - latest: The current block.  This will be in `doc[#doc]` but may
           be several layers deep.
 - lastOf: An array containing references to the last block of a
           given level.

"]
block_13 -> { codeblock_18}
{rank=same; codeblock_18}

codeblock_18 [label="code block 22-28"]


codeblock_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local u = require \"lib/util\"

local Node = require \"peg/node\"
local Section = require \"grym/section\"
local own = require \"grym/own\""]
section_14 -> { header_20 block_21 block_22}
{rank=same; header_20 block_21 block_22}

header_20 [label="3 : Metatable for Docs."]

block_21 [label="block 30-31"]

block_22 [label="block 32-70"]


header_20 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_21 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_22 -> { codeblock_25}
{rank=same; codeblock_25}

codeblock_25 [label="code block 32-68"]


codeblock_25 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local D = setmetatable({}, { __index = Node })
D.id = \"doc\"

D.__tostring = function (doc)
    local phrase = \"\"
    for _,v in ipairs(doc) do
        local repr = tostring(v)
        if repr ~= \"\" and repr ~= \"\\n\" then
            phrase = phrase .. repr .. \"\\n\"
        end
    end

    return phrase 
end


D.__index = D

D.own = own

function D.dotLabel(doc)
    return \"doc - \" .. tostring(doc.linum)
end 

function D.toMarkdown(doc)
    local phrase = \"\"
    for _, node in ipairs(doc) do
        if node.toMarkdown then
            phrase = phrase .. node:toMarkdown()
        else 
            u.freeze(\"no toMarkdown method for \" .. node.id)
        end
    end
    return phrase
end"]
section_15 -> { header_27 block_28 block_29 block_30 block_31 block_32 block_33 block_34 block_35 block_36}
{rank=same; header_27 block_28 block_29 block_30 block_31 block_32 block_33 block_34 block_35 block_36}

header_27 [label="3 : Doc Constructor"]

block_28 [label="block 71-73"]

block_29 [label="block 74-95"]

block_30 [label="block 96-101"]

block_31 [label="block 102-104"]

block_32 [label="block 105-156"]

block_33 [label="block 157-158"]

block_34 [label="block 159-161"]

block_35 [label="block 162-164"]

block_36 [label="block 165-185"]


header_27 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_28 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
block_29 -> { codeblock_39}
{rank=same; codeblock_39}

codeblock_39 [label="code block 74-92"]


codeblock_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local d = {}


function D.parentOf(doc, level)
    local i = level - 1
    local parent = nil
    while i > 0 do
        parent = doc.lastOf[i]
        if parent then
            return parent
        else
            i = i - 1
        end
    end

    return doc
end"]
block_30 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" This function looks at document level and places the block
 accordingly.
 
 - doc : the document
 - block : block to be appended
"]
block_31 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" returns: the document

"]
block_32 -> { codeblock_43}
{rank=same; codeblock_43}

codeblock_43 [label="code block 105-154"]


codeblock_43 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function D.addSection(doc, section, linum, finish)
    assert(section.id == \"section\", \"type of putative section is \" .. section.id)
    assert(section.first, \"no first in section at line \" .. tostring(linum))
    assert(type(finish) == \"number\", \"finish is of type \" .. type(finish))
    if not doc.latest then
        doc[1] =  section
    else
        if linum > 0 then
            doc.latest.line_last = linum - 1
            doc.latest.last = finish   
        end
        local atLevel = doc.latest.level 
        if atLevel < section.level then
            -- add the section under the latest section
            doc.latest:addSection(section, linum, finish)
        else
            local parent = doc:parentOf(section.level)
            if parent.id == \"doc\" then
                if section.level == 1 and doc.latest.level == 1 then
                    doc[#doc + 1] = section
                else
                    doc.latest:addSection(section, linum, finish)
                end
            else
                parent:addSection(section, linum, finish)
            end
        end
    end
    doc.latest = section
    doc.lastOf[section.level] = section
    return doc
end


function D.addLine(doc, line, linum, finish)
    if doc.latest then
        doc.latest:addLine(line)
        doc.latest.last = finish
    else
        -- a virtual zero block
        doc[1] = Section(0, linum, 1, #line, doc.str)
        doc.latest = doc[1]
        doc.latest:addLine(line)
        doc.latest.last = finish
    end

    return doc
end"]
block_33 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Creates a Doc Node.
"]
block_34 -> { structure_46 structure_47}
{rank=same; structure_46 structure_47}

structure_46 [label="structure"]

structure_47 [label="structure"]


structure_46 -> { handleline_48}
{rank=same; handleline_48}

handleline_48 [label="handleline"]


handleline_48 -> { handle_49}
{rank=same; handle_49}

handle_49 [label="handle"]


handle_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_47 -> { handleline_51}
{rank=same; handleline_51}

handleline_51 [label="handleline"]


handleline_51 -> { handle_52}
{rank=same; handle_52}

handle_52 [label="handle"]


handle_52 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_35 -> { structure_54}
{rank=same; structure_54}

structure_54 [label="structure"]


structure_54 -> { handleline_55}
{rank=same; handleline_55}

handleline_55 [label="handleline"]


handleline_55 -> { handle_56}
{rank=same; handle_56}

handle_56 [label="handle"]


handle_56 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_36 -> { codeblock_58}
{rank=same; codeblock_58}

codeblock_58 [label="code block 165-184"]


codeblock_58 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Doc, str)
    local doc = setmetatable({}, D)
    doc.str = str
    doc.first = 1
    doc.last = #str
    doc.latest = nil
    doc.lines = {}
    doc.lastOf = {}
    -- for now lets set root to 'false'
    doc.root = false
    return doc:own(str)
end

setmetatable(D, Node)

d[\"__call\"] = new

return setmetatable({}, d)"]

}
