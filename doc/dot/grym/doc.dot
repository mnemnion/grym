digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 185"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-10"]


section_1 -> { header_2 prose_3 prose_4 prose_5 section_6}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6}

header_2 [label="1 : Doc module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 11-70"]


prose_3 -> { raw_7}
{rank=same; raw_7}

raw_7 [label="raw"]


raw_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 Represents a Document, which is generally the same as a file, at first.
"]
prose_4 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 A document contains an array of blocks. 
"]
prose_5 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 At some point documents can also contain documents, this is not
 currently supported.

"]
section_6 -> { header_13 prose_14 codeblock_15 section_16 section_17}
{rank=same; header_13 prose_14 codeblock_15 section_16 section_17}

header_13 [label="2 : Fields"]

prose_14 [label="prose"]

codeblock_15 [label="code block 22-28"]

section_16 [label="section: 30-70"]

section_17 [label="section: 71-185"]


prose_14 -> { raw_18}
{rank=same; raw_18}

raw_18 [label="raw"]


raw_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


 In addition to the standard Node fields, a doc has:
 
 - latest: The current block.  This will be in `doc[#doc]` but may
           be several layers deep.
 - lastOf: An array containing references to the last block of a
           given level.

"]
codeblock_15 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local u = require \"lib/util\"

local Node = require \"node/node\"
local Section = require \"grym/section\"
local own = require \"grym/own\""]
section_16 -> { header_21 prose_22 codeblock_23}
{rank=same; header_21 prose_22 codeblock_23}

header_21 [label="3 : Metatable for Docs."]

prose_22 [label="prose"]

codeblock_23 [label="code block 32-68"]


prose_22 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_23 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local D = setmetatable({}, { __index = Node })
D.id = \"doc\"

D.__tostring = function (doc)
    local phrase = \"\"
    for _,v in ipairs(doc) do
        local repr = tostring(v)
        if repr ~= \"\" and repr ~= \"\\n\" then
            phrase = phrase .. repr .. \"\\n\"
        end
    end

    return phrase 
end


D.__index = D

D.own = own

function D.dotLabel(doc)
    return \"doc - \" .. tostring(doc.linum)
end 

function D.toMarkdown(doc)
    local phrase = \"\"
    for _, node in ipairs(doc) do
        if node.toMarkdown then
            phrase = phrase .. node:toMarkdown()
        else 
            u.freeze(\"no toMarkdown method for \" .. node.id)
        end
    end
    return phrase
end"]
section_17 -> { header_27 prose_28 codeblock_29 prose_30 prose_31 codeblock_32 prose_33 structure_34 structure_35 codeblock_36}
{rank=same; header_27 prose_28 codeblock_29 prose_30 prose_31 codeblock_32 prose_33 structure_34 structure_35 codeblock_36}

header_27 [label="3 : Doc Constructor"]

prose_28 [label="prose"]

codeblock_29 [label="code block 74-92"]

prose_30 [label="prose"]

prose_31 [label="prose"]

codeblock_32 [label="code block 105-154"]

prose_33 [label="prose"]

structure_34 [label="structure"]

structure_35 [label="structure"]

codeblock_36 [label="code block 165-184"]


prose_28 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
codeblock_29 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local d = {}


function D.parentOf(doc, level)
    local i = level - 1
    local parent = nil
    while i > 0 do
        parent = doc.lastOf[i]
        if parent then
            return parent
        else
            i = i - 1
        end
    end

    return doc
end"]
prose_30 -> { raw_40}
{rank=same; raw_40}

raw_40 [label="raw"]


raw_40 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 This function looks at document level and places the block
 accordingly.
 
 - doc : the document
 - block : block to be appended
"]
prose_31 -> { raw_42}
{rank=same; raw_42}

raw_42 [label="raw"]


raw_42 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 returns: the document

"]
codeblock_32 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function D.addSection(doc, section, linum, finish)
    assert(section.id == \"section\", \"type of putative section is \" .. section.id)
    assert(section.first, \"no first in section at line \" .. tostring(linum))
    assert(type(finish) == \"number\", \"finish is of type \" .. type(finish))
    if not doc.latest then
        doc[1] =  section
    else
        if linum > 0 then
            doc.latest.line_last = linum - 1
            doc.latest.last = finish   
        end
        local atLevel = doc.latest.level 
        if atLevel < section.level then
            -- add the section under the latest section
            doc.latest:addSection(section, linum, finish)
        else
            local parent = doc:parentOf(section.level)
            if parent.id == \"doc\" then
                if section.level == 1 and doc.latest.level == 1 then
                    doc[#doc + 1] = section
                else
                    doc.latest:addSection(section, linum, finish)
                end
            else
                parent:addSection(section, linum, finish)
            end
        end
    end
    doc.latest = section
    doc.lastOf[section.level] = section
    return doc
end


function D.addLine(doc, line, linum, finish)
    if doc.latest then
        doc.latest:addLine(line)
        doc.latest.last = finish
    else
        -- a virtual zero block
        doc[1] = Section(0, linum, 1, #line, doc.str)
        doc.latest = doc[1]
        doc.latest:addLine(line)
        doc.latest.last = finish
    end

    return doc
end"]
prose_33 -> { raw_45}
{rank=same; raw_45}

raw_45 [label="raw"]


raw_45 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Creates a Doc Node.
"]
structure_34 -> { handleline_47}
{rank=same; handleline_47}

handleline_47 [label="handleline"]


handleline_47 -> { handle_48}
{rank=same; handle_48}

handle_48 [label="handle"]


handle_48 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_35 -> { handleline_50}
{rank=same; handleline_50}

handleline_50 [label="handleline"]


handleline_50 -> { handle_51}
{rank=same; handle_51}

handle_51 [label="handle"]


handle_51 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_36 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Doc, str)
    local doc = setmetatable({}, D)
    doc.str = str
    doc.first = 1
    doc.last = #str
    doc.latest = nil
    doc.lines = {}
    doc.lastOf = {}
    -- for now lets set root to 'false'
    doc.root = false
    return doc:own(str)
end

setmetatable(D, Node)

d[\"__call\"] = new

return setmetatable({}, d)"]

}
