digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 118"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-48"]


section_1 -> { header_2 prose_3 codeblock_4 prose_5 prose_6 section_7 section_8}
{rank=same; header_2 prose_3 codeblock_4 prose_5 prose_6 section_7 section_8}

header_2 [label="1 : Header metatable"]

prose_3 [label="prose"]

codeblock_4 [label="code block 6-12"]

prose_5 [label="prose"]

prose_6 [label="prose"]

section_7 [label="section: 25-48"]

section_8 [label="section: 49-55"]


header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 A specialized type of Node, used for first-pass ownership and 
 all subsequent operations. 
"]
codeblock_4 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local Node = require \"peg/node\"

local m = require \"grym/morphemes\""]
prose_5 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 A header contains a header line, that is, one which begins with `WS^0 * '*'^1 * ' '`.
"]
prose_6 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 In addition to the standard Node fields, a header has:
 
  - `parent()`, a function that returns its parent, which is either a **block** or a **doc**.
  - `dent`, the level of indentation of the header. Must be non-negative. 
  - `level`, the level of ownership (number of tars).
  - `line`, the rest of the line (stripped of lead whitespace and tars)

"]
section_7 -> { header_17 prose_18 codeblock_19}
{rank=same; header_17 prose_18 codeblock_19}

header_17 [label="2 : Metatable for Headers"]

prose_18 [label="prose"]

codeblock_19 [label="code block 27-47"]


header_17 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_18 -> { raw_21}
{rank=same; raw_21}

raw_21 [label="raw"]


raw_21 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local H = setmetatable({}, { __index = Node })
H.__index = H

H.__tostring = function(header) 
    return \"Lvl \" .. tostring(header.level) .. \" ^: \" 
           .. tostring(header.line)
end

function H.dotLabel(header)
    return tostring(header.level) .. \" : \" .. header.line
end

function H.toMarkdown(header)
    local haxen = \"\"
    if header.level > 0 then
        haxen = (\"#\"):rep(header.level)
    end
    return haxen .. \" \" .. header.line
end"]
section_8 -> { header_24 prose_25 codeblock_26 section_27}
{rank=same; header_24 prose_25 codeblock_26 section_27}

header_24 [label="2 : Constructor/module"]

prose_25 [label="prose"]

codeblock_26 [label="code block 51-53"]

section_27 [label="section: 56-118"]


header_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_25 -> { raw_29}
{rank=same; raw_29}

raw_29 [label="raw"]


raw_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_26 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local h = {}"]
section_27 -> { header_32 prose_33 prose_34 codeblock_35 prose_36 structure_37 structure_38 codeblock_39}
{rank=same; header_32 prose_33 prose_34 codeblock_35 prose_36 structure_37 structure_38 codeblock_39}

header_32 [label="3 : Header:match(str)"]

prose_33 [label="prose"]

prose_34 [label="prose"]

codeblock_35 [label="code block 68-79"]

prose_36 [label="prose"]

structure_37 [label="structure"]

structure_38 [label="structure"]

codeblock_39 [label="code block 93-117"]


header_32 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_33 -> { raw_41}
{rank=same; raw_41}

raw_41 [label="raw"]


raw_41 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 Matches a header line.
"]
prose_34 -> { raw_43}
{rank=same; raw_43}

raw_43 [label="raw"]


raw_43 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - str :  The string to match against.
 "]
codeblock_35 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function h.match(str) 
    if str ~= \"\" and L.match(m.header, str) then
        local trimmed = str:sub(L.match(m.WS, str))
        local level = L.match(m.tars, trimmed) - 1
        local bareline = trimmed:sub(L.match(m.tars * m.WS, trimmed))
        return true, level, bareline
    else 
        return false, 0, \"\"
    end
end"]
prose_36 -> { raw_46}
{rank=same; raw_46}

raw_46 [label="raw"]


raw_46 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Creates a Header Node.
"]
structure_37 -> { handleline_48}
{rank=same; handleline_48}

handleline_48 [label="handleline"]


handleline_48 -> { handle_49}
{rank=same; handle_49}

handle_49 [label="handle"]


handle_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_38 -> { handleline_51}
{rank=same; handleline_51}

handleline_51 [label="handleline"]


handleline_51 -> { handle_52}
{rank=same; handle_52}

handle_52 [label="handle"]


handle_52 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_39 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Header, line, level, first, last, parent)
    local header = setmetatable({}, H)
    header.line = line
    header.level = level
    header.first = first
    header.last = last
    header.parent = function() return parent end
    header.id = \"header\"
    -- for now lets set root to 'false'
    -- nodes classically return root but unclear that I actually use
    header.root = false
    return header
end

function H.howdy() 
    io.write(\"Why hello!\\n\")
end


h.__call = new
h.__index = h

return setmetatable({}, h)"]

}
