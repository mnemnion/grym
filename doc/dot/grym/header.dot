digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 118"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-48"]


section_1 -> { header_2}
{rank=same; header_2}

header_2 [label="1 : Header metatable"]


codeblock_3 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local Node = require \"peg/node\"

local m = require \"grym/morphemes\""]
section_4 -> { header_7}
{rank=same; header_7}

header_7 [label="2 : Metatable for Headers"]


codeblock_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local H = setmetatable({}, { __index = Node })
H.__index = H

H.__tostring = function(header) 
    return \"Lvl \" .. tostring(header.level) .. \" ^: \" 
           .. tostring(header.line)
end

function H.dotLabel(header)
    return tostring(header.level) .. \" : \" .. header.line
end

function H.toMarkdown(header)
    local haxen = \"\"
    if header.level > 0 then
        haxen = (\"#\"):rep(header.level)
    end
    return haxen .. \" \" .. header.line
end"]
section_5 -> { header_10}
{rank=same; header_10}

header_10 [label="2 : Constructor/module"]


codeblock_11 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local h = {}"]
section_12 -> { header_14}
{rank=same; header_14}

header_14 [label="3 : Header:match(str)"]


codeblock_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function h.match(str) 
    if str ~= \"\" and L.match(m.header, str) then
        local trimmed = str:sub(L.match(m.WS, str))
        local level = L.match(m.tars, trimmed) - 1
        local bareline = trimmed:sub(L.match(m.tars * m.WS, trimmed))
        return true, level, bareline
    else 
        return false, 0, \"\"
    end
end"]
block_16 -> { structure_20 structure_21 structure_22 structure_23 structure_24}
{rank=same; structure_20 structure_21 structure_22 structure_23 structure_24}

structure_20 [label="structure"]

structure_21 [label="structure"]

structure_22 [label="structure"]

structure_23 [label="structure"]

structure_24 [label="structure"]


structure_20 -> { handleline_25}
{rank=same; handleline_25}

handleline_25 [label="handleline"]


handleline_25 -> { handle_26}
{rank=same; handle_26}

handle_26 [label="handle"]


handle_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_21 -> { handleline_28}
{rank=same; handleline_28}

handleline_28 [label="handleline"]


handleline_28 -> { handle_29}
{rank=same; handle_29}

handle_29 [label="handle"]


handle_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_22 -> { handleline_31}
{rank=same; handleline_31}

handleline_31 [label="handleline"]


handleline_31 -> { handle_32}
{rank=same; handle_32}

handle_32 [label="handle"]


handle_32 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_23 -> { handleline_34}
{rank=same; handleline_34}

handleline_34 [label="handleline"]


handleline_34 -> { handle_35}
{rank=same; handle_35}

handle_35 [label="handle"]


handle_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_24 -> { handleline_37}
{rank=same; handleline_37}

handleline_37 [label="handleline"]


handleline_37 -> { handle_38}
{rank=same; handle_38}

handle_38 [label="handle"]


handle_38 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_17 -> { structure_40}
{rank=same; structure_40}

structure_40 [label="structure"]


structure_40 -> { handleline_41}
{rank=same; handleline_41}

handleline_41 [label="handleline"]


handleline_41 -> { handle_42}
{rank=same; handle_42}

handle_42 [label="handle"]


handle_42 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_18 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Header, line, level, first, last, parent)
    local header = setmetatable({}, H)
    header.line = line
    header.level = level
    header.first = first
    header.last = last
    header.parent = function() return parent end
    header.id = \"header\"
    -- for now lets set root to 'false'
    -- nodes classically return root but unclear that I actually use
    header.root = false
    return header
end

function H.howdy() 
    io.write(\"Why hello!\\n\")
end


h.__call = new
h.__index = h

return setmetatable({}, h)"]

}
