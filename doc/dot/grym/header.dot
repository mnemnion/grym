digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 118"]

doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-24"]

section_1 -> { header_2 block_3 block_4 block_5 block_6 section_7}
{rank=same; header_2 block_3 block_4 block_5 block_6 section_7}

header_2 [label="Header metatable"]
block_3 [label="block 1-5"]
block_4 [label="block 6-14"]
block_5 [label="block 15-16"]
block_6 [label="block 17-nil"]
section_7 [label="section: 25-48"]


block_3 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 A specialized type of Node, used for first-pass ownership and 
 all subsequent operations. 

"]block_4 -> { codeblock_9}
{rank=same; codeblock_9}

codeblock_9 [label="code block 6-12"]


codeblock_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local Node = require \"peg/node\"

local m = require \"grym/morphemes\"
"]
block_4 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
block_5 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" A header contains a header line, that is, one which begins with `WS^0 * '*'^1 * ' '`.

"]
block_6 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" In addition to the standard Node fields, a header has:
 
  - `parent()`, a function that returns its parent, which is either a **block** or a **doc**.
  - `dent`, the level of indentation of the header. Must be non-negative. 
  - `level`, the level of ownership (number of tars).
  - `line`, the rest of the line (stripped of lead whitespace and tars)


"]section_7 -> { header_14 block_15 block_16 section_17}
{rank=same; header_14 block_15 block_16 section_17}

header_14 [label="Metatable for Headers"]
block_15 [label="block 25-26"]
block_16 [label="block 27-nil"]
section_17 [label="section: 49-55"]


block_15 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]block_16 -> { codeblock_19}
{rank=same; codeblock_19}

codeblock_19 [label="code block 27-47"]


codeblock_19 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local H = setmetatable({}, { __index = Node })
H.__index = H

H.__tostring = function(header) 
    return \"Lvl \" .. tostring(header.level) .. \" ^: \" 
           .. tostring(header.line)
end

function H.dotLabel(header)
    return header.line
end

function H.toMarkdown(header)
    local haxen = \"\"
    if header.level > 0 then
        haxen = (\"#\"):rep(header.level)
    end
    return haxen .. \" \" .. header.line
end
"]
block_16 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]section_17 -> { header_22 block_23 block_24 section_25}
{rank=same; header_22 block_23 block_24 section_25}

header_22 [label="Constructor/module"]
block_23 [label="block 49-50"]
block_24 [label="block 51-nil"]
section_25 [label="section: 56-118"]


block_23 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]block_24 -> { codeblock_27}
{rank=same; codeblock_27}

codeblock_27 [label="code block 51-53"]


codeblock_27 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local h = {}
"]
block_24 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]section_25 -> { header_30 block_31 block_32 block_33 block_34 block_35 block_36 block_37 block_38}
{rank=same; header_30 block_31 block_32 block_33 block_34 block_35 block_36 block_37 block_38}

header_30 [label="Header:match(str)"]
block_31 [label="block 56-59"]
block_32 [label="block 60-61"]
block_33 [label="block 62-81"]
block_34 [label="block 82-83"]
block_35 [label="block 84-84"]
block_36 [label="block 85-85"]
block_37 [label="block 86-86"]
block_38 [label="block 87-nil"]


block_31 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Matches a header line.

"]
block_32 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" - str :  The string to match against.
 
"]block_33 -> { codeblock_41}
{rank=same; codeblock_41}

codeblock_41 [label="code block 68-79"]


codeblock_41 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function h.match(str) 
    if str ~= \"\" and L.match(m.header, str) then
        local trimmed = str:sub(L.match(m.WS, str))
        local level = L.match(m.tars, trimmed) - 1
        local bareline = trimmed:sub(L.match(m.tars * m.WS, trimmed))
        return true, level, bareline
    else 
        return false, 0, \"\"
    end
end
"]
block_33 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - boolean for header match
  - level of header
  - header stripped of left whitespace and tars




"]
block_34 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Creates a Header Node.

"]block_35 -> { structure_45}
{rank=same; structure_45}

structure_45 [label="structure"]

structure_45 -> { handleline_46}
{rank=same; handleline_46}

handleline_46 [label="handleline"]

handleline_46 -> { handle_47}
{rank=same; handle_47}

handle_47 [label="handle"]


handle_47 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_35 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]block_36 -> { structure_50}
{rank=same; structure_50}

structure_50 [label="structure"]

structure_50 -> { handleline_51}
{rank=same; handleline_51}

handleline_51 [label="handleline"]

handleline_51 -> { handle_52}
{rank=same; handle_52}

handle_52 [label="handle"]


handle_52 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_36 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]block_37 -> { structure_55}
{rank=same; structure_55}

structure_55 [label="structure"]

structure_55 -> { handleline_56}
{rank=same; handleline_56}

handleline_56 [label="handleline"]

handleline_56 -> { handle_57}
{rank=same; handle_57}

handle_57 [label="handle"]


handle_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_37 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]block_38 -> { codeblock_60 structure_61 structure_62}
{rank=same; codeblock_60 structure_61 structure_62}

codeblock_60 [label="code block 93-117"]
structure_61 [label="structure"]
structure_62 [label="structure"]


codeblock_60 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Header, line, level, first, last, parent)
    local header = setmetatable({}, H)
    header.line = line
    header.level = level
    header.first = first
    header.last = last
    header.parent = function() return parent end
    header.id = \"header\"
    -- for now lets set root to 'false'
    -- nodes classically return root but unclear that I actually use
    header.root = false
    return header
end

function H.howdy() 
    io.write(\"Why hello!\n\")
end


h.__call = new
h.__index = h

return setmetatable({}, h)
"]structure_61 -> { handleline_64}
{rank=same; handleline_64}

handleline_64 [label="handleline"]

handleline_64 -> { handle_65}
{rank=same; handle_65}

handle_65 [label="handle"]


handle_65 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]structure_62 -> { handleline_67}
{rank=same; handleline_67}

handleline_67 [label="handleline"]

handleline_67 -> { handle_68}
{rank=same; handle_68}

handle_68 [label="handle"]


handle_68 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_38 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="



"]
}
