digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 115"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-49"]


section_1 -> { header_2 prose_3 codeblock_4 prose_5 prose_6 section_7 section_8}
{rank=same; header_2 prose_3 codeblock_4 prose_5 prose_6 section_7 section_8}

header_2 [label="1 : Header metatable"]

prose_3 [label="prose"]

codeblock_4 [label="code block 6-12"]

prose_5 [label="prose"]

prose_6 [label="prose"]

section_7 [label="section: 25-49"]

section_8 [label="section: 50-56"]


header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Header metatable"]
prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 A specialized type of Node, used for first-pass ownership and 
 all subsequent operations. 
"]
codeblock_4 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local Node = require \"node/node\"

local m = require \"grym/morphemes\""]
prose_5 -> { raw_13 interpolated_14 raw_15}
{rank=same; raw_13 interpolated_14 raw_15}

raw_13 [label="raw"]

interpolated_14 [label="interpolated"]

raw_15 [label="raw"]


raw_13 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 A header contains a header line, that is, one which begins with "]
interpolated_14 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="WS^0 * '*'^1 * ' '"]
raw_15 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
prose_6 -> { raw_19 interpolated_20 raw_21 bold_22 raw_23 bold_24 raw_25 interpolated_26 raw_27 interpolated_28 raw_29 interpolated_30 raw_31}
{rank=same; raw_19 interpolated_20 raw_21 bold_22 raw_23 bold_24 raw_25 interpolated_26 raw_27 interpolated_28 raw_29 interpolated_30 raw_31}

raw_19 [label="raw"]

interpolated_20 [label="interpolated"]

raw_21 [label="raw"]

bold_22 [label="bold"]

raw_23 [label="raw"]

bold_24 [label="bold"]

raw_25 [label="raw"]

interpolated_26 [label="interpolated"]

raw_27 [label="raw"]

interpolated_28 [label="interpolated"]

raw_29 [label="raw"]

interpolated_30 [label="interpolated"]

raw_31 [label="raw"]


raw_19 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 In addition to the standard Node fields, a header has:
 
  - "]
interpolated_20 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="parent()"]
raw_21 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", a function that returns its parent, which is either a "]
bold_22 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="block"]
raw_23 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or a "]
bold_24 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="doc"]
raw_25 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
  - "]
interpolated_26 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="dent"]
raw_27 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", the level of indentation of the header. Must be non-negative. 
  - "]
interpolated_28 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="level"]
raw_29 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", the level of ownership (number of tars).
  - "]
interpolated_30 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="line"]
raw_31 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", the rest of the line (stripped of lead whitespace and tars)

"]
section_7 -> { header_45 prose_46 codeblock_47}
{rank=same; header_45 prose_46 codeblock_47}

header_45 [label="2 : Metatable for Headers"]

prose_46 [label="prose"]

codeblock_47 [label="code block 27-48"]


header_45 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  ** Metatable for Headers"]
prose_46 -> { raw_49}
{rank=same; raw_49}

raw_49 [label="raw"]


raw_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_47 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local H = setmetatable({}, { __index = Node })
H.id = \"header\"
H.__index = H

H.__tostring = function(header) 
    return \"Lvl \" .. tostring(header.level) .. \" ^: \" 
           .. tostring(header.line)
end

function H.dotLabel(header)
    return tostring(header.level) .. \" : \" .. header.line
end

function H.toMarkdown(header)
    local haxen = \"\"
    if header.level > 0 then
        haxen = (\"#\"):rep(header.level)
    end
    return haxen .. \" \" .. header.line
end"]
section_8 -> { header_52 prose_53 codeblock_54 section_55}
{rank=same; header_52 prose_53 codeblock_54 section_55}

header_52 [label="2 : Constructor/module"]

prose_53 [label="prose"]

codeblock_54 [label="code block 52-54"]

section_55 [label="section: 57-115"]


header_52 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  ** Constructor/module"]
prose_53 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_54 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local h = {}"]
section_55 -> { header_60 prose_61 prose_62 codeblock_63 prose_64 structure_65 structure_66 codeblock_67}
{rank=same; header_60 prose_61 prose_62 codeblock_63 prose_64 structure_65 structure_66 codeblock_67}

header_60 [label="3 : Header:match(str)"]

prose_61 [label="prose"]

prose_62 [label="prose"]

codeblock_63 [label="code block 69-80"]

prose_64 [label="prose"]

structure_65 [label="structure"]

structure_66 [label="structure"]

codeblock_67 [label="code block 94-114"]


header_60 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    *** Header:match(str)"]
prose_61 -> { raw_69}
{rank=same; raw_69}

raw_69 [label="raw"]


raw_69 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 Matches a header line.
"]
prose_62 -> { raw_71}
{rank=same; raw_71}

raw_71 [label="raw"]


raw_71 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - str :  The string to match against.
 "]
codeblock_63 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function h.match(str) 
    if str ~= \"\" and L.match(m.header, str) then
        local trimmed = str:sub(L.match(m.WS, str))
        local level = L.match(m.tars, trimmed) - 1
        local bareline = trimmed:sub(L.match(m.tars * m.WS, trimmed))
        return true, level, bareline
    else 
        return false, 0, \"\"
    end
end"]
prose_64 -> { raw_74}
{rank=same; raw_74}

raw_74 [label="raw"]


raw_74 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Creates a Header Node.
"]
structure_65 -> { handleline_76}
{rank=same; handleline_76}

handleline_76 [label="handleline"]


handleline_76 -> { handle_77}
{rank=same; handle_77}

handle_77 [label="handle"]


handle_77 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_66 -> { handleline_79}
{rank=same; handleline_79}

handleline_79 [label="handleline"]


handleline_79 -> { handle_80}
{rank=same; handle_80}

handle_80 [label="handle"]


handle_80 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_67 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Header, line, level, first, last, str)
    local header = setmetatable({}, H)
    header.line = line
    header.level = level
    header.first = first
    header.last = last
    header.str = str
    return header
end

function H.howdy() 
    io.write(\"Why hello!\\n\")
end


h.__call = new
h.__index = h

return setmetatable({}, h)"]

}
