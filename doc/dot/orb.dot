digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 183"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-72"]


// END RANK doc_0

section_1 -> { header_2 prose_3 section_4 section_5}
{rank=same; header_2 prose_3 section_4 section_5}

header_2 [label="1 : Grimoire "]

prose_3 [label="prose"]

section_4 [label="section: 5-40"]

section_5 [label="section: 73-161"]


// END RANK section_1

header_2 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Grimoire "]
// END RANK header_2

prose_3 -> { raw_7}
{rank=same; raw_7}

raw_7 [label="raw"]


// END RANK prose_3

raw_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A metalanguage for magic spells.
"]
// END RANK raw_7

section_4 -> { header_9 prose_10 section_11 section_12}
{rank=same; header_9 prose_10 section_11 section_12}

header_9 [label="2 : Requires"]

prose_10 [label="prose"]

section_11 [label="section: 10-40"]

section_12 [label="section: 41-61"]


// END RANK section_4

header_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Requires"]
// END RANK header_9

prose_10 -> { raw_14 prespace_15 literal_16 raw_17}
{rank=same; raw_14 prespace_15 literal_16 raw_17}

raw_14 [label="raw"]

prespace_15 [label="prespace"]

literal_16 [label="literal"]

raw_17 [label="raw"]


// END RANK prose_10

raw_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Like any main entry"]
// END RANK raw_14

prespace_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_15

literal_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym.lua"]
// END RANK literal_16

raw_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is mostly imports.

"]
// END RANK raw_17

section_11 -> { header_22 prose_23 codeblock_24}
{rank=same; header_22 prose_23 codeblock_24}

header_22 [label="3 : locals"]

prose_23 [label="prose"]

codeblock_24 [label="code block 12-38"]


// END RANK section_11

header_22 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** locals"]
// END RANK header_22

prose_23 -> { raw_26}
{rank=same; raw_26}

raw_26 [label="raw"]


// END RANK prose_23

raw_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_26

codeblock_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="require \"pl.strict\"



local verbose = false


local pl_file  = require \"pl.file\"
local pl_dir   = require \"pl.dir\"
local pl_path  = require \"pl.path\"
local getfiles = pl_dir.getfiles
local getdirectories = pl_dir.getdirectories
local read = pl_file.read
local write = pl_file.write
local isdir = pl_path.isdir

local ansi = require \"ansi\"

local invert = require \"invert\"
local knit   = require \"knit\"
local weave  = require \"weave\"

local epeg = require \"epeg\"

"]
// END RANK codeblock_24

section_12 -> { header_29 prose_30 prose_31 codeblock_32 section_33}
{rank=same; header_29 prose_30 prose_31 codeblock_32 section_33}

header_29 [label="3 : globals"]

prose_30 [label="prose"]

prose_31 [label="prose"]

codeblock_32 [label="code block 47-59"]

section_33 [label="section: 62-72"]


// END RANK section_12

header_29 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** globals"]
// END RANK header_29

prose_30 -> { raw_35}
{rank=same; raw_35}

raw_35 [label="raw"]


// END RANK prose_30

raw_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  For interactive and introspective development.
"]
// END RANK raw_35

prose_31 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


// END RANK prose_31

raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Can't wait to build a reasonable REPL.
"]
// END RANK raw_37

codeblock_32 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="L = require \"lpeg\"
u = require \"util\"
s = require \"status\"
m = require \"Orbit/morphemes\"
Doc = require \"Orbit/doc\"

Link = require \"Orbit/link\"

spec = require \"node/spec\"
Node = require \"node/node\"
Path = require \"walk/path\""]
// END RANK codeblock_32

section_33 -> { header_40 prose_41 codeblock_42}
{rank=same; header_40 prose_41 codeblock_42}

header_40 [label="4 : Sample Doc for REPLing"]

prose_41 [label="prose"]

codeblock_42 [label="code block 67-71"]


// END RANK section_33

header_40 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Sample Doc for REPLing"]
// END RANK header_40

prose_41 -> { raw_44 link_45 raw_46}
{rank=same; raw_44 link_45 raw_46}

raw_44 [label="raw"]

link_45 [label="link"]

raw_46 [label="raw"]


// END RANK prose_41

raw_44 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  I'm going to add a "]
// END RANK raw_44

link_45 -> { anchortext_48 url_49}
{rank=same; anchortext_48 url_49}

anchortext_48 [label="anchortext"]

url_49 [label="url"]


// END RANK link_45

anchortext_48 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="link here"]
// END RANK anchortext_48

url_49 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="http://example.com"]
// END RANK url_49

raw_46 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", to have something
to work with.
"]
// END RANK raw_46

codeblock_42 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sample_doc = Doc(read(\"../Orb/orb.orb\")) or \"\"

dot_sh = (require \"sh\"):clear_G().command('dot', '-Tsvg')"]
// END RANK codeblock_42

section_5 -> { header_54 prose_55 prose_56 codeblock_57 section_58}
{rank=same; header_54 prose_55 prose_56 codeblock_57 section_58}

header_54 [label="2 : Argument parsing"]

prose_55 [label="prose"]

prose_56 [label="prose"]

codeblock_57 [label="code block 81-159"]

section_58 [label="section: 162-183"]


// END RANK section_5

header_54 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Argument parsing"]
// END RANK header_54

prose_55 -> { raw_60 prespace_61 literal_62 raw_63}
{rank=same; raw_60 prespace_61 literal_62 raw_63}

raw_60 [label="raw"]

prespace_61 [label="prespace"]

literal_62 [label="literal"]

raw_63 [label="raw"]


// END RANK prose_55

raw_60 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is done crudely, we can use"]
// END RANK raw_60

prespace_61 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_61

literal_62 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pl.lapp"]
// END RANK literal_62

raw_63 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in future to parse within
commands to each verb.
"]
// END RANK raw_63

prose_56 -> { raw_68 link_69 raw_70}
{rank=same; raw_68 link_69 raw_70}

raw_68 [label="raw"]

link_69 [label="link"]

raw_70 [label="raw"]


// END RANK prose_56

raw_68 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note here that we pass in the pwd from a shell script. This may 
change, now that we've added "]
// END RANK raw_68

link_69 -> { anchortext_72 url_73}
{rank=same; anchortext_72 url_73}

anchortext_72 [label="anchortext"]

url_73 [label="url"]


// END RANK link_69

anchortext_72 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sh"]
// END RANK anchortext_72

url_73 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="../lib/sh.lua"]
// END RANK url_73

raw_70 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="]]
"]
// END RANK raw_70

codeblock_57 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pwd, verb = \"\", \"\"

if (arg) then
    pwd = table.remove(arg, 1)
    verb = table.remove(arg, 1)
    for _, v in ipairs(arg) do
        io.write(ansi.yellow(v)..\"\\n\")
    end
end


local grym = {}

grym.invert = invert
grym.knit   = knit
grym.weave  = weave

samples = getfiles(\"samples\")

local own = require \"Orbit/own\"

if verb == \"invert\" then
    -- If we allow inversion in its present no-guards state,
    -- we will lose all commentary
    u.freeze(\"no\")
    --invert:invert_all(pwd)
elseif verb == \"knit\" then
    -- knitter goes here
    knit:knit_all(pwd)
elseif verb == \"weave\" then
    -- local weaved = weave:weaveMd(Doc(read(\"../orb/grym/block.gm\")))
    -- io.write(weaved)
    weave:weave_all(pwd) 
elseif verb == \"spec\" then
    -- This is just a shim to get us inside whatever
    -- I'm working on
    local abstr = \"((first second) third (fourth fifth 23))\"
    local abNode = spec.clu(abstr)
    assert(abNode.isNode)
    io.write(tostring(abNode))
    io.write(\"nodewalker:\\n\")
    for node in abNode:walkPost() do
        io.write(node.id .. \" -- \")
    end
    io.write(\"\\n\")
    for node in abNode:walk() do
        io.write(node.id .. \" ~~ \")
    end
    io.write(\"\\n\")
    for node in abNode:select(\"atom\") do
        io.write(node.id .. \" %% \")
        if second then 
            io.write(\" found a second \" .. second .. \" \")
        end
    end
    io.write(\"\\n\")
    for tok in abNode:tokens() do
        io.write(tok .. \" || \")
    end
    if s.verbose then
        io.write(\"\\n\\n\"..ansi.cyan(\"DOC SEQUENCE\")..\"\\n\")
        for sec in sample_doc:select(\"section\") do
            io.write(ansi.magenta(\"section\") .. \"\\n\")
            io.write(tostring(sec) .. \"\\n\")
        end
        local sects = sample_doc:gather \"section\"
        for _, sec in ipairs(sects) do
            io.write(ansi.cyan(\"section\") .. \"\\n\")
            io.write(tostring(sec) .. \"\\n\")
        end
    end

elseif not verb then
    -- do the things
    weave:weave_all(pwd)
    knit:knit_all(pwd)
end"]
// END RANK codeblock_57

section_58 -> { header_78 prose_79 codeblock_80}
{rank=same; header_78 prose_79 codeblock_80}

header_78 [label="3 : Run the samples and make dotfiles"]

prose_79 [label="prose"]

codeblock_80 [label="code block 164-182"]


// END RANK section_58

header_78 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Run the samples and make dotfiles"]
// END RANK header_78

prose_79 -> { raw_82}
{rank=same; raw_82}

raw_82 [label="raw"]


// END RANK prose_79

raw_82 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_82

codeblock_80 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="---[[
for _,v in ipairs(samples) do
    if v:match(\"~\") == nil then
        if verbose then io.write(v) end
        local sample = read(v)
        --io.write(v..\"\\n\")
        local doc = Doc(sample)
        local doc_dot = doc:dot()
        local old_dot = read(\"../orb/dot/\" .. v .. \".dot\")
        if old_dot and old_dot ~= doc_dot then
            io.write(\"   -- changed dotfile: \" .. v)
            write(\"../orb/dot/\" .. v .. \"-old.dot\", old_dot)
        end
        write(\"../orb/dot/\" .. v .. \".dot\", doc:dot())
    end
end
--]]"]
// END RANK codeblock_80


}
