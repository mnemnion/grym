digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 82"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-82"]


section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 prose_8 prose_9 codeblock_10}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 prose_8 prose_9 codeblock_10}

header_2 [label="0 : "]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

prose_8 [label="prose"]

prose_9 [label="prose"]

codeblock_10 [label="code block 23-82"]


header_2 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_3 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 This walks an AST, making back references to the parent node.
 
 This shouldn't be a separate step, but that's premature optimization.
"]
prose_4 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 This is conceptually simple:
"]
prose_5 -> { raw_16}
{rank=same; raw_16}

raw_16 [label="raw"]


raw_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Take the tree, add a parent reference  that points to itself.
"]
prose_6 -> { raw_18}
{rank=same; raw_18}

raw_18 [label="raw"]


raw_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Take all child members, if they're nodes, call the function recursively with the parent and
 nodes as argument.
"]
prose_7 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 This is the usual recursive function wrapped in pre and post matter. 
"]
prose_8 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Now that I've added an index, I'm considering a cleaner parent implementation, where the 
 parent is simply a number which must be looked up against the index. To completely eliminate
 back references, the index might be a closure which returns the table given the argument, 
 thus `index(i)` rather than `index[i]`. 
"]
prose_9 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 It would be useful for our decorated AST to have no cycles, since we're guaranteed to 
 traverse it in linear time with no cycle checking. 
"]
codeblock_10 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local util = require \"lib/util\"
local backwalk = {}

local function make_backref (ast)
   return function() return ast end
end


local function index_gen ()
   local first = {}
   local last  = {}
   local closed = {}
   local depth = {}
   local length = 0
   local meta  = util.F()
   meta.__call = function(_, ordinal)
      return first[ordinal], last[ordinal], depth[ordinal]
   end
   -- This override requires 5.2
   meta.__len = function() return length end
   closed.len = function() return length end
   closed.add = function(table, deep)
      length = length+1
      first[length] = table
      first[table]  = length -- Janus table!
       depth[length] = deep
       depth[table]  = deep
   end
   closed.close = function(table)
      last[first[table]] = length
      last[table] = length
   end
   setmetatable(closed,meta)
   return closed
end

function backwalk.walk_ast (ast)
   local index = index_gen()
   local str = ast.str
   local function walker (ast, parent, deep)
      deep = deep + 1
      if ast.isnode then
         index.add(ast,deep)
         for i, v in ipairs(ast) do
            if type(v) == \"table\" and v.isnode then
                walker(v,ast, deep)
            end
         end
         ast.parent = make_backref(parent)
         index.close(ast)
       end
   end
   walker(ast,ast,0)
   ast.index = index
   return ast 
end

return backwalk"]

}
