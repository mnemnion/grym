digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 49"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-49"]


section_1 -> { header_2 block_3 block_4 block_5}
{rank=same; header_2 block_3 block_4 block_5}

header_2 [label="0 : "]

block_3 [label="block 1-3"]

block_4 [label="block 4-5"]

block_5 [label="block 6-49"]


block_3 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Core Syntax Rules
"]
block_4 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" A collection of useful regular patterns
"]
block_5 -> { codeblock_8}
{rank=same; codeblock_8}

codeblock_8 [label="code block 6-49"]


codeblock_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local lpeg = require \"lpeg\"
local epeg = require \"peg/epeg\"

local match = lpeg.match -- match a pattern against a string
local P = lpeg.P -- match a string literally
local S = lpeg.S  -- match anything in a set
local R = epeg.R  -- match anything in a range
local B = lpeg.B
local C = lpeg.C  -- captures a match
local Csp = epeg.Csp -- captures start and end position of match
local Ct = lpeg.Ct -- a table with all captures from the pattern
local V = lpeg.V -- create a variable within a grammar
local Cmt = lpeg.Cmt

local digit = R\"09\"

local letter = R\"AZ\" + R\"az\"

local int   = digit^1

local float = digit^1 
         * P\".\" * digit^1 
          * ((P\"e\" + P\"E\") * digit^1)^0

local escape =  -P\"\\\\\" * P(1) + P\"\\\\\" * P(1)

local string_single = P\"'\" * (-P\"'\" * escape)^0 * P\"'\"
local string_double = P'\"' * (-P'\"' * escape)^0 * P'\"'
local string_backtick   = P\"`\" * (-P\"`\" * escape)^0 * P\"`\"

local strings = string_single + string_double + string_backtick

return {
   digit = digit,
   letter = letter,
   int = int,
   float = float,
   strings = strings,
   escape = escape,
   string_single = string_single,
   string_double = string_double,
   string_back = string_backtick }"]
block_5 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_1 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Core Syntax Rules

 A collection of useful regular patterns

#!lua
local lpeg = require \"lpeg\"
local epeg = require \"peg/epeg\"

local match = lpeg.match -- match a pattern against a string
local P = lpeg.P -- match a string literally
local S = lpeg.S  -- match anything in a set
local R = epeg.R  -- match anything in a range
local B = lpeg.B
local C = lpeg.C  -- captures a match
local Csp = epeg.Csp -- captures start and end position of match
local Ct = lpeg.Ct -- a table with all captures from the pattern
local V = lpeg.V -- create a variable within a grammar
local Cmt = lpeg.Cmt

local digit = R\"09\"

local letter = R\"AZ\" + R\"az\"

local int   = digit^1

local float = digit^1 
         * P\".\" * digit^1 
          * ((P\"e\" + P\"E\") * digit^1)^0

local escape =  -P\"\\\\\" * P(1) + P\"\\\\\" * P(1)

local string_single = P\"'\" * (-P\"'\" * escape)^0 * P\"'\"
local string_double = P'\"' * (-P'\"' * escape)^0 * P'\"'
local string_backtick   = P\"`\" * (-P\"`\" * escape)^0 * P\"`\"

local strings = string_single + string_double + string_backtick

return {
   digit = digit,
   letter = letter,
   int = int,
   float = float,
   strings = strings,
   escape = escape,
   string_single = string_single,
   string_double = string_double,
   string_back = string_backtick }
#/lua"]

}
