digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="68  "]

doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="68  "]

section_1 -> { header_2 block_3 block_4 block_5}
{rank=same; header_2 block_3 block_4 block_5}

header_2 [label=":   "]
block_3 [label="-1  "]
block_4 [label="30  "]
block_5 [label="68  "]


block_3 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]block_4 -> { codeblock_7}
{rank=same; codeblock_7}

codeblock_7 [label="27  "]


codeblock_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="require 'pl.strict'

local lpeg = require \"lpeg\"
--local clu = require \"core/prelude\"
local ansi = require \"ansi\"
local util = require \"util\"
local epeg = require \"peg/epeg\"
local core = require \"peg/core-rules\"
local clear = ansi.clear()
local epnf = require \"peg/epnf\"
local ast = require \"peg/ast\"
local t = require \"peg/transform\"

local match = lpeg.match -- match a pattern against a string
local P = lpeg.P -- match a string literally
local S = lpeg.S  -- match anything in a set
local R = epeg.R  -- match anything in a range
local B = lpeg.B
local C = lpeg.C  -- captures a match
local Csp = epeg.Csp -- captures start and end position of match
local Ct = lpeg.Ct -- a table with all captures from the pattern
local V = lpeg.V -- create a variable within a grammar

local WS = (P' ' + P'\\n' + P',' + P'\\09')^0
"]
block_4 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 a deliberately bad lisp

"]block_5 -> { codeblock_10}
{rank=same; codeblock_10}

codeblock_10 [label="68  "]


codeblock_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local _lisp_fn = function() 
   local function ret(_ENV)
      START\"lisp\"
      lisp = V\"form\"^1
      form = V\"_WS\" * V\"atom\" * V\"_WS\" 
           + V\"_WS\" * V\"list\" * V\"_WS\"
      list = P\"(\" * V\"form\"^0 * P\")\"
      atom = Csp(V\"symbol\") + Csp(V\"number\")
      symbol = (R\"AZ\" + R\"az\")^1
      number =  (R\"09\")^1
      _WS = WS
   end
   return ret
end

local _lisp_fn_2 = function()
   local function ret(_ENV)
      START\"lisp\"
      SUPPRESS (\"_WS\", \"atom\", \"form\")
      local _symbol = (R\"AZ\" + R\"az\")^1
      local _number = (R\"09\")^1
      lisp = V\"form\"^1
      form = V\"_WS\" * V\"atom\" * V\"_WS\" 
           + V\"_WS\" * V\"list\" * V\"_WS\"
      list = P\"(\" * V\"form\"^0 * P\")\"
      atom = V\"symbol\" + V\"number\"
      symbol = Csp(_symbol)
      number = Csp(_number) 
      _WS = WS
   end
   return ret
end


return { lisp = epnf.define(_lisp_fn()),
       lisp2 = epnf.define(_lisp_fn_2())}
"]
block_5 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
}
