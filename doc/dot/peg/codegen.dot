digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 117"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-117"]


section_1 -> { header_2 prose_3 codeblock_4 codeblock_5 prose_6 codeblock_7 structure_8 codeblock_9}
{rank=same; header_2 prose_3 codeblock_4 codeblock_5 prose_6 codeblock_7 structure_8 codeblock_9}

header_2 [label="0 : "]

prose_3 [label="prose"]

codeblock_4 [label="code block 2-4"]

codeblock_5 [label="code block 14-24"]

prose_6 [label="prose"]

codeblock_7 [label="code block 30-59"]

structure_8 [label="structure"]

codeblock_9 [label="code block 64-117"]


prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_4 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="--- Code Generator"]
codeblock_5 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local file = require 'pl.file'

local transform = require \"peg/transform\"


local isrecursive = transform.isrecursive
local notrecursive = transform.notrecursive

--We start with pegylator.lua"]
prose_6 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Eventually all the imports are replaced with
 require \"pegylator\"
 but first we must write it. 
"]
codeblock_7 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local prefix = [[ 
require 'pl.strict'

local lpeg = require \"lpeg\"
local clu = require \"clu/prelude\"
local util = require \"util\"
local epeg = require \"peg/epeg\"
local core = require \"peg/core-rules\"
local dump_ast = util.dump_ast
local clear = ansi.clear()
local epnf = require \"peg/epnf\"
local ast = require \"peg/ast\"
local grammar = require \"peg/grammars\"
local t = require \"peg/transform\"

local match = lpeg.match -- match a pattern against a string
local P = lpeg.P -- match a string literally
local S = lpeg.S  -- match anything in a set
local R = epeg.R  -- match anything in a range
local B = lpeg.B
local C = lpeg.C  -- captures a match
local Csp = epeg.Csp -- captures start and end position of match
local Ct = lpeg.Ct -- a table with all captures from the pattern
local V = lpeg.V -- create a variable within a grammar

local WS = P' ' + P'\\n' + P',' + P'\\09'

]]"]
structure_8 -> { handleline_17}
{rank=same; handleline_17}

handleline_17 [label="handleline"]


handleline_17 -> { handle_18}
{rank=same; handle_18}

handle_18 [label="handle"]


handle_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_9 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local definer = [[
local _generator = function{}
  local function generated(_ENV)
]]

local end_definer = [[
  end
  return generated
end
]]

local caller = [[

local peg = epnf.define(_generator(),nil,false)
]]

local function local_rules(ast)
   local locals = ast:select(notrecursive)
   local phrase = \"\"
   for i = 1, #locals do
      phrase = phrase..\"    \"..locals[i]:flatten()
   end
   return phrase
end

local function cursive_rules(ast)
   local cursives = ast:select(isrecursive)
   local phrase  = \"\"
   for i = 1, #cursives do
      phrase = phrase..\"  \"..cursives[i]:flatten()
   end
   return phrase
end

local function write(str)
   return file.write(\"gen.lua\",str)
end

local function build(ast)
   local phrase = prefix..ast:root().imports..
                --local_rules(ast)..\"\\n\\n\"..
             definer..ast:root().start_rule..
             --cursive_rules(ast)..end_definer
             local_rules(ast)..end_definer..
             caller
   write(phrase)
   return phrase
end

return { local_rules = local_rules,
       cursive_rules = cursive_rules,
       build = build }"]

}
