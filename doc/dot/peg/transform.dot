digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 138"]

doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-138"]

section_1 -> { header_2 block_3 block_4 block_5 block_6 block_7 block_8 block_9}
{rank=same; header_2 block_3 block_4 block_5 block_6 block_7 block_8 block_9}

header_2 [label=""]
block_3 [label="block 1-1"]
block_4 [label="block 2-8"]
block_5 [label="block 9-60"]
block_6 [label="block 61-63"]
block_7 [label="block 64-127"]
block_8 [label="block 128-129"]
block_9 [label="block 130-nil"]


block_3 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]block_4 -> { codeblock_11 structure_12}
{rank=same; codeblock_11 structure_12}

codeblock_11 [label="code block 2-4"]
structure_12 [label="structure"]


codeblock_11 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="--- Transform Module
"]structure_12 -> { handleline_14}
{rank=same; handleline_14}

handleline_14 [label="handleline"]

handleline_14 -> { handle_15}
{rank=same; handle_15}

handle_15 [label="handle"]


handle_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_4 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


"]block_5 -> { codeblock_18}
{rank=same; codeblock_18}

codeblock_18 [label="code block 14-59"]


codeblock_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local t = {}

local dot_header = [=[
digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

]=]

local dot_footer = [=[

}
]=]

local leaf_font  = \"Inconsolata\"
local leaf_color = \"Gray\"

local function ast_to_label(ast, leaf_count)
   -- nodes need unique names, so we append a leaf_count and increment it
   local label      = ast.id.. \"_\" .. leaf_count 
   local label_line = label .. \" [label=\\"\"
      .. ast:dotLabel():gsub('\"', '\\\"') .. \"\\"]\"
   return label, label_line, leaf_count + 1
end

local function list_from_table(tab)
   local table_list = \"\"
   for _,v in ipairs(tab) do
      table_list = table_list..\" \"..v
   end
   return table_list
end

local function value_to_label(value, leaf_count)
   -- Generates a name and label for a leaf node.
   -- Returns these with an incremented leaf_count.
   local value = value:gsub('\"', '\\\"')
   local name  = \"leaf_\"..leaf_count
   local label = \" [color=\"..leaf_color..\",shape=rectangle,fontname=\"
         ..leaf_font..\",label=\\"\"..value..\"\\"]\"

   return name, label, leaf_count + 1
end
"]
block_5 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - [ ] Make header and footer configurable values of t
  - [ ] Make leaf_font and leaf_color configurable values of t


"]
block_6 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Recursively walk an AST, concatenating dot descriptions
 to the phrase. 

"]block_7 -> { codeblock_22}
{rank=same; codeblock_22}

codeblock_22 [label="code block 64-126"]


codeblock_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function dot_ranks(ast, phrase, leaf_count, ast_label)
   local leaf_count = leaf_count or 0

   -- Add the node we're working on
   if ast.isnode then
      local label = \"\"
      local label_line = \"\"
      local child_labels = {}
      local child_label_lines = {}

      -- Handle anonymous nodes
      if not ast_label then
         label, label_line, leaf_count = ast_to_label(ast, leaf_count)
         phrase = phrase .. label_line .. \"\n\n\"
      else 
         label = ast_label 
      end

      -- Document child nodes
      for i,v in ipairs(ast) do
         -- assemble labels and label lines for all child nodes
         if v.isnode then
            child_labels[i], child_label_lines[i], leaf_count = 
               ast_to_label(v, leaf_count)
         end
      end

      local child_list = list_from_table(child_labels)

      if next(child_labels) ~= nil then
         phrase = phrase..label..\" -> {\"..child_list..\"}\n\"
         phrase = phrase..\"{rank=same;\"..list_from_table(child_labels)..\"}\n\n\"
      end

      -- Concatenate child label lines
      for _, v in ipairs(child_label_lines) do
         phrase = phrase..v..\"\n\"
      end

      if next(child_labels) ~= nil then
         phrase = phrase..\"\n\"
      end

      -- Execute recursively for all nodes
      for i,v in ipairs(ast) do
         if v.isnode then
            phrase, leaf_count = dot_ranks(v, phrase, leaf_count, child_labels[i])
         end
      end

      -- Document value of Node (aka span)
      if ast.val then
         local name = \"\" ; local val_label = \"\"
         name, val_label, leaf_count = value_to_label(ast.val, leaf_count)
         phrase = phrase..\"\n\"..label..\" -> \"..name..\"\n\"
         phrase = phrase..name..\" \"..val_label
      end
   end

   return phrase, leaf_count
end
"]
block_7 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
block_8 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" turn an AST into a dotfile string. 

"]block_9 -> { codeblock_26}
{rank=same; codeblock_26}

codeblock_26 [label="code block 130-138"]


codeblock_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function t.dot(ast)
   local phrase = dot_header

   return  dot_ranks(ast, phrase) .. dot_footer
end

return t
"]
block_9 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
}
