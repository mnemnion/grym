digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 196"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-196"]


section_1 -> { header_2 prose_3 codeblock_4 codeblock_5 prose_6 codeblock_7 block_8 codeblock_9 block_10 codeblock_11}
{rank=same; header_2 prose_3 codeblock_4 codeblock_5 prose_6 codeblock_7 block_8 codeblock_9 block_10 codeblock_11}

header_2 [label="0 : "]

prose_3 [label="prose"]

codeblock_4 [label="code block 2-10"]

codeblock_5 [label="code block 15-61"]

prose_6 [label="prose"]

codeblock_7 [label="code block 67-117"]

block_8 [label="block 119-127"]

codeblock_9 [label="code block 128-176"]

block_10 [label="block 178-182"]

codeblock_11 [label="code block 183-196"]


prose_3 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_4 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="--- Generates a terminal syntax highlighter for a given grammar. 

--local clu = require \"clu/prelude\"
local lpeg = require \"lpeg\"
local ast = require \"peg/ast\"
local util = require \"lib/util\"
local tableand = util.tableand"]
codeblock_5 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="--local p = clu.env.palette

 testrules = { atom           = {\"White\",\"Clear\"},
              pattern        = {\"Blue\",\"Clear\"},
              optional       = {\"Green\",\"Clear\"},
              more_than_one  = {\"Green\",\"Clear\"},
              some_number    = {\"Green\",\"Clear\"},
              some_suffix    = {\"Green\",\"Clear\"},
              which_suffix   = {\"Green\",\"Clear\"},
              maybe          = {\"Green\",\"Clear\"},
              set            = {\"Yellow\",\"Clear\"},
              range          = {\"Yellow\",\"Clear\"},
              literal        = {\"Yellow\",\"Clear\"},
              PEL            = {\"Grey\",\"Clear\"},
              PER            = {\"Grey\",\"Clear\"},
              hidden_rule    = {\"Cyan\",\"Clear\"},
              hidden_pattern = {\"Cyan\",\"Clear\"},
              hidden_match   = {\"Cyan\",\"Clear\"},
              repeats        = {\"Red\",\"Clear\"},
              comment        = {\"Grey\",\"Clear\"}}


function makerules(rules)
    local rule_table = {}
    local p = nil
       -- this logic belongs in a palette 
      -- object which may be called. 
    if clu.env.ansi then 
      p = clu.env.palette.default
   else
      p = clu.env.palette.no_color
   end 
   for k,v in pairs(rules) do
      if type(v) == \"table\" then 
         rule_table[k] = { p[v[1]] , p[v[2]] }
      else -- string or function
         error \"error in makerules, non-table values NYI\"
      end
   end
   return rule_table
end



--local testrules = { atom = {\"\",\"\"}, lhs = {\"\",\"\"}}"]
prose_6 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 wraps a value in a rule, or
 returns it if the rule is nil.
"]
codeblock_7 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function rulewrap_value(ast,rules)
    if rules[ast.id] then
       local rule = rules[ast.id]
       if type (rule) == \"string\" then -- pre only
          return rule..ast.val..p.Clear
      elseif type (rule) == \"table\" then -- pre and post
         return rule[1]..ast.val..rule[2]
      elseif type (rule) == \"function\" then -- function over value
         print \"function reached in rulewrap_value\"
         return \"\"
      end
    else
       return ast.val
    end
end

local function rulewrap_open(ast,rules)
   if rules[ast.id] then
      local rule = rules[ast.id]
      if type(rule) == \"string\" then -- pre only
         return rule
      elseif type(rule) == \"table\" then -- use pre
         return rule[1]
      elseif type(rule) == \"function\" then -- fn over span
         print \"function reached in rulewrap_start\"
         return \"\"
      end
   else 
      return \"\" 
   end
end

local function rulewrap_close(ast,rules)
   if rules[ast.id] then
      local rule = rules[ast.id]
      if type(rule) == \"string\" then 
         return \"\"
      elseif type(rule) == \"table\" then
         return rule[2]
      elseif type(rule) == \"function\" then
         print \"function reached in rulewrap_close\"
         return \"\"
      end
   else
      return \"\"
   end
end

--- highlights a Node."]
block_8 -> { structure_17 structure_18 structure_19 structure_20}
{rank=same; structure_17 structure_18 structure_19 structure_20}

structure_17 [label="structure"]

structure_18 [label="structure"]

structure_19 [label="structure"]

structure_20 [label="structure"]


structure_17 -> { handleline_21}
{rank=same; handleline_21}

handleline_21 [label="handleline"]


handleline_21 -> { handle_22}
{rank=same; handle_22}

handle_22 [label="handle"]


handle_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_18 -> { handleline_24}
{rank=same; handleline_24}

handleline_24 [label="handleline"]


handleline_24 -> { handle_25}
{rank=same; handle_25}

handle_25 [label="handle"]


handle_25 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_19 -> { handleline_27}
{rank=same; handleline_27}

handleline_27 [label="handleline"]


handleline_27 -> { handle_28}
{rank=same; handle_28}

handle_28 [label="handle"]


handle_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_20 -> { handleline_30}
{rank=same; handleline_30}

handleline_30 [label="handleline"]


handleline_30 -> { handle_31}
{rank=same; handle_31}

handle_31 [label="handle"]


handle_31 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_9 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function light(ast, rules)
   if rules then 
      rules = makerules(rules)
   else 
      rules = makerules(testrules) 
   end

   local source = ast:root().str
   local queue = {}
   local phrase = \"\"
   local cursor = 1
   local gap = \"\"
   local ndx, first, last = ast:range()
   local new = true
   for i = first, last do
      local node, close, _ = ndx(i)
      if rules[node.id] 
        and node.val == nil then -- open regional rule
         gap = source:sub(cursor,node.first-1)
         cursor = node.first
         queue[close] = node
         phrase = phrase..gap..rulewrap_open(node,rules)
      elseif node.id and node.val then -- wrap values in rule
         if new then 
            phrase = phrase..source:sub(1,ndx[1].first-1)
            new = false
         end
         if cursor <= node.first then
              gap = source:sub(cursor,node.first-1)
         end
         cursor = node.last+1
         phrase = phrase..gap..rulewrap_value(node,rules)
      end
      if queue[i] then -- close regional rule
         gap = source:sub(cursor,queue[i].last-1)
         cursor = queue[i].last
         phrase = phrase
                  ..rulewrap_open(queue[i],rules)
                  ..gap
                  ..rulewrap_close(queue[i],rules)
      end
   end
   phrase = phrase..source:sub(cursor,-1)
   return phrase
end

--- generates a highlighter from a rule table"]
block_10 -> { structure_34 structure_35 structure_36 structure_37}
{rank=same; structure_34 structure_35 structure_36 structure_37}

structure_34 [label="structure"]

structure_35 [label="structure"]

structure_36 [label="structure"]

structure_37 [label="structure"]


structure_34 -> { handleline_38}
{rank=same; handleline_38}

handleline_38 [label="handleline"]


handleline_38 -> { handle_39}
{rank=same; handle_39}

handle_39 [label="handle"]


handle_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_35 -> { handleline_41}
{rank=same; handleline_41}

handleline_41 [label="handleline"]


handleline_41 -> { handle_42}
{rank=same; handle_42}

handle_42 [label="handle"]


handle_42 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_36 -> { handleline_44}
{rank=same; handleline_44}

handleline_44 [label="handleline"]


handleline_44 -> { handle_45}
{rank=same; handle_45}

handle_45 [label="handle"]


handle_45 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
structure_37 -> { handleline_47}
{rank=same; handleline_47}

handleline_47 [label="handleline"]


handleline_47 -> { handle_48}
{rank=same; handle_48}

handle_48 [label="handle"]


handle_48 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_11 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function Highlighter(parser, rules)
   local function lighter(source)
      if type(source) == \"string\" then
         source = ast.parse(parser,source)
      end
      return light(source, rules)
   end
   return lighter
end

return {Highlighter = Highlighter,
      light = light}"]

}
