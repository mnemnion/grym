digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 288"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-99"]


section_1 -> { header_2 block_3 block_4 block_5 block_6 block_7 block_8 block_9 block_10 block_11 block_12 block_13 block_14 block_15 block_16 section_17}
{rank=same; header_2 block_3 block_4 block_5 block_6 block_7 block_8 block_9 block_10 block_11 block_12 block_13 block_14 block_15 block_16 section_17}

header_2 [label="0 : "]

block_3 [label="block 1-3"]

block_4 [label="block 4-23"]

block_5 [label="block 24-25"]

block_6 [label="block 26-29"]

block_7 [label="block 30-31"]

block_8 [label="block 32-35"]

block_9 [label="block 36-37"]

block_10 [label="block 38-43"]

block_11 [label="block 44-46"]

block_12 [label="block 47-66"]

block_13 [label="block 67-68"]

block_14 [label="block 69-81"]

block_15 [label="block 82-83"]

block_16 [label="block 84-99"]

section_17 [label="section: 100-288"]


block_3 -> { prose_18}
{rank=same; prose_18}

prose_18 [label="prose"]


prose_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" A modified epnf.
"]
block_4 -> { codeblock_20}
{rank=same; codeblock_20}

codeblock_20 [label="code block 4-22"]


codeblock_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require( \"lpeg\" )
---[[
local assert = assert
local _VERSION = assert( _VERSION )
local string, io = assert( string ), assert( io )
local error = assert( error )
local pairs = assert( pairs )
local next = assert( next )
local type = assert( type )
local tostring = assert( tostring )
local setmetatable = assert( setmetatable )
local setfenv 
if _VERSION == \"Lua 5.1\" then
  setfenv = setfenv
  assert( setfenv )
end
--]]"]
block_5 -> { prose_22}
{rank=same; prose_22}

prose_22 [label="prose"]


prose_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" module table
"]
block_6 -> { codeblock_24}
{rank=same; codeblock_24}

codeblock_24 [label="code block 26-28"]


codeblock_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local epnf = {}"]
block_7 -> { prose_26}
{rank=same; prose_26}

prose_26 [label="prose"]


prose_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Node metatable
"]
block_8 -> { codeblock_28}
{rank=same; codeblock_28}

codeblock_28 [label="code block 32-34"]


codeblock_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="epnf.Node = require \"peg/node\""]
block_9 -> { prose_30}
{rank=same; prose_30}

prose_30 [label="prose"]


prose_30 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" maximum of two numbers while avoiding math lib as a dependency
"]
block_10 -> { codeblock_32}
{rank=same; codeblock_32}

codeblock_32 [label="code block 38-42"]


codeblock_32 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function max( a, b )
  if a < b then return b else return a end
end"]
block_11 -> { prose_34}
{rank=same; prose_34}

prose_34 [label="prose"]


prose_34 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" get the line which p points into, the line number and the position
 of the beginning of the line
"]
block_12 -> { codeblock_36}
{rank=same; codeblock_36}

codeblock_36 [label="code block 47-65"]


codeblock_36 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function getline( s, p )
  local lno, sol = 1, 1
  for i = 1, p do
    if string.sub( s, i, i ) == \"\\n\" then
      lno = lno + 1
      sol = i + 1
    end
  end
  local eol = #s
  for i = sol, #s do
    if string.sub( s, i, i ) == \"\\n\" then
      eol = i - 1
      break
    end
  end
  return string.sub( s, sol, eol ), lno, sol
end"]
block_13 -> { prose_38}
{rank=same; prose_38}

prose_38 [label="prose"]


prose_38 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" raise an error during semantic validation of the ast
"]
block_14 -> { codeblock_40}
{rank=same; codeblock_40}

codeblock_40 [label="code block 69-80"]


codeblock_40 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function raise_error( n, msg, s, p )
  local line, lno, sol = getline( s, p )
  assert( p <= #s )
  local clen = max( 70, p+10-sol )
  if #line > clen then
    line = string.sub( line, 1, clen ) .. \"...\"
  end
  local marker = string.rep( \" \", p-sol ) .. \"^\"
  error(\":\"..lno..\": \"..msg..\"\\n\"..line..\"\\n\"..marker, 0 )
end"]
block_15 -> { prose_42}
{rank=same; prose_42}

prose_42 [label="prose"]


prose_42 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" parse-error reporting function
"]
block_16 -> { codeblock_44}
{rank=same; codeblock_44}

codeblock_44 [label="code block 84-98"]


codeblock_44 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function parse_error( s, p, n, e )
  if p <= #s then
    local msg = \"parse error\"
    if e then msg = msg .. \", \" .. e end
    raise_error( n, msg, s, p )
  else -- parse error at end of input
    local _,lno = string.gsub( s, \"\\n\", \"\\n\" )
    if string.sub( s, -1, -1 ) ~= \"\\n\" then lno = lno + 1 end
    local msg = \": parse error at <eof>\"
    if e then msg = msg .. \", \" .. e end
    error( n..\":\"..lno..msg, 0 )
  end
end"]
section_17 -> { header_46 block_47 block_48 block_49 block_50 block_51 block_52 block_53 block_54 block_55 block_56 block_57 block_58 block_59 block_60 block_61 block_62 block_63 block_64 block_65}
{rank=same; header_46 block_47 block_48 block_49 block_50 block_51 block_52 block_53 block_54 block_55 block_56 block_57 block_58 block_59 block_60 block_61 block_62 block_63 block_64 block_65}

header_46 [label="3 : make_ast_node"]

block_47 [label="block 100-103"]

block_48 [label="block 104-106"]

block_49 [label="block 107-130"]

block_50 [label="block 131-132"]

block_51 [label="block 133-150"]

block_52 [label="block 151-153"]

block_53 [label="block 154-208"]

block_54 [label="block 209-211"]

block_55 [label="block 212-217"]

block_56 [label="block 218-219"]

block_57 [label="block 220-228"]

block_58 [label="block 229-231"]

block_59 [label="block 232-240"]

block_60 [label="block 241-242"]

block_61 [label="block 243-271"]

block_62 [label="block 272-274"]

block_63 [label="block 275-282"]

block_64 [label="block 283-284"]

block_65 [label="block 285-288"]


block_47 -> { prose_66}
{rank=same; prose_66}

prose_66 [label="prose"]


prose_66 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This needs to look for a metatable in the defined parser.
"]
block_48 -> { prose_68}
{rank=same; prose_68}

prose_68 [label="prose"]


prose_68 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Which means we need to pass that in. 

"]
block_49 -> { codeblock_70}
{rank=same; codeblock_70}

codeblock_70 [label="code block 107-129"]


codeblock_70 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function make_ast_node(metatables, id, first, t, last, str, root)
  if type(t[1]) == \"table\" then    
    if t[1].span then
        t.val = t[1].val
        t.first = t[1].first
        t.last = t[1].last
        t[1] = nil
    else
      t.first = first
      t.last = last
    end
    t.id = id
    t.root = root
    setmetatable(t,epnf.Node)
    return t
  end
end

local function anon_node (t) 
  return unpack(t)
end"]
block_50 -> { prose_72}
{rank=same; prose_72}

prose_72 [label="prose"]


prose_72 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" some useful/common lpeg patterns
"]
block_51 -> { codeblock_74}
{rank=same; codeblock_74}

codeblock_74 [label="code block 133-149"]


codeblock_74 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L_Cp = L.Cp()
local L_Carg_1 = L.Carg( 1 )
local function E( msg )
  return L.Cmt( L_Carg_1 * L.Cc( msg ), parse_error )
end
local function EOF( msg )
  return -L.P( 1 ) + E( msg )
end
local letter = L.R( \"az\", \"AZ\" ) + L.P\"_\"
local digit = L.R\"09\"
local ID = L.C( letter * (letter+digit)^0 )
local function W( s )
  return L.P( s ) * -(letter+digit)
end
local WS = L.S\" \\r\\n\\t\\f\\v\""]
block_52 -> { prose_76}
{rank=same; prose_76}

prose_76 [label="prose"]


prose_76 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="setup an environment where you can easily define lpeg grammars
 with lots of syntax sugar
"]
block_53 -> { codeblock_78}
{rank=same; codeblock_78}

codeblock_78 [label="code block 154-207"]


codeblock_78 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function epnf.define( func, g, unsuppressed)
  g = g or {}
  local suppressed = {}
  local env = {}
  local node_mts = {}
  local env_index = {
    START = function( name ) g[ 1 ] = name end,
    SUPPRESS = function( ... )
      suppressed = {}
      for i = 1, select( '#', ... ) do
        suppressed[ select( i, ... ) ] = true
      end
    end,
    E = E,
    EOF = EOF,
    ID = ID,
    W = W,
    WS = WS,
  }
  -- copy lpeg shortcuts
  for k,v in pairs( L ) do
    if string.match( k, \"^%u%w*$\" ) then
      env_index[ k ] = v
    end
  end
  setmetatable( env_index, { __index = _G } )
  setmetatable( env, {
    __index = env_index,
    __newindex = function( _, name, val )
      if suppressed[ name ] and not unsuppressed then
        local v = L.Ct( val ) / anon_node
          g[ name ] = v
      else
        local v = ( L.Cc(node_mts)
                * L.Cc( name ) 
                * L_Cp 
                * L.Ct( val ) 
                * L_Cp 
                * L.Carg(1)
                * L.Carg(2)) / make_ast_node
          g[name] = v
      end
    end
  } )
  -- call passed function with custom environment (5.1- and 5.2-style)
  if _VERSION == \"Lua 5.1\" then
    setfenv( func, env )
  end
  func( env )
  assert( g[ 1 ] and g[ g[ 1 ] ], \"no start rule defined\" )
  return g
end"]
block_54 -> { prose_80}
{rank=same; prose_80}

prose_80 [label="prose"]


prose_80 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" apply a given grammar to a string and return the ast. also allows
 to set the name of the string for error messages
"]
block_55 -> { codeblock_82}
{rank=same; codeblock_82}

codeblock_82 [label="code block 212-216"]


codeblock_82 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function epnf.parse( g, name, input, ... )
  return L.match( L.P( g ), input, 1, name, ... ), name, input
end"]
block_56 -> { prose_84}
{rank=same; prose_84}

prose_84 [label="prose"]


prose_84 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" apply a given grammar to the contents of a file and return the ast
"]
block_57 -> { codeblock_86}
{rank=same; codeblock_86}

codeblock_86 [label="code block 220-227"]


codeblock_86 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function epnf.parsefile( g, fname, ... )
  local f = assert( io.open( fname, \"r\" ) )
  local a,n,i = epnf.parse( g, fname, assert( f:read\"*a\" ), ... )
  f:close()
  return a,n,i
end"]
block_58 -> { prose_88}
{rank=same; prose_88}

prose_88 [label="prose"]


prose_88 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" apply a given grammar to a string and return the ast. automatically
 picks a sensible name for error messages
"]
block_59 -> { codeblock_90}
{rank=same; codeblock_90}

codeblock_90 [label="code block 232-239"]


codeblock_90 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function epnf.parsestring( g, str, ... )
  local s = string.sub( str, 1, 20 )
  if #s < #str then s = s .. \"...\" end
  local name = \"[\\\"\" .. string.gsub( s, \"\\n\", \"\\\\n\" ) .. \"\\\"]\"
  return epnf.parse( g, name, str, ... )
end"]
block_60 -> { prose_92}
{rank=same; prose_92}

prose_92 [label="prose"]


prose_92 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" export a function for reporting errors during ast validation
"]
block_61 -> { codeblock_94}
{rank=same; codeblock_94}

codeblock_94 [label="code block 243-270"]


codeblock_94 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="epnf.raise = raise_error

local function write( ... ) return io.stderr:write( ... ) end

local function dump_ast( node, prefix )
  if type( node ) == \"table\" then
    write( \"{\" )
    if next( node ) ~= nil then
      write( \"\\n\" )
      if type( node.id ) == \"string\" and
         type( node.pos ) == \"number\" then
        write( prefix, \"  id = \", node.id,
               \",  pos = \", tostring( node.pos ), \"\\n\" )
      end
      for k,v in pairs( node ) do
        if k ~= \"id\" and k ~= \"pos\" then
          write( prefix, \"  \", tostring( k ), \" = \" )
          dump_ast( v, prefix..\"  \" )
        end
      end
    end
    write( prefix, \"}\\n\" )
  else
    write( tostring( node ), \"\\n\" )
  end
end"]
block_62 -> { prose_96}
{rank=same; prose_96}

prose_96 [label="prose"]


prose_96 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" write a string representation of the given ast to stderr for
 debugging
"]
block_63 -> { codeblock_98}
{rank=same; codeblock_98}

codeblock_98 [label="code block 275-279"]


codeblock_98 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function epnf.dumpast( node )
  return dump_ast( node, \"\" )
end"]
block_64 -> { prose_100}
{rank=same; prose_100}

prose_100 [label="prose"]


prose_100 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" return module table
"]
block_65 -> { codeblock_102}
{rank=same; codeblock_102}

codeblock_102 [label="code block 285-287"]


codeblock_102 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return epnf"]

}
