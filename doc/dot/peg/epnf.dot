digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 289"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-100"]


section_1 -> { header_2 prose_3 codeblock_4 prose_5 codeblock_6 prose_7 codeblock_8 prose_9 codeblock_10 prose_11 codeblock_12 prose_13 codeblock_14 prose_15 codeblock_16 section_17}
{rank=same; header_2 prose_3 codeblock_4 prose_5 codeblock_6 prose_7 codeblock_8 prose_9 codeblock_10 prose_11 codeblock_12 prose_13 codeblock_14 prose_15 codeblock_16 section_17}

header_2 [label="0 : "]

prose_3 [label="prose"]

codeblock_4 [label="code block 4-23"]

prose_5 [label="prose"]

codeblock_6 [label="code block 27-29"]

prose_7 [label="prose"]

codeblock_8 [label="code block 33-35"]

prose_9 [label="prose"]

codeblock_10 [label="code block 39-43"]

prose_11 [label="prose"]

codeblock_12 [label="code block 48-66"]

prose_13 [label="prose"]

codeblock_14 [label="code block 70-81"]

prose_15 [label="prose"]

codeblock_16 [label="code block 85-99"]

section_17 [label="section: 101-289"]


header_2 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" A modified epnf."]
prose_3 -> { raw_19}
{rank=same; raw_19}

raw_19 [label="raw"]


raw_19 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 A modified epnf.
"]
codeblock_4 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require( \"lpeg\" )
---[[
local assert = assert
local _VERSION = assert( _VERSION )
local string, io = assert( string ), assert( io )
local error = assert( error )
local pairs = assert( pairs )
local next = assert( next )
local type = assert( type )
local tostring = assert( tostring )
local setmetatable = assert( setmetatable )

if _VERSION == \"Lua 5.1\" then
  local setfenv = assert( setfenv )
else
  local setfenv
end
--]]"]
prose_5 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 module table
"]
codeblock_6 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local epnf = {}"]
prose_7 -> { raw_25}
{rank=same; raw_25}

raw_25 [label="raw"]


raw_25 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Node metatable
"]
codeblock_8 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="epnf.Node = require \"peg/node\""]
prose_9 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 maximum of two numbers while avoiding math lib as a dependency
"]
codeblock_10 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function max( a, b )
  if a < b then return b else return a end
end"]
prose_11 -> { raw_31}
{rank=same; raw_31}

raw_31 [label="raw"]


raw_31 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 get the line which p points into, the line number and the position
 of the beginning of the line
"]
codeblock_12 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function getline( s, p )
  local lno, sol = 1, 1
  for i = 1, p do
    if string.sub( s, i, i ) == \"\\n\" then
      lno = lno + 1
      sol = i + 1
    end
  end
  local eol = #s
  for i = sol, #s do
    if string.sub( s, i, i ) == \"\\n\" then
      eol = i - 1
      break
    end
  end
  return string.sub( s, sol, eol ), lno, sol
end"]
prose_13 -> { raw_34}
{rank=same; raw_34}

raw_34 [label="raw"]


raw_34 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 raise an error during semantic validation of the ast
"]
codeblock_14 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function raise_error( n, msg, s, p )
  local line, lno, sol = getline( s, p )
  assert( p <= #s )
  local clen = max( 70, p+10-sol )
  if #line > clen then
    line = string.sub( line, 1, clen ) .. \"...\"
  end
  local marker = string.rep( \" \", p-sol ) .. \"^\"
  error(\":\"..lno..\": \"..msg..\"\\n\"..line..\"\\n\"..marker, 0 )
end"]
prose_15 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 parse-error reporting function
"]
codeblock_16 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function parse_error( s, p, n, e )
  if p <= #s then
    local msg = \"parse error\"
    if e then msg = msg .. \", \" .. e end
    raise_error( n, msg, s, p )
  else -- parse error at end of input
    local _,lno = string.gsub( s, \"\\n\", \"\\n\" )
    if string.sub( s, -1, -1 ) ~= \"\\n\" then lno = lno + 1 end
    local msg = \": parse error at <eof>\"
    if e then msg = msg .. \", \" .. e end
    error( n..\":\"..lno..msg, 0 )
  end
end"]
section_17 -> { header_40 prose_41 prose_42 codeblock_43 prose_44 codeblock_45 prose_46 codeblock_47 prose_48 codeblock_49 prose_50 codeblock_51 prose_52 codeblock_53 prose_54 codeblock_55 prose_56 codeblock_57 prose_58 codeblock_59}
{rank=same; header_40 prose_41 prose_42 codeblock_43 prose_44 codeblock_45 prose_46 codeblock_47 prose_48 codeblock_49 prose_50 codeblock_51 prose_52 codeblock_53 prose_54 codeblock_55 prose_56 codeblock_57 prose_58 codeblock_59}

header_40 [label="3 : make_ast_node"]

prose_41 [label="prose"]

prose_42 [label="prose"]

codeblock_43 [label="code block 108-130"]

prose_44 [label="prose"]

codeblock_45 [label="code block 134-150"]

prose_46 [label="prose"]

codeblock_47 [label="code block 155-208"]

prose_48 [label="prose"]

codeblock_49 [label="code block 213-217"]

prose_50 [label="prose"]

codeblock_51 [label="code block 221-228"]

prose_52 [label="prose"]

codeblock_53 [label="code block 233-240"]

prose_54 [label="prose"]

codeblock_55 [label="code block 244-271"]

prose_56 [label="prose"]

codeblock_57 [label="code block 276-280"]

prose_58 [label="prose"]

codeblock_59 [label="code block 286-288"]


header_40 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** make_ast_node"]
prose_41 -> { raw_61}
{rank=same; raw_61}

raw_61 [label="raw"]


raw_61 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This needs to look for a metatable in the defined parser.
"]
prose_42 -> { raw_63}
{rank=same; raw_63}

raw_63 [label="raw"]


raw_63 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which means we need to pass that in. 

"]
codeblock_43 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function make_ast_node(metatables, id, first, t, last, str, root)
  if type(t[1]) == \"table\" then    
    if t[1].span then
        t.val = t[1].val
        t.first = t[1].first
        t.last = t[1].last
        t[1] = nil
    else
      t.first = first
      t.last = last
    end
    t.id = id
    t.root = root
    setmetatable(t,epnf.Node)
    return t
  end
end

local function anon_node (t) 
  return unpack(t)
end"]
prose_44 -> { raw_66}
{rank=same; raw_66}

raw_66 [label="raw"]


raw_66 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 some useful/common lpeg patterns
"]
codeblock_45 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L_Cp = L.Cp()
local L_Carg_1 = L.Carg( 1 )
local function E( msg )
  return L.Cmt( L_Carg_1 * L.Cc( msg ), parse_error )
end
local function EOF( msg )
  return -L.P( 1 ) + E( msg )
end
local letter = L.R( \"az\", \"AZ\" ) + L.P\"_\"
local digit = L.R\"09\"
local ID = L.C( letter * (letter+digit)^0 )
local function W( s )
  return L.P( s ) * -(letter+digit)
end
local WS = L.S\" \\r\\n\\t\\f\\v\""]
prose_46 -> { raw_69}
{rank=same; raw_69}

raw_69 [label="raw"]


raw_69 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
setup an environment where you can easily define lpeg grammars
 with lots of syntax sugar
"]
codeblock_47 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function epnf.define( func, g, unsuppressed)
  g = g or {}
  local suppressed = {}
  local env = {}
  local node_mts = {}
  local env_index = {
    START = function( name ) g[ 1 ] = name end,
    SUPPRESS = function( ... )
      suppressed = {}
      for i = 1, select( '#', ... ) do
        suppressed[ select( i, ... ) ] = true
      end
    end,
    E = E,
    EOF = EOF,
    ID = ID,
    W = W,
    WS = WS,
  }
  -- copy lpeg shortcuts
  for k,v in pairs( L ) do
    if string.match( k, \"^%u%w*$\" ) then
      env_index[ k ] = v
    end
  end
  setmetatable( env_index, { __index = _G } )
  setmetatable( env, {
    __index = env_index,
    __newindex = function( _, name, val )
      if suppressed[ name ] and not unsuppressed then
        local v = L.Ct( val ) / anon_node
          g[ name ] = v
      else
        local v = ( L.Cc(node_mts)
                * L.Cc( name ) 
                * L_Cp 
                * L.Ct( val ) 
                * L_Cp 
                * L.Carg(1)
                * L.Carg(2)) / make_ast_node
          g[name] = v
      end
    end
  } )
  -- call passed function with custom environment (5.1- and 5.2-style)
  if _VERSION == \"Lua 5.1\" then
    setfenv( func, env )
  end
  func( env )
  assert( g[ 1 ] and g[ g[ 1 ] ], \"no start rule defined\" )
  return g
end"]
prose_48 -> { raw_72}
{rank=same; raw_72}

raw_72 [label="raw"]


raw_72 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 apply a given grammar to a string and return the ast. also allows
 to set the name of the string for error messages
"]
codeblock_49 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function epnf.parse( g, name, input, ... )
  return L.match( L.P( g ), input, 1, name, ... ), name, input
end"]
prose_50 -> { raw_75}
{rank=same; raw_75}

raw_75 [label="raw"]


raw_75 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 apply a given grammar to the contents of a file and return the ast
"]
codeblock_51 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function epnf.parsefile( g, fname, ... )
  local f = assert( io.open( fname, \"r\" ) )
  local a,n,i = epnf.parse( g, fname, assert( f:read\"*a\" ), ... )
  f:close()
  return a,n,i
end"]
prose_52 -> { raw_78}
{rank=same; raw_78}

raw_78 [label="raw"]


raw_78 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 apply a given grammar to a string and return the ast. automatically
 picks a sensible name for error messages
"]
codeblock_53 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function epnf.parsestring( g, str, ... )
  local s = string.sub( str, 1, 20 )
  if #s < #str then s = s .. \"...\" end
  local name = \"[\\\"\" .. string.gsub( s, \"\\n\", \"\\\\n\" ) .. \"\\\"]\"
  return epnf.parse( g, name, str, ... )
end"]
prose_54 -> { raw_81}
{rank=same; raw_81}

raw_81 [label="raw"]


raw_81 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 export a function for reporting errors during ast validation
"]
codeblock_55 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="epnf.raise = raise_error

local function write( ... ) return io.stderr:write( ... ) end

local function dump_ast( node, prefix )
  if type( node ) == \"table\" then
    write( \"{\" )
    if next( node ) ~= nil then
      write( \"\\n\" )
      if type( node.id ) == \"string\" and
         type( node.pos ) == \"number\" then
        write( prefix, \"  id = \", node.id,
               \",  pos = \", tostring( node.pos ), \"\\n\" )
      end
      for k,v in pairs( node ) do
        if k ~= \"id\" and k ~= \"pos\" then
          write( prefix, \"  \", tostring( k ), \" = \" )
          dump_ast( v, prefix..\"  \" )
        end
      end
    end
    write( prefix, \"}\\n\" )
  else
    write( tostring( node ), \"\\n\" )
  end
end"]
prose_56 -> { raw_84}
{rank=same; raw_84}

raw_84 [label="raw"]


raw_84 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 write a string representation of the given ast to stderr for
 debugging
"]
codeblock_57 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function epnf.dumpast( node )
  return dump_ast( node, \"\" )
end"]
prose_58 -> { raw_87}
{rank=same; raw_87}

raw_87 [label="raw"]


raw_87 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 return module table
"]
codeblock_59 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return epnf"]

}
