digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 279"]

doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-279"]

section_1 -> { header_2 block_3 block_4 block_5 block_6 block_7 block_8 block_9 block_10 block_11 block_12 block_13 block_14 block_15 block_16 block_17 block_18 block_19 block_20 block_21 block_22 block_23 block_24 block_25 block_26 block_27 block_28 block_29 block_30 block_31 block_32}
{rank=same; header_2 block_3 block_4 block_5 block_6 block_7 block_8 block_9 block_10 block_11 block_12 block_13 block_14 block_15 block_16 block_17 block_18 block_19 block_20 block_21 block_22 block_23 block_24 block_25 block_26 block_27 block_28 block_29 block_30 block_31 block_32}

header_2 [label=""]
block_3 [label="block 1-3"]
block_4 [label="block 4-23"]
block_5 [label="block 24-25"]
block_6 [label="block 26-29"]
block_7 [label="block 30-31"]
block_8 [label="block 32-35"]
block_9 [label="block 36-37"]
block_10 [label="block 38-43"]
block_11 [label="block 44-46"]
block_12 [label="block 47-66"]
block_13 [label="block 67-68"]
block_14 [label="block 69-81"]
block_15 [label="block 82-83"]
block_16 [label="block 84-121"]
block_17 [label="block 122-123"]
block_18 [label="block 124-144"]
block_19 [label="block 145-146"]
block_20 [label="block 147-200"]
block_21 [label="block 201-203"]
block_22 [label="block 204-209"]
block_23 [label="block 210-211"]
block_24 [label="block 212-220"]
block_25 [label="block 221-223"]
block_26 [label="block 224-232"]
block_27 [label="block 233-234"]
block_28 [label="block 235-263"]
block_29 [label="block 264-266"]
block_30 [label="block 267-274"]
block_31 [label="block 275-276"]
block_32 [label="block 277-nil"]


block_3 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" A modified epnf.

"]block_4 -> { codeblock_34}
{rank=same; codeblock_34}

codeblock_34 [label="code block 4-22"]


codeblock_34 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require( \"lpeg\" )
---[[
local assert = assert
local _VERSION = assert( _VERSION )
local string, io = assert( string ), assert( io )
local error = assert( error )
local pairs = assert( pairs )
local next = assert( next )
local type = assert( type )
local tostring = assert( tostring )
local setmetatable = assert( setmetatable )
local setfenv 
if _VERSION == \"Lua 5.1\" then
  setfenv = setfenv
  assert( setfenv )
end
--]]
"]
block_4 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
block_5 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" module table

"]block_6 -> { codeblock_38}
{rank=same; codeblock_38}

codeblock_38 [label="code block 26-28"]


codeblock_38 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local epnf = {}
"]
block_6 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
block_7 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Node metatable

"]block_8 -> { codeblock_42}
{rank=same; codeblock_42}

codeblock_42 [label="code block 32-34"]


codeblock_42 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="epnf.Node = require \"peg/node\"
"]
block_8 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
block_9 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" maximum of two numbers while avoiding math lib as a dependency

"]block_10 -> { codeblock_46}
{rank=same; codeblock_46}

codeblock_46 [label="code block 38-42"]


codeblock_46 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function max( a, b )
  if a < b then return b else return a end
end
"]
block_10 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
block_11 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" get the line which p points into, the line number and the position
 of the beginning of the line

"]block_12 -> { codeblock_50}
{rank=same; codeblock_50}

codeblock_50 [label="code block 47-65"]


codeblock_50 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function getline( s, p )
  local lno, sol = 1, 1
  for i = 1, p do
    if string.sub( s, i, i ) == \"\n\" then
      lno = lno + 1
      sol = i + 1
    end
  end
  local eol = #s
  for i = sol, #s do
    if string.sub( s, i, i ) == \"\n\" then
      eol = i - 1
      break
    end
  end
  return string.sub( s, sol, eol ), lno, sol
end
"]
block_12 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
block_13 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" raise an error during semantic validation of the ast

"]block_14 -> { codeblock_54}
{rank=same; codeblock_54}

codeblock_54 [label="code block 69-80"]


codeblock_54 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function raise_error( n, msg, s, p )
  local line, lno, sol = getline( s, p )
  assert( p <= #s )
  local clen = max( 70, p+10-sol )
  if #line > clen then
    line = string.sub( line, 1, clen ) .. \"...\"
  end
  local marker = string.rep( \" \", p-sol ) .. \"^\"
  error(\":\"..lno..\": \"..msg..\"\n\"..line..\"\n\"..marker, 0 )
end
"]
block_14 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
block_15 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" parse-error reporting function

"]block_16 -> { codeblock_58}
{rank=same; codeblock_58}

codeblock_58 [label="code block 84-120"]


codeblock_58 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function parse_error( s, p, n, e )
  if p <= #s then
    local msg = \"parse error\"
    if e then msg = msg .. \", \" .. e end
    raise_error( n, msg, s, p )
  else -- parse error at end of input
    local _,lno = string.gsub( s, \"\n\", \"\n\" )
    if string.sub( s, -1, -1 ) ~= \"\n\" then lno = lno + 1 end
    local msg = \": parse error at <eof>\"
    if e then msg = msg .. \", \" .. e end
    error( n..\":\"..lno..msg, 0 )
  end
end

local function make_ast_node( id, first, t, last, str, root)
  if type(t[1]) == \"table\" then    
    if t[1].span then
        t.val = t[1].val
        t.first = t[1].first
        t.last = t[1].last
        t[1] = nil
    else
      t.first = first
      t.last = last
    end
    t.id = id
    t.root = root
    setmetatable(t,epnf.Node)
    return t
  end
end

local function anon_node (t) 
  return unpack(t)
end
"]
block_16 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
block_17 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" some useful/common lpeg patterns

"]block_18 -> { codeblock_62}
{rank=same; codeblock_62}

codeblock_62 [label="code block 124-143"]


codeblock_62 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L_Cp = L.Cp()
local L_Carg_1 = L.Carg( 1 )
local function E( msg )
  return L.Cmt( L_Carg_1 * L.Cc( msg ), parse_error )
end
local function EOF( msg )
  return -L.P( 1 ) + E( msg )
end
local letter = L.R( \"az\", \"AZ\" ) + L.P\"_\"
local digit = L.R\"09\"
local ID = L.C( letter * (letter+digit)^0 )
local function W( s )
  return L.P( s ) * -(letter+digit)
end
local WS = L.S\" \r\n\t\f\v\"

--[[
--- setup an environment where you can easily define lpeg grammars
"]
block_18 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
block_19 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" with lots of syntax sugar

"]block_20 -> { codeblock_66}
{rank=same; codeblock_66}

codeblock_66 [label="code block 147-199"]


codeblock_66 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="--]]
function epnf.define( func, g, unsuppressed)
  g = g or {}
  local suppressed = {}
  local env = {}
  local env_index = {
    START = function( name ) g[ 1 ] = name end,
    SUPPRESS = function( ... )
      suppressed = {}
      for i = 1, select( '#', ... ) do
        suppressed[ select( i, ... ) ] = true
      end
    end,
    E = E,
    EOF = EOF,
    ID = ID,
    W = W,
    WS = WS,
  }
  -- copy lpeg shortcuts
  for k,v in pairs( L ) do
    if string.match( k, \"^%u%w*$\" ) then
      env_index[ k ] = v
    end
  end
  setmetatable( env_index, { __index = _G } )
  setmetatable( env, {
    __index = env_index,
    __newindex = function( _, name, val )
      if suppressed[ name ] and not unsuppressed then
        local v = L.Ct( val ) / anon_node
          g[ name ] = v
      else
        local v = (L.Cc( name ) 
                * L_Cp 
                * L.Ct( val ) 
                * L_Cp 
                * L.Carg(1)
                * L.Carg(2)) / make_ast_node
          g[name] = v
      end
    end
  } )
  -- call passed function with custom environment (5.1- and 5.2-style)
  if _VERSION == \"Lua 5.1\" then
    setfenv( func, env )
  end
  func( env )
  assert( g[ 1 ] and g[ g[ 1 ] ], \"no start rule defined\" )
  return g
end
"]
block_20 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
block_21 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" apply a given grammar to a string and return the ast. also allows
 to set the name of the string for error messages

"]block_22 -> { codeblock_70}
{rank=same; codeblock_70}

codeblock_70 [label="code block 204-208"]


codeblock_70 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function epnf.parse( g, name, input, ... )
  return L.match( L.P( g ), input, 1, name, ... ), name, input
end
"]
block_22 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
block_23 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" apply a given grammar to the contents of a file and return the ast

"]block_24 -> { codeblock_74}
{rank=same; codeblock_74}

codeblock_74 [label="code block 212-219"]


codeblock_74 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function epnf.parsefile( g, fname, ... )
  local f = assert( io.open( fname, \"r\" ) )
  local a,n,i = epnf.parse( g, fname, assert( f:read\"*a\" ), ... )
  f:close()
  return a,n,i
end
"]
block_24 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
block_25 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" apply a given grammar to a string and return the ast. automatically
 picks a sensible name for error messages

"]block_26 -> { codeblock_78}
{rank=same; codeblock_78}

codeblock_78 [label="code block 224-231"]


codeblock_78 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function epnf.parsestring( g, str, ... )
  local s = string.sub( str, 1, 20 )
  if #s < #str then s = s .. \"...\" end
  local name = \"[\\"\" .. string.gsub( s, \"\n\", \"\\n\" ) .. \"\\"]\"
  return epnf.parse( g, name, str, ... )
end
"]
block_26 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
block_27 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" export a function for reporting errors during ast validation

"]block_28 -> { codeblock_82}
{rank=same; codeblock_82}

codeblock_82 [label="code block 235-262"]


codeblock_82 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="epnf.raise = raise_error

local function write( ... ) return io.stderr:write( ... ) end

local function dump_ast( node, prefix )
  if type( node ) == \"table\" then
    write( \"{\" )
    if next( node ) ~= nil then
      write( \"\n\" )
      if type( node.id ) == \"string\" and
         type( node.pos ) == \"number\" then
        write( prefix, \"  id = \", node.id,
               \",  pos = \", tostring( node.pos ), \"\n\" )
      end
      for k,v in pairs( node ) do
        if k ~= \"id\" and k ~= \"pos\" then
          write( prefix, \"  \", tostring( k ), \" = \" )
          dump_ast( v, prefix..\"  \" )
        end
      end
    end
    write( prefix, \"}\n\" )
  else
    write( tostring( node ), \"\n\" )
  end
end
"]
block_28 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
block_29 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" write a string representation of the given ast to stderr for
 debugging

"]block_30 -> { codeblock_86}
{rank=same; codeblock_86}

codeblock_86 [label="code block 267-271"]


codeblock_86 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function epnf.dumpast( node )
  return dump_ast( node, \"\" )
end
"]
block_30 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


"]
block_31 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" return module table

"]block_32 -> { codeblock_90}
{rank=same; codeblock_90}

codeblock_90 [label="code block 277-279"]


codeblock_90 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return epnf
"]
block_32 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
}
