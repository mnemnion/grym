digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 40"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-40"]


section_1 -> { header_2 block_3 block_4 block_5 block_6 block_7}
{rank=same; header_2 block_3 block_4 block_5 block_6 block_7}

header_2 [label="0 : "]

block_3 [label="block 1-3"]

block_4 [label="block 4-5"]

block_5 [label="block 6-22"]

block_6 [label="block 23-24"]

block_7 [label="block 25-40"]


block_3 -> { prose_8}
{rank=same; prose_8}

prose_8 [label="prose"]


prose_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Forest module
"]
block_4 -> { prose_10}
{rank=same; prose_10}

prose_10 [label="prose"]


prose_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Provides tools for working with vectors of borrowed Nodes
"]
block_5 -> { codeblock_12}
{rank=same; codeblock_12}

codeblock_12 [label="code block 6-21"]


codeblock_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function forest_tostring(forest)
   local top_phrase = \"[ \"
   for i,v in ipairs(forest) do 
      top_phrase = top_phrase..v.id..\" \"
   end
   top_phrase = top_phrase..\"]\\n\"
   local node_phrase = \"\"
   for i,v in ipairs(forest) do
      node_phrase = node_phrase..tostring(v)
   end
   return top_phrase..node_phrase
end

local function F ()"]
block_6 -> { prose_14}
{rank=same; prose_14}

prose_14 [label="prose"]


prose_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" <Forest> metatable
"]
block_7 -> { codeblock_16}
{rank=same; codeblock_16}

codeblock_16 [label="code block 25-40"]


codeblock_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   local meta = {}
   meta[\"__index\"] = meta
   meta[\"__tostring\"] = forest_tostring
     meta[\"isforest\"] = true
     --the below are added to F in ast.lua 
     --meta[\"select\"] = ast.forest.select
     --meta[\"with\"]   = ast.forest.select_with
     --meta[\"pick\"]   = ast.forest.pick
   return meta
end

local F = F()

return F"]

}
