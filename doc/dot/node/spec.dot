digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 100"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-76"]


section_1 -> { header_2 block_3 section_4 section_5 section_6 section_7}
{rank=same; header_2 block_3 section_4 section_5 section_6 section_7}

header_2 [label="1 : Spec"]

block_3 [label="block 1-76"]

section_4 [label="section: 6-27"]

section_5 [label="section: 28-68"]

section_6 [label="section: 69-76"]

section_7 [label="section: 77-100"]


header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_3 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A small test harness to exercise our fresh Node class.
"]
section_4 -> { header_10 block_11 codeblock_12 codeblock_13}
{rank=same; header_10 block_11 codeblock_12 codeblock_13}

header_10 [label="3 : includes"]

block_11 [label="block 6-7"]

codeblock_12 [label="code block 8-22"]

codeblock_13 [label="code block 24-26"]


header_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local u = require \"util\"
local m = require \"grym/morphemes\"

local Grammar = require \"node/grammar\"
local Node = require \"node/node\"
local epnf = require \"peg/epnf\"
local pnf = require \"node/define\"
local L = require \"lpeg\"
local P = L.P
local V = L.V
local C = L.C

"]
codeblock_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Spec = {}"]
section_5 -> { header_18 block_19 block_20 codeblock_21}
{rank=same; header_18 block_19 block_20 codeblock_21}

header_18 [label="2 : Trivial Grammar"]

block_19 [label="block 28-31"]

block_20 [label="block 32-33"]

codeblock_21 [label="code block 34-67"]


header_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This should succeed under all circumstances.
"]
block_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I'd have to guess what it will return currently. 
"]
codeblock_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function epsilon(_ENV)
  START \"any\"
  any = V\"anything\" + V\"other\"
  anything = P(1)
  other = P(1)^1
end 

local function a(_ENV)
  START \"A\"
  A = P\"a\" + P\"A\"
end

local function ab(_ENV)
  START \"AB\"
  AB = V\"B\" + V\"A\"  
  A = P\"a\" + P\"A\"
  B = V\"bmatch\" + (V\"A\" * V\"bmatch\")
  bmatch = P\"b\" + P\"B\"
end

local function clu_gm(_ENV)
  local WS = P(m._ + m.NL)^0
  START \"clu\"
  SUPPRESS \"form\"
  clu = V\"form\"^1
  form = (V\"number\" * WS)
       + (V\"atom\" * WS) 
       + (V\"expr\" * WS)
  expr = m.pal * WS * V\"form\"^0 * WS * m.par
  atom = m.symbol
  number = m.number
end"]
section_6 -> { header_26 block_27 codeblock_28}
{rank=same; header_26 block_27 codeblock_28}

header_26 [label="2 : Easy mode"]

block_27 [label="block 69-70"]

codeblock_28 [label="code block 71-75"]


header_26 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_27 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_28 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Spec.trivial = Grammar(epsilon)
Spec.a = Grammar(a)
Spec.clu = Grammar(clu_gm)"]
section_7 -> { header_32 block_33 codeblock_34 codeblock_35 codeblock_36}
{rank=same; header_32 block_33 codeblock_34 codeblock_35 codeblock_36}

header_32 [label="2 : With metas"]

block_33 [label="block 77-78"]

codeblock_34 [label="code block 79-92"]

codeblock_35 [label="code block 94-96"]

codeblock_36 [label="code block 98-100"]


header_32 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_33 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_34 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local metas = {}

local AMt, amt = u.inherit(Node)

local function Anew(A, t, str)
  local a = setmetatable(t, AMt)
  a.id = \"A\"  
  return a
end

metas[\"A\"] = u.export(amt, Anew)"]
codeblock_35 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Spec.ab = Grammar(ab, metas)"]
codeblock_36 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return Spec"]

}
