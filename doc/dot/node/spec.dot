digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 100"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-76"]


section_1 -> { header_2}
{rank=same; header_2}

header_2 [label="1 : Spec"]


section_3 -> { header_7}
{rank=same; header_7}

header_7 [label="3 : includes"]


codeblock_8 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local u = require \"util\"
local m = require \"grym/morphemes\"

local Grammar = require \"node/grammar\"
local Node = require \"node/node\"
local epnf = require \"peg/epnf\"
local pnf = require \"node/define\"
local L = require \"lpeg\"
local P = L.P
local V = L.V
local C = L.C

"]
codeblock_9 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Spec = {}"]
section_4 -> { header_12}
{rank=same; header_12}

header_12 [label="2 : Trivial Grammar"]


codeblock_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function epsilon(_ENV)
  START \"any\"
  any = V\"anything\" + V\"other\"
  anything = P(1)
  other = P(1)^1
end 

local function a(_ENV)
  START \"A\"
  A = P\"a\" + P\"A\"
end

local function ab(_ENV)
  START \"AB\"
  AB = V\"B\" + V\"A\"  
  A = P\"a\" + P\"A\"
  B = V\"bmatch\" + (V\"A\" * V\"bmatch\")
  bmatch = P\"b\" + P\"B\"
end

local function clu_gm(_ENV)
  local WS = P(m._ + m.NL)^0
  START \"clu\"
  SUPPRESS \"form\"
  clu = V\"form\"^1
  form = (V\"number\" * WS)
       + (V\"atom\" * WS) 
       + (V\"expr\" * WS)
  expr = m.pal * WS * V\"form\"^0 * WS * m.par
  atom = m.symbol
  number = m.number
end"]
section_5 -> { header_15}
{rank=same; header_15}

header_15 [label="2 : Easy mode"]


codeblock_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Spec.trivial = Grammar(epsilon)
Spec.a = Grammar(a)
Spec.clu = Grammar(clu_gm)"]
section_6 -> { header_18}
{rank=same; header_18}

header_18 [label="2 : With metas"]


codeblock_19 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local metas = {}

local AMt, amt = u.inherit(Node)

local function Anew(A, t, str)
  local a = setmetatable(t, AMt)
  a.id = \"A\"  
  return a
end

metas[\"A\"] = u.export(amt, Anew)"]
codeblock_20 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Spec.ab = Grammar(ab, metas)"]
codeblock_21 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return Spec"]

}
