digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 33"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-33"]


section_1 -> { header_2 prose_3 codeblock_4 codeblock_5 codeblock_6}
{rank=same; header_2 prose_3 codeblock_4 codeblock_5 codeblock_6}

header_2 [label="1 : Grammar Module"]

prose_3 [label="prose"]

codeblock_4 [label="code block 4-10"]

codeblock_5 [label="code block 15-29"]

codeblock_6 [label="code block 31-33"]


prose_3 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
codeblock_4 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local s = require \"status\" 
local define = require \"node/define\"
local Root = require \"node/root\""]
codeblock_5 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(grammar_template, metas)
  if type(grammar_template) == 'function' then
    local metas = metas or {}
    local grammar = define.define(grammar_template, nil, metas)
    local parse = function(str)
      local root = Root(str)
      return L.match(grammar, str, 1, root) -- other 
    end
    return parse
  else
    s:halt(\"no way to build grammar out of \" .. type(template))
  end
end"]
codeblock_6 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]

}
