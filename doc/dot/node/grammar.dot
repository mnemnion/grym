digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 211"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-6"]


section_1 -> { header_2 prose_3 section_4}
{rank=same; header_2 prose_3 section_4}

header_2 [label="1 : Grammar Module"]

prose_3 [label="prose"]

section_4 [label="section: 7-101"]


prose_3 -> { raw_5}
{rank=same; raw_5}

raw_5 [label="raw"]


raw_5 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  The grammar module returns one function, which generates
a grammar. 
"]
section_4 -> { header_7 prose_8 prose_9 prose_10 section_11 section_12 section_13 section_14}
{rank=same; header_7 prose_8 prose_9 prose_10 section_11 section_12 section_13 section_14}

header_7 [label="2 : Parameters"]

prose_8 [label="prose"]

prose_9 [label="prose"]

prose_10 [label="prose"]

section_11 [label="section: 17-46"]

section_12 [label="section: 47-70"]

section_13 [label="section: 71-101"]

section_14 [label="section: 102-211"]


prose_8 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This function takes two parameters, namely:
"]
prose_9 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - grammar_template :  A function with one parameter, which must be =_ENV=.
  - metas :  A map with keys of string and values of Node subclass constructors.
"]
prose_10 -> { raw_19}
{rank=same; raw_19}

raw_19 [label="raw"]


raw_19 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Both of these are reasonably complex.

"]
section_11 -> { header_21 prose_22 prose_23 prose_24 prose_25 prose_26 prose_27 prose_28}
{rank=same; header_21 prose_22 prose_23 prose_24 prose_25 prose_26 prose_27 prose_28}

header_21 [label="3 : grammar_template"]

prose_22 [label="prose"]

prose_23 [label="prose"]

prose_24 [label="prose"]

prose_25 [label="prose"]

prose_26 [label="prose"]

prose_27 [label="prose"]

prose_28 [label="prose"]


prose_22 -> { raw_29}
{rank=same; raw_29}

raw_29 [label="raw"]


raw_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The internal function @define creates a custom environment variable, neatly
sidestepping lua's pedantic insistance on prepending =local= to all values of 
significance. 
"]
prose_23 -> { raw_31}
{rank=same; raw_31}

raw_31 [label="raw"]


raw_31 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
More relevantly, it constructs a full grammar, which will return a table of
type Node. 
"]
prose_24 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If you stick to =lpeg= patterns, as you should, all array values will be of
Node, as is intended.  Captures will interpolate various other sorts of Lua
values, which will induce halting in some places and silently corrupt
execution in others. 
"]
prose_25 -> { raw_35}
{rank=same; raw_35}

raw_35 [label="raw"]


raw_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Though as yet poorly thought through, the [[elpatt module][./elpatt]] is
intended to provide only those patterns which are allowed in Grammars, while
expanding the scope of some favorites to properly respect utf-8 and otherwise
behave. 
"]
prose_26 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There are examples of the format in the [[spec module][./spec]].
"]
prose_27 -> { raw_39}
{rank=same; raw_39}

raw_39 [label="raw"]


raw_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Special fields include:
"]
prose_28 -> { raw_41}
{rank=same; raw_41}

raw_41 [label="raw"]


raw_41 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  START :  a string which must be the same as the starting rule.
  -  SUPPRESS :  either a string or an array of strings. These rules will be
                 removed from the Node. 
  -  P :  The lpeg P function.  Recognizes a certain pattern.
  -  V :  The lpeg V function.  Used for non-terminal rvalues in a grammar. 

"]
section_12 -> { header_43 prose_44 prose_45 prose_46 prose_47 prose_48}
{rank=same; header_43 prose_44 prose_45 prose_46 prose_47 prose_48}

header_43 [label="3 : metas"]

prose_44 [label="prose"]

prose_45 [label="prose"]

prose_46 [label="prose"]

prose_47 [label="prose"]

prose_48 [label="prose"]


prose_44 -> { raw_49}
{rank=same; raw_49}

raw_49 [label="raw"]


raw_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  By default a node will inherit from the Node class.  If you want custom behavior,
you must pass in a table of metatable constructors.
"]
prose_45 -> { raw_51}
{rank=same; raw_51}

raw_51 [label="raw"]


raw_51 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That's a fairly specific beast.  Any rule defined above will have an =id=
corresonding to the name of the rule.  Unless =SUPPRESS=ed, this will become
a Node.  If the =metas= parameter has a key corresponding to =id=, then it
must return a function taking two parameters:
   
   - node :  The node under construction, which under normal circumstances will
             already have the =first= and =last= fields.
   - str  :  The entire str the grammar is parsing.
"]
prose_46 -> { raw_53}
{rank=same; raw_53}

raw_53 [label="raw"]


raw_53 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which must return that same node, decorated in whatever fashion is appropriate.
"]
prose_47 -> { raw_55}
{rank=same; raw_55}

raw_55 [label="raw"]


raw_55 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The node will not have a metatable at this point, and the function must attach a
metatable with =__index= equal to some table which itself has the =__index=
Node as some recursive backstop.
"]
prose_48 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You might say the return value must /inherit/ from Node, if we were using
a language that did that sort of thing. 

"]
section_13 -> { header_59 prose_60 codeblock_61 prose_62 codeblock_63}
{rank=same; header_59 prose_60 codeblock_61 prose_62 codeblock_63}

header_59 [label="3 : includes"]

prose_60 [label="prose"]

codeblock_61 [label="code block 73-78"]

prose_62 [label="prose"]

codeblock_63 [label="code block 84-99"]


prose_60 -> { raw_64}
{rank=same; raw_64}

raw_64 [label="raw"]


raw_64 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_61 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local s = require \"status\" 
local Node = require \"node/node\""]
prose_62 -> { raw_67}
{rank=same; raw_67}

raw_67 [label="raw"]


raw_67 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's the kind of thing I'd like to automate. 
"]
codeblock_63 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local assert = assert
local string, io = assert( string ), assert( io )
local V = string.sub( assert( _VERSION ), -4 )
local _G = assert( _G )
local error = assert( error )
local pairs = assert( pairs )
local next = assert( next )
local type = assert( type )
local tostring = assert( tostring )
local setmetatable = assert( setmetatable )
if V == \" 5.1\" then
   local setfenv = assert( setfenv )
   local getfenv = assert( getfenv )
end"]
section_14 -> { header_70 prose_71 codeblock_72 codeblock_73 codeblock_74 codeblock_75}
{rank=same; header_70 prose_71 codeblock_72 codeblock_73 codeblock_74 codeblock_75}

header_70 [label="3 : define"]

prose_71 [label="prose"]

codeblock_72 [label="code block 104-179"]

codeblock_73 [label="code block 181-190"]

codeblock_74 [label="code block 193-207"]

codeblock_75 [label="code block 209-211"]


prose_71 -> { raw_76}
{rank=same; raw_76}

raw_76 [label="raw"]


raw_76 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_72 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function make_ast_node(id, first, t, last, str, metas, offset)
   local offset = offset or 0
   t.first = first + offset
   t.last  = last + offset - 1
   t.str   = str
   if metas[id] then
      t = metas[id](t, str)
      assert(t.id == id)
   else
    t.id = id
    setmetatable(t, {__index = Node,
                     __tostring = Node.toString})
   end
   assert(t.isNode, \"failed isNode: \" .. id)
   assert(t.str)
   return t
end


-- some useful/common lpeg patterns
local Cp = L.Cp
local Cc = L.Cc
local Ct = L.Ct
local arg1_str = L.Carg(1)
local arg2_metas = L.Carg(2)
local arg3_offset = L.Carg(3)


-- setup an environment where you can easily define lpeg grammars
-- with lots of syntax sugar
local function define(func, g, e)
  g = g or {}
  if e == nil then
    e = V == \" 5.1\" and getfenv(func) or _G
  end
  local suppressed = {}
  local env = {}
  local env_index = {
    START = function(name) g[1] = name end,
    SUPPRESS = function(...)
      suppressed = {}
      for i = 1, select('#', ...) do
        suppressed[select(i, ... )] = true
      end
    end,
    V = L.V,
    P = L.P,
  }

  setmetatable(env_index, { __index = e })
  setmetatable(env, {
    __index = env_index,
    __newindex = function( _, name, val )
      if suppressed[ name ] then
        g[ name ] = val
      else
        g[ name ] = (Cc(name) 
              * Cp() 
              * Ct(val)
              * Cp()
              * arg1_str
              * arg2_metas)
              * arg3_offset / make_ast_node
      end
    end
  })
  -- call passed function with custom environment (5.1- and 5.2-style)
  if V == \" 5.1\" then
    setfenv( func, env )
  end
  func( env )
  assert( g[ 1 ] and g[ g[ 1 ] ], \"no start rule defined\" )
  return g
end"]
codeblock_73 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function refineMetas(metas)
  for _,v in pairs(metas) do
    if not v[\"__tostring\"] then
      v[\"__tostring\"] = Node.toString
    end
  end
  return metas
end"]
codeblock_74 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(grammar_template, metas)
  if type(grammar_template) == 'function' then
    local metas = metas or {}
    local grammar = define(grammar_template, nil, metas)
    local parse = function(str, offset)
      local offset = offset or 0
      return L.match(grammar, str, 1, str, metas, offset) -- other 
    end
    return parse
  else
    s:halt(\"no way to build grammar out of \" .. type(template))
  end
end"]
codeblock_75 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]

}
