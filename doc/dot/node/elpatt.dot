digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 85"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-40"]


section_1 -> { header_2 block_3 block_4 codeblock_5 section_6 section_7}
{rank=same; header_2 block_3 block_4 codeblock_5 section_6 section_7}

header_2 [label="1 : Extended Lpeg module"]

block_3 [label="block 1-6"]

block_4 [label="block 7-9"]

codeblock_5 [label="code block 10-14"]

section_6 [label="section: 16-40"]

section_7 [label="section: 41-85"]


header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_3 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This is where we add extended captures a la the old =epeg= 
module.
"]
block_4 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The difference here is that we include lpeg as a metatable __index
and can therefore use elpeg as L everywhere we currently use lpeg.
"]
codeblock_5 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local lpeg = require \"lpeg\"
local epeg = setmetatable({}, {__index = lpeg})
"]
section_6 -> { header_12 block_13 block_14 block_15 codeblock_16}
{rank=same; header_12 block_13 block_14 block_15 codeblock_16}

header_12 [label="2 : Ppt -- Codepoint pattern"]

block_13 [label="block 16-19"]

block_14 [label="block 20-21"]

block_15 [label="block 22-23"]

codeblock_16 [label="code block 24-38"]


header_12 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_13 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Captures one Unicode point
"]
block_14 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I actually have no idea how to do this yet...
"]
block_15 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Looks like byte 97 is just =\\97= in Lua. That's easy enough.
"]
codeblock_16 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function num_bytes(str)
--returns the number of bytes in the next character in str
   local c = str:byte(1)
   if c >= 0x00 and c <= 0x7F then
      return 1
   elseif c >= 0xC2 and c <= 0xDF then
      return 2
   elseif c >= 0xE0 and c <= 0xEF then
      return 3
   elseif c >= 0xF0 and c <= 0xF4 then
      return 4
   end
end"]
section_7 -> { header_22 block_23 codeblock_24 codeblock_25}
{rank=same; header_22 block_23 codeblock_24 codeblock_25}

header_22 [label="2 : Csp -- Capture span"]

block_23 [label="block 41-45"]

codeblock_24 [label="code block 46-67"]

codeblock_25 [label="code block 83-85"]


header_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_23 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is the old-school capture that plays into making named Nodes using
epnf.
"]
codeblock_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function spanner(first, last, str, root)
   local vals = {}
   vals.span = true
   vals.val = string.sub(str, first, last - 1)
   vals.first = first
   vals.last = last - 1
   if vals.last >= vals.first then
      return vals
   end
   -- If a capture contains nothing, we don't want a node for it
   return nil
end

function epeg.Csp (patt)
   return lpeg.Cp() 
      * lpeg.Cmt(patt, function() return true end) 
      * lpeg.Cp() 
      * lpeg.Carg(1) 
      * lpeg.Carg(2) / spanner
end"]
codeblock_25 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return epeg"]

}
