digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 30"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-5"]


section_1 -> { header_2 prose_3 section_4}
{rank=same; header_2 prose_3 section_4}

header_2 [label="1 : Root metatable"]

prose_3 [label="prose"]

section_4 [label="section: 6-30"]


prose_3 -> leaf_5
leaf_5  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  We instantiate a new one of these for each parse.
"]
section_4 -> { header_6 prose_7 codeblock_8 codeblock_9 codeblock_10 codeblock_11}
{rank=same; header_6 prose_7 codeblock_8 codeblock_9 codeblock_10 codeblock_11}

header_6 [label="3 : includes"]

prose_7 [label="prose"]

codeblock_8 [label="code block 8-12"]

codeblock_9 [label="code block 16-18"]

codeblock_10 [label="code block 20-26"]

codeblock_11 [label="code block 28-30"]


prose_7 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_8 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Node = require \"espalier/node\"
local u = require \"util\"
"]
codeblock_9 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local R, r = u.inherit(Node)"]
codeblock_10 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Root, str)
  local root = setmetatable({}, R)
  root.str = str
  return root
end"]
codeblock_11 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return u.export(r, new)"]

}
