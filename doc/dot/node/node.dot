digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 272"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-177"]


section_1 -> { header_2 block_3 section_4 section_5 section_6}
{rank=same; header_2 block_3 section_4 section_5 section_6}

header_2 [label="1 : Node"]

block_3 [label="block 1-177"]

section_4 [label="section: 6-12"]

section_5 [label="section: 13-35"]

section_6 [label="section: 178-237"]


header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_3 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Time to stabilize this class once and for all. 
"]
section_4 -> { header_9 block_10 codeblock_11}
{rank=same; header_9 block_10 codeblock_11}

header_9 [label="3 : includes"]

block_10 [label="block 6-7"]

codeblock_11 [label="code block 8-11"]


header_9 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_10 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_11 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local s = require \"status\"
local dot = require \"node/dot\""]
section_5 -> { header_15 block_16 codeblock_17 section_18 section_19}
{rank=same; header_15 block_16 codeblock_17 section_18 section_19}

header_15 [label="2 : Node metatable"]

block_16 [label="block 13-18"]

codeblock_17 [label="code block 19-24"]

section_18 [label="section: 28-35"]

section_19 [label="section: 36-159"]


header_15 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_16 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  The Node metatable is the root table for any Node.  I'm planning to make
an intermediate class/table called Root that is in common for any instance
Node.  All Root absolutely has to contain is =str=. 
"]
codeblock_17 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local N = {}
N.__index = N
N.isNode = true"]
section_18 -> { header_23 block_24}
{rank=same; header_23 block_24}

header_23 [label="3 : Fields"]

block_24 [label="block 28-35"]


header_23 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_24 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
   - id :  A string naming the Node. 
           This is identical to the name of the pattern that recognizes
           or captures it.
   - line_first :  Always -1.
   - line_last  :  Always -1. 
"]
section_19 -> { header_27 block_28 codeblock_29 codeblock_30 section_31 section_32 section_33 section_34}
{rank=same; header_27 block_28 codeblock_29 codeblock_30 section_31 section_32 section_33 section_34}

header_27 [label="3 : Methods"]

block_28 [label="block 36-37"]

codeblock_29 [label="code block 38-53"]

codeblock_30 [label="code block 55-76"]

section_31 [label="section: 78-98"]

section_32 [label="section: 99-121"]

section_33 [label="section: 122-159"]

section_34 [label="section: 160-177"]


header_27 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_28 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_29 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.toString(node, depth)
   local depth = depth or 0
   local phrase = \"\"
   phrase = (\"  \"):rep(depth) .. \"id: \" .. node.id .. \",  \"
      .. \"first: \" .. node.first .. \", last: \" .. node.last .. \"\\n\"
   if node[1] then
    for _,v in ipairs(node) do
      if(v.isNode) then
        phrase = phrase .. N.toString(v, depth + 1)
      end
    end
  end 
   return phrase
end"]
codeblock_30 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.dotLabel(node)
  return node.id
end

function N.toMarkdown(node)
  if not node[1] then
    return string.sub(node.str, node.first, node.last)
  else
    s:halt(\"no toMarkdown for \" .. node.id)
  end
end

function N.dot(node)
  return dot.dot(node)
end

function N.toValue(node)
  return node.str:sub(node.first,node.last)
end
"]
section_31 -> { header_39 block_40 codeblock_41}
{rank=same; header_39 block_40 codeblock_41}

header_39 [label="4 : N.walkDeep"]

block_40 [label="block 78-81"]

codeblock_41 [label="code block 82-97"]


header_39 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_40 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Depth-first iterator. 
"]
codeblock_41 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.walkDeep(node)
    local function traverse(ast)
        if not ast.isNode then return nil end

        for _, v in ipairs(ast) do
            if type(v) == 'table' and v.isNode then
              traverse(v)
            end
        end
        coroutine.yield(ast)
    end

    return coroutine.wrap(function() traverse(node) end)
end"]
section_32 -> { header_45 block_46 codeblock_47}
{rank=same; header_45 block_46 codeblock_47}

header_45 [label="4 : N.walk"]

block_46 [label="block 99-102"]

codeblock_47 [label="code block 103-119"]


header_45 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_46 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Breadth-first iterator.  This is the default. 
"]
codeblock_47 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.walk(node)
  local function traverse(ast)
    if not ast.isNode then return nil end

    coroutine.yield(ast)
    for _, v in ipairs(ast) do
      if type(v) == 'table' and v.isNode then
        traverse(v)
      end
    end
  end

  return coroutine.wrap(function() traverse(node) end)
end
"]
section_33 -> { header_51 block_52 codeblock_53}
{rank=same; header_51 block_52 codeblock_53}

header_51 [label="4 : N.select(node, pred)"]

block_52 [label="block 122-127"]

codeblock_53 [label="code block 128-157"]


header_51 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_52 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Takes the Node and walks it, yielding the Nodes which match the predicate.
=pred= is either a string, which matches to =id=, or a function, which takes
a Node and returns true or false on some premise. 
"]
codeblock_53 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.select(node, pred)
   local function qualifies(node, pred)
      if type(pred) == 'string' then
         if type(node) == 'table' and node.isNode and node.id == pred then
            return true
         else
            return false
         end
      elseif type(pred) == 'function' then
         return pred(node)
      else
         s:halt(\"cannot select on predicate of type \" .. type(pred))
      end
   end

   local function traverse(ast)
      if qualifies(ast, pred) then
         coroutine.yield(ast)
      end
      if ast.isNode then
         for _, v in ipairs(ast) do
            traverse(v)
         end
      end
   end

  return coroutine.wrap(function() traverse(node) end)
end"]
section_34 -> { header_57 block_58 codeblock_59}
{rank=same; header_57 block_58 codeblock_59}

header_57 [label="4 : N.tokens(node)"]

block_58 [label="block 160-163"]

codeblock_59 [label="code block 164-176"]


header_57 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_58 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Iterator returning all 'captured' values as strings.
"]
codeblock_59 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.tokens(node)
  local function traverse(ast)
    for node in N.walk(ast) do
      if not node[1] then
        coroutine.yield(node:toValue())
      end
    end
  end

  return coroutine.wrap(function() traverse(node) end)
end  "]
section_6 -> { header_63 block_64 block_65 block_66 block_67 block_68 section_69 section_70}
{rank=same; header_63 block_64 block_65 block_66 block_67 block_68 section_69 section_70}

header_63 [label="2 : Node Instances"]

block_64 [label="block 178-182"]

block_65 [label="block 183-186"]

block_66 [label="block 187-190"]

block_67 [label="block 191-196"]

block_68 [label="block 197-237"]

section_69 [label="section: 202-224"]

section_70 [label="section: 238-272"]


header_63 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_64 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  To be a Node, currently, indexed elements of the Array portion must also be 
Nodes. 
"]
block_65 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I'm mostly convinced that indexed elements can also be strings, and that 
this is the form leaf nodes should take.  Currently, they have a 'val' field
and no children, which we should replace with a child string at [1].
"]
block_66 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This gives us a lighter way to handle the circumstance where we have, say,
a list, =(foo bar baz)=. We currently either need a \"left-per\" or \"pal\"
Node class to hold the =(=, or we would have to skip it entirely.
"]
block_67 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Quipu can't lose any information from the string, so they have to include
whitespace.  We're not limited in the same way and can reconstruct less 
semantically crucial parts of a document using the span and the original 
string, since we're not /currently/ editing our strings once they're
entered in.
"]
block_68 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Nodes are meant to be broadly compatible with everything we intend to
do with abstract syntax trees.  The more I think about this the better
it strikes me as an approach. 

"]
section_69 -> { header_77 block_78 block_79 block_80 block_81 block_82 section_83}
{rank=same; header_77 block_78 block_79 block_80 block_81 block_82 section_83}

header_77 [label="3 : Fields"]

block_78 [label="block 202-208"]

block_79 [label="block 209-211"]

block_80 [label="block 212-215"]

block_81 [label="block 216-220"]

block_82 [label="block 221-224"]

section_83 [label="section: 225-237"]


header_77 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_78 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  There are invariant fields a Node is also expected to have, they are:
 
  - first :  Index into =str= which begins the span.
  - last  :  Index into =str= which ends the span.
"]
block_79 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In principle, we want the Node to be localized. We could include a 
reference to the whole =str= and derive substrings lazily.
"]
block_80 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If we included the full span as a substring on each Node, we'd end up
with a lot of spans, and wouldn't use most of them. Even slicing a piece
out is costly if we're not going to use it. 
"]
block_81 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="So our constructor for a Node class takes (Constructor, node, str) as 
the standard interface.  If a module needs a non-standard constructor,
as our Section and Block modules currently take an array of lines, that
will need to be provided as the second return from the module. 
"]
block_82 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This will allow for the kind of multi-pass recursive-descent that I'm
aiming for. 

"]
section_83 -> { header_90 block_91 block_92 block_93 block_94}
{rank=same; header_90 block_91 block_92 block_93 block_94}

header_90 [label="4 : line tracking (optional)"]

block_91 [label="block 225-228"]

block_92 [label="block 229-231"]

block_93 [label="block 232-234"]

block_94 [label="block 235-237"]


header_90 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_91 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It may be wise to always track lines, in which case we will include:
"]
block_92 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - line_first :  The line at which the match begins
  - line_last  :  The line at which the match ends
"]
block_93 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This is, at least, a frequent enough pattern that the metatable should return
a negative number if these aren't assigned. 
"]
block_94 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="- [ ] #todo decide if line tracking is in fact optional

"]
section_70 -> { header_100 block_101 block_102 block_103 block_104 block_105 block_106 block_107 block_108 codeblock_109}
{rank=same; header_100 block_101 block_102 block_103 block_104 block_105 block_106 block_107 block_108 codeblock_109}

header_100 [label="3 : Other fields"]

block_101 [label="block 238-243"]

block_102 [label="block 244-246"]

block_103 [label="block 247-249"]

block_104 [label="block 250-253"]

block_105 [label="block 254-258"]

block_106 [label="block 259-260"]

block_107 [label="block 261-263"]

block_108 [label="block 264-266"]

codeblock_109 [label="code block 267-269"]


header_100 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_101 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  The way the Grammar class will work: each =V\"patt\"= can have a metatable.
These are passed in as the second parameter during construction, with the key
the same name as the rule. 
"]
block_102 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If a pattern doesn't have a metatable, it's given a Node class and consists of
only the above fields, plus an array representing any subrules. 
"]
block_103 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If it does, the metatable will have a =__call= method, which expects two
parameters, itself, and the node, which will include the span. 
"]
block_104 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This will require reattunement of basically every class in the =/grym= folder,
but let's build the Prose parse first.  I do want the whole shebang in a single
grammar eventually.
"]
block_105 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The intention is to allow multiple grammars to coexist peacefully. Currently
the parser is handrolled and we have special case values for everything.
The idea is to stabilize this, so that multi-pass parsing works but in a
standard way where the Node constructor is a consistent interface. 
"]
block_106 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In the meantime we have things like
"]
block_107 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="- lines :  If this exists, there's a collection of lines which need to be
           joined with =\\n= to reconstruct the actual span.
"]
block_108 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="           We want to do this the other way, and use the span itself for the
           inner parse. 
"]
codeblock_109 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return N"]

}
