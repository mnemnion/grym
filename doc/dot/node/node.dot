digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 259"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-164"]


section_1 -> { header_2 prose_3 section_4 section_5 section_6}
{rank=same; header_2 prose_3 section_4 section_5 section_6}

header_2 [label="1 : Node"]

prose_3 [label="prose"]

section_4 [label="section: 6-12"]

section_5 [label="section: 13-127"]

section_6 [label="section: 165-224"]


prose_3 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  Time to stabilize this class once and for all. 
"]
section_4 -> { header_8 prose_9 codeblock_10}
{rank=same; header_8 prose_9 codeblock_10}

header_8 [label="3 : includes"]

prose_9 [label="prose"]

codeblock_10 [label="code block 8-11"]


prose_9 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_10 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local s = require \"status\"
local dot = require \"node/dot\""]
section_5 -> { header_13 prose_14 codeblock_15 section_16 section_17 section_18 section_19 section_20}
{rank=same; header_13 prose_14 codeblock_15 section_16 section_17 section_18 section_19 section_20}

header_13 [label="2 : Node metatable"]

prose_14 [label="prose"]

codeblock_15 [label="code block 19-24"]

section_16 [label="section: 28-35"]

section_17 [label="section: 36-80"]

section_18 [label="section: 81-101"]

section_19 [label="section: 102-127"]

section_20 [label="section: 128-164"]


prose_14 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The Node metatable is the root table for any Node.  I'm planning to make
an intermediate class/table called Root that is in common for any instance
Node.  All Root absolutely has to contain is =str=. 
"]
codeblock_15 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local N = {}
N.__index = N
N.isNode = true"]
section_16 -> { header_23 prose_24}
{rank=same; header_23 prose_24}

header_23 [label="3 : Fields"]

prose_24 [label="prose"]


prose_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   - id :  A string naming the Node. 
           This is identical to the name of the pattern that recognizes
           or captures it.
   - line_first :  Always -1.
   - line_last  :  Always -1. 
"]
section_17 -> { header_26 prose_27 codeblock_28 codeblock_29}
{rank=same; header_26 prose_27 codeblock_28 codeblock_29}

header_26 [label="3 : Methods"]

prose_27 [label="prose"]

codeblock_28 [label="code block 38-53"]

codeblock_29 [label="code block 55-79"]


prose_27 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_28 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.toString(node, depth)
   local depth = depth or 0
   local phrase = \"\"
   phrase = (\"  \"):rep(depth) .. \"id: \" .. node.id .. \",  \"
      .. \"first: \" .. node.first .. \", last: \" .. node.last .. \"\\n\"
   if node[1] then
    for _,v in ipairs(node) do
      if(v.isNode) then
        phrase = phrase .. N.toString(v, depth + 1)
      end
    end
  end 
   return phrase
end"]
codeblock_29 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.dotLabel(node)
  return node.id
end

function N.toMarkdown(node)
  if not node[1] then
    return string.sub(node.str, node.first, node.last)
  else
    s:halt(\"no toMarkdown for \" .. node.id)
  end
end

function N.dot(node)
  return dot.dot(node)
end

function N.toValue(node)
  if not node.val then
    node.val = node.str:sub(node.first,node.last)
  end
  return node.val
end
"]
section_18 -> { header_33 prose_34 codeblock_35}
{rank=same; header_33 prose_34 codeblock_35}

header_33 [label="3 : N.walkDeep"]

prose_34 [label="prose"]

codeblock_35 [label="code block 85-100"]


prose_34 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Depth-first iterator. 
"]
codeblock_35 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.walkDeep(node)
    local function traverse(ast)
        if not ast.isNode then return nil end

        for _, v in ipairs(ast) do
            if type(v) == 'table' and v.isNode then
              traverse(v)
            end
        end
        coroutine.yield(ast)
    end

    return coroutine.wrap(function() traverse(node) end)
end"]
section_19 -> { header_38 prose_39 codeblock_40}
{rank=same; header_38 prose_39 codeblock_40}

header_38 [label="3 : N.walkBroad, N.walk"]

prose_39 [label="prose"]

codeblock_40 [label="code block 106-125"]


prose_39 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Breadth-first iterator.  This is the default. 
"]
codeblock_40 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.walkBroad(node)
  local function traverse(ast)
    if not ast.isNode then return nil end

    coroutine.yield(ast)
    for _, v in ipairs(ast) do
      if type(v) == 'table' and v.isNode then
        traverse(v)
      end
    end
  end

  return coroutine.wrap(function() traverse(node) end)
end

function N.walk(node)
  return N.walkBroad(node)
end"]
section_20 -> { header_43 prose_44 codeblock_45}
{rank=same; header_43 prose_44 codeblock_45}

header_43 [label="3 : N.select(node, pred)"]

prose_44 [label="prose"]

codeblock_45 [label="code block 134-163"]


prose_44 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Takes the Node and walks it, yielding the Nodes which match the predicate.
=pred= is either a string, which matches to =id=, or a function, which takes
a Node and returns true or false on some premise. 
"]
codeblock_45 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.select(node, pred)
   local function qualifies(node, pred)
      if type(pred) == 'string' then
         if type(node) == 'table' and node.isNode and node.id == pred then
            return true
         else
            return false
         end
      elseif type(pred) == 'function' then
         return pred(node)
      else
         s:halt(\"cannot select on predicate of type \" .. type(pred))
      end
   end

   local function traverse(ast)
      if qualifies(ast, pred) then
         coroutine.yield(ast)
      end
      if ast.isNode then
         for _, v in ipairs(ast) do
            traverse(v)
         end
      end
   end

  return coroutine.wrap(function() traverse(node) end)
end"]
section_6 -> { header_48 prose_49 prose_50 prose_51 prose_52 prose_53 section_54 section_55}
{rank=same; header_48 prose_49 prose_50 prose_51 prose_52 prose_53 section_54 section_55}

header_48 [label="2 : Node Instances"]

prose_49 [label="prose"]

prose_50 [label="prose"]

prose_51 [label="prose"]

prose_52 [label="prose"]

prose_53 [label="prose"]

section_54 [label="section: 189-211"]

section_55 [label="section: 225-259"]


prose_49 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  To be a Node, currently, indexed elements of the Array portion must also be 
Nodes. 
"]
prose_50 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm mostly convinced that indexed elements can also be strings, and that 
this is the form leaf nodes should take.  Currently, they have a 'val' field
and no children, which we should replace with a child string at [1].
"]
prose_51 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This gives us a lighter way to handle the circumstance where we have, say,
a list, =(foo bar baz)=. We currently either need a \"left-per\" or \"pal\"
Node class to hold the =(=, or we would have to skip it entirely.
"]
prose_52 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Quipu can't lose any information from the string, so they have to include
whitespace.  We're not limited in the same way and can reconstruct less 
semantically crucial parts of a document using the span and the original 
string, since we're not /currently/ editing our strings once they're
entered in.
"]
prose_53 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Nodes are meant to be broadly compatible with everything we intend to
do with abstract syntax trees.  The more I think about this the better
it strikes me as an approach. 

"]
section_54 -> { header_61 prose_62 prose_63 prose_64 prose_65 prose_66 section_67}
{rank=same; header_61 prose_62 prose_63 prose_64 prose_65 prose_66 section_67}

header_61 [label="3 : Fields"]

prose_62 [label="prose"]

prose_63 [label="prose"]

prose_64 [label="prose"]

prose_65 [label="prose"]

prose_66 [label="prose"]

section_67 [label="section: 212-224"]


prose_62 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  There are invariant fields a Node is also expected to have, they are:
 
  - first :  Index into =str= which begins the span.
  - last  :  Index into =str= which ends the span.
"]
prose_63 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In principle, we want the Node to be localized. We could include a 
reference to the whole =str= and derive substrings lazily.
"]
prose_64 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If we included the full span as a substring on each Node, we'd end up
with a lot of spans, and wouldn't use most of them. Even slicing a piece
out is costly if we're not going to use it. 
"]
prose_65 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So our constructor for a Node class takes (Constructor, node, str) as 
the standard interface.  If a module needs a non-standard constructor,
as our Section and Block modules currently take an array of lines, that
will need to be provided as the second return from the module. 
"]
prose_66 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will allow for the kind of multi-pass recursive-descent that I'm
aiming for. 

"]
section_67 -> { header_73 prose_74 prose_75 prose_76 prose_77}
{rank=same; header_73 prose_74 prose_75 prose_76 prose_77}

header_73 [label="4 : line tracking (optional)"]

prose_74 [label="prose"]

prose_75 [label="prose"]

prose_76 [label="prose"]

prose_77 [label="prose"]


prose_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

It may be wise to always track lines, in which case we will include:
"]
prose_75 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - line_first :  The line at which the match begins
  - line_last  :  The line at which the match ends
"]
prose_76 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is, at least, a frequent enough pattern that the metatable should return
a negative number if these aren't assigned. 
"]
prose_77 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ] #todo decide if line tracking is in fact optional

"]
section_55 -> { header_82 prose_83 prose_84 prose_85 prose_86 prose_87 prose_88 prose_89 prose_90 codeblock_91}
{rank=same; header_82 prose_83 prose_84 prose_85 prose_86 prose_87 prose_88 prose_89 prose_90 codeblock_91}

header_82 [label="3 : Other fields"]

prose_83 [label="prose"]

prose_84 [label="prose"]

prose_85 [label="prose"]

prose_86 [label="prose"]

prose_87 [label="prose"]

prose_88 [label="prose"]

prose_89 [label="prose"]

prose_90 [label="prose"]

codeblock_91 [label="code block 254-256"]


prose_83 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The way the Grammar class will work: each =V\"patt\"= can have a metatable.
These are passed in as the second parameter during construction, with the key
the same name as the rule. 
"]
prose_84 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If a pattern doesn't have a metatable, it's given a Node class and consists of
only the above fields, plus an array representing any subrules. 
"]
prose_85 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If it does, the metatable will have a =__call= method, which expects two
parameters, itself, and the node, which will include the span. 
"]
prose_86 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will require reattunement of basically every class in the =/grym= folder,
but let's build the Prose parse first.  I do want the whole shebang in a single
grammar eventually.
"]
prose_87 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The intention is to allow multiple grammars to coexist peacefully. Currently
the parser is handrolled and we have special case values for everything.
The idea is to stabilize this, so that multi-pass parsing works but in a
standard way where the Node constructor is a consistent interface. 
"]
prose_88 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the meantime we have things like
"]
prose_89 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- lines :  If this exists, there's a collection of lines which need to be
           joined with =\\n= to reconstruct the actual span.
"]
prose_90 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           We want to do this the other way, and use the span itself for the
           inner parse. 
"]
codeblock_91 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return N"]

}
