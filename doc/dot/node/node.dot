digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 272"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-177"]


section_1 -> { header_2 block_3 section_4 section_5 section_6}
{rank=same; header_2 block_3 section_4 section_5 section_6}

header_2 [label="1 : Node"]

block_3 [label="block 1-177"]

section_4 [label="section: 6-12"]

section_5 [label="section: 13-35"]

section_6 [label="section: 178-237"]


block_3 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Time to stabilize this class once and for all. 
"]
section_4 -> { header_8 block_9 block_10}
{rank=same; header_8 block_9 block_10}

header_8 [label="3 : includes"]

block_9 [label="block 6-7"]

block_10 [label="block 8-12"]


block_9 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_10 -> { codeblock_12}
{rank=same; codeblock_12}

codeblock_12 [label="code block 8-11"]


codeblock_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local s = require \"status\"
local dot = require \"node/dot\""]
block_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_5 -> { header_15 block_16 block_17 section_18 section_19}
{rank=same; header_15 block_16 block_17 section_18 section_19}

header_15 [label="2 : Node metatable"]

block_16 [label="block 13-18"]

block_17 [label="block 19-35"]

section_18 [label="section: 28-35"]

section_19 [label="section: 36-159"]


block_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  The Node metatable is the root table for any Node.  I'm planning to make
an intermediate class/table called Root that is in common for any instance
Node.  All Root absolutely has to contain is =str=. 
"]
block_17 -> { codeblock_21}
{rank=same; codeblock_21}

codeblock_21 [label="code block 19-24"]


codeblock_21 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local N = {}
N.__index = N
N.isNode = true"]
block_17 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
section_18 -> { header_24 block_25}
{rank=same; header_24 block_25}

header_24 [label="3 : Fields"]

block_25 [label="block 28-35"]


block_25 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
   - id :  A string naming the Node. 
           This is identical to the name of the pattern that recognizes
           or captures it.
   - line_first :  Always -1.
   - line_last  :  Always -1. 
"]
section_19 -> { header_27 block_28 block_29 block_30 section_31 section_32 section_33 section_34}
{rank=same; header_27 block_28 block_29 block_30 section_31 section_32 section_33 section_34}

header_27 [label="3 : Methods"]

block_28 [label="block 36-37"]

block_29 [label="block 38-54"]

block_30 [label="block 55-159"]

section_31 [label="section: 78-98"]

section_32 [label="section: 99-121"]

section_33 [label="section: 122-159"]

section_34 [label="section: 160-177"]


block_28 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_29 -> { codeblock_36}
{rank=same; codeblock_36}

codeblock_36 [label="code block 38-53"]


codeblock_36 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.toString(node, depth)
   local depth = depth or 0
   local phrase = \"\"
   phrase = (\"  \"):rep(depth) .. \"id: \" .. node.id .. \",  \"
      .. \"first: \" .. node.first .. \", last: \" .. node.last .. \"\\n\"
   if node[1] then
    for _,v in ipairs(node) do
      if(v.isNode) then
        phrase = phrase .. N.toString(v, depth + 1)
      end
    end
  end 
   return phrase
end"]
block_29 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_30 -> { codeblock_39}
{rank=same; codeblock_39}

codeblock_39 [label="code block 55-76"]


codeblock_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.dotLabel(node)
  return node.id
end

function N.toMarkdown(node)
  if not node[1] then
    return string.sub(node.str, node.first, node.last)
  else
    s:halt(\"no toMarkdown for \" .. node.id)
  end
end

function N.dot(node)
  return dot.dot(node)
end

function N.toValue(node)
  return node.str:sub(node.first,node.last)
end
"]
block_30 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_31 -> { header_42 block_43 block_44}
{rank=same; header_42 block_43 block_44}

header_42 [label="4 : N.walkDeep"]

block_43 [label="block 78-81"]

block_44 [label="block 82-98"]


block_43 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Depth-first iterator. 
"]
block_44 -> { codeblock_46}
{rank=same; codeblock_46}

codeblock_46 [label="code block 82-97"]


codeblock_46 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.walkDeep(node)
    local function traverse(ast)
        if not ast.isNode then return nil end

        for _, v in ipairs(ast) do
            if type(v) == 'table' and v.isNode then
              traverse(v)
            end
        end
        coroutine.yield(ast)
    end

    return coroutine.wrap(function() traverse(node) end)
end"]
block_44 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_32 -> { header_49 block_50 block_51}
{rank=same; header_49 block_50 block_51}

header_49 [label="4 : N.walk"]

block_50 [label="block 99-102"]

block_51 [label="block 103-121"]


block_50 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Breadth-first iterator.  This is the default. 
"]
block_51 -> { codeblock_53}
{rank=same; codeblock_53}

codeblock_53 [label="code block 103-119"]


codeblock_53 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.walk(node)
  local function traverse(ast)
    if not ast.isNode then return nil end

    coroutine.yield(ast)
    for _, v in ipairs(ast) do
      if type(v) == 'table' and v.isNode then
        traverse(v)
      end
    end
  end

  return coroutine.wrap(function() traverse(node) end)
end
"]
block_51 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
section_33 -> { header_56 block_57 block_58}
{rank=same; header_56 block_57 block_58}

header_56 [label="4 : N.select(node, pred)"]

block_57 [label="block 122-127"]

block_58 [label="block 128-159"]


block_57 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Takes the Node and walks it, yielding the Nodes which match the predicate.
=pred= is either a string, which matches to =id=, or a function, which takes
a Node and returns true or false on some premise. 
"]
block_58 -> { codeblock_60}
{rank=same; codeblock_60}

codeblock_60 [label="code block 128-157"]


codeblock_60 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.select(node, pred)
   local function qualifies(node, pred)
      if type(pred) == 'string' then
         if type(node) == 'table' and node.isNode and node.id == pred then
            return true
         else
            return false
         end
      elseif type(pred) == 'function' then
         return pred(node)
      else
         s:halt(\"cannot select on predicate of type \" .. type(pred))
      end
   end

   local function traverse(ast)
      if qualifies(ast, pred) then
         coroutine.yield(ast)
      end
      if ast.isNode then
         for _, v in ipairs(ast) do
            traverse(v)
         end
      end
   end

  return coroutine.wrap(function() traverse(node) end)
end"]
block_58 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
section_34 -> { header_63 block_64 block_65}
{rank=same; header_63 block_64 block_65}

header_63 [label="4 : N.tokens(node)"]

block_64 [label="block 160-163"]

block_65 [label="block 164-177"]


block_64 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Iterator returning all 'captured' values as strings.
"]
block_65 -> { codeblock_67}
{rank=same; codeblock_67}

codeblock_67 [label="code block 164-176"]


codeblock_67 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.tokens(node)
  local function traverse(ast)
    for node in N.walk(ast) do
      if not node[1] then
        coroutine.yield(node:toValue())
      end
    end
  end

  return coroutine.wrap(function() traverse(node) end)
end  "]
block_65 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
section_6 -> { header_70 block_71 block_72 block_73 block_74 block_75 section_76 section_77}
{rank=same; header_70 block_71 block_72 block_73 block_74 block_75 section_76 section_77}

header_70 [label="2 : Node Instances"]

block_71 [label="block 178-182"]

block_72 [label="block 183-186"]

block_73 [label="block 187-190"]

block_74 [label="block 191-196"]

block_75 [label="block 197-237"]

section_76 [label="section: 202-224"]

section_77 [label="section: 238-272"]


block_71 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  To be a Node, currently, indexed elements of the Array portion must also be 
Nodes. 
"]
block_72 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="I'm mostly convinced that indexed elements can also be strings, and that 
this is the form leaf nodes should take.  Currently, they have a 'val' field
and no children, which we should replace with a child string at [1].
"]
block_73 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This gives us a lighter way to handle the circumstance where we have, say,
a list, =(foo bar baz)=. We currently either need a \"left-per\" or \"pal\"
Node class to hold the =(=, or we would have to skip it entirely.
"]
block_74 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Quipu can't lose any information from the string, so they have to include
whitespace.  We're not limited in the same way and can reconstruct less 
semantically crucial parts of a document using the span and the original 
string, since we're not /currently/ editing our strings once they're
entered in.
"]
block_75 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Nodes are meant to be broadly compatible with everything we intend to
do with abstract syntax trees.  The more I think about this the better
it strikes me as an approach. 

"]
section_76 -> { header_83 block_84 block_85 block_86 block_87 block_88 section_89}
{rank=same; header_83 block_84 block_85 block_86 block_87 block_88 section_89}

header_83 [label="3 : Fields"]

block_84 [label="block 202-208"]

block_85 [label="block 209-211"]

block_86 [label="block 212-215"]

block_87 [label="block 216-220"]

block_88 [label="block 221-224"]

section_89 [label="section: 225-237"]


block_84 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  There are invariant fields a Node is also expected to have, they are:
 
  - first :  Index into =str= which begins the span.
  - last  :  Index into =str= which ends the span.
"]
block_85 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In principle, we want the Node to be localized. We could include a 
reference to the whole =str= and derive substrings lazily.
"]
block_86 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If we included the full span as a substring on each Node, we'd end up
with a lot of spans, and wouldn't use most of them. Even slicing a piece
out is costly if we're not going to use it. 
"]
block_87 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="So our constructor for a Node class takes (Constructor, node, str) as 
the standard interface.  If a module needs a non-standard constructor,
as our Section and Block modules currently take an array of lines, that
will need to be provided as the second return from the module. 
"]
block_88 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This will allow for the kind of multi-pass recursive-descent that I'm
aiming for. 

"]
section_89 -> { header_95 block_96 block_97 block_98 block_99}
{rank=same; header_95 block_96 block_97 block_98 block_99}

header_95 [label="4 : line tracking (optional)"]

block_96 [label="block 225-228"]

block_97 [label="block 229-231"]

block_98 [label="block 232-234"]

block_99 [label="block 235-237"]


block_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It may be wise to always track lines, in which case we will include:
"]
block_97 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  - line_first :  The line at which the match begins
  - line_last  :  The line at which the match ends
"]
block_98 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This is, at least, a frequent enough pattern that the metatable should return
a negative number if these aren't assigned. 
"]
block_99 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="- [ ] #todo decide if line tracking is in fact optional

"]
section_77 -> { header_104 block_105 block_106 block_107 block_108 block_109 block_110 block_111 block_112 block_113}
{rank=same; header_104 block_105 block_106 block_107 block_108 block_109 block_110 block_111 block_112 block_113}

header_104 [label="3 : Other fields"]

block_105 [label="block 238-243"]

block_106 [label="block 244-246"]

block_107 [label="block 247-249"]

block_108 [label="block 250-253"]

block_109 [label="block 254-258"]

block_110 [label="block 259-260"]

block_111 [label="block 261-263"]

block_112 [label="block 264-266"]

block_113 [label="block 267-272"]


block_105 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  The way the Grammar class will work: each =V\"patt\"= can have a metatable.
These are passed in as the second parameter during construction, with the key
the same name as the rule. 
"]
block_106 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If a pattern doesn't have a metatable, it's given a Node class and consists of
only the above fields, plus an array representing any subrules. 
"]
block_107 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="If it does, the metatable will have a =__call= method, which expects two
parameters, itself, and the node, which will include the span. 
"]
block_108 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This will require reattunement of basically every class in the =/grym= folder,
but let's build the Prose parse first.  I do want the whole shebang in a single
grammar eventually.
"]
block_109 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="The intention is to allow multiple grammars to coexist peacefully. Currently
the parser is handrolled and we have special case values for everything.
The idea is to stabilize this, so that multi-pass parsing works but in a
standard way where the Node constructor is a consistent interface. 
"]
block_110 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="In the meantime we have things like
"]
block_111 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="- lines :  If this exists, there's a collection of lines which need to be
           joined with =\\n= to reconstruct the actual span.
"]
block_112 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="           We want to do this the other way, and use the span itself for the
           inner parse. 
"]
block_113 -> { codeblock_122}
{rank=same; codeblock_122}

codeblock_122 [label="code block 267-269"]


codeblock_122 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return N"]
block_113 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]

}
