digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 159"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-159"]


section_1 -> { header_2 prose_3 codeblock_4 structure_5 prose_6 codeblock_7 prose_8 prose_9 codeblock_10 prose_11 codeblock_12}
{rank=same; header_2 prose_3 codeblock_4 structure_5 prose_6 codeblock_7 prose_8 prose_9 codeblock_10 prose_11 codeblock_12}

header_2 [label="0 : "]

prose_3 [label="prose"]

codeblock_4 [label="code block 2-4"]

structure_5 [label="structure"]

prose_6 [label="prose"]

codeblock_7 [label="code block 14-69"]

prose_8 [label="prose"]

prose_9 [label="prose"]

codeblock_10 [label="code block 77-147"]

prose_11 [label="prose"]

codeblock_12 [label="code block 151-159"]


header_2 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!lua"]
prose_3 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_4 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="--- Transform Module"]
structure_5 -> { hashline_17}
{rank=same; hashline_17}

hashline_17 [label="hashline"]


hashline_17 -> { hashtag_18}
{rank=same; hashtag_18}

hashtag_18 [label="hashtag"]


hashtag_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
prose_6 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - [ ] Make leaf_font and leaf_color configurable values of t
"]
codeblock_7 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local t = {}

local dot_header = [=[
digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

]=]

local dot_footer = [=[

}
]=]

local leaf_font  = \"Inconsolata\"
local leaf_color = \"Gray\"

local function sanitize_string(str)
   -- filter \\ and \"
   local phrase = str:gsub(\"\\\\\", \"\\\\\\\\\"):gsub('\"', '\\\\\"')
   if phrase:sub(-1,-1) == \"\\n\" then
      return phrase:sub(1, -2)
   else
      return phrase
   end
end

local function ast_to_label(ast, leaf_count)
   -- nodes need unique names, so we append a leaf_count and increment it
   local label      = ast.id.. \"_\" .. leaf_count 
   local label_line = label .. \" [label=\\\"\"
      .. sanitize_string(ast:dotLabel()) .. \"\\\"]\\n\"
   return label, label_line, leaf_count + 1
end

local function list_from_table(tab)
   local table_list = \"\"
   for _,v in ipairs(tab) do
      table_list = table_list..\" \"..v
   end
   return table_list
end

local function value_to_label(value, leaf_count)
   -- Generates a name and label for a leaf node.
   -- Returns these with an incremented leaf_count.
   local value = sanitize_string(value)
   local name  = \"leaf_\"..leaf_count
   local label = \" [color=\"..leaf_color..\",shape=rectangle,fontname=\"
         ..leaf_font..\",label=\\\"\"..value..\"\\\"]\\n\"

   return name, label, leaf_count + 1
end"]
prose_8 -> { raw_23}
{rank=same; raw_23}

raw_23 [label="raw"]


raw_23 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Recursively walk an AST, concatenating dot descriptions
 to the phrase. 
"]
prose_9 -> { raw_25}
{rank=same; raw_25}

raw_25 [label="raw"]


raw_25 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - [ ] #todo allow nodes to skip themselves to collapse
             semantic intermediates
"]
codeblock_10 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function dot_ranks(ast, phrase, leaf_count, ast_label)
   local leaf_count = leaf_count or 0

   -- Add the node we're working on
   if ast.isNode or ast.isnode then
      local label = \"\"
      local label_line = \"\"
      local child_labels = {}
      local child_label_lines = {}

      -- Handle anonymous nodes
      if not ast_label then
         label, label_line, leaf_count = ast_to_label(ast, leaf_count)
         phrase = phrase .. label_line .. \"\\n\\n\"
      else 
         label = ast_label 
      end

      -- Document child nodes
      for i,v in ipairs(ast) do
         -- assemble labels and label lines for all child nodes
         if v.isNode or v.isnode then
            child_labels[i], child_label_lines[i], leaf_count = 
               ast_to_label(v, leaf_count)
         end
      end

      local child_list = list_from_table(child_labels)

      if next(child_labels) ~= nil then
         phrase = phrase..label..\" -> {\"..child_list..\"}\\n\"
         phrase = phrase..\"{rank=same;\"..list_from_table(child_labels)..\"}\\n\\n\"
      end

      -- Concatenate child label lines
      for _, v in ipairs(child_label_lines) do
         phrase = phrase..v..\"\\n\"
      end

      if next(child_labels) ~= nil then
         phrase = phrase..\"\\n\"
      end

      -- Execute recursively for all nodes
      for i,v in ipairs(ast) do
         if v.isNode or v.isnode then
            phrase, leaf_count = dot_ranks(v, phrase, leaf_count, child_labels[i])
         end
      end

      local leaf_val = nil

      if ast.val then
         leaf_val = ast.val
      elseif ast.toValue then
         leaf_val = ast:toValue()
      end

      -- Document value of leaf nodes
      if (not ast[1]) and leaf_val then
         local name = \"\" ; local val_label = \"\"
         name, val_label, leaf_count = value_to_label(leaf_val, leaf_count)
         phrase = phrase..label..\" -> \"..name..\"\\n\"
         phrase = phrase..name..\" \"..val_label
      end
   end

   return phrase, leaf_count
end"]
prose_11 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 turn an AST into a dotfile string. 
"]
codeblock_12 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function t.dot(ast)
   local phrase = dot_header

   return  dot_ranks(ast, phrase) .. dot_footer
end

return t"]

}
