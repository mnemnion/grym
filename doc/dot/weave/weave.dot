digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 136"]

doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-136"]

section_1 -> { header_2 block_3 block_4 block_5 block_6 block_7 block_8 block_9 block_10}
{rank=same; header_2 block_3 block_4 block_5 block_6 block_7 block_8 block_9 block_10}

header_2 [label="Weave"]
block_3 [label="block 1-5"]
block_4 [label="block 6-7"]
block_5 [label="block 8-10"]
block_6 [label="block 11-47"]
block_7 [label="block 48-54"]
block_8 [label="block 55-124"]
block_9 [label="block 125-133"]
block_10 [label="block 134-nil"]


block_3 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Our weaver is currently somewhat narrowly focused on markdown.

"]
block_4 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This will change in time.

"]
block_5 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Now to activate dot!


"]block_6 -> { codeblock_14}
{rank=same; codeblock_14}

codeblock_14 [label="code block 11-46"]


codeblock_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local pl_file = require \"pl.file\"
local pl_dir = require \"pl.dir\"
local pl_path = require \"pl.path\"
local getfiles = pl_dir.getfiles
local makepath = pl_dir.makepath
local getdirectories = pl_dir.getdirectories
local extension = pl_path.extension
local dirname = pl_path.dirname
local basename = pl_path.basename
local read = pl_file.read
local write = pl_file.write
local isdir = pl_path.isdir

local u = require \"lib/util\"
local a = require \"lib/ansi\"


local s = require \"lib/status\"

local Node = require \"peg/node\"

local m = require \"grym/morphemes\"
local walk = require \"walk\"
local strHas = walk.strHas
local endsWith = walk.endsWith
local subLastFor = walk.subLastFor

local epeg = require \"peg/epeg\"

local Doc = require \"grym/doc\"

local W, w = u.inherit(Node)
"]
block_6 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]block_7 -> { codeblock_17}
{rank=same; codeblock_17}

codeblock_17 [label="code block 48-52"]


codeblock_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function W.weaveMd(weaver, doc)
  return doc:toMarkdown()
end
"]
block_7 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]block_8 -> { codeblock_20}
{rank=same; codeblock_20}

codeblock_20 [label="code block 55-122"]


codeblock_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function weave_dir(weaver, pwd, depth)
    local depth = depth + 1
    for dir in pl_dir.walk(pwd, false, false) do
        if not strHas(\".git\", dir) and isdir(dir)
            and not strHas(\"src/lib\", dir) then

            local files = getfiles(dir)
            s:chat((\"  \"):rep(depth) .. \"* \" .. dir)
            local subdirs = getdirectories(dir)
            for _, f in ipairs(files) do
                if extension(f) == \".orb\" then
                    -- Weave and prepare out directory
                    local orb_f = read(f)
                    local doc = Doc(orb_f)
                    local woven_md = weaver:weaveMd(doc) or \"\"
                    local woven_dot = doc:dot()
                    local doc_md_dir = subLastFor(\"/orb\", \"/doc/md\", dirname(f))
                    local doc_dot_dir = subLastFor(\"/orb\", \"/doc/dot\", dirname(f))
                    makepath(doc_md_dir)
                    makepath(doc_dot_dir)
                    local bare_name = basename(f):sub(1, -5) --  == #\".orb\"
                    local out_md_name = doc_md_dir .. \"/\" .. bare_name .. \".md\"
                    local out_dot_name = doc_dot_dir .. \"/\" .. bare_name .. \".dot\"
                    -- Compare, report, and write out if necessary
                    local current_md = read(out_md_name) or \"\"
                    local current_dot = read(out_dot_name) or \"\"
                    if woven_md ~= current_md then
                        s:chat(a.green((\"  \"):rep(depth) .. \"  - \" .. out_md_name))
                        write(out_md_name, woven_md)
                    elseif current_md ~= \"\" and woven_md == \"\" then
                        s:chat(a.red((\"  \"):rep(depth) .. \"  - \" .. out_md_name))
                        delete(out_md_name)
                    else
                        s:verb((\"  \"):rep(depth) .. \"  - \" .. out_md_name)
                    end
                    if woven_dot ~= current_dot then
                        s:chat(a.green((\"  \"):rep(depth) .. \"  - \" .. out_dot_name))
                        write(out_dot_name, woven_dot)
                    elseif current_dot ~= \"\" and woven_dot == \"\" then
                        s:chat(a.red((\"  \"):rep(depth) .. \"  - \" .. out_dot_name))
                        delete(out_dot_name)
                    else
                        s:verb((\"  \"):rep(depth) .. \"  - \" .. out_dot_name)
                    end
                end
            end
        end
    end


    return true
end

local function weave_all(weaver, pwd)
    for dir in pl_dir.walk(pwd, false, false) do
        if not strHas(\".git\", dir) and isdir(dir) 
            and endsWith(\"orb\", dir) then
            s:chat(a.green(\"Weave: \" .. dir))
            return weave_dir(weaver, dir, 0)
        end
    end

    return false
end

W.weave_all = weave_all
"]
block_8 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]block_9 -> { codeblock_23}
{rank=same; codeblock_23}

codeblock_23 [label="code block 125-132"]


codeblock_23 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Weaver, doc)
    local weaver = setmetatable({}, W)


    return weaver
end
"]
block_9 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]block_10 -> { codeblock_26}
{rank=same; codeblock_26}

codeblock_26 [label="code block 134-136"]


codeblock_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return W
"]
block_10 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
}
