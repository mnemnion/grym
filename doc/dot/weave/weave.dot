digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 152"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-55"]


section_1 -> { header_2 prose_3 prose_4 prose_5 codeblock_6 codeblock_7 section_8}
{rank=same; header_2 prose_3 prose_4 prose_5 codeblock_6 codeblock_7 section_8}

header_2 [label="1 : Weave"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

codeblock_6 [label="code block 11-47"]

codeblock_7 [label="code block 49-53"]

section_8 [label="section: 56-152"]


header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Weave"]
prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


Our weaver is currently somewhat narrowly focused on markdown.
"]
prose_4 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will change in time.
"]
prose_5 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Now to activate dot!

"]
codeblock_6 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local pl_file = require \"pl.file\"
local pl_dir = require \"pl.dir\"
local pl_path = require \"pl.path\"
local getfiles = pl_dir.getfiles
local makepath = pl_dir.makepath
local getdirectories = pl_dir.getdirectories
local extension = pl_path.extension
local dirname = pl_path.dirname
local basename = pl_path.basename
local read = pl_file.read
local write = pl_file.write
local isdir = pl_path.isdir

local u = require \"lib/util\"
local a = require \"lib/ansi\"


local s = require \"lib/status\"

local Node = require \"peg/node\"

local m = require \"grym/morphemes\"
local walk = require \"walk\"
local strHas = walk.strHas
local endsWith = walk.endsWith
local subLastFor = walk.subLastFor
local writeOnChange = walk.writeOnChange

local epeg = require \"peg/epeg\"

local Doc = require \"grym/doc\"

local W, w = u.inherit(Node)"]
codeblock_7 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function W.weaveMd(weaver, doc)
  return doc:toMarkdown()
end"]
section_8 -> { header_18 prose_19 codeblock_20 codeblock_21 codeblock_22 codeblock_23}
{rank=same; header_18 prose_19 codeblock_20 codeblock_21 codeblock_22 codeblock_23}

header_18 [label="3 : .dot to .svg"]

prose_19 [label="prose"]

codeblock_20 [label="code block 61-75"]

codeblock_21 [label="code block 78-138"]

codeblock_22 [label="code block 141-148"]

codeblock_23 [label="code block 150-152"]


header_18 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** .dot to .svg"]
prose_19 -> { raw_25}
{rank=same; raw_25}

raw_25 [label="raw"]


raw_25 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The sh-lib monkeypatches the global metatable, and all we want is one
command, so we do something odd here:
"]
codeblock_20 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local dot_sh = (require \"sh\"):clear_G().command('dot', '-Tsvg')

local function dotToSvg(dotted, out_file)
    local run_dot = dot_sh({__input = dotted})
    if run_dot.__exitcode == 0 then
        return tostring(run_dot)
    else 
        s:complain(a.red(\"Dot returned \") 
                    .. tostring(run_dot.__exitcode)
                    .. a.red(\" for \" .. out_file ))
        return \"\"
    end
end"]
codeblock_21 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function weave_dir(weaver, pwd, depth)
    local depth = depth + 1
    for dir in pl_dir.walk(pwd, false, false) do
        if not strHas(\".git\", dir) and isdir(dir)
            and not strHas(\"src/lib\", dir) then

            local files = getfiles(dir)
            s:chat((\"  \"):rep(depth) .. \"* \" .. dir)
            local subdirs = getdirectories(dir)
            for _, f in ipairs(files) do
                if extension(f) == \".orb\" then
                    -- Weave and prepare out directory
                    s:verb((\"  \"):rep(depth) .. \"  - \" .. f)
                    local orb_f = read(f)
                    local doc = Doc(orb_f)
                    local doc_md_dir = subLastFor(\"/orb\", \"/doc/md\", dirname(f))
                    local doc_dot_dir = subLastFor(\"/orb\", \"/doc/dot\", dirname(f))
                    local doc_svg_dir = subLastFor(\"/orb\", \"/doc/svg\", dirname(f))
                    makepath(doc_md_dir)
                    makepath(doc_dot_dir)
                    makepath(doc_svg_dir)
                    local bare_name = basename(f):sub(1, -5) --  == #\".orb\"
                    local out_md_name = doc_md_dir .. \"/\" .. bare_name .. \".md\"
                    local out_dot_name = doc_dot_dir .. \"/\" .. bare_name .. \".dot\"
                    local out_svg_name = doc_svg_dir .. \"/\" .. bare_name .. \".svg\"
                    local woven_md = weaver:weaveMd(doc) or \"\"
                    
                    -- Compare, report, and write out if necessary
                    local last_md = read(out_md_name) or \"\"
                    local changed = writeOnChange(woven_md, last_md, out_md_name, depth)
                    local woven_dot = doc:dot() or \"\"
                    local last_dot = read(out_dot_name) or \"\"
                    changed = changed or writeOnChange(woven_dot, last_dot, out_dot_name, depth) 
                    if changed then
                        local woven_svg = dotToSvg(woven_dot, out_dot_name)
                        local last_svg = read(out_svg_name) or \"\"
                        writeOnChange(woven_svg, last_svg, out_svg_name, depth)
                    end
                end
            end
        end
    end

    return true
end

local function weave_all(weaver, pwd)
    for dir in pl_dir.walk(pwd, false, false) do
        if not strHas(\".git\", dir) and isdir(dir) 
            and endsWith(\"orb\", dir) then
            s:chat(a.green(\"Weave: \" .. dir))
            return weave_dir(weaver, dir, 0)
        end
    end

    return false
end

W.weave_all = weave_all"]
codeblock_22 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Weaver, doc)
    local weaver = setmetatable({}, W)


    return weaver
end"]
codeblock_23 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return W"]

}
