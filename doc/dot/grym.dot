digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 123"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-41"]


section_1 -> { header_2 block_3 section_4 section_5}
{rank=same; header_2 block_3 section_4 section_5}

header_2 [label="1 : Grimoire "]

block_3 [label="block 1-41"]

section_4 [label="section: 5-41"]

section_5 [label="section: 42-101"]


block_3 -> { prose_6}
{rank=same; prose_6}

prose_6 [label="prose"]


prose_6 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A metalanguage for magic spells.
"]
section_4 -> { header_8 block_9 block_10}
{rank=same; header_8 block_9 block_10}

header_8 [label="2 : Requires"]

block_9 [label="block 5-8"]

block_10 [label="block 9-41"]


block_9 -> { prose_11}
{rank=same; prose_11}

prose_11 [label="prose"]


prose_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Like any main entry =grym.lua= is mostly imports.
"]
block_10 -> { codeblock_13}
{rank=same; codeblock_13}

codeblock_13 [label="code block 9-40"]


codeblock_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="require \"pl.strict\"

local verbose = false


local pl_file  = require \"pl.file\"
local pl_dir   = require \"pl.dir\"
local pl_path  = require \"pl.path\"
local getfiles = pl_dir.getfiles
local getdirectories = pl_dir.getdirectories
local read = pl_file.read
local write = pl_file.write
local isdir = pl_path.isdir

L = require \"lpeg\"

local ansi = require \"lib/ansi\"
u    = require \"lib/util\"


local ast  = require \"peg/ast\"
local epeg = require \"peg/epeg\"

local P_grym = require \"grym/grymmyr\" 
m = require \"grym/morphemes\"
Doc = require \"grym/doc\"

local invert = require \"invert\"
local knit   = require \"knit\"
local weave  = require \"weave\""]
section_5 -> { header_15 block_16 block_17 block_18 section_19 section_20}
{rank=same; header_15 block_16 block_17 block_18 section_19 section_20}

header_15 [label="2 : Argument parsing"]

block_16 [label="block 42-46"]

block_17 [label="block 47-49"]

block_18 [label="block 50-101"]

section_19 [label="section: 92-101"]

section_20 [label="section: 102-123"]


block_16 -> { prose_21}
{rank=same; prose_21}

prose_21 [label="prose"]


prose_21 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is done crudely, we can use =pl.lapp= in future to parse within
commands to each verb.
"]
block_17 -> { prose_23}
{rank=same; prose_23}

prose_23 [label="prose"]


prose_23 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Note here that we pass in the pwd from a shell script. This may 
change, now that we've added [[sh][../lib/sh.lua]]]]
"]
block_18 -> { codeblock_25}
{rank=same; codeblock_25}

codeblock_25 [label="code block 50-90"]


codeblock_25 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pwd, verb = \"\", \"\"

if (arg) then
    pwd = table.remove(arg, 1)
    verb = table.remove(arg, 1)
    for _, v in ipairs(arg) do
        io.write(ansi.yellow(v)..\"\\n\")
    end
end


local grym = {}

grym.invert = invert
grym.knit   = knit
grym.weave  = weave

samples = getfiles(\"samples\")

local own = require \"grym/own\"

if verb == \"invert\" then
    -- If we allow inversion in its present no-guards state,
    -- we will lose all commentary
    u.freeze(\"no\")
    --invert:invert_all(pwd)
elseif verb == \"knit\" then
    -- knitter goes here
    knit:knit_all(pwd)
elseif verb == \"weave\" then
    -- local weaved = weave:weaveMd(Doc(read(\"../orb/grym/block.gm\")))
    -- io.write(weaved)
    weave:weave_all(pwd)    

elseif not verb then
    -- do the things
    weave:weave_all(pwd)
    knit:knit_all(pwd)
end"]
section_19 -> { header_27 block_28 block_29}
{rank=same; header_27 block_28 block_29}

header_27 [label="4 : Sample Doc for REPLing"]

block_28 [label="block 92-93"]

block_29 [label="block 94-101"]


block_28 -> { prose_30}
{rank=same; prose_30}

prose_30 [label="prose"]


prose_30 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_29 -> { codeblock_32}
{rank=same; codeblock_32}

codeblock_32 [label="code block 94-100"]


codeblock_32 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sample_doc = Doc(read(\"../orb/grym.orb\")) or \"\"

dot_sh = (require \"sh\"):clear_G().command('dot', '-Tsvg')

"]
section_20 -> { header_34 block_35 block_36}
{rank=same; header_34 block_35 block_36}

header_34 [label="3 : Run the samples and make dotfiles"]

block_35 [label="block 102-103"]

block_36 [label="block 104-123"]


block_35 -> { prose_37}
{rank=same; prose_37}

prose_37 [label="prose"]


prose_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_36 -> { codeblock_39}
{rank=same; codeblock_39}

codeblock_39 [label="code block 104-122"]


codeblock_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="---[[
for _,v in ipairs(samples) do
    if v:match(\"~\") == nil then
        if verbose then io.write(v) end
        local sample = read(v)
        --io.write(v..\"\\n\")
        local doc = Doc(sample)
        local doc_dot = doc:dot()
        local old_dot = read(\"../orb/dot/\" .. v .. \".dot\")
        if old_dot and old_dot ~= doc_dot then
            io.write(\"   -- changed dotfile: \" .. v)
            write(\"../orb/dot/\" .. v .. \"-old.dot\", old_dot)
        end
        write(\"../orb/dot/\" .. v .. \".dot\", doc:dot())
    end
end
--]]"]

}
