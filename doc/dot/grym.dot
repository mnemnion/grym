digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 178"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-69"]


section_1 -> { header_2 prose_3 section_4 section_5}
{rank=same; header_2 prose_3 section_4 section_5}

header_2 [label="1 : Grimoire "]

prose_3 [label="prose"]

section_4 [label="section: 5-38"]

section_5 [label="section: 70-156"]


header_2 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Grimoire "]
prose_3 -> { raw_7}
{rank=same; raw_7}

raw_7 [label="raw"]


raw_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A metalanguage for magic spells.
"]
section_4 -> { header_9 prose_10 section_11 section_12}
{rank=same; header_9 prose_10 section_11 section_12}

header_9 [label="2 : Requires"]

prose_10 [label="prose"]

section_11 [label="section: 10-38"]

section_12 [label="section: 39-58"]


header_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Requires"]
prose_10 -> { raw_14 literal_15 raw_16}
{rank=same; raw_14 literal_15 raw_16}

raw_14 [label="raw"]

literal_15 [label="literal"]

raw_16 [label="raw"]


raw_14 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Like any main entry "]
literal_15 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym.lua"]
raw_16 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is mostly imports.

"]
section_11 -> { header_20 prose_21 codeblock_22}
{rank=same; header_20 prose_21 codeblock_22}

header_20 [label="3 : locals"]

prose_21 [label="prose"]

codeblock_22 [label="code block 12-36"]


header_20 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** locals"]
prose_21 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="require \"pl.strict\"

local verbose = false


local pl_file  = require \"pl.file\"
local pl_dir   = require \"pl.dir\"
local pl_path  = require \"pl.path\"
local getfiles = pl_dir.getfiles
local getdirectories = pl_dir.getdirectories
local read = pl_file.read
local write = pl_file.write
local isdir = pl_path.isdir

local ansi = require \"ansi\"

local invert = require \"invert\"
local knit   = require \"knit\"
local weave  = require \"weave\"

local epeg = require \"epeg\"

"]
section_12 -> { header_27 prose_28 prose_29 codeblock_30 section_31}
{rank=same; header_27 prose_28 prose_29 codeblock_30 section_31}

header_27 [label="3 : globals"]

prose_28 [label="prose"]

prose_29 [label="prose"]

codeblock_30 [label="code block 45-56"]

section_31 [label="section: 59-69"]


header_27 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** globals"]
prose_28 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  For interactive and introspective development.
"]
prose_29 -> { raw_35}
{rank=same; raw_35}

raw_35 [label="raw"]


raw_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Can't wait to build a reasonable REPL.
"]
codeblock_30 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="L = require \"lpeg\"
u = require \"util\"
s = require \"status\"
m = require \"grym/morphemes\"
Doc = require \"grym/doc\"

Link = require \"grym/link\"

spec = require \"node/spec\"
Node = require \"node/node\""]
section_31 -> { header_38 prose_39 codeblock_40}
{rank=same; header_38 prose_39 codeblock_40}

header_38 [label="4 : Sample Doc for REPLing"]

prose_39 [label="prose"]

codeblock_40 [label="code block 64-68"]


header_38 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Sample Doc for REPLing"]
prose_39 -> { raw_42 link_43 raw_44}
{rank=same; raw_42 link_43 raw_44}

raw_42 [label="raw"]

link_43 [label="link"]

raw_44 [label="raw"]


raw_42 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  I'm going to add a "]
link_43 -> { anchortext_46 url_47}
{rank=same; anchortext_46 url_47}

anchortext_46 [label="anchortext"]

url_47 [label="url"]


anchortext_46 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="link here"]
url_47 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="http://example.com"]
raw_44 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", to have something
to work with.
"]
codeblock_40 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sample_doc = Doc(read(\"../orb/grym.orb\")) or \"\"

dot_sh = (require \"sh\"):clear_G().command('dot', '-Tsvg')"]
section_5 -> { header_52 prose_53 prose_54 codeblock_55 section_56}
{rank=same; header_52 prose_53 prose_54 codeblock_55 section_56}

header_52 [label="2 : Argument parsing"]

prose_53 [label="prose"]

prose_54 [label="prose"]

codeblock_55 [label="code block 78-154"]

section_56 [label="section: 157-178"]


header_52 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Argument parsing"]
prose_53 -> { raw_58 literal_59 raw_60}
{rank=same; raw_58 literal_59 raw_60}

raw_58 [label="raw"]

literal_59 [label="literal"]

raw_60 [label="raw"]


raw_58 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is done crudely, we can use "]
literal_59 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pl.lapp"]
raw_60 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in future to parse within
commands to each verb.
"]
prose_54 -> { raw_64 link_65 raw_66}
{rank=same; raw_64 link_65 raw_66}

raw_64 [label="raw"]

link_65 [label="link"]

raw_66 [label="raw"]


raw_64 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note here that we pass in the pwd from a shell script. This may 
change, now that we've added "]
link_65 -> { anchortext_68 url_69}
{rank=same; anchortext_68 url_69}

anchortext_68 [label="anchortext"]

url_69 [label="url"]


anchortext_68 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sh"]
url_69 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="../lib/sh.lua"]
raw_66 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="]]
"]
codeblock_55 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pwd, verb = \"\", \"\"

if (arg) then
    pwd = table.remove(arg, 1)
    verb = table.remove(arg, 1)
    for _, v in ipairs(arg) do
        io.write(ansi.yellow(v)..\"\\n\")
    end
end


local grym = {}

grym.invert = invert
grym.knit   = knit
grym.weave  = weave

samples = getfiles(\"samples\")

local own = require \"grym/own\"

if verb == \"invert\" then
    -- If we allow inversion in its present no-guards state,
    -- we will lose all commentary
    u.freeze(\"no\")
    --invert:invert_all(pwd)
elseif verb == \"knit\" then
    -- knitter goes here
    knit:knit_all(pwd)
elseif verb == \"weave\" then
    -- local weaved = weave:weaveMd(Doc(read(\"../orb/grym/block.gm\")))
    -- io.write(weaved)
    weave:weave_all(pwd) 
elseif verb == \"spec\" then
    -- This is just a shim to get us inside whatever
    -- I'm working on
    local abstr = \"((first second) third (fourth fifth 23))\"
    local abNode = spec.clu(abstr)
    assert(abNode.isNode)
    io.write(tostring(abNode))
    io.write(\"nodewalker:\\n\")
    for node in abNode:walkPost() do
        io.write(node.id .. \" -- \")
    end
    io.write(\"\\n\")
    for node in abNode:walk() do
        io.write(node.id .. \" ~~ \")
    end
    io.write(\"\\n\")
    for node in abNode:select(\"atom\") do
        io.write(node.id .. \" %% \")
        if second then 
            io.write(\" found a second \" .. second .. \" \")
        end
    end
    io.write(\"\\n\")
    for tok in abNode:tokens() do
        io.write(tok .. \" || \")
    end
    io.write(\"\\n\\n\"..ansi.cyan(\"DOC SEQUENCE\")..\"\\n\")
    for sec in sample_doc:select(\"section\") do
        io.write(ansi.magenta(\"section\") .. \"\\n\")
        io.write(tostring(sec) .. \"\\n\")
    end
    local sects = sample_doc:gather \"section\"
    for _, sec in ipairs(sects) do
        io.write(ansi.cyan(\"section\") .. \"\\n\")
        io.write(tostring(sec) .. \"\\n\")
    end

elseif not verb then
    -- do the things
    weave:weave_all(pwd)
    knit:knit_all(pwd)
end"]
section_56 -> { header_74 prose_75 codeblock_76}
{rank=same; header_74 prose_75 codeblock_76}

header_74 [label="3 : Run the samples and make dotfiles"]

prose_75 [label="prose"]

codeblock_76 [label="code block 159-177"]


header_74 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Run the samples and make dotfiles"]
prose_75 -> { raw_78}
{rank=same; raw_78}

raw_78 [label="raw"]


raw_78 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_76 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="---[[
for _,v in ipairs(samples) do
    if v:match(\"~\") == nil then
        if verbose then io.write(v) end
        local sample = read(v)
        --io.write(v..\"\\n\")
        local doc = Doc(sample)
        local doc_dot = doc:dot()
        local old_dot = read(\"../orb/dot/\" .. v .. \".dot\")
        if old_dot and old_dot ~= doc_dot then
            io.write(\"   -- changed dotfile: \" .. v)
            write(\"../orb/dot/\" .. v .. \"-old.dot\", old_dot)
        end
        write(\"../orb/dot/\" .. v .. \".dot\", doc:dot())
    end
end
--]]"]

}
