digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 123"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-41"]


section_1 -> { header_2 prose_3 section_4 section_5}
{rank=same; header_2 prose_3 section_4 section_5}

header_2 [label="1 : Grimoire "]

prose_3 [label="prose"]

section_4 [label="section: 5-41"]

section_5 [label="section: 42-101"]


prose_3 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A metalanguage for magic spells.
"]
section_4 -> { header_7 prose_8 codeblock_9}
{rank=same; header_7 prose_8 codeblock_9}

header_7 [label="2 : Requires"]

prose_8 [label="prose"]

codeblock_9 [label="code block 9-40"]


prose_8 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Like any main entry =grym.lua= is mostly imports.
"]
codeblock_9 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="require \"pl.strict\"

local verbose = false


local pl_file  = require \"pl.file\"
local pl_dir   = require \"pl.dir\"
local pl_path  = require \"pl.path\"
local getfiles = pl_dir.getfiles
local getdirectories = pl_dir.getdirectories
local read = pl_file.read
local write = pl_file.write
local isdir = pl_path.isdir

L = require \"lpeg\"

local ansi = require \"lib/ansi\"
u    = require \"lib/util\"


local ast  = require \"peg/ast\"
local epeg = require \"peg/epeg\"

local P_grym = require \"grym/grymmyr\" 
m = require \"grym/morphemes\"
Doc = require \"grym/doc\"

local invert = require \"invert\"
local knit   = require \"knit\"
local weave  = require \"weave\""]
section_5 -> { header_12 prose_13 prose_14 codeblock_15 section_16 section_17}
{rank=same; header_12 prose_13 prose_14 codeblock_15 section_16 section_17}

header_12 [label="2 : Argument parsing"]

prose_13 [label="prose"]

prose_14 [label="prose"]

codeblock_15 [label="code block 50-90"]

section_16 [label="section: 92-101"]

section_17 [label="section: 102-123"]


prose_13 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is done crudely, we can use =pl.lapp= in future to parse within
commands to each verb.
"]
prose_14 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Note here that we pass in the pwd from a shell script. This may 
change, now that we've added [[sh][../lib/sh.lua]]]]
"]
codeblock_15 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pwd, verb = \"\", \"\"

if (arg) then
    pwd = table.remove(arg, 1)
    verb = table.remove(arg, 1)
    for _, v in ipairs(arg) do
        io.write(ansi.yellow(v)..\"\\n\")
    end
end


local grym = {}

grym.invert = invert
grym.knit   = knit
grym.weave  = weave

samples = getfiles(\"samples\")

local own = require \"grym/own\"

if verb == \"invert\" then
    -- If we allow inversion in its present no-guards state,
    -- we will lose all commentary
    u.freeze(\"no\")
    --invert:invert_all(pwd)
elseif verb == \"knit\" then
    -- knitter goes here
    knit:knit_all(pwd)
elseif verb == \"weave\" then
    -- local weaved = weave:weaveMd(Doc(read(\"../orb/grym/block.gm\")))
    -- io.write(weaved)
    weave:weave_all(pwd)    

elseif not verb then
    -- do the things
    weave:weave_all(pwd)
    knit:knit_all(pwd)
end"]
section_16 -> { header_21 prose_22 codeblock_23}
{rank=same; header_21 prose_22 codeblock_23}

header_21 [label="4 : Sample Doc for REPLing"]

prose_22 [label="prose"]

codeblock_23 [label="code block 94-100"]


prose_22 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_23 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sample_doc = Doc(read(\"../orb/grym.orb\")) or \"\"

dot_sh = (require \"sh\"):clear_G().command('dot', '-Tsvg')

"]
section_17 -> { header_26 prose_27 codeblock_28}
{rank=same; header_26 prose_27 codeblock_28}

header_26 [label="3 : Run the samples and make dotfiles"]

prose_27 [label="prose"]

codeblock_28 [label="code block 104-122"]


prose_27 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_28 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="---[[
for _,v in ipairs(samples) do
    if v:match(\"~\") == nil then
        if verbose then io.write(v) end
        local sample = read(v)
        --io.write(v..\"\\n\")
        local doc = Doc(sample)
        local doc_dot = doc:dot()
        local old_dot = read(\"../orb/dot/\" .. v .. \".dot\")
        if old_dot and old_dot ~= doc_dot then
            io.write(\"   -- changed dotfile: \" .. v)
            write(\"../orb/dot/\" .. v .. \"-old.dot\", old_dot)
        end
        write(\"../orb/dot/\" .. v .. \".dot\", doc:dot())
    end
end
--]]"]

}
