digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 167"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-60"]


section_1 -> { header_2 block_3 section_4 section_5}
{rank=same; header_2 block_3 section_4 section_5}

header_2 [label="1 : Grimoire "]

block_3 [label="block 1-60"]

section_4 [label="section: 5-41"]

section_5 [label="section: 61-145"]


header_2 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_3 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
A metalanguage for magic spells.
"]
section_4 -> { header_8 block_9 section_10 section_11}
{rank=same; header_8 block_9 section_10 section_11}

header_8 [label="2 : Requires"]

block_9 [label="block 5-41"]

section_10 [label="section: 10-41"]

section_11 [label="section: 42-60"]


header_8 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Like any main entry =grym.lua= is mostly imports.

"]
section_10 -> { header_14 block_15 codeblock_16}
{rank=same; header_14 block_15 codeblock_16}

header_14 [label="3 : locals"]

block_15 [label="block 10-11"]

codeblock_16 [label="code block 12-39"]


header_14 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_15 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_16 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="require \"pl.strict\"

local verbose = false


local pl_file  = require \"pl.file\"
local pl_dir   = require \"pl.dir\"
local pl_path  = require \"pl.path\"
local getfiles = pl_dir.getfiles
local getdirectories = pl_dir.getdirectories
local read = pl_file.read
local write = pl_file.write
local isdir = pl_path.isdir

local ansi = require \"ansi\"

local P_grym = require \"grym/grymmyr\" 

local invert = require \"invert\"
local knit   = require \"knit\"
local weave  = require \"weave\"

local ast  = require \"peg/ast\"
local epeg = require \"peg/epeg\"

"]
section_11 -> { header_20 block_21 block_22 codeblock_23}
{rank=same; header_20 block_21 block_22 codeblock_23}

header_20 [label="3 : globals"]

block_21 [label="block 42-45"]

block_22 [label="block 46-47"]

codeblock_23 [label="code block 48-59"]


header_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  For interactive and introspective development.
"]
block_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Can't wait to build a reasonable REPL.
"]
codeblock_23 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="L = require \"lpeg\"
u = require \"util\"
s = require \"status\"
m = require \"grym/morphemes\"
Doc = require \"grym/doc\"

Link = require \"grym/link\"

spec = require \"node/spec\"
pnf = require \"node/define\""]
section_5 -> { header_28 block_29 block_30 codeblock_31 section_32 section_33}
{rank=same; header_28 block_29 block_30 codeblock_31 section_32 section_33}

header_28 [label="2 : Argument parsing"]

block_29 [label="block 61-65"]

block_30 [label="block 66-68"]

codeblock_31 [label="code block 69-134"]

section_32 [label="section: 136-145"]

section_33 [label="section: 146-167"]


header_28 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_29 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is done crudely, we can use =pl.lapp= in future to parse within
commands to each verb.
"]
block_30 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Note here that we pass in the pwd from a shell script. This may 
change, now that we've added [[sh][../lib/sh.lua]]]]
"]
codeblock_31 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pwd, verb = \"\", \"\"

if (arg) then
    pwd = table.remove(arg, 1)
    verb = table.remove(arg, 1)
    for _, v in ipairs(arg) do
        io.write(ansi.yellow(v)..\"\\n\")
    end
end


local grym = {}

grym.invert = invert
grym.knit   = knit
grym.weave  = weave

samples = getfiles(\"samples\")

local own = require \"grym/own\"

if verb == \"invert\" then
    -- If we allow inversion in its present no-guards state,
    -- we will lose all commentary
    u.freeze(\"no\")
    --invert:invert_all(pwd)
elseif verb == \"knit\" then
    -- knitter goes here
    knit:knit_all(pwd)
elseif verb == \"weave\" then
    -- local weaved = weave:weaveMd(Doc(read(\"../orb/grym/block.gm\")))
    -- io.write(weaved)
    weave:weave_all(pwd) 
elseif verb == \"spec\" then
    -- This is just a shim to get us inside whatever
    -- I'm working on
    local abstr = \"(form (inner form 23))\"
    local abNode = spec.clu(abstr)
    assert(abNode.isNode)
    io.write(tostring(abNode))
    io.write(tostring(abNode:dot()))
    io.write(\"nodewalker:\\n\")
    for node in abNode:walkDeep() do
        io.write(node.id .. \" -- \")
    end
    io.write(\"\\n\")
    for node in abNode:walk() do
        io.write(node.id .. \" ~~ \")
    end
    io.write(\"\\n\")
    for node in abNode:select(\"bmatch\") do
        io.write(node.id .. \" %% \")
    end
    io.write(\"\\n\")
    for tok in abNode:tokens() do
        io.write(tok .. \" || \")
    end
    io.write(\"\\n\")

elseif not verb then
    -- do the things
    weave:weave_all(pwd)
    knit:knit_all(pwd)
end"]
section_32 -> { header_38 block_39 codeblock_40}
{rank=same; header_38 block_39 codeblock_40}

header_38 [label="4 : Sample Doc for REPLing"]

block_39 [label="block 136-137"]

codeblock_40 [label="code block 138-144"]


header_38 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_39 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_40 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sample_doc = Doc(read(\"../orb/grym.orb\")) or \"\"

dot_sh = (require \"sh\"):clear_G().command('dot', '-Tsvg')

"]
section_33 -> { header_44 block_45 codeblock_46}
{rank=same; header_44 block_45 codeblock_46}

header_44 [label="3 : Run the samples and make dotfiles"]

block_45 [label="block 146-147"]

codeblock_46 [label="code block 148-166"]


header_44 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
block_45 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
codeblock_46 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="---[[
for _,v in ipairs(samples) do
    if v:match(\"~\") == nil then
        if verbose then io.write(v) end
        local sample = read(v)
        --io.write(v..\"\\n\")
        local doc = Doc(sample)
        local doc_dot = doc:dot()
        local old_dot = read(\"../orb/dot/\" .. v .. \".dot\")
        if old_dot and old_dot ~= doc_dot then
            io.write(\"   -- changed dotfile: \" .. v)
            write(\"../orb/dot/\" .. v .. \"-old.dot\", old_dot)
        end
        write(\"../orb/dot/\" .. v .. \".dot\", doc:dot())
    end
end
--]]"]

}
