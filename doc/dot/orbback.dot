digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 102"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-11"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5}
{rank=same; header_2 prose_3 prose_4 section_5}

header_2 [label="1 : Orbback"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 12-102"]


// END RANK section_1

header_2 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Orbback"]
// END RANK header_2

prose_3 -> { raw_7}
{rank=same; raw_7}

raw_7 [label="raw"]


// END RANK prose_3

raw_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  This is a standalone program to restore orb in the event that a knit
results in an unusable orb module.
"]
// END RANK raw_7

prose_4 -> { raw_9 prespace_10 literal_11 raw_12 prespace_13 literal_14 raw_15}
{rank=same; raw_9 prespace_10 literal_11 raw_12 prespace_13 literal_14 raw_15}

raw_9 [label="raw"]

prespace_10 [label="prespace"]

literal_11 [label="literal"]

raw_12 [label="raw"]

prespace_13 [label="prespace"]

literal_14 [label="literal"]

raw_15 [label="raw"]


// END RANK prose_4

raw_9 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The plan: A"]
// END RANK raw_9

prespace_10 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_10

literal_11 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".orb"]
// END RANK literal_11

raw_12 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" file in the root directory will contain any
knit-modified files from the last pass. "]
// END RANK raw_12

prespace_13 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_13

literal_14 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb"]
// END RANK literal_14

raw_15 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" itself will read and write
to the .orb file, maintaining a data structure in the meantime; this will
be in Lua-native table format, at first, eventually Clu(den).
"]
// END RANK raw_15

section_5 -> { header_23 prose_24 codeblock_25 codeblock_26}
{rank=same; header_23 prose_24 codeblock_25 codeblock_26}

header_23 [label="3 : includes"]

prose_24 [label="prose"]

codeblock_25 [label="code block 14-39"]

codeblock_26 [label="code block 42-71"]


// END RANK section_5

header_23 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** includes"]
// END RANK header_23

prose_24 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


// END RANK prose_24

raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_28

codeblock_25 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local s = require \"lib/status\"
local u = require \"lib/util\"
local a = require \"lib/ansi\"
s.chatty = true

local epeg = require \"epeg\"

local pl_file = require \"pl.file\"
local pl_dir = require \"pl.dir\"
local pl_path = require \"pl.path\"
local getfiles = pl_dir.getfiles
local getdirectories = pl_dir.getdirectories
local makepath = pl_dir.makepath
local extension = pl_path.extension
local dirname = pl_path.dirname
local basename = pl_path.basename
local read = pl_file.read
local write = pl_file.write
local delete = pl_file.delete
local isdir = pl_path.isdir

local walk = \"walk\""]
// END RANK codeblock_25

codeblock_26 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local pwd = \"\"

if (arg) then
  pwd = table.remove(arg, 1)
else
  os.exit(\"Must be called with a root codex directory\", 1)
end

io.write(\"pwd: \" .. pwd .. \"\\n\")

local orbback_rc = read(pwd .. \"/.orbback\")
if not orbback_rc then
  s:chat(\"No contents in orbback.  No action taken.\")
  os.exit()
else
  for _,v in ipairs(epeg.split(orbback_rc, \"\\n\")) do
    if v ~= \"\" then
      s:chat(\"Reverting \" .. a.cyan(orbback_rc))
      s:chat(\"Reading \" .. a.green(pwd .. \"/tmp\" .. v))
      local new_tmp = read(pwd .. \"/tmp\" .. v)
      if new_tmp then
        s:chat(\"  - writing\")
        write(v, read(pwd .. \"/tmp\" .. v))
      end
    end
  end
end"]
// END RANK codeblock_26


}
