digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 147"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-133"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 section_5 section_6 section_7 section_8}

header_2 [label="1 : loader"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 10-28"]

section_6 [label="section: 29-75"]

section_7 [label="section: 112-133"]

section_8 [label="section: 134-147"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* loader"]
// END RANK header_2

prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


I'm less than convinced that I've given this the right name.
"]
// END RANK raw_10

prose_4 -> { raw_12 prespace_13 literal_14 raw_15}
{rank=same; raw_12 prespace_13 literal_14 raw_15}

raw_12 [label="raw"]

prespace_13 [label="prespace"]

literal_14 [label="literal"]

raw_15 [label="raw"]


// END RANK prose_4

raw_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Among other things this will have a function for"]
// END RANK raw_12

prespace_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_13

literal_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="package.loaders"]
// END RANK literal_14

raw_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", but this
file will contain everything needed to manipulate modules, including things
needed only by the compiler.
"]
// END RANK raw_15

section_5 -> { header_20 prose_21 codeblock_22 codeblock_23}
{rank=same; header_20 prose_21 codeblock_22 codeblock_23}

header_20 [label="3 : imports"]

prose_21 [label="prose"]

codeblock_22 [label="code block 17-22"]

codeblock_23 [label="code block 24-26"]


// END RANK section_5

header_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** imports"]
// END RANK header_20

prose_21 -> { raw_25 prespace_26 literal_27 raw_28 prespace_29 literal_30 raw_31}
{rank=same; raw_25 prespace_26 literal_27 raw_28 prespace_29 literal_30 raw_31}

raw_25 [label="raw"]

prespace_26 [label="prespace"]

literal_27 [label="literal"]

raw_28 [label="raw"]

prespace_29 [label="prespace"]

literal_30 [label="literal"]

raw_31 [label="raw"]


// END RANK prose_21

raw_25 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

For now, I'm going to use a copy of the sqlite bindings currently living in"]
// END RANK raw_25

prespace_26 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_26

literal_27 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_27

raw_28 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  There's a"]
// END RANK raw_28

prespace_29 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_29

literal_30 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sqlayer"]
// END RANK literal_30

raw_31 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as well but I don't want to copy-paste generated
code if I can avoid it; the whole point of this exercise is to get the
codebase to where I can reuse projects across modules.
"]
// END RANK raw_31

codeblock_22 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sql = require \"sqlite\"
local Dir = require \"walk/directory\"

local status = require \"status\" ()"]
// END RANK codeblock_22

codeblock_23 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Loader = {}"]
// END RANK codeblock_23

section_6 -> { header_41 prose_42 codeblock_43 section_44}
{rank=same; header_41 prose_42 codeblock_43 section_44}

header_41 [label="3 : SQL code"]

prose_42 [label="prose"]

codeblock_43 [label="code block 33-73"]

section_44 [label="section: 76-111"]


// END RANK section_6

header_41 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** SQL code"]
// END RANK header_41

prose_42 -> { raw_46}
{rank=same; raw_46}

raw_46 [label="raw"]


// END RANK prose_42

raw_46 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Everything we need to create and manipulate the database.
"]
// END RANK raw_46

codeblock_43 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local create_project_table = [[
CREATE TABLE IF NOT EXISTS project (
   project_id INTEGER PRIMARY KEY AUTOINCREMENT,
   name STRING UNIQUE NOT NULL,
   repo STRING,
   repo_type STRING DEFAULT 'git',
   repo_alternates STRING,
   home STRING,
   website STRING
);
]]

local create_code_table = [[
CREATE TABLE IF NOT EXISTS code (
   code_id INTEGER PRIMARY KEY AUTOINCREMENT,
   hash TEXT UNIQUE NOT NULL,
   binary BLOB NOT NULL
);
]]

local create_module_table = [[
CREATE TABLE IF NOT EXISTS module (
   module_id INTEGER PRIMARY KEY AUTOINCREMENT,
   time DATETIME DEFAULT CURRENT_TIMESTAMP,
   snapshot INTEGER DEFAULT 1,
   version STRING DEFAULT 'SNAPSHOT',
   name STRING NOT NULL,
   type STRING DEFAULT 'luaJIT-bytecode',
   branch STRING,
   vc_hash STRING,
   project INTEGER NOT NULL,
   code INTEGER,
   FOREIGN KEY (project_id)
      REFERENCES project (project_id)
      ON DELETE RESTRICT
   FOREIGN KEY (code_id)
      REFERENCES code (code_id)
);
]]"]
// END RANK codeblock_43

section_44 -> { header_49 prose_50 codeblock_51}
{rank=same; header_49 prose_50 codeblock_51}

header_49 [label="4 : Environment Variables"]

prose_50 [label="prose"]

codeblock_51 [label="code block 84-109"]


// END RANK section_44

header_49 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Environment Variables"]
// END RANK header_49

prose_50 -> { raw_53 link_54 raw_55 prespace_56 literal_57 raw_58 prespace_59 literal_60 raw_61 prespace_62 literal_63 raw_64}
{rank=same; raw_53 link_54 raw_55 prespace_56 literal_57 raw_58 prespace_59 literal_60 raw_61 prespace_62 literal_63 raw_64}

raw_53 [label="raw"]

link_54 [label="link"]

raw_55 [label="raw"]

prespace_56 [label="prespace"]

literal_57 [label="literal"]

raw_58 [label="raw"]

prespace_59 [label="prespace"]

literal_60 [label="literal"]

raw_61 [label="raw"]

prespace_62 [label="prespace"]

literal_63 [label="literal"]

raw_64 [label="raw"]


// END RANK prose_50

raw_53 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Following the "]
// END RANK raw_53

link_54 -> { anchortext_66 url_67}
{rank=same; anchortext_66 url_67}

anchortext_66 [label="anchortext"]

url_67 [label="url"]


// END RANK link_54

anchortext_66 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="XDG Standard"]
// END RANK anchortext_66

url_67 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html"]
// END RANK url_67

raw_55 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
we place the"]
// END RANK raw_55

prespace_56 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_56

literal_57 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge.modules"]
// END RANK literal_57

raw_58 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" database in a place defined first by a user
environment variable, then by"]
// END RANK raw_58

prespace_59 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_59

literal_60 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="XDG_DATA_HOME"]
// END RANK literal_60

raw_61 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and if neither is defined,
attempt to put it in the default location of"]
// END RANK raw_61

prespace_62 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_62

literal_63 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="XDG_DATA_HOME"]
// END RANK literal_63

raw_64 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", creating it if
necessary.
"]
// END RANK raw_64

codeblock_51 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local home_dir = os.getenv \"HOME\"
local bridge_modules = os.getenv \"BRIDGE_MODULES\"

if not bridge_modules then
   local xdg_data_home = os.getenv \"XDG_DATA_HOME\"
   if xdg_data_home then
      Dir(xdg_data_home .. \"/bridge/\") : mkdir()
      bridge_modules = xdg_data_home .. \"/bridge/bridge.modules\"
   else
      -- build the whole shebang from scratch, just in case
      -- =mkdir= runs =exists= as the first command so this is
      -- sufficiently clear
      Dir(home_dir .. \"/.local\") : mkdir()
      Dir(home_dir .. \"/.local/share\") : mkdir()
      Dir(home_dir .. \"/.local/share/bridge/\") : mkdir()
      bridge_modules = home_dir .. \"/.local/share/bridge/bridge.modules\"
      -- error out if we haven't made the directory
      local bridge_dir = Dir(home_dir .. \"/.local/share/bridge/\")
      if not bridge_dir:exists() then
         error (\"Could not create ~/.local/share/bridge/,\" ..
               \"consider defining $BRIDGE_MODULES\")
      end
   end
end"]
// END RANK codeblock_51

section_7 -> { header_81 prose_82 codeblock_83}
{rank=same; header_81 prose_82 codeblock_83}

header_81 [label="3 : Loader.load()"]

prose_82 [label="prose"]

codeblock_83 [label="code block 116-131"]


// END RANK section_7

header_81 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Loader.load()"]
// END RANK header_81

prose_82 -> { raw_85 prespace_86 literal_87 raw_88}
{rank=same; raw_85 prespace_86 literal_87 raw_88}

raw_85 [label="raw"]

prespace_86 [label="prespace"]

literal_87 [label="literal"]

raw_88 [label="raw"]


// END RANK prose_82

raw_85 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Loads the"]
// END RANK raw_85

prespace_86 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_86

literal_87 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge.modules"]
// END RANK literal_87

raw_88 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" database and returns the SQLite connection.
"]
// END RANK raw_88

codeblock_83 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Loader.load()
   local new = not (File(bridge_modules) : exists())
   if new then
      print \"creating new bridge.modules\"
   end
   local conn = sql.open(bridge_modules)
   -- #todo: turn on foreign_keys pragma when we add sqlayer
   if new then
      conn:exec(create_project_table)
      conn:exec(create_code_table)
      conn:exec(create_module_table)
   end
   return conn
end"]
// END RANK codeblock_83

section_8 -> { header_94 prose_95 codeblock_96 codeblock_97}
{rank=same; header_94 prose_95 codeblock_96 codeblock_97}

header_94 [label="3 : Loader.commitDeck(conn, deck)"]

prose_95 [label="prose"]

codeblock_96 [label="code block 138-142"]

codeblock_97 [label="code block 145-147"]


// END RANK section_8

header_94 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Loader.commitDeck(conn, deck)"]
// END RANK header_94

prose_95 -> { raw_99}
{rank=same; raw_99}

raw_99 [label="raw"]


// END RANK prose_95

raw_99 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This commmits the bytecodes and closes the conn.
"]
// END RANK raw_99

codeblock_96 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Loader.commitDeck(conn, deck)

end"]
// END RANK codeblock_96

codeblock_97 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return Loader"]
// END RANK codeblock_97


}
