digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 341"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-296"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5 section_6 section_7 section_8 section_9 section_10 section_11}
{rank=same; header_2 prose_3 prose_4 section_5 section_6 section_7 section_8 section_9 section_10 section_11}

header_2 [label="1 : loader"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 10-30"]

section_6 [label="section: 31-93"]

section_7 [label="section: 156-175"]

section_8 [label="section: 176-211"]

section_9 [label="section: 228-250"]

section_10 [label="section: 251-282"]

section_11 [label="section: 297-341"]


// END RANK section_1

header_2 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* loader"]
// END RANK header_2

prose_3 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


// END RANK prose_3

raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


I'm less than convinced that I've given this the right name.
"]
// END RANK raw_13

prose_4 -> { raw_15 prespace_16 literal_17 raw_18}
{rank=same; raw_15 prespace_16 literal_17 raw_18}

raw_15 [label="raw"]

prespace_16 [label="prespace"]

literal_17 [label="literal"]

raw_18 [label="raw"]


// END RANK prose_4

raw_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Among other things this will have a function for"]
// END RANK raw_15

prespace_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_16

literal_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="package.loaders"]
// END RANK literal_17

raw_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", but this
file will contain everything needed to manipulate modules, including things
needed only by the compiler.
"]
// END RANK raw_18

section_5 -> { header_23 prose_24 codeblock_25 codeblock_26}
{rank=same; header_23 prose_24 codeblock_25 codeblock_26}

header_23 [label="3 : imports"]

prose_24 [label="prose"]

codeblock_25 [label="code block 17-24"]

codeblock_26 [label="code block 26-28"]


// END RANK section_5

header_23 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** imports"]
// END RANK header_23

prose_24 -> { raw_28 prespace_29 literal_30 raw_31 prespace_32 literal_33 raw_34}
{rank=same; raw_28 prespace_29 literal_30 raw_31 prespace_32 literal_33 raw_34}

raw_28 [label="raw"]

prespace_29 [label="prespace"]

literal_30 [label="literal"]

raw_31 [label="raw"]

prespace_32 [label="prespace"]

literal_33 [label="literal"]

raw_34 [label="raw"]


// END RANK prose_24

raw_28 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

For now, I'm going to use a copy of the sqlite bindings currently living in"]
// END RANK raw_28

prespace_29 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_29

literal_30 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_30

raw_31 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  There's a"]
// END RANK raw_31

prespace_32 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_32

literal_33 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sqlayer"]
// END RANK literal_33

raw_34 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as well but I don't want to copy-paste generated
code if I can avoid it; the whole point of this exercise is to get the
codebase to where I can reuse projects across modules.
"]
// END RANK raw_34

codeblock_25 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local sql = assert(sql, \"must have sql in bridge _G\")
local Dir = require \"walk/directory\"

local sha = require \"sha3\" . sha512

local status = require \"status\" ()"]
// END RANK codeblock_25

codeblock_26 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Loader = {}"]
// END RANK codeblock_26

section_6 -> { header_44 prose_45 section_46 section_47}
{rank=same; header_44 prose_45 section_46 section_47}

header_44 [label="3 : SQL code"]

prose_45 [label="prose"]

section_46 [label="section: 36-93"]

section_47 [label="section: 94-155"]


// END RANK section_6

header_44 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** SQL code"]
// END RANK header_44

prose_45 -> { raw_49}
{rank=same; raw_49}

raw_49 [label="raw"]


// END RANK prose_45

raw_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Everything we need to create and manipulate the database.

"]
// END RANK raw_49

section_46 -> { header_51 prose_52 codeblock_53}
{rank=same; header_51 prose_52 codeblock_53}

header_51 [label="4 : SQL Loader.open()"]

prose_52 [label="prose"]

codeblock_53 [label="code block 38-91"]


// END RANK section_46

header_51 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** SQL Loader.open()"]
// END RANK header_51

prose_52 -> { raw_55}
{rank=same; raw_55}

raw_55 [label="raw"]


// END RANK prose_52

raw_55 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_55

codeblock_53 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local create_project_table = [[
CREATE TABLE IF NOT EXISTS project (
   project_id INTEGER PRIMARY KEY AUTOINCREMENT,
   name STRING UNIQUE NOT NULL ON CONFLICT IGNORE,
   repo STRING,
   repo_type STRING DEFAULT 'git',
   repo_alternates STRING,
   home STRING,
   website STRING
);
]]

local create_version_table = [[
CREATE TABLE IF NOT EXISTS version (
   version_id INTEGER PRIMARY KEY AUTOINCREMENT,
   edition STRING DEFAULT 'SNAPSHOT',
   major INTEGER DEFAULT 0,
   minor INTEGER DEFAULT 0,
   patch STRING DEFAULT '0'
);
]]

local create_code_table = [[
CREATE TABLE IF NOT EXISTS code (
   code_id INTEGER PRIMARY KEY AUTOINCREMENT,
   hash TEXT UNIQUE ON CONFLICT IGNORE NOT NULL,
   binary BLOB NOT NULL
);
]]

local create_module_table = [[
CREATE TABLE IF NOT EXISTS module (
   module_id INTEGER PRIMARY KEY AUTOINCREMENT,
   time DATETIME DEFAULT CURRENT_TIMESTAMP,
   snapshot INTEGER DEFAULT 1,
   name STRING NOT NULL,
   type STRING DEFAULT 'luaJIT-2.1-bytecode',
   branch STRING,
   vc_hash STRING,
   project INTEGER NOT NULL,
   code INTEGER,
   version INTEGER NOT NULL,
   FOREIGN KEY (version)
      REFERENCES version (version_id)
      -- ON DELETE RESTRICT
   FOREIGN KEY (project)
      REFERENCES project (project_id)
      ON DELETE RESTRICT
   FOREIGN KEY (code)
      REFERENCES code (code_id)
);
]]"]
// END RANK codeblock_53

section_47 -> { header_58 prose_59 codeblock_60}
{rank=same; header_58 prose_59 codeblock_60}

header_58 [label="4 : SQL Loader.commitDeck(conn, deck)"]

prose_59 [label="prose"]

codeblock_60 [label="code block 96-153"]


// END RANK section_47

header_58 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** SQL Loader.commitDeck(conn, deck)"]
// END RANK header_58

prose_59 -> { raw_62}
{rank=same; raw_62}

raw_62 [label="raw"]


// END RANK prose_59

raw_62 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_62

codeblock_60 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local new_project = [[
INSERT INTO project (name, repo, home, website)
VALUES (:name, :repo, :home, :website)
]]

local new_code = [[
INSERT INTO code (hash, binary)
VALUES (:hash, :binary);
]]

local new_version_snapshot = [[
INSERT INTO version (edition)
VALUES (:edition);
]]

local add_module = [[
INSERT INTO module (snapshot, version, name,
                    branch, vc_hash, project, code)
VALUES (:snapshot, :version, :name, :branch,
        :vc_hash, :project, :code);
]]

local get_snapshot_version = [[
SELECT CAST (version.version_id AS REAL) FROM version
WHERE version.edition = 'SNAPSHOT';
]]

local get_project_id = [[
SELECT CAST (project.project_id AS REAL) FROM project
WHERE project.name = %s;
]]

local get_code_id_by_hash = [[
SELECT CAST (code.code_id AS REAL) FROM code
WHERE code.hash = %s;
]]

local get_latest_module_code_id = [[
SELECT CAST (module.code AS REAL) FROM module
WHERE module.project = %d
   AND module.name = %s
ORDER BY module.time DESC LIMIT 1;
]]

local get_all_module_ids = [[
SELECT CAST (module.code AS REAL),
       CAST (module.project AS REAL)
FROM module
WHERE module.name = %s
ORDER BY module.time DESC;
]]

local get_latest_module_bytecode = [[
SELECT code.binary FROM code
WHERE code.code_id = %d ;
]]"]
// END RANK codeblock_60

section_7 -> { header_65 prose_66 codeblock_67}
{rank=same; header_65 prose_66 codeblock_67}

header_65 [label="3 : SQL loader.load(conn, mod_name)"]

prose_66 [label="prose"]

codeblock_67 [label="code block 160-173"]


// END RANK section_7

header_65 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** SQL loader.load(conn, mod_name)"]
// END RANK header_65

prose_66 -> { raw_69}
{rank=same; raw_69}

raw_69 [label="raw"]


// END RANK prose_66

raw_69 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This has been moved to the pylon preamble.
"]
// END RANK raw_69

codeblock_67 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local get_code_id_for_module_project = [[
SELECT
   CAST (module.code_id AS REAL) FROM module
WHERE module.project_id = %d
   AND module.name = %s
ORDER BY module.time DESC LIMIT 1;
]]

local get_bytecode = [[
SELECT code.binary FROM code
WHERE code.code_id = %d ;
]]"]
// END RANK codeblock_67

section_8 -> { header_72 prose_73 codeblock_74 section_75}
{rank=same; header_72 prose_73 codeblock_74 section_75}

header_72 [label="3 : Environment Variables"]

prose_73 [label="prose"]

codeblock_74 [label="code block 184-209"]

section_75 [label="section: 212-227"]


// END RANK section_8

header_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Environment Variables"]
// END RANK header_72

prose_73 -> { raw_77 link_78 raw_79 prespace_80 literal_81 raw_82 prespace_83 literal_84 raw_85 prespace_86 literal_87 raw_88}
{rank=same; raw_77 link_78 raw_79 prespace_80 literal_81 raw_82 prespace_83 literal_84 raw_85 prespace_86 literal_87 raw_88}

raw_77 [label="raw"]

link_78 [label="link"]

raw_79 [label="raw"]

prespace_80 [label="prespace"]

literal_81 [label="literal"]

raw_82 [label="raw"]

prespace_83 [label="prespace"]

literal_84 [label="literal"]

raw_85 [label="raw"]

prespace_86 [label="prespace"]

literal_87 [label="literal"]

raw_88 [label="raw"]


// END RANK prose_73

raw_77 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Following the "]
// END RANK raw_77

link_78 -> { anchortext_90 url_91}
{rank=same; anchortext_90 url_91}

anchortext_90 [label="anchortext"]

url_91 [label="url"]


// END RANK link_78

anchortext_90 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="XDG Standard"]
// END RANK anchortext_90

url_91 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html"]
// END RANK url_91

raw_79 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
we place the"]
// END RANK raw_79

prespace_80 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_80

literal_81 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge.modules"]
// END RANK literal_81

raw_82 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" database in a place defined first by a user
environment variable, then by"]
// END RANK raw_82

prespace_83 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_83

literal_84 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="XDG_DATA_HOME"]
// END RANK literal_84

raw_85 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and if neither is defined,
attempt to put it in the default location of"]
// END RANK raw_85

prespace_86 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_86

literal_87 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="XDG_DATA_HOME"]
// END RANK literal_87

raw_88 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", creating it if
necessary.
"]
// END RANK raw_88

codeblock_74 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local home_dir = os.getenv \"HOME\"
local bridge_modules = os.getenv \"BRIDGE_MODULES\"

if not bridge_modules then
   local xdg_data_home = os.getenv \"XDG_DATA_HOME\"
   if xdg_data_home then
      Dir(xdg_data_home .. \"/bridge/\") : mkdir()
      bridge_modules = xdg_data_home .. \"/bridge/bridge.modules\"
   else
      -- build the whole shebang from scratch, just in case
      -- =mkdir= runs =exists= as the first command so this is
      -- sufficiently clear
      Dir(home_dir .. \"/.local\") : mkdir()
      Dir(home_dir .. \"/.local/share\") : mkdir()
      Dir(home_dir .. \"/.local/share/bridge/\") : mkdir()
      bridge_modules = home_dir .. \"/.local/share/bridge/bridge.modules\"
      -- error out if we haven't made the directory
      local bridge_dir = Dir(home_dir .. \"/.local/share/bridge/\")
      if not bridge_dir:exists() then
         error (\"Could not create ~/.local/share/bridge/,\" ..
               \"consider defining $BRIDGE_MODULES\")
      end
   end
end"]
// END RANK codeblock_74

section_75 -> { header_105 prose_106 codeblock_107}
{rank=same; header_105 prose_106 codeblock_107}

header_105 [label="4 : _unwrapForeignKey(result)"]

prose_106 [label="prose"]

codeblock_107 [label="code block 217-225"]


// END RANK section_75

header_105 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** _unwrapForeignKey(result)"]
// END RANK header_105

prose_106 -> { raw_109}
{rank=same; raw_109}

raw_109 [label="raw"]


// END RANK prose_106

raw_109 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Just peeling off layers here.  I realize there are more sophisticated ways to
do almost everything but for now this will get us where we're going.
"]
// END RANK raw_109

codeblock_107 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _unwrapForeignKey(result)
   if result and result[1] and result[1][1] then
      return result[1][1]
   else
      return nil
   end
end"]
// END RANK codeblock_107

section_9 -> { header_112 prose_113 codeblock_114}
{rank=same; header_112 prose_113 codeblock_114}

header_112 [label="3 : Loader.open()"]

prose_113 [label="prose"]

codeblock_114 [label="code block 232-248"]


// END RANK section_9

header_112 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Loader.open()"]
// END RANK header_112

prose_113 -> { raw_116 prespace_117 literal_118 raw_119}
{rank=same; raw_116 prespace_117 literal_118 raw_119}

raw_116 [label="raw"]

prespace_117 [label="prespace"]

literal_118 [label="literal"]

raw_119 [label="raw"]


// END RANK prose_113

raw_116 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Loads the"]
// END RANK raw_116

prespace_117 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_117

literal_118 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge.modules"]
// END RANK literal_118

raw_119 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" database and returns the SQLite connection.
"]
// END RANK raw_119

codeblock_114 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Loader.open()
   local new = not (File(bridge_modules) : exists())
   if new then
      print \"creating new bridge.modules\"
   end
   local conn = sql.open(bridge_modules)
   -- #todo: turn on foreign_keys pragma when we add sqlayer
   if new then
      conn:exec(create_version_table)
      conn:exec(create_project_table)
      conn:exec(create_code_table)
      conn:exec(create_module_table)
   end
   return conn
end"]
// END RANK codeblock_114

section_10 -> { header_125 prose_126 prose_127 codeblock_128 section_129}
{rank=same; header_125 prose_126 prose_127 codeblock_128 section_129}

header_125 [label="3 : Loader.commitModule(conn, bytecode, deck)"]

prose_126 [label="prose"]

prose_127 [label="prose"]

codeblock_128 [label="code block 259-280"]

section_129 [label="section: 283-296"]


// END RANK section_10

header_125 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Loader.commitModule(conn, bytecode, deck)"]
// END RANK header_125

prose_126 -> { raw_131}
{rank=same; raw_131}

raw_131 [label="raw"]


// END RANK prose_126

raw_131 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Commits a single module and associated bytecode.
"]
// END RANK raw_131

prose_127 -> { raw_133 prespace_134 literal_135 raw_136}
{rank=same; raw_133 prespace_134 literal_135 raw_136}

raw_133 [label="raw"]

prespace_134 [label="prespace"]

literal_135 [label="literal"]

raw_136 [label="raw"]


// END RANK prose_127

raw_133 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It might be smarter to fetch all hashes associated with the project first, and
only commit ones which aren't on the list, but it's definitely easier to just
commit everything and let the"]
// END RANK raw_133

prespace_134 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_134

literal_135 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ON CONFLICT IGNORE"]
// END RANK literal_135

raw_136 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" prevent duplication.
"]
// END RANK raw_136

codeblock_128 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function commitModule(conn, bytecode, project_id, version_id)
   -- upsert code.binary and code.hash
   conn:prepare(new_code):bindkv(bytecode):step()
   -- select code_id
   local code_id = _unwrapForeignKey(conn:exec(
                                        sql.format(get_code_id_by_hash,
                                                   bytecode.hash)))
   if not code_id then
      error(\"code_id not found for \" .. bytecode.name)
   end
   local mod = { name = bytecode.name,
                    project = project_id,
                    code_id = code_id,
                    snapshot = 1,
                    vc_hash = \"\",
                    version = version_id }
   conn:prepare(add_module):bindkv(mod):step()
end

Loader.commitModule = commitModule"]
// END RANK codeblock_128

section_129 -> { header_142 prose_143 codeblock_144}
{rank=same; header_142 prose_143 codeblock_144}

header_142 [label="4 : _newProject(conn, project)"]

prose_143 [label="prose"]

codeblock_144 [label="code block 285-294"]


// END RANK section_129

header_142 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** _newProject(conn, project)"]
// END RANK header_142

prose_143 -> { raw_146}
{rank=same; raw_146}

raw_146 [label="raw"]


// END RANK prose_143

raw_146 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_146

codeblock_144 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _newProject(conn, project)
   assert(project.name, \"project must have a name\")
   project.repo = project.repo or \"\"
   project.home = project.home or \"\"
   project.website = project.website or \"\"
   conn:prepare(new_project):bindkv(project):step()
   return true
end"]
// END RANK codeblock_144

section_11 -> { header_149 prose_150 codeblock_151 codeblock_152}
{rank=same; header_149 prose_150 codeblock_151 codeblock_152}

header_149 [label="3 : Loader.commitCodex(conn, codex)"]

prose_150 [label="prose"]

codeblock_151 [label="code block 299-336"]

codeblock_152 [label="code block 339-341"]


// END RANK section_11

header_149 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Loader.commitCodex(conn, codex)"]
// END RANK header_149

prose_150 -> { raw_154}
{rank=same; raw_154}

raw_154 [label="raw"]


// END RANK prose_150

raw_154 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_154

codeblock_151 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Loader.commitCodex(conn, codex)
   -- begin transaction
   conn:exec \"BEGIN TRANSACTION;\"
   -- currently we're only making snapshots, so let's create the
   -- snapshot version if we don't have it.
   local version_id = _unwrapForeignKey(conn:exec(get_snapshot_version))
   if not version_id then
      conn : prepare(new_version_snapshot) : bindkv {edition = \"SNAPSHOT\"}
           : step()
      version_id = _unwrapForeignKey(conn:exec(get_snapshot_version))
      if not version_id then
         error \"didn't make a SNAPSHOT\"
      end
   end
   -- upsert project
   -- select project_id
   local get_proj = sql.format(get_project_id, codex.project)
   local project_id = _unwrapForeignKey(conn:exec(get_proj))
   if project_id then
      print (\"project_id is \" .. project_id)
   else
      _newProject(conn, {name = codex.project})
      project_id = _unwrapForeignKey(conn:exec(get_proj))
      if not project_id then
         error (\"failed to create project \" .. codex.project)
      end
   end
   -- This for now will just
   print (\"version_id is \" .. version_id)
   for _, bytecode in pairs(codex.bytecodes) do
      commitModule(conn, bytecode, project_id, version_id)
   end
   -- commit transaction
   conn:exec \"COMMIT;\"
   return conn
end"]
// END RANK codeblock_151

codeblock_152 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return Loader"]
// END RANK codeblock_152


}
