digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 207"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-79"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 codeblock_6 codeblock_7 section_8 section_9 section_10 section_11}
{rank=same; header_2 prose_3 prose_4 codeblock_5 codeblock_6 codeblock_7 section_8 section_9 section_10 section_11}

header_2 [label="1 : Directory"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 9-25"]

codeblock_6 [label="code block 27-29"]

codeblock_7 [label="code block 31-37"]

section_8 [label="section: 39-63"]

section_9 [label="section: 64-71"]

section_10 [label="section: 72-79"]

section_11 [label="section: 80-137"]


// END RANK section_1

header_2 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Directory"]
// END RANK header_2

prose_3 -> { raw_13 prespace_14 literal_15 raw_16}
{rank=same; raw_13 prespace_14 literal_15 raw_16}

raw_13 [label="raw"]

prespace_14 [label="prespace"]

literal_15 [label="literal"]

raw_16 [label="raw"]


// END RANK prose_3

raw_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_13

prespace_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_14

literal_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_15

raw_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is going to have a certain attitude toward directories.
"]
// END RANK raw_16

prose_4 -> { raw_21 prespace_22 literal_23 raw_24}
{rank=same; raw_21 prespace_22 literal_23 raw_24}

raw_21 [label="raw"]

prespace_22 [label="prespace"]

literal_23 [label="literal"]

raw_24 [label="raw"]


// END RANK prose_4

raw_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The"]
// END RANK raw_21

prespace_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_22

literal_23 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb"]
// END RANK literal_23

raw_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" directory module will emulate and prototype that attitude.

"]
// END RANK raw_24

codeblock_5 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local s = require \"status\" ()
s.chatty = true
s.verbose = false

local pl_path = require \"pl.path\"
local pl_dir  = require \"pl.dir\"
local pl_file = require \"pl.file\"
local lfs = require \"lfs\"
local attributes = lfs.attributes
local isdir, basename  = pl_path.isdir, pl_path.basename
local getfiles, getdirectories = pl_dir.getfiles, pl_dir.getdirectories
local mkdir = lfs.mkdir

local Path = require \"walk/path\"
local File = require \"walk/file\""]
// END RANK codeblock_5

codeblock_6 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local new"]
// END RANK codeblock_6

codeblock_7 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Dir = {}
Dir.isDir = Dir
Dir.it = require \"core/check\"

local __Dirs = {} -- Cache to keep each Dir unique by Path"]
// END RANK codeblock_7

section_8 -> { header_32 prose_33 codeblock_34 codeblock_35}
{rank=same; header_32 prose_33 codeblock_34 codeblock_35}

header_32 [label="3 : Dir:exists()"]

prose_33 [label="prose"]

codeblock_34 [label="code block 41-45"]

codeblock_35 [label="code block 47-62"]


// END RANK section_8

header_32 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Dir:exists()"]
// END RANK header_32

prose_33 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


// END RANK prose_33

raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_37

codeblock_34 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.exists(dir)
  return isdir(dir.path.str)
end"]
// END RANK codeblock_34

codeblock_35 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.mkdir(dir)
  if dir:exists() then
    return false, \"directory already exists\"
  else
    local success, msg, code = mkdir(dir.path.str)
    if success then
      return success
    else
      code = tostring(code)
      s:complain(\"mkdir failure # \" .. code, msg, dir)
      return false, msg
    end
  end
end"]
// END RANK codeblock_35

section_9 -> { header_41 prose_42 codeblock_43}
{rank=same; header_41 prose_42 codeblock_43}

header_41 [label="2 : Dir.parentDir(dir)"]

prose_42 [label="prose"]

codeblock_43 [label="code block 66-70"]


// END RANK section_9

header_41 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ua
function Dir.parent"]
// END RANK header_41

prose_42 -> { raw_45}
{rank=same; raw_45}

raw_45 [label="raw"]


// END RANK prose_42

raw_45 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_45

codeblock_43 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.parentDir(dir)
  return new(dir.path:parentDir())
end"]
// END RANK codeblock_43

section_10 -> { header_48 prose_49 codeblock_50}
{rank=same; header_48 prose_49 codeblock_50}

header_48 [label="2 : Dir.basename(dir)"]

prose_49 [label="prose"]

codeblock_50 [label="code block 74-78"]


// END RANK section_10

header_48 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
function Dir.basenam"]
// END RANK header_48

prose_49 -> { raw_52}
{rank=same; raw_52}

raw_52 [label="raw"]


// END RANK prose_49

raw_52 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_52

codeblock_50 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.basename(dir)
  return basename(dir.path.str)
end"]
// END RANK codeblock_50

section_11 -> { header_55 prose_56 codeblock_57 section_58 section_59}
{rank=same; header_55 prose_56 codeblock_57 section_58 section_59}

header_55 [label="2 : Dir.subdirectories(dir)"]

prose_56 [label="prose"]

codeblock_57 [label="code block 82-92"]

section_58 [label="section: 97-137"]

section_59 [label="section: 138-207"]


// END RANK section_11

header_55 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!lua
function Dir.getsubdi"]
// END RANK header_55

prose_56 -> { raw_61}
{rank=same; raw_61}

raw_61 [label="raw"]


// END RANK prose_56

raw_61 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_61

codeblock_57 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.getsubdirs(dir)
  local subdir_strs = getdirectories(dir.path.str)
  dir.subdirs = {}
  for i,sub in ipairs(subdir_strs) do
    s:verb(sub)
    dir.subdirs[i] = new(sub)
  end
  return dir.subdirs
end"]
// END RANK codeblock_57

section_58 -> { header_64 prose_65 prose_66 codeblock_67 prose_68 codeblock_69 codeblock_70}
{rank=same; header_64 prose_65 prose_66 codeblock_67 prose_68 codeblock_69 codeblock_70}

header_64 [label="3 : Dir.swapDirFor(dir, nestDir, newNest)"]

prose_65 [label="prose"]

prose_66 [label="prose"]

codeblock_67 [label="code block 104-109"]

prose_68 [label="prose"]

codeblock_69 [label="code block 116-127"]

codeblock_70 [label="code block 130-135"]


// END RANK section_58

header_64 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="est)

The nomenclature isn't great here, w"]
// END RANK header_64

prose_65 -> { raw_72}
{rank=same; raw_72}

raw_72 [label="raw"]


// END RANK prose_65

raw_72 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The nomenclature isn't great here, which is my ignorance of
directory handling showing. But let's get through it.
"]
// END RANK raw_72

prose_66 -> { raw_74}
{rank=same; raw_74}

raw_74 [label="raw"]


// END RANK prose_66

raw_74 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's easiest to illustrate:
"]
// END RANK raw_74

codeblock_67 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a = Dir \"/usr/local/bin/\"
b = a:swapDirFor(\"/usr/\", \"/tmp\")
tostring(b)
-- \"/tmp/local/bin/\""]
// END RANK codeblock_67

prose_68 -> { raw_77}
{rank=same; raw_77}

raw_77 [label="raw"]


// END RANK prose_68

raw_77 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It has to be a proper absolute path, which is currently enforced everywhere
a Path is used and will be until I start to add link resolution, since it's
the correct way to treat paths to things that happen to exist.  This is my
need at the moment.
"]
// END RANK raw_77

codeblock_69 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.swapDirFor(dir, nestDir, newNest)
  local dir_str, nest_str = tostring(dir), tostring(nestDir)
  local first, last = string.find(dir_str, nest_str)
  if first == 1 then
    -- swap out
    return new(Path(tostring(newNest) .. string.sub(dir_str, last + 1)))
  else
    return nil, nest_str.. \" not found in \" .. dir_str
  end
end"]
// END RANK codeblock_69

codeblock_70 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.attributes(dir)
  dir.attr = attributes(dir.path.str)
  return dir.attr
end"]
// END RANK codeblock_70

section_59 -> { header_81 prose_82 codeblock_83 codeblock_84 codeblock_85 codeblock_86 codeblock_87}
{rank=same; header_81 prose_82 codeblock_83 codeblock_84 codeblock_85 codeblock_86 codeblock_87}

header_81 [label="3 : Dir.getfiles(dir)"]

prose_82 [label="prose"]

codeblock_83 [label="code block 144-160"]

codeblock_84 [label="code block 163-167"]

codeblock_85 [label="code block 169-176"]

codeblock_86 [label="code block 179-200"]

codeblock_87 [label="code block 202-205"]


// END RANK section_59

header_81 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="les alphabetically.  W"]
// END RANK header_81

prose_82 -> { raw_89 prespace_90 literal_91 raw_92}
{rank=same; raw_89 prespace_90 literal_91 raw_92}

raw_89 [label="raw"]

prespace_90 [label="prespace"]

literal_91 [label="literal"]

raw_92 [label="raw"]


// END RANK prose_82

raw_89 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Our"]
// END RANK raw_89

prespace_90 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_90

literal_91 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getfiles"]
// END RANK literal_91

raw_92 -> leaf_96
leaf_96  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" sorts the files alphabetically.  When I want a directory
full of files, it's either for comparison or iteration over, in either
case a defined order is helpful.
"]
// END RANK raw_92

codeblock_83 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.getfiles(dir)
  local file_strs = getfiles(dir.path.str)
  s:verb(\"got files from \" .. dir.path.str)
  s:verb(\"# files: \" .. #file_strs)
  table.sort(file_strs)
  s:verb(\"after sort: \" .. #file_strs)
  local files = {}
  for i, file in ipairs(file_strs) do
    s:verb(\"file: \" .. file)
    files[i] = File(file)
  end
  dir.files = files
  s:verb(\"# of files: \" .. #dir.files)
  return files
end"]
// END RANK codeblock_83

codeblock_84 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __tostring(dir)
  return dir.path.str
end"]
// END RANK codeblock_84

codeblock_85 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __concat(dir, path)
    if type(dir) == \"string\" then
        return new(dir .. path)
    end
    return new(dir.path.str .. tostring(path))
end"]
// END RANK codeblock_85

codeblock_86 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function new(path)
  if __Dirs[tostring(path)] then
    return __Dirs[tostring(path)]
  end
  local dir = setmetatable({}, {__index = Dir,
                               __tostring = __tostring,
                               __concat   = __concat})
  if type(path) == \"string\" then
    local new_path = Path(path)
    dir.path = new_path
  elseif path.idEst == Path then
    dir.path = path
  else
    assert(false, \"bad path constructor provided\")
  end

  __Dirs[tostring(path)] = dir

  return dir
end"]
// END RANK codeblock_86

codeblock_87 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Dir.idEst = new
return new"]
// END RANK codeblock_87


}
