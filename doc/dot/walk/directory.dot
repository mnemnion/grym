digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 192"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-78"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 codeblock_6 codeblock_7 section_8 section_9 section_10 section_11}
{rank=same; header_2 prose_3 prose_4 codeblock_5 codeblock_6 codeblock_7 section_8 section_9 section_10 section_11}

header_2 [label="1 : Directory"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 9-24"]

codeblock_6 [label="code block 26-28"]

codeblock_7 [label="code block 30-36"]

section_8 [label="section: 38-62"]

section_9 [label="section: 63-70"]

section_10 [label="section: 71-78"]

section_11 [label="section: 79-95"]


// END RANK section_1

header_2 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Directory"]
// END RANK header_2

prose_3 -> { raw_13 prespace_14 literal_15 raw_16}
{rank=same; raw_13 prespace_14 literal_15 raw_16}

raw_13 [label="raw"]

prespace_14 [label="prespace"]

literal_15 [label="literal"]

raw_16 [label="raw"]


// END RANK prose_3

raw_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_13

prespace_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_14

literal_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_15

raw_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is going to have a certain attitude toward directories.
"]
// END RANK raw_16

prose_4 -> { raw_21 prespace_22 literal_23 raw_24}
{rank=same; raw_21 prespace_22 literal_23 raw_24}

raw_21 [label="raw"]

prespace_22 [label="prespace"]

literal_23 [label="literal"]

raw_24 [label="raw"]


// END RANK prose_4

raw_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The"]
// END RANK raw_21

prespace_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_22

literal_23 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb"]
// END RANK literal_23

raw_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" directory module will emulate and prototype that attitude.

"]
// END RANK raw_24

codeblock_5 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local s = require \"status\" ()
s.chatty = true

local pl_path = require \"pl.path\"
local pl_dir  = require \"pl.dir\"
local pl_file = require \"pl.file\"
local lfs = require \"lfs\"
local attributes = lfs.attributes
local isdir, basename  = pl_path.isdir, pl_path.basename
local getfiles, getdirectories = pl_dir.getfiles, pl_dir.getdirectories
local mkdir = lfs.mkdir

local Path = require \"walk/path\"
local File = require \"walk/file\""]
// END RANK codeblock_5

codeblock_6 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local new"]
// END RANK codeblock_6

codeblock_7 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Dir = {}
Dir.isDir = Dir
Dir.it = require \"core/check\"

local __Dirs = {} -- Cache to keep each Dir unique by Path"]
// END RANK codeblock_7

section_8 -> { header_32 prose_33 codeblock_34 codeblock_35}
{rank=same; header_32 prose_33 codeblock_34 codeblock_35}

header_32 [label="3 : Dir:exists()"]

prose_33 [label="prose"]

codeblock_34 [label="code block 40-44"]

codeblock_35 [label="code block 46-61"]


// END RANK section_8

header_32 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Dir:exists()"]
// END RANK header_32

prose_33 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


// END RANK prose_33

raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_37

codeblock_34 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.exists(dir)
  return isdir(dir.path.str)
end"]
// END RANK codeblock_34

codeblock_35 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.mkdir(dir)
  if dir:exists() then
    return false, \"directory already exists\"
  else
    local success, msg, code = mkdir(dir.path.str)
    if success then
      return success
    else
      code = tostring(code)
      s:complain(\"mkdir failure # \" .. code, msg, dir)
      return false, msg
    end
  end
end"]
// END RANK codeblock_35

section_9 -> { header_41 prose_42 codeblock_43}
{rank=same; header_41 prose_42 codeblock_43}

header_41 [label="2 : Dir.parentDir(dir)"]

prose_42 [label="prose"]

codeblock_43 [label="code block 65-69"]


// END RANK section_9

header_41 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ua
function Dir.parent"]
// END RANK header_41

prose_42 -> { raw_45}
{rank=same; raw_45}

raw_45 [label="raw"]


// END RANK prose_42

raw_45 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_45

codeblock_43 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.parentDir(dir)
  return new(dir.path:parentDir())
end"]
// END RANK codeblock_43

section_10 -> { header_48 prose_49 codeblock_50}
{rank=same; header_48 prose_49 codeblock_50}

header_48 [label="2 : Dir.basename(dir)"]

prose_49 [label="prose"]

codeblock_50 [label="code block 73-77"]


// END RANK section_10

header_48 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
function Dir.basenam"]
// END RANK header_48

prose_49 -> { raw_52}
{rank=same; raw_52}

raw_52 [label="raw"]


// END RANK prose_49

raw_52 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_52

codeblock_50 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.basename(dir)
  return basename(dir.path.str)
end"]
// END RANK codeblock_50

section_11 -> { header_55 prose_56 codeblock_57 section_58}
{rank=same; header_55 prose_56 codeblock_57 section_58}

header_55 [label="2 : Dir.subdirectories(dir)"]

prose_56 [label="prose"]

codeblock_57 [label="code block 81-91"]

section_58 [label="section: 96-192"]


// END RANK section_11

header_55 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!lua
function Dir.getsubdi"]
// END RANK header_55

prose_56 -> { raw_60}
{rank=same; raw_60}

raw_60 [label="raw"]


// END RANK prose_56

raw_60 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_60

codeblock_57 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.getsubdirs(dir)
  local subdir_strs = getdirectories(dir.path.str)
  dir.subdirs = {}
  for i,sub in ipairs(subdir_strs) do
    s:verb(sub)
    dir.subdirs[i] = new(sub)
  end
  return dir.subdirs
end"]
// END RANK codeblock_57

section_58 -> { header_63 prose_64 prose_65 codeblock_66 prose_67 codeblock_68 codeblock_69 codeblock_70 codeblock_71 codeblock_72 codeblock_73 codeblock_74}
{rank=same; header_63 prose_64 prose_65 codeblock_66 prose_67 codeblock_68 codeblock_69 codeblock_70 codeblock_71 codeblock_72 codeblock_73 codeblock_74}

header_63 [label="3 : Dir.swapDirFor(dir, nestDir, newNest)"]

prose_64 [label="prose"]

prose_65 [label="prose"]

codeblock_66 [label="code block 103-108"]

prose_67 [label="prose"]

codeblock_68 [label="code block 115-126"]

codeblock_69 [label="code block 129-133"]

codeblock_70 [label="code block 135-145"]

codeblock_71 [label="code block 148-152"]

codeblock_72 [label="code block 154-161"]

codeblock_73 [label="code block 164-185"]

codeblock_74 [label="code block 187-190"]


// END RANK section_58

header_63 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="est)

The nomenclature isn't great here, w"]
// END RANK header_63

prose_64 -> { raw_76}
{rank=same; raw_76}

raw_76 [label="raw"]


// END RANK prose_64

raw_76 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The nomenclature isn't great here, which is my ignorance of
directory handling showing. But let's get through it.
"]
// END RANK raw_76

prose_65 -> { raw_78}
{rank=same; raw_78}

raw_78 [label="raw"]


// END RANK prose_65

raw_78 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's easiest to illustrate:
"]
// END RANK raw_78

codeblock_66 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a = Dir \"/usr/local/bin/\"
b = a:swapDirFor(\"/usr/\", \"/tmp\")
tostring(b)
-- \"/tmp/local/bin/\""]
// END RANK codeblock_66

prose_67 -> { raw_81}
{rank=same; raw_81}

raw_81 [label="raw"]


// END RANK prose_67

raw_81 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It has to be a proper absolute path, which is currently enforced everywhere
a Path is used and will be until I start to add link resolution, since it's
the correct way to treat paths to things that happen to exist.  This is my
need at the moment.
"]
// END RANK raw_81

codeblock_68 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.swapDirFor(dir, nestDir, newNest)
  local dir_str, nest_str = tostring(dir), tostring(nestDir)
  local first, last = string.find(dir_str, nest_str)
  if first == 1 then
    -- swap out
    return new(Path(tostring(newNest) .. string.sub(dir_str, last + 1)))
  else
    return nil, nest_str.. \" not found in \" .. dir_str
  end
end"]
// END RANK codeblock_68

codeblock_69 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.attributes(dir)
  return attributes(dir.path.str)
end"]
// END RANK codeblock_69

codeblock_70 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.getfiles(dir)
  local files = getfiles(dir.path.str)
  table.sort(files)
  for i, f in ipairs(files) do
    files[i] = File(f)
  end

  return files
end"]
// END RANK codeblock_70

codeblock_71 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __tostring(dir)
  return dir.path.str
end"]
// END RANK codeblock_71

codeblock_72 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __concat(dir, path)
    if type(dir) == \"string\" then
        return new(dir .. path)
    end
    return new(dir.path.str .. tostring(path))
end"]
// END RANK codeblock_72

codeblock_73 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function new(path)
  if __Dirs[tostring(path)] then
    return __Dirs[tostring(path)]
  end
  local dir = setmetatable({}, {__index = Dir,
                               __tostring = __tostring,
                               __concat   = __concat})
  if type(path) == \"string\" then
    local new_path = Path(path)
    dir.path = new_path
  elseif path.idEst == Path then
    dir.path = path
  else
    assert(false, \"bad path constructor provided\")
  end

  __Dirs[tostring(path)] = dir

  return dir
end"]
// END RANK codeblock_73

codeblock_74 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Dir.idEst = new
return new"]
// END RANK codeblock_74


}
