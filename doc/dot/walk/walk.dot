digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 69"]

doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-69"]

section_1 -> { header_2 block_3 block_4 block_5 block_6 block_7 block_8 block_9}
{rank=same; header_2 block_3 block_4 block_5 block_6 block_7 block_8 block_9}

header_2 [label="Walk module"]
block_3 [label="block 1-5"]
block_4 [label="block 6-30"]
block_5 [label="block 31-34"]
block_6 [label="block 35-46"]
block_7 [label="block 47-49"]
block_8 [label="block 50-66"]
block_9 [label="block 67-nil"]


block_3 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  Contains common functions for recursively executing over some part of
a codex.  

"]block_4 -> { codeblock_11}
{rank=same; codeblock_11}

codeblock_11 [label="code block 6-29"]


codeblock_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local s = require \"lib/status\"
local u = require \"lib/util\"
local a = require \"lib/ansi\"
s.chatty = true

local pl_file = require \"pl.file\"
local pl_dir = require \"pl.dir\"
local pl_path = require \"pl.path\"
local getfiles = pl_dir.getfiles
local getdirectories = pl_dir.getdirectories
local makepath = pl_dir.makepath
local extension = pl_path.extension
local dirname = pl_path.dirname
local basename = pl_path.basename
local read = pl_file.read
local write = pl_file.write
local delete = pl_file.delete
local isdir = pl_path.isdir

local epeg = require \"peg/epeg\"
"]
block_4 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]block_5 -> { codeblock_14}
{rank=same; codeblock_14}

codeblock_14 [label="code block 31-33"]


codeblock_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local W = {}
"]
block_5 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]block_6 -> { codeblock_17}
{rank=same; codeblock_17}

codeblock_17 [label="code block 35-44"]


codeblock_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function W.strHas(substr, str)
    return L.match(epeg.anyP(substr), str)
end

function W.endsWith(substr, str)
    return L.match(L.P(string.reverse(substr)),
        string.reverse(str))
end
"]
block_6 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
block_7 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Finds the last match for a literal substring and replaces it
with =swap=, returning the new string.

"]block_8 -> { codeblock_21}
{rank=same; codeblock_21}

codeblock_21 [label="code block 50-63"]


codeblock_21 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function W.subLastFor(match, swap, str)
    local trs, hctam = string.reverse(str), string.reverse(match)
    local first, last = W.strHas(hctam, trs)
    if last then
        -- There is some way to do this without reversing the string twice,
        -- but I can't be arsed to find it. ONE BASED INDEXES ARE A MISTAKE
        return string.reverse(trs:sub(1, first - 1) 
            .. string.reverse(swap) .. trs:sub(last, -1))
    else
        s:halt(\"didn't find an instance of \" .. match .. \" in string: \" .. str)
    end 
end
"]
block_8 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


"]block_9 -> { codeblock_24}
{rank=same; codeblock_24}

codeblock_24 [label="code block 67-69"]


codeblock_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return W
"]
block_9 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
}
