digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 83"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-70"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 codeblock_6 codeblock_7 prose_8 codeblock_9 section_10}
{rank=same; header_2 prose_3 prose_4 codeblock_5 codeblock_6 codeblock_7 prose_8 codeblock_9 section_10}

header_2 [label="1 : Walk module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 8-31"]

codeblock_6 [label="code block 33-39"]

codeblock_7 [label="code block 41-50"]

prose_8 [label="prose"]

codeblock_9 [label="code block 56-69"]

section_10 [label="section: 71-83"]


// END RANK section_1

header_2 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Walk module"]
// END RANK header_2

prose_3 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_3

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Contains our filesystem paradigm.
"]
// END RANK raw_12

prose_4 -> { raw_14 prespace_15 literal_16 raw_17}
{rank=same; raw_14 prespace_15 literal_16 raw_17}

raw_14 [label="raw"]

prespace_15 [label="prespace"]

literal_16 [label="literal"]

raw_17 [label="raw"]


// END RANK prose_4

raw_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will move to"]
// END RANK raw_14

prespace_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_15

literal_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_16

raw_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" relatively soon, where we can work out the ways
that bridgetools interact with codex and non-codex directory systems.
"]
// END RANK raw_17

codeblock_5 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local s = require \"status\"
local u = require \"util\"
local a = require \"ansi\"
s.chatty = true

local pl_file = require \"pl.file\"
local pl_dir = require \"pl.dir\"
local pl_path = require \"pl.path\"
local getfiles = pl_dir.getfiles
local getdirectories = pl_dir.getdirectories
local makepath = pl_dir.makepath
local extension = pl_path.extension
local dirname = pl_path.dirname
local basename = pl_path.basename
local read = pl_file.read
local write = pl_file.write
local delete = pl_file.delete
local isdir = pl_path.isdir

local epeg = require \"epeg\""]
// END RANK codeblock_5

codeblock_6 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Walk = {}
Walk.Path = require \"walk/path\"
Walk.Dir  = require \"walk/directory\"
Walk.File = require \"walk/file\"
Walk.Codex = require \"walk/codex\""]
// END RANK codeblock_6

codeblock_7 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Walk.strHas(substr, str)
    return L.match(epeg.anyP(substr), str)
end

function Walk.endsWith(substr, str)
    return L.match(L.P(string.reverse(substr)),
        string.reverse(str))
end"]
// END RANK codeblock_7

prose_8 -> { raw_25 prespace_26 literal_27 raw_28}
{rank=same; raw_25 prespace_26 literal_27 raw_28}

raw_25 [label="raw"]

prespace_26 [label="prespace"]

literal_27 [label="literal"]

raw_28 [label="raw"]


// END RANK prose_8

raw_25 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Finds the last match for a literal substring and replaces it
with"]
// END RANK raw_25

prespace_26 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_26

literal_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="swap"]
// END RANK literal_27

raw_28 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", returning the new string.
"]
// END RANK raw_28

codeblock_9 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Walk.subLastFor(match, swap, str)
   local trs, hctam = string.reverse(str), string.reverse(match)
   local first, last = Walk.strHas(hctam, trs)
   if last then
      -- There is some way to do this without reversing the string twice,
      -- but I can't be arsed to find it. ONE BASED INDEXES ARE A MISTAKE
      return string.reverse(trs:sub(1, first - 1)
          .. string.reverse(swap) .. trs:sub(last, -1))
   else
      s:halt(\"didn't find an instance of \" .. match .. \" in string: \" .. str)
   end
end"]
// END RANK codeblock_9

section_10 -> { header_34 prose_35 codeblock_36 codeblock_37}
{rank=same; header_34 prose_35 codeblock_36 codeblock_37}

header_34 [label="3 : Update on change"]

prose_35 [label="prose"]

codeblock_36 [label="code block 73-76"]

codeblock_37 [label="code block 80-82"]


// END RANK section_10

header_34 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Update on change"]
// END RANK header_34

prose_35 -> { raw_39}
{rank=same; raw_39}

raw_39 [label="raw"]


// END RANK prose_35

raw_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_39

codeblock_36 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Walk.writeOnChange = (require \"walk/ops\").writeOnChange"]
// END RANK codeblock_36

codeblock_37 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return Walk"]
// END RANK codeblock_37


}
