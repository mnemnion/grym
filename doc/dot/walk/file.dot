digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 91"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-91"]


// END RANK doc_0

section_1 -> { header_2 prose_3 codeblock_4 codeblock_5 codeblock_6 codeblock_7 codeblock_8 codeblock_9 codeblock_10 codeblock_11 codeblock_12 codeblock_13 codeblock_14}
{rank=same; header_2 prose_3 codeblock_4 codeblock_5 codeblock_6 codeblock_7 codeblock_8 codeblock_9 codeblock_10 codeblock_11 codeblock_12 codeblock_13 codeblock_14}

header_2 [label="1 : File"]

prose_3 [label="prose"]

codeblock_4 [label="code block 4-12"]

codeblock_5 [label="code block 14-16"]

codeblock_6 [label="code block 18-22"]

codeblock_7 [label="code block 25-29"]

codeblock_8 [label="code block 31-35"]

codeblock_9 [label="code block 37-41"]

codeblock_10 [label="code block 43-47"]

codeblock_11 [label="code block 49-53"]

codeblock_12 [label="code block 57-61"]

codeblock_13 [label="code block 64-86"]

codeblock_14 [label="code block 88-91"]


// END RANK section_1

header_2 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* File"]
// END RANK header_2

prose_3 -> { raw_16}
{rank=same; raw_16}

raw_16 [label="raw"]


// END RANK prose_3

raw_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_16

codeblock_4 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Path = require \"walk/path\"
local lfs = require \"lfs\"
local pl_path = require \"pl.path\"
local pl_file = require \"pl.file\"
local read, write = pl_file.read, pl_file.write
local extension = pl_path.extension
local isfile = pl_path.isfile"]
// END RANK codeblock_4

codeblock_5 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local new"]
// END RANK codeblock_5

codeblock_6 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __tostring(file)
   return file.path.str
end"]
// END RANK codeblock_6

codeblock_7 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local File = {}
local __Files = {}
File.it = require \"core/check\""]
// END RANK codeblock_7

codeblock_8 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function File.parentPath(file)
   return file.path:parentDir()
end"]
// END RANK codeblock_8

codeblock_9 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function File.exists(file)
   return isfile(file.path.str)
end"]
// END RANK codeblock_9

codeblock_10 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function File.extension(file)
   return extension(file.path.str)
end"]
// END RANK codeblock_10

codeblock_11 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function File.read(file)
   return read(file.path.str)
end"]
// END RANK codeblock_11

codeblock_12 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function File.write(file, doc)
   return write(file.path.str, tostring(doc))
end"]
// END RANK codeblock_12

codeblock_13 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local FileMeta = { __index = File,
                   __tostring = __tostring}

new = function (file_path)
   file_str = tostring(file_path)
   if __Files[file_str] then
      return nil, \"won't make the same file twice\"
   end

   local file = setmetatable({}, FileMeta)
   if type(file_path) == \"string\" then
      file.path = Path(file_path)
   elseif file_path.idEst == Path
      and not file_path.isDir then
      file.path = file_path
   end
   __Files[file_str] = true

   return file
end
"]
// END RANK codeblock_13

codeblock_14 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="File.idEst = new
return new"]
// END RANK codeblock_14


}
