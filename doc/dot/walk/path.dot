digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 294"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-200"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9 section_10 section_11}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9 section_10 section_11}

header_2 [label="1 : Path"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

section_8 [label="section: 20-62"]

section_9 [label="section: 63-65"]

section_10 [label="section: 66-120"]

section_11 [label="section: 201-230"]


// END RANK section_1

header_2 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Path"]
// END RANK header_2

prose_3 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


// END RANK prose_3

raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


Let's make a little Path class that isn't just a string.
"]
// END RANK raw_13

prose_4 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


// END RANK prose_4

raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They need to be:
"]
// END RANK raw_15

prose_5 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


// END RANK prose_5

raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
-  Immutable. Adding to a path or substituting within it
   produces a new path; a path can't be changed once it's
   established.
"]
// END RANK raw_17

prose_6 -> { raw_19 prespace_20 literal_21 raw_22}
{rank=same; raw_19 prespace_20 literal_21 raw_22}

raw_19 [label="raw"]

prespace_20 [label="prespace"]

literal_21 [label="literal"]

raw_22 [label="raw"]


// END RANK prose_6

raw_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
-  Stringy. "]
// END RANK raw_19

prespace_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_20

literal_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_21

raw_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" gives us the literal string rep of
   the Path, __concat works (but immutably), and so on.
"]
// END RANK raw_22

prose_7 -> { raw_27}
{rank=same; raw_27}

raw_27 [label="raw"]


// END RANK prose_7

raw_27 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Paths are going to be heavily re-used and extended, first by Directories
and Files, and then we'll want to take a pass a making them grammatical
and extending their properties to the URI class.

"]
// END RANK raw_27

section_8 -> { header_29 prose_30 prose_31 prose_32 prose_33 prose_34 prose_35 prose_36 prose_37 prose_38 prose_39 prose_40 codeblock_41}
{rank=same; header_29 prose_30 prose_31 prose_32 prose_33 prose_34 prose_35 prose_36 prose_37 prose_38 prose_39 prose_40 codeblock_41}

header_29 [label="2 : Fields"]

prose_30 [label="prose"]

prose_31 [label="prose"]

prose_32 [label="prose"]

prose_33 [label="prose"]

prose_34 [label="prose"]

prose_35 [label="prose"]

prose_36 [label="prose"]

prose_37 [label="prose"]

prose_38 [label="prose"]

prose_39 [label="prose"]

prose_40 [label="prose"]

codeblock_41 [label="code block 50-60"]


// END RANK section_8

header_29 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Fields"]
// END RANK header_29

prose_30 -> { raw_43}
{rank=same; raw_43}

raw_43 [label="raw"]


// END RANK prose_30

raw_43 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The array portion of Path tables is entirely strings.
"]
// END RANK raw_43

prose_31 -> { raw_45}
{rank=same; raw_45}

raw_45 [label="raw"]


// END RANK prose_31

raw_45 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Special characters, notably \"/\", are represented, by themselves,
as strings.
"]
// END RANK raw_45

prose_32 -> { raw_47}
{rank=same; raw_47}

raw_47 [label="raw"]


// END RANK prose_32

raw_47 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- Prototype
"]
// END RANK raw_47

prose_33 -> { raw_49 prespace_50 literal_51 raw_52}
{rank=same; raw_49 prespace_50 literal_51 raw_52}

raw_49 [label="raw"]

prespace_50 [label="prespace"]

literal_51 [label="literal"]

raw_52 [label="raw"]


// END RANK prose_33

raw_49 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  divider:  The dividing character,"]
// END RANK raw_49

prespace_50 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_50

literal_51 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/"]
// END RANK literal_51

raw_52 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in all sensible realms.
"]
// END RANK raw_52

prose_34 -> { raw_57 prespace_58 literal_59 raw_60}
{rank=same; raw_57 prespace_58 literal_59 raw_60}

raw_57 [label="raw"]

prespace_58 [label="prespace"]

literal_59 [label="literal"]

raw_60 [label="raw"]


// END RANK prose_34

raw_57 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  div_patt:  This is"]
// END RANK raw_57

prespace_58 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_58

literal_59 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%/"]
// END RANK literal_59

raw_60 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", in a quirk of Lua.
"]
// END RANK raw_60

prose_35 -> { raw_65}
{rank=same; raw_65}

raw_65 [label="raw"]


// END RANK prose_35

raw_65 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  parent_dir, same_dir:  Not currently used.
"]
// END RANK raw_65

prose_36 -> { raw_67}
{rank=same; raw_67}

raw_67 [label="raw"]


// END RANK prose_36

raw_67 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  isPath:  Always equal to the Path table.
"]
// END RANK raw_67

prose_37 -> { raw_69}
{rank=same; raw_69}

raw_69 [label="raw"]


// END RANK prose_37

raw_69 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- Instance
"]
// END RANK raw_69

prose_38 -> { raw_71 prespace_72 literal_73 raw_74}
{rank=same; raw_71 prespace_72 literal_73 raw_74}

raw_71 [label="raw"]

prespace_72 [label="prespace"]

literal_73 [label="literal"]

raw_74 [label="raw"]


// END RANK prose_38

raw_71 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  filename:  If present, the name of the file.  This will always be
               "]
// END RANK raw_71

prespace_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_72

literal_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_73

raw_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for a directory.
"]
// END RANK raw_74

prose_39 -> { raw_79 prespace_80 literal_81 raw_82 prespace_83 bold_84 raw_85}
{rank=same; raw_79 prespace_80 literal_81 raw_82 prespace_83 bold_84 raw_85}

raw_79 [label="raw"]

prespace_80 [label="prespace"]

literal_81 [label="literal"]

raw_82 [label="raw"]

prespace_83 [label="prespace"]

bold_84 [label="bold"]

raw_85 [label="raw"]


// END RANK prose_39

raw_79 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  isDir:  If"]
// END RANK raw_79

prespace_80 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_80

literal_81 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_81

raw_82 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", indicates the Path is structured to be a directory.
        It does"]
// END RANK raw_82

prespace_83 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_83

bold_84 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="not"]
// END RANK bold_84

raw_85 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" indicate that there is a real directory at this path.
"]
// END RANK raw_85

prose_40 -> { raw_93 prespace_94 literal_95 raw_96}
{rank=same; raw_93 prespace_94 literal_95 raw_96}

raw_93 [label="raw"]

prespace_94 [label="prespace"]

literal_95 [label="literal"]

raw_96 [label="raw"]


// END RANK prose_40

raw_93 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  str:  The string form of the path. "]
// END RANK raw_93

prespace_94 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_94

literal_95 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__tostring"]
// END RANK literal_95

raw_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" simply returns this,
           it is in-contract to read from this field.  Nothing but Path
           should write to it, which we won't enforce until we can do so
           at compile time.
"]
// END RANK raw_96

codeblock_41 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Path = setmetatable({}, {__index = Path})
local s = require \"status\" ()
s.angry = false
Path.isPath = Path

Path.divider = \"/\"
Path.div_patt = \"%/\"
Path.parent_dir = \"..\"
Path.same_dir = \".\""]
// END RANK codeblock_41

section_9 -> { header_102 prose_103}
{rank=same; header_102 prose_103}

header_102 [label="2 : Methods"]

prose_103 [label="prose"]


// END RANK section_9

header_102 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
** __conca"]
// END RANK header_102

prose_103 -> { raw_105}
{rank=same; raw_105}

raw_105 [label="raw"]


// END RANK prose_103

raw_105 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_105

section_10 -> { header_107 prose_108 prose_109 prose_110 prose_111 prose_112 prose_113 prose_114 prose_115 prose_116 codeblock_117 section_118 section_119}
{rank=same; header_107 prose_108 prose_109 prose_110 prose_111 prose_112 prose_113 prose_114 prose_115 prose_116 codeblock_117 section_118 section_119}

header_107 [label="2 : __concat"]

prose_108 [label="prose"]

prose_109 [label="prose"]

prose_110 [label="prose"]

prose_111 [label="prose"]

prose_112 [label="prose"]

prose_113 [label="prose"]

prose_114 [label="prose"]

prose_115 [label="prose"]

prose_116 [label="prose"]

codeblock_117 [label="code block 99-101"]

section_118 [label="section: 104-120"]

section_119 [label="section: 121-200"]


// END RANK section_10

header_107 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Concat retu"]
// END RANK header_107

prose_108 -> { raw_121}
{rank=same; raw_121}

raw_121 [label="raw"]


// END RANK prose_108

raw_121 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Concat returns a new path that is the synthesis of either a
string or another path.
"]
// END RANK raw_121

prose_109 -> { raw_123}
{rank=same; raw_123}

raw_123 [label="raw"]


// END RANK prose_109

raw_123 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- params
"]
// END RANK raw_123

prose_110 -> { raw_125}
{rank=same; raw_125}

raw_125 [label="raw"]


// END RANK prose_110

raw_125 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  head_path:  A Path. Cloned before concatenation.
"]
// END RANK raw_125

prose_111 -> { raw_127}
{rank=same; raw_127}

raw_127 [label="raw"]


// END RANK prose_111

raw_127 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  tail_path:  If a String, this is concatenated.  If the result is
           not a structurally valid string, this is complained about
           and nil is returned.
"]
// END RANK raw_127

prose_112 -> { raw_129}
{rank=same; raw_129}

raw_129 [label="raw"]


// END RANK prose_112

raw_129 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           If it's another Path, we want to do the right thing, and not
           make developers guess what that might be, so:
"]
// END RANK raw_129

prose_113 -> { raw_131 prespace_132 bold_133 raw_134 prespace_135 literal_136 raw_137 prespace_138 literal_139 raw_140}
{rank=same; raw_131 prespace_132 bold_133 raw_134 prespace_135 literal_136 raw_137 prespace_138 literal_139 raw_140}

raw_131 [label="raw"]

prespace_132 [label="prespace"]

bold_133 [label="bold"]

raw_134 [label="raw"]

prespace_135 [label="prespace"]

literal_136 [label="literal"]

raw_137 [label="raw"]

prespace_138 [label="prespace"]

literal_139 [label="literal"]

raw_140 [label="raw"]


// END RANK prose_113

raw_131 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           If it's two absolute Paths, then"]
// END RANK raw_131

prespace_132 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_132

bold_133 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label="iff"]
// END RANK bold_133

raw_134 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" the tail_path nests in the
           head_path, the tail_path is returned.  So"]
// END RANK raw_134

prespace_135 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_135

literal_136 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"/usr/\" .. \"/usr/bin/\""]
// END RANK literal_136

raw_137 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           returns"]
// END RANK raw_137

prespace_138 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_138

literal_139 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"/usr/bin\""]
// END RANK literal_139

raw_140 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_140

prose_114 -> { raw_151 prespace_152 italic_153 raw_154 prespace_155 literal_156 raw_157 prespace_158 literal_159 raw_160 prespace_161 literal_162 raw_163}
{rank=same; raw_151 prespace_152 italic_153 raw_154 prespace_155 literal_156 raw_157 prespace_158 literal_159 raw_160 prespace_161 literal_162 raw_163}

raw_151 [label="raw"]

prespace_152 [label="prespace"]

italic_153 [label="italic"]

raw_154 [label="raw"]

prespace_155 [label="prespace"]

literal_156 [label="literal"]

raw_157 [label="raw"]

prespace_158 [label="prespace"]

literal_159 [label="literal"]

raw_160 [label="raw"]

prespace_161 [label="prespace"]

literal_162 [label="literal"]

raw_163 [label="raw"]


// END RANK prose_114

raw_151 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           If the tail_path is relative, then it's flexibly applied to the
           head_path. For a path that"]
// END RANK raw_151

prespace_152 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_152

italic_153 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="doesn't"]
// END RANK italic_153

raw_154 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" start with"]
// END RANK raw_154

prespace_155 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_155

literal_156 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="."]
// END RANK literal_156

raw_157 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_157

prespace_158 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_158

literal_159 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".."]
// END RANK literal_159

raw_160 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", or"]
// END RANK raw_160

prespace_161 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_161

literal_162 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
// END RANK literal_162

raw_163 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
           this is simple concatenation.
"]
// END RANK raw_163

prose_115 -> { raw_177 prespace_178 literal_179 raw_180 prespace_181 literal_182 raw_183}
{rank=same; raw_177 prespace_178 literal_179 raw_180 prespace_181 literal_182 raw_183}

raw_177 [label="raw"]

prespace_178 [label="prespace"]

literal_179 [label="literal"]

raw_180 [label="raw"]

prespace_181 [label="prespace"]

literal_182 [label="literal"]

raw_183 [label="raw"]


// END RANK prose_115

raw_177 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           Note that"]
// END RANK raw_177

prespace_178 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_178

literal_179 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__concat"]
// END RANK literal_179

raw_180 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" refuses to make \"foo//bar\" from \"foo/\"
           and \"/bar\", and similarly won't make \"/foobar\" from \"/foo\" and \"bar\". Both
           of these will return"]
// END RANK raw_180

prespace_181 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_181

literal_182 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_182

raw_183 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and the malformed string as the error. #nyi


"]
// END RANK raw_183

prose_116 -> { raw_191}
{rank=same; raw_191}

raw_191 [label="raw"]


// END RANK prose_116

raw_191 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- return
  - A new Path.
"]
// END RANK raw_191

codeblock_117 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local new      -- function"]
// END RANK codeblock_117

section_118 -> { header_194 prose_195 codeblock_196}
{rank=same; header_194 prose_195 codeblock_196}

header_194 [label="3 : clone(path)"]

prose_195 [label="prose"]

codeblock_196 [label="code block 108-118"]


// END RANK section_118

header_194 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ble stolen.

#!l"]
// END RANK header_194

prose_195 -> { raw_198}
{rank=same; raw_198}

raw_198 [label="raw"]


// END RANK prose_195

raw_198 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This returns a copy of the path with the metatable stolen.
"]
// END RANK raw_198

codeblock_196 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function clone(path)
  local new_path = {}
  for k,v in pairs(path) do
    new_path[k] = v
  end
  setmetatable(new_path, getmetatable(path))
  return new_path
end
"]
// END RANK codeblock_196

section_119 -> { header_201 prose_202 codeblock_203 codeblock_204 prose_205 codeblock_206}
{rank=same; header_201 prose_202 codeblock_203 codeblock_204 prose_205 codeblock_206}

header_201 [label="3 : stringAwk"]

prose_202 [label="prose"]

codeblock_203 [label="code block 125-158"]

codeblock_204 [label="code block 160-168"]

prose_205 [label="prose"]

codeblock_206 [label="code block 175-198"]


// END RANK section_119

header_201 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" add to them."]
// END RANK header_201

prose_202 -> { raw_208}
{rank=same; raw_208}

raw_208 [label="raw"]


// END RANK prose_202

raw_208 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is used twice, once to build new paths, and once to add to them.
"]
// END RANK raw_208

codeblock_203 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function stringAwk(path, str)
  local div, div_patt = Path.divider, Path.div_patt
  local phrase = \"\"
  local remain = string.sub(str, 2)
  path[1] = div
    -- chew the string like Pac Man
  while remain  do
    local dir_index = string.find(remain, div_patt)
    if dir_index then
      -- add the handle minus div
      path[#path + 1] = string.sub(remain, 1, dir_index - 1)
      -- then the div
      path[#path + 1] = div
      local new_remain = string.sub(remain, dir_index + 1)
      assert(#new_remain < #remain, \"remain must decrease\")
      remain = new_remain
      if remain == \"\" then
        remain = nil
      end
    else
      -- file
      path[#path + 1] = remain
      path.filename = remain
      remain = nil
    end
  end
  if not path.filename then
    path.isDir = true
  end

  return path
end"]
// END RANK codeblock_203

codeblock_204 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __eq(left, right)
  local isEq = false
  for i = 1, #left do
    isEq = isEq and left[i] == right[i]
  end
  return isEq
end"]
// END RANK codeblock_204

prose_205 -> { raw_212}
{rank=same; raw_212}

raw_212 [label="raw"]


// END RANK prose_205

raw_212 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ]  #todo add a guard against file-file and dir-dir
       interaction, if this actually happens enough to get
       annoying.
"]
// END RANK raw_212

codeblock_206 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __concat(head_path, tail_path)
  local new_path = clone(head_path)
  if type(tail_path) == 'string' then
    -- use the stringbuilder
    local path_parts = stringAwk({}, tail_path)
    for _, v in ipairs(path_parts) do
      new_path[#new_path + 1] = v
    end

    new_path.str = new_path.str .. tail_path
    if string.sub(new_path.str, -1) == Path.divider then
      new_path.isDir = true
      new_path.filename = nil
    else
      new_path.filename = path_parts.filename
    end

    return new_path
  else
    s:complain(\"NYI\", \"can only concatenate string at present\")
  end
end"]
// END RANK codeblock_206

section_11 -> { header_215 prose_216 codeblock_217 section_218 section_219}
{rank=same; header_215 prose_216 codeblock_217 section_218 section_219}

header_215 [label="2 : __tostring"]

prose_216 [label="prose"]

codeblock_217 [label="code block 205-209"]

section_218 [label="section: 213-230"]

section_219 [label="section: 231-294"]


// END RANK section_11

header_215 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a builder func"]
// END RANK header_215

prose_216 -> { raw_221}
{rank=same; raw_221}

raw_221 [label="raw"]


// END RANK prose_216

raw_221 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Since we always have a path as a string, we simply return it.
"]
// END RANK raw_221

codeblock_217 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __tostring(path)
  return path.str
end"]
// END RANK codeblock_217

section_218 -> { header_224 prose_225 codeblock_226}
{rank=same; header_224 prose_225 codeblock_226}

header_224 [label="3 : fromString(str)"]

prose_225 [label="prose"]

codeblock_226 [label="code block 217-228"]


// END RANK section_218

header_224 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(str, 1, 1) ~= div a"]
// END RANK header_224

prose_225 -> { raw_228}
{rank=same; raw_228}

raw_228 [label="raw"]


// END RANK prose_225

raw_228 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a builder function and hence private.
"]
// END RANK raw_228

codeblock_226 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function fromString(path, str)
  local div, div_patt = Path.divider, Path.div_patt
  if string.sub(str, 1, 1) ~= div and not catting then
    local msg = \"Paths must be absolute and start with \" .. div
    s:complain(\"validation error\", msg)
    return nil, msg
  else
    return stringAwk(path, str, div, div_patt)
  end
end"]
// END RANK codeblock_226

section_219 -> { header_231 prose_232 prose_233 codeblock_234 prose_235 codeblock_236 codeblock_237}
{rank=same; header_231 prose_232 prose_233 codeblock_234 prose_235 codeblock_236 codeblock_237}

header_231 [label="3 : new"]

prose_232 [label="prose"]

prose_233 [label="prose"]

codeblock_234 [label="code block 237-252"]

prose_235 [label="prose"]

codeblock_236 [label="code block 256-268"]

codeblock_237 [label="code block 270-272"]


// END RANK section_219

header_231 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label="        "]
// END RANK header_231

prose_232 -> { raw_239}
{rank=same; raw_239}

raw_239 [label="raw"]


// END RANK prose_232

raw_239 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Builds a Path from, currently, a string.
"]
// END RANK raw_239

prose_233 -> { raw_241}
{rank=same; raw_241}

raw_241 [label="raw"]


// END RANK prose_233

raw_241 -> leaf_242
leaf_242  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is the important use case.
"]
// END RANK raw_241

codeblock_234 -> leaf_243
leaf_243  [color=Gray,shape=rectangle,fontname=Inconsolata,label="new = function (_, path_seed)
  local path = setmetatable({}, {__index = Path,
                               __concat = __concat,
                               __eq  = __eq,
                               __tostring = __tostring})
  if type(path_seed) == 'string' then
    path.str = path_seed
    path =  fromString(path, path_seed)
  elseif type(path_seed) == 'table' then
    s:complain(\"NYI\", 'construction from a Path or other table is not yet implemented')
  end

  return path
end"]
// END RANK codeblock_234

prose_235 -> { raw_244}
{rank=same; raw_244}

raw_244 [label="raw"]


// END RANK prose_235

raw_244 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is complex and worse, it isn't working.
"]
// END RANK raw_244

codeblock_236 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Path.spec(path)
  local a = new(_, \"/core/build/\")
  assert(#a == 5, \"a must equal 5 not\" .. #a)
  assert(a[1] == \"/\", \"a must start with /\")
  local b = clone(a)
  assert(#b == 5, \"b must equal 5\")
  assert(b[1] == \"/\", \"b must start with /\")
  assert(a.str == b.str, \"a and b must have the same str\")
  local c = a .. \"/bar\"
end
Path.spec()"]
// END RANK codeblock_236

codeblock_237 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return setmetatable({}, {__call = new})"]
// END RANK codeblock_237


}
