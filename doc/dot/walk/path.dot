digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 134"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-50"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 codeblock_7 section_8 section_9 section_10}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 codeblock_7 section_8 section_9 section_10}

header_2 [label="1 : Path #Todo"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

codeblock_7 [label="code block 14-23"]

section_8 [label="section: 25-29"]

section_9 [label="section: 30-50"]

section_10 [label="section: 51-79"]


// END RANK section_1

header_2 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Path #Todo"]
// END RANK header_2

prose_3 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_3

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Let's make a little Path class that isn't just a string.
"]
// END RANK raw_12

prose_4 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


// END RANK prose_4

raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They need to be:
"]
// END RANK raw_14

prose_5 -> { raw_16}
{rank=same; raw_16}

raw_16 [label="raw"]


// END RANK prose_5

raw_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
-  Immutable. Adding to a path or substituting within it
   produces a new path; a path can't be changed once it's
   established. 
"]
// END RANK raw_16

prose_6 -> { raw_18 prespace_19 literal_20 raw_21}
{rank=same; raw_18 prespace_19 literal_20 raw_21}

raw_18 [label="raw"]

prespace_19 [label="prespace"]

literal_20 [label="literal"]

raw_21 [label="raw"]


// END RANK prose_6

raw_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
-  Stringy. "]
// END RANK raw_18

prespace_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_19

literal_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_20

raw_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" gives us the literal string rep of
   the Path, __concat works (but immutably), and so on.
"]
// END RANK raw_21

codeblock_7 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Path = {}
Path.__index = Path
Path.isPath = Path

Path.divider = \"/\"
Path.div_patt = \"%/\"
Path.parent_dir = \"..\"
Path.same_dir = \".\""]
// END RANK codeblock_7

section_8 -> { header_27 prose_28}
{rank=same; header_27 prose_28}

header_27 [label="4 : inner new"]

prose_28 [label="prose"]


// END RANK section_8

header_27 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** inner new"]
// END RANK header_27

prose_28 -> { raw_30}
{rank=same; raw_30}

raw_30 [label="raw"]


// END RANK prose_28

raw_30 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I don't get how to 

"]
// END RANK raw_30

section_9 -> { header_32 prose_33 codeblock_34}
{rank=same; header_32 prose_33 codeblock_34}

header_32 [label="2 : __concat"]

prose_33 [label="prose"]

codeblock_34 [label="code block 35-48"]


// END RANK section_9

header_32 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** __concat"]
// END RANK header_32

prose_33 -> { raw_36}
{rank=same; raw_36}

raw_36 [label="raw"]


// END RANK prose_33

raw_36 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Concat returns a new path that is the synthesis of either a
string or another path.
"]
// END RANK raw_36

codeblock_34 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local new -- forward declared

local function __concat(head_path, tail_path)
  local new_path = new(head_path, head_path)
  if type(tail_path) == 'str' then
    new_path[#new_path + 1] = tail_path
  for _, v in ipairs(tail_path) do
    new_path[#new_path + 1] = v
  end
    return new_path
  end
end"]
// END RANK codeblock_34

section_10 -> { header_39 prose_40 codeblock_41 section_42 section_43}
{rank=same; header_39 prose_40 codeblock_41 section_42 section_43}

header_39 [label="2 : __tostring"]

prose_40 [label="prose"]

codeblock_41 [label="code block 55-59"]

section_42 [label="section: 62-79"]

section_43 [label="section: 80-134"]


// END RANK section_10

header_39 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ng

Since we n"]
// END RANK header_39

prose_40 -> { raw_45}
{rank=same; raw_45}

raw_45 [label="raw"]


// END RANK prose_40

raw_45 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Since we normally supply a path as a string, we just keep it around.
"]
// END RANK raw_45

codeblock_41 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __tostring(path)
  return path.str
end"]
// END RANK codeblock_41

section_42 -> { header_48 prose_49 prose_50 codeblock_51}
{rank=same; header_48 prose_49 prose_50 codeblock_51}

header_48 [label="3 : toString(path_seed)"]

prose_49 [label="prose"]

prose_50 [label="prose"]

codeblock_51 [label="code block 70-77"]


// END RANK section_42

header_48 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(path_seed)

We want to "]
// END RANK header_48

prose_49 -> { raw_53 prespace_54 literal_55 raw_56}
{rank=same; raw_53 prespace_54 literal_55 raw_56}

raw_53 [label="raw"]

prespace_54 [label="prespace"]

literal_55 [label="literal"]

raw_56 [label="raw"]


// END RANK prose_49

raw_53 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We want to accept any old array of strings whether it's a Path or not,
so we can't count on the path_seed having a"]
// END RANK raw_53

prespace_54 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_54

literal_55 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".str"]
// END RANK literal_55

raw_56 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" field.
"]
// END RANK raw_56

prose_50 -> { raw_61}
{rank=same; raw_61}

raw_61 [label="raw"]


// END RANK prose_50

raw_61 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ] #todo  This will always produce a directory, which isn't what
             we want. 
"]
// END RANK raw_61

codeblock_51 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function toString(path_seed)
  local phrase = \"\"
  for _, str in ipairs(path_seed) do
    phrase = phrase .. Path.divider
  end
end"]
// END RANK codeblock_51

section_43 -> { header_64 prose_65 codeblock_66 codeblock_67}
{rank=same; header_64 prose_65 codeblock_66 codeblock_67}

header_64 [label="3 : fromString(str)"]

prose_65 [label="prose"]

codeblock_66 [label="code block 84-112"]

codeblock_67 [label="code block 114-134"]


// END RANK section_43

header_64 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="r)

This is a builde"]
// END RANK header_64

prose_65 -> { raw_69}
{rank=same; raw_69}

raw_69 [label="raw"]


// END RANK prose_65

raw_69 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a builder function and hence private.
"]
// END RANK raw_69

codeblock_66 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function fromString(path, str, catting)
  local div, div_patt = Path.divider, Path.div_patt
  if string.sub(str, 1, 1) ~= div then
    local msg = \"Paths must be absolute and start with \" .. div
    s:complain(\"validation error\", msg)
    return path, msg
  else
    local phrase = \"\"
    local remain = string.sub(str, 2)
    while remain  do
      local dir_index = string.find(remain, div_patt)
      if dir_index then
        -- add the handle minus div
        path[#path + 1] = string.sub(remain, 1, dir_index - 1)
        local new_remain = string.sub(remain, dir_index + 1)
        assert(#new_remain < #remain, \"remain must decrease\")
        remain = new_remain

      else
        -- file
        path[#path + 1] = remain
        remain = nil  
      end
    end
    return path
  end
end"]
// END RANK codeblock_66

codeblock_67 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="new = function (Path, path_seed)
  local path = setmetatable({}, {__index = Path,
                               __concat = __concat,
                               __tostring = __tostring})
  if type(path_seed) == 'string' then
    path.str = path_seed
    path =  fromString(path, path_seed)
  else
    for i, v in ipairs(path_seed) do
      assert(type(v) == \"string\", \"contents of Path([]) must be strings\")
      path[i] = path_seed
      path.str = toString(path_seed)
    end
  end
  
  return path
end

return setmetatable({}, {__call = new})"]
// END RANK codeblock_67


}
