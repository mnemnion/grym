digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 255"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-161"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 section_7 section_8 section_9 section_10}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 section_7 section_8 section_9 section_10}

header_2 [label="1 : Path #Todo"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

section_7 [label="section: 15-56"]

section_8 [label="section: 57-59"]

section_9 [label="section: 60-86"]

section_10 [label="section: 162-191"]


// END RANK section_1

header_2 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Path #Todo"]
// END RANK header_2

prose_3 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_3

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Let's make a little Path class that isn't just a string.
"]
// END RANK raw_12

prose_4 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


// END RANK prose_4

raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They need to be:
"]
// END RANK raw_14

prose_5 -> { raw_16}
{rank=same; raw_16}

raw_16 [label="raw"]


// END RANK prose_5

raw_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
-  Immutable. Adding to a path or substituting within it
   produces a new path; a path can't be changed once it's
   established.
"]
// END RANK raw_16

prose_6 -> { raw_18 prespace_19 literal_20 raw_21}
{rank=same; raw_18 prespace_19 literal_20 raw_21}

raw_18 [label="raw"]

prespace_19 [label="prespace"]

literal_20 [label="literal"]

raw_21 [label="raw"]


// END RANK prose_6

raw_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
-  Stringy. "]
// END RANK raw_18

prespace_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_19

literal_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_20

raw_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" gives us the literal string rep of
   the Path, __concat works (but immutably), and so on.

"]
// END RANK raw_21

section_7 -> { header_26 prose_27 prose_28 prose_29 prose_30 prose_31 prose_32 prose_33 prose_34 prose_35 prose_36 prose_37 codeblock_38}
{rank=same; header_26 prose_27 prose_28 prose_29 prose_30 prose_31 prose_32 prose_33 prose_34 prose_35 prose_36 prose_37 codeblock_38}

header_26 [label="2 : Fields"]

prose_27 [label="prose"]

prose_28 [label="prose"]

prose_29 [label="prose"]

prose_30 [label="prose"]

prose_31 [label="prose"]

prose_32 [label="prose"]

prose_33 [label="prose"]

prose_34 [label="prose"]

prose_35 [label="prose"]

prose_36 [label="prose"]

prose_37 [label="prose"]

codeblock_38 [label="code block 42-54"]


// END RANK section_7

header_26 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Fields"]
// END RANK header_26

prose_27 -> { raw_40}
{rank=same; raw_40}

raw_40 [label="raw"]


// END RANK prose_27

raw_40 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The array portion of Path tables is entirely strings.
"]
// END RANK raw_40

prose_28 -> { raw_42}
{rank=same; raw_42}

raw_42 [label="raw"]


// END RANK prose_28

raw_42 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Special characters, notably \"/\", are represented, by themselves,
as strings.
"]
// END RANK raw_42

prose_29 -> { raw_44}
{rank=same; raw_44}

raw_44 [label="raw"]


// END RANK prose_29

raw_44 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- Prototype
"]
// END RANK raw_44

prose_30 -> { raw_46 prespace_47 literal_48 raw_49}
{rank=same; raw_46 prespace_47 literal_48 raw_49}

raw_46 [label="raw"]

prespace_47 [label="prespace"]

literal_48 [label="literal"]

raw_49 [label="raw"]


// END RANK prose_30

raw_46 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  divider:  The dividing character,"]
// END RANK raw_46

prespace_47 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_47

literal_48 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/"]
// END RANK literal_48

raw_49 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in all sensible realms.
"]
// END RANK raw_49

prose_31 -> { raw_54 prespace_55 literal_56 raw_57}
{rank=same; raw_54 prespace_55 literal_56 raw_57}

raw_54 [label="raw"]

prespace_55 [label="prespace"]

literal_56 [label="literal"]

raw_57 [label="raw"]


// END RANK prose_31

raw_54 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  div_patt:  This is"]
// END RANK raw_54

prespace_55 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_55

literal_56 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%/"]
// END RANK literal_56

raw_57 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", in a quirk of Lua.
"]
// END RANK raw_57

prose_32 -> { raw_62}
{rank=same; raw_62}

raw_62 [label="raw"]


// END RANK prose_32

raw_62 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  parent_dir, same_dir:  Not currently used.
"]
// END RANK raw_62

prose_33 -> { raw_64}
{rank=same; raw_64}

raw_64 [label="raw"]


// END RANK prose_33

raw_64 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  isPath:  Always equal to the Path table.
"]
// END RANK raw_64

prose_34 -> { raw_66}
{rank=same; raw_66}

raw_66 [label="raw"]


// END RANK prose_34

raw_66 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- Instance
"]
// END RANK raw_66

prose_35 -> { raw_68}
{rank=same; raw_68}

raw_68 [label="raw"]


// END RANK prose_35

raw_68 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  filename:  If present, the name of the file.
"]
// END RANK raw_68

prose_36 -> { raw_70 prespace_71 literal_72 raw_73 prespace_74 bold_75 raw_76}
{rank=same; raw_70 prespace_71 literal_72 raw_73 prespace_74 bold_75 raw_76}

raw_70 [label="raw"]

prespace_71 [label="prespace"]

literal_72 [label="literal"]

raw_73 [label="raw"]

prespace_74 [label="prespace"]

bold_75 [label="bold"]

raw_76 [label="raw"]


// END RANK prose_36

raw_70 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  isDir:  If"]
// END RANK raw_70

prespace_71 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_71

literal_72 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_72

raw_73 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", indicates the Path is structured to be a directory.
        It does"]
// END RANK raw_73

prespace_74 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_74

bold_75 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="not"]
// END RANK bold_75

raw_76 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" indicate that there is a real directory at this path.
"]
// END RANK raw_76

prose_37 -> { raw_84}
{rank=same; raw_84}

raw_84 [label="raw"]


// END RANK prose_37

raw_84 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  str:  The string form of the path.

"]
// END RANK raw_84

codeblock_38 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Path = {}
local s = require \"status\" ()
s.angry = true

Path.__index = Path
Path.isPath = Path

Path.divider = \"/\"
Path.div_patt = \"%/\"
Path.parent_dir = \"..\"
Path.same_dir = \".\""]
// END RANK codeblock_38

section_8 -> { header_87 prose_88}
{rank=same; header_87 prose_88}

header_87 [label="2 : Methods"]

prose_88 [label="prose"]


// END RANK section_8

header_87 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ds


** __c"]
// END RANK header_87

prose_88 -> { raw_90}
{rank=same; raw_90}

raw_90 [label="raw"]


// END RANK prose_88

raw_90 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_90

section_9 -> { header_92 prose_93 codeblock_94 section_95 section_96}
{rank=same; header_92 prose_93 codeblock_94 section_95 section_96}

header_92 [label="2 : __concat"]

prose_93 [label="prose"]

codeblock_94 [label="code block 65-67"]

section_95 [label="section: 70-86"]

section_96 [label="section: 87-161"]


// END RANK section_9

header_92 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cat

Concat "]
// END RANK header_92

prose_93 -> { raw_98}
{rank=same; raw_98}

raw_98 [label="raw"]


// END RANK prose_93

raw_98 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Concat returns a new path that is the synthesis of either a
string or another path.
"]
// END RANK raw_98

codeblock_94 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local new      -- function"]
// END RANK codeblock_94

section_95 -> { header_101 prose_102 codeblock_103}
{rank=same; header_101 prose_102 codeblock_103}

header_101 [label="3 : clone(path)"]

prose_102 [label="prose"]

codeblock_103 [label="code block 74-84"]


// END RANK section_95

header_101 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="e(path)

This re"]
// END RANK header_101

prose_102 -> { raw_105}
{rank=same; raw_105}

raw_105 [label="raw"]


// END RANK prose_102

raw_105 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This returns a copy of the path with the metatable stolen.
"]
// END RANK raw_105

codeblock_103 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function clone(path)
  local new_path = {}
  for k,v in pairs(path) do
    new_path[k] = v
  end
  setmetatable(new_path, getmetatable(path))
  return new_path
end
"]
// END RANK codeblock_103

section_96 -> { header_108 prose_109 codeblock_110 codeblock_111 codeblock_112}
{rank=same; header_108 prose_109 codeblock_110 codeblock_111 codeblock_112}

header_108 [label="3 : stringAwk"]

prose_109 [label="prose"]

codeblock_110 [label="code block 91-124"]

codeblock_111 [label="code block 126-135"]

codeblock_112 [label="code block 137-159"]


// END RANK section_96

header_108 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="This is used t"]
// END RANK header_108

prose_109 -> { raw_114}
{rank=same; raw_114}

raw_114 [label="raw"]


// END RANK prose_109

raw_114 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is used twice, once to build new paths, and once to add to them.
"]
// END RANK raw_114

codeblock_110 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function stringAwk(path, str)
  local div, div_patt = Path.divider, Path.div_patt
  local phrase = \"\"
  local remain = string.sub(str, 2)
  path[1] = div
    -- chew the string like Pac Man
  while remain  do
    local dir_index = string.find(remain, div_patt)
    if dir_index then
      -- add the handle minus div
      path[#path + 1] = string.sub(remain, 1, dir_index - 1)
      -- then the div
      path[#path + 1] = div
      local new_remain = string.sub(remain, dir_index + 1)
      assert(#new_remain < #remain, \"remain must decrease\")
      remain = new_remain
      if remain == \"\" then
        remain = nil
      end
    else
      -- file
      path[#path + 1] = remain
      path.filename = remain
      remain = nil
    end
  end
  if not path.filename then
    path.isDir = true
  end

  return path
end"]
// END RANK codeblock_110

codeblock_111 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __eq(left, right)
  local isEq = false
  for i = 1, #left do
    isEq = isEq and left[i] == right[i]
  end
  return isEq
end
"]
// END RANK codeblock_111

codeblock_112 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __concat(head_path, tail_path)
  local new_path = clone(head_path)
  if type(tail_path) == 'string' then
    -- use the stringbuilder
    local path_parts = stringAwk({}, tail_path)
    for _, v in ipairs(path_parts) do
      new_path[#new_path + 1] = v
    end

    new_path.str = new_path.str .. tail_path
    if path_parts.isDir then
      new_path.isDir = true
    else
      new_path.filename = path_parts.filename
    end

    return new_path
  else
    s:complain(\"NYI\", \"can only concatenate string at present\")
  end
end"]
// END RANK codeblock_112

section_10 -> { header_119 prose_120 codeblock_121 section_122 section_123}
{rank=same; header_119 prose_120 codeblock_121 section_122 section_123}

header_119 [label="2 : __tostring"]

prose_120 [label="prose"]

codeblock_121 [label="code block 166-170"]

section_122 [label="section: 174-191"]

section_123 [label="section: 192-255"]


// END RANK section_10

header_119 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="	return path.s"]
// END RANK header_119

prose_120 -> { raw_125}
{rank=same; raw_125}

raw_125 [label="raw"]


// END RANK prose_120

raw_125 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Since we always have a path as a string, we simply return it.
"]
// END RANK raw_125

codeblock_121 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __tostring(path)
  return path.str
end"]
// END RANK codeblock_121

section_122 -> { header_128 prose_129 codeblock_130}
{rank=same; header_128 prose_129 codeblock_130}

header_128 [label="3 : fromString(str)"]

prose_129 [label="prose"]

codeblock_130 [label="code block 178-189"]


// END RANK section_122

header_128 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" div, div_patt = Pat"]
// END RANK header_128

prose_129 -> { raw_132}
{rank=same; raw_132}

raw_132 [label="raw"]


// END RANK prose_129

raw_132 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a builder function and hence private.
"]
// END RANK raw_132

codeblock_130 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function fromString(path, str)
  local div, div_patt = Path.divider, Path.div_patt
  if string.sub(str, 1, 1) ~= div and not catting then
    local msg = \"Paths must be absolute and start with \" .. div
    s:complain(\"validation error\", msg)
    return nil, msg
  else
    return stringAwk(path, str, div, div_patt)
  end
end"]
// END RANK codeblock_130

section_123 -> { header_135 prose_136 prose_137 codeblock_138 prose_139 codeblock_140 codeblock_141}
{rank=same; header_135 prose_136 prose_137 codeblock_138 prose_139 codeblock_140 codeblock_141}

header_135 [label="3 : new"]

prose_136 [label="prose"]

prose_137 [label="prose"]

codeblock_138 [label="code block 198-213"]

prose_139 [label="prose"]

codeblock_140 [label="code block 217-229"]

codeblock_141 [label="code block 231-233"]


// END RANK section_123

header_135 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" path = "]
// END RANK header_135

prose_136 -> { raw_143}
{rank=same; raw_143}

raw_143 [label="raw"]


// END RANK prose_136

raw_143 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Builds a Path from, currently, a string.
"]
// END RANK raw_143

prose_137 -> { raw_145}
{rank=same; raw_145}

raw_145 [label="raw"]


// END RANK prose_137

raw_145 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is the important use case.
"]
// END RANK raw_145

codeblock_138 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="new = function (Path, path_seed)
  local path = setmetatable({}, {__index = Path,
                               __concat = __concat,
                               __eq  = __eq,
                               __tostring = __tostring})
  if type(path_seed) == 'string' then
    path.str = path_seed
    path =  fromString(path, path_seed)
  elseif type(path_seed) == 'table' then
    s:complain(\"NYI\", 'construction from a Path or other table is not yet implemented')
  end

  return path
end"]
// END RANK codeblock_138

prose_139 -> { raw_148}
{rank=same; raw_148}

raw_148 [label="raw"]


// END RANK prose_139

raw_148 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is complex and worse, it isn't working.
"]
// END RANK raw_148

codeblock_140 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Path.spec(path)
  local a = new(_, \"/core/build/\")
  assert(#a == 5, \"a must equal 5 not\" .. #a)
  assert(a[1] == \"/\", \"a must start with /\")
  local b = clone(a)
  assert(#b == 5, \"b must equal 5\")
  assert(b[1] == \"/\", \"b must start with /\")
  assert(a.str == b.str, \"a and b must have the same str\")
  local c = a .. \"/bar\"
end
Path.spec()"]
// END RANK codeblock_140

codeblock_141 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return setmetatable({}, {__call = new})"]
// END RANK codeblock_141


}
