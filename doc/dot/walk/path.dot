digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 364"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-245"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9 section_10 section_11 section_12}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9 section_10 section_11 section_12}

header_2 [label="1 : Path"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

section_8 [label="section: 20-75"]

section_9 [label="section: 76-78"]

section_10 [label="section: 79-151"]

section_11 [label="section: 227-245"]

section_12 [label="section: 246-328"]


// END RANK section_1

header_2 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Path"]
// END RANK header_2

prose_3 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


// END RANK prose_3

raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


Let's make a little Path class that isn't just a string.
"]
// END RANK raw_14

prose_4 -> { raw_16}
{rank=same; raw_16}

raw_16 [label="raw"]


// END RANK prose_4

raw_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They need to be:
"]
// END RANK raw_16

prose_5 -> { raw_18}
{rank=same; raw_18}

raw_18 [label="raw"]


// END RANK prose_5

raw_18 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
-  Immutable. Adding to a path or substituting within it
   produces a new path; a path can't be changed once it's
   established.
"]
// END RANK raw_18

prose_6 -> { raw_20 prespace_21 literal_22 raw_23}
{rank=same; raw_20 prespace_21 literal_22 raw_23}

raw_20 [label="raw"]

prespace_21 [label="prespace"]

literal_22 [label="literal"]

raw_23 [label="raw"]


// END RANK prose_6

raw_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
-  Stringy. "]
// END RANK raw_20

prespace_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_21

literal_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_22

raw_23 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" gives us the literal string rep of
   the Path, __concat works (but immutably), and so on.
"]
// END RANK raw_23

prose_7 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


// END RANK prose_7

raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Paths are going to be heavily re-used and extended, first by Directories
and Files, and then we'll want to take a pass a making them grammatical
and extending their properties to the URI class.

"]
// END RANK raw_28

section_8 -> { header_30 prose_31 prose_32 prose_33 prose_34 prose_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 codeblock_43 codeblock_44}
{rank=same; header_30 prose_31 prose_32 prose_33 prose_34 prose_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 prose_42 codeblock_43 codeblock_44}

header_30 [label="2 : Fields"]

prose_31 [label="prose"]

prose_32 [label="prose"]

prose_33 [label="prose"]

prose_34 [label="prose"]

prose_35 [label="prose"]

prose_36 [label="prose"]

prose_37 [label="prose"]

prose_38 [label="prose"]

prose_39 [label="prose"]

prose_40 [label="prose"]

prose_41 [label="prose"]

prose_42 [label="prose"]

codeblock_43 [label="code block 52-55"]

codeblock_44 [label="code block 57-73"]


// END RANK section_8

header_30 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Fields"]
// END RANK header_30

prose_31 -> { raw_46}
{rank=same; raw_46}

raw_46 [label="raw"]


// END RANK prose_31

raw_46 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The array portion of Path tables is entirely strings.
"]
// END RANK raw_46

prose_32 -> { raw_48}
{rank=same; raw_48}

raw_48 [label="raw"]


// END RANK prose_32

raw_48 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Special characters, notably \"/\", are represented, by themselves,
as strings.
"]
// END RANK raw_48

prose_33 -> { raw_50}
{rank=same; raw_50}

raw_50 [label="raw"]


// END RANK prose_33

raw_50 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- Prototype
"]
// END RANK raw_50

prose_34 -> { raw_52 prespace_53 literal_54 raw_55}
{rank=same; raw_52 prespace_53 literal_54 raw_55}

raw_52 [label="raw"]

prespace_53 [label="prespace"]

literal_54 [label="literal"]

raw_55 [label="raw"]


// END RANK prose_34

raw_52 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  divider:  The dividing character,"]
// END RANK raw_52

prespace_53 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_53

literal_54 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/"]
// END RANK literal_54

raw_55 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in all sensible realms.
"]
// END RANK raw_55

prose_35 -> { raw_60 prespace_61 literal_62 raw_63}
{rank=same; raw_60 prespace_61 literal_62 raw_63}

raw_60 [label="raw"]

prespace_61 [label="prespace"]

literal_62 [label="literal"]

raw_63 [label="raw"]


// END RANK prose_35

raw_60 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  div_patt:  This is"]
// END RANK raw_60

prespace_61 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_61

literal_62 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%/"]
// END RANK literal_62

raw_63 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", in a quirk of Lua.
"]
// END RANK raw_63

prose_36 -> { raw_68}
{rank=same; raw_68}

raw_68 [label="raw"]


// END RANK prose_36

raw_68 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  parent_dir, same_dir:  Not currently used.
"]
// END RANK raw_68

prose_37 -> { raw_70}
{rank=same; raw_70}

raw_70 [label="raw"]


// END RANK prose_37

raw_70 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  isPath:  Always equal to the Path table.
"]
// END RANK raw_70

prose_38 -> { raw_72}
{rank=same; raw_72}

raw_72 [label="raw"]


// END RANK prose_38

raw_72 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- Instance
"]
// END RANK raw_72

prose_39 -> { raw_74 prespace_75 literal_76 raw_77}
{rank=same; raw_74 prespace_75 literal_76 raw_77}

raw_74 [label="raw"]

prespace_75 [label="prespace"]

literal_76 [label="literal"]

raw_77 [label="raw"]


// END RANK prose_39

raw_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  filename:  If present, the name of the file.  This will always be
               "]
// END RANK raw_74

prespace_75 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_75

literal_76 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_76

raw_77 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for a directory.
"]
// END RANK raw_77

prose_40 -> { raw_82 prespace_83 literal_84 raw_85 prespace_86 bold_87 raw_88}
{rank=same; raw_82 prespace_83 literal_84 raw_85 prespace_86 bold_87 raw_88}

raw_82 [label="raw"]

prespace_83 [label="prespace"]

literal_84 [label="literal"]

raw_85 [label="raw"]

prespace_86 [label="prespace"]

bold_87 [label="bold"]

raw_88 [label="raw"]


// END RANK prose_40

raw_82 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  isDir:  If"]
// END RANK raw_82

prespace_83 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_83

literal_84 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_84

raw_85 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", indicates the Path is structured to be a directory.
        It does"]
// END RANK raw_85

prespace_86 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_86

bold_87 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="not"]
// END RANK bold_87

raw_88 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" indicate that there is a real directory at this path.
"]
// END RANK raw_88

prose_41 -> { raw_96 prespace_97 literal_98 raw_99}
{rank=same; raw_96 prespace_97 literal_98 raw_99}

raw_96 [label="raw"]

prespace_97 [label="prespace"]

literal_98 [label="literal"]

raw_99 [label="raw"]


// END RANK prose_41

raw_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  str:  The string form of the path. "]
// END RANK raw_96

prespace_97 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_97

literal_98 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__tostring"]
// END RANK literal_98

raw_99 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" simply returns this,
           it is in-contract to read from this field.  Nothing but Path
           should write to it, which we won't enforce until we can do so
           at compile time.
"]
// END RANK raw_99

prose_42 -> { raw_104 prespace_105 literal_106 raw_107 prespace_108 literal_109 raw_110}
{rank=same; raw_104 prespace_105 literal_106 raw_107 prespace_108 literal_109 raw_110}

raw_104 [label="raw"]

prespace_105 [label="prespace"]

literal_106 [label="literal"]

raw_107 [label="raw"]

prespace_108 [label="prespace"]

literal_109 [label="literal"]

raw_110 [label="raw"]


// END RANK prose_42

raw_104 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ] #todo   Check memoized"]
// END RANK raw_104

prespace_105 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_105

literal_106 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__Path"]
// END RANK literal_106

raw_107 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" table during"]
// END RANK raw_107

prespace_108 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_108

literal_109 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__concat"]
// END RANK literal_109

raw_110 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_110

codeblock_43 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pl_path = require \"pl.path\"
local isdir, relpath = pl_path.isdir, pl_path.relpath"]
// END RANK codeblock_43

codeblock_44 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local new
local Path = {}
Path.__index = Path

local __Paths = {} -- one Path per real Path

local s = require \"status\" ()
s.angry = false

Path.it = require \"core/check\"

Path.divider = \"/\"
Path.div_patt = \"%/\"
Path.parent_dir = \"..\"
Path.same_dir = \".\""]
// END RANK codeblock_44

section_9 -> { header_120 prose_121}
{rank=same; header_120 prose_121}

header_120 [label="2 : Methods"]

prose_121 [label="prose"]


// END RANK section_9

header_120 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
** __conca"]
// END RANK header_120

prose_121 -> { raw_123}
{rank=same; raw_123}

raw_123 [label="raw"]


// END RANK prose_121

raw_123 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_123

section_10 -> { header_125 prose_126 prose_127 prose_128 prose_129 prose_130 prose_131 prose_132 prose_133 prose_134 prose_135 section_136 section_137}
{rank=same; header_125 prose_126 prose_127 prose_128 prose_129 prose_130 prose_131 prose_132 prose_133 prose_134 prose_135 section_136 section_137}

header_125 [label="2 : __concat"]

prose_126 [label="prose"]

prose_127 [label="prose"]

prose_128 [label="prose"]

prose_129 [label="prose"]

prose_130 [label="prose"]

prose_131 [label="prose"]

prose_132 [label="prose"]

prose_133 [label="prose"]

prose_134 [label="prose"]

prose_135 [label="prose"]

section_136 [label="section: 114-129"]

section_137 [label="section: 152-226"]


// END RANK section_10

header_125 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Concat retu"]
// END RANK header_125

prose_126 -> { raw_139}
{rank=same; raw_139}

raw_139 [label="raw"]


// END RANK prose_126

raw_139 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Concat returns a new path that is the synthesis of either a
string or another path.
"]
// END RANK raw_139

prose_127 -> { raw_141}
{rank=same; raw_141}

raw_141 [label="raw"]


// END RANK prose_127

raw_141 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- params
"]
// END RANK raw_141

prose_128 -> { raw_143}
{rank=same; raw_143}

raw_143 [label="raw"]


// END RANK prose_128

raw_143 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  head_path:  A Path. Cloned before concatenation.
"]
// END RANK raw_143

prose_129 -> { raw_145}
{rank=same; raw_145}

raw_145 [label="raw"]


// END RANK prose_129

raw_145 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  tail_path:  If a String, this is concatenated.  If the result is
           not a structurally valid string, this is complained about
           and nil is returned.
"]
// END RANK raw_145

prose_130 -> { raw_147}
{rank=same; raw_147}

raw_147 [label="raw"]


// END RANK prose_130

raw_147 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           If it's another Path, we want to do the right thing, and not
           make developers guess what that might be, so:
"]
// END RANK raw_147

prose_131 -> { raw_149 prespace_150 bold_151 raw_152 prespace_153 literal_154 raw_155 prespace_156 literal_157 raw_158}
{rank=same; raw_149 prespace_150 bold_151 raw_152 prespace_153 literal_154 raw_155 prespace_156 literal_157 raw_158}

raw_149 [label="raw"]

prespace_150 [label="prespace"]

bold_151 [label="bold"]

raw_152 [label="raw"]

prespace_153 [label="prespace"]

literal_154 [label="literal"]

raw_155 [label="raw"]

prespace_156 [label="prespace"]

literal_157 [label="literal"]

raw_158 [label="raw"]


// END RANK prose_131

raw_149 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           If it's two absolute Paths, then"]
// END RANK raw_149

prespace_150 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_150

bold_151 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="iff"]
// END RANK bold_151

raw_152 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" the tail_path nests in the
           head_path, the tail_path is returned.  So"]
// END RANK raw_152

prespace_153 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_153

literal_154 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"/usr/\" .. \"/usr/bin/\""]
// END RANK literal_154

raw_155 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           returns"]
// END RANK raw_155

prespace_156 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_156

literal_157 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"/usr/bin\""]
// END RANK literal_157

raw_158 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_158

prose_132 -> { raw_169 prespace_170 italic_171 raw_172 prespace_173 literal_174 raw_175 prespace_176 literal_177 raw_178 prespace_179 literal_180 raw_181}
{rank=same; raw_169 prespace_170 italic_171 raw_172 prespace_173 literal_174 raw_175 prespace_176 literal_177 raw_178 prespace_179 literal_180 raw_181}

raw_169 [label="raw"]

prespace_170 [label="prespace"]

italic_171 [label="italic"]

raw_172 [label="raw"]

prespace_173 [label="prespace"]

literal_174 [label="literal"]

raw_175 [label="raw"]

prespace_176 [label="prespace"]

literal_177 [label="literal"]

raw_178 [label="raw"]

prespace_179 [label="prespace"]

literal_180 [label="literal"]

raw_181 [label="raw"]


// END RANK prose_132

raw_169 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           If the tail_path is relative, then it's flexibly applied to the
           head_path. For a path that"]
// END RANK raw_169

prespace_170 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_170

italic_171 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="doesn't"]
// END RANK italic_171

raw_172 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" start with"]
// END RANK raw_172

prespace_173 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_173

literal_174 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="."]
// END RANK literal_174

raw_175 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_175

prespace_176 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_176

literal_177 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".."]
// END RANK literal_177

raw_178 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", or"]
// END RANK raw_178

prespace_179 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_179

literal_180 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
// END RANK literal_180

raw_181 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
           this is simple concatenation.
"]
// END RANK raw_181

prose_133 -> { raw_195 prespace_196 literal_197 raw_198 prespace_199 literal_200 raw_201}
{rank=same; raw_195 prespace_196 literal_197 raw_198 prespace_199 literal_200 raw_201}

raw_195 [label="raw"]

prespace_196 [label="prespace"]

literal_197 [label="literal"]

raw_198 [label="raw"]

prespace_199 [label="prespace"]

literal_200 [label="literal"]

raw_201 [label="raw"]


// END RANK prose_133

raw_195 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           Note that"]
// END RANK raw_195

prespace_196 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_196

literal_197 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__concat"]
// END RANK literal_197

raw_198 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" refuses to make \"foo//bar\" from \"foo/\"
           and \"/bar\", and similarly won't make \"/foobar\" from \"/foo\" and \"bar\". Both
           of these will return"]
// END RANK raw_198

prespace_199 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_199

literal_200 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_200

raw_201 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and the malformed string as the error. #nyi


"]
// END RANK raw_201

prose_134 -> { raw_209}
{rank=same; raw_209}

raw_209 [label="raw"]


// END RANK prose_134

raw_209 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- return
"]
// END RANK raw_209

prose_135 -> { raw_211}
{rank=same; raw_211}

raw_211 [label="raw"]


// END RANK prose_135

raw_211 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - A new Path.

"]
// END RANK raw_211

section_136 -> { header_213 prose_214 codeblock_215 section_216}
{rank=same; header_213 prose_214 codeblock_215 section_216}

header_213 [label="3 : clone(path)"]

prose_214 [label="prose"]

codeblock_215 [label="code block 118-127"]

section_216 [label="section: 130-151"]


// END RANK section_136

header_213 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ble stolen.

#!l"]
// END RANK header_213

prose_214 -> { raw_218}
{rank=same; raw_218}

raw_218 [label="raw"]


// END RANK prose_214

raw_218 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This returns a copy of the path with the metatable stolen.
"]
// END RANK raw_218

codeblock_215 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function clone(path)
  local new_path = {}
  for k,v in pairs(path) do
    new_path[k] = v
  end
  setmetatable(new_path, getmetatable(path))
  return new_path
end"]
// END RANK codeblock_215

section_216 -> { header_221 prose_222 codeblock_223}
{rank=same; header_221 prose_222 codeblock_223}

header_221 [label="4 : endsMatch(head, tail)"]

prose_222 [label="prose"]

codeblock_223 [label="code block 135-150"]


// END RANK section_216

header_221 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" heterosexual,
pathwise.

#"]
// END RANK header_221

prose_222 -> { raw_225}
{rank=same; raw_225}

raw_225 [label="raw"]


// END RANK prose_222

raw_225 -> leaf_226
leaf_226  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Takes two strings. Returns true if they are heterosexual,
pathwise.
"]
// END RANK raw_225

codeblock_223 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function endsMatch(head, tail)
   local div = Path.divider
   head_b = string.sub(head, -2, -1)
   tail_b = string.sub(tail, 1, 1)
   if div == head_b
      and div == tail_b then
      return false
   elseif div ~= head_b
      and div ~= tail_b then
      return false
   end

   return true
end"]
// END RANK codeblock_223

section_137 -> { header_228 prose_229 codeblock_230 codeblock_231}
{rank=same; header_228 prose_229 codeblock_230 codeblock_231}

header_228 [label="3 : stringAwk"]

prose_229 [label="prose"]

codeblock_230 [label="code block 156-190"]

codeblock_231 [label="code block 193-224"]


// END RANK section_137

header_228 -> leaf_232
leaf_232  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" add to them."]
// END RANK header_228

prose_229 -> { raw_233}
{rank=same; raw_233}

raw_233 [label="raw"]


// END RANK prose_229

raw_233 -> leaf_234
leaf_234  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is used twice, once to build new paths, and once to add to them.
"]
// END RANK raw_233

codeblock_230 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function stringAwk(path, str)
  local div, div_patt = Path.divider, Path.div_patt
  local phrase = \"\"
  local remain = str
    -- chew the string like Pac Man
  while remain  do
    local dir_index = string.find(remain, div_patt)
    if dir_index then
      -- add the handle minus div
      path[#path + 1] = string.sub(remain, 1, dir_index - 1)
      -- then the div
      path[#path + 1] = div
      local new_remain = string.sub(remain, dir_index + 1)
      assert(#new_remain < #remain, \"remain must decrease\")
      remain = new_remain
      if remain == \"\" then
        remain = nil
      end
    else
      -- file
      path[#path + 1] = remain
      path.filename = remain
      remain = nil
    end
  end
   local ps = path.str and path.str or str
  if isdir(ps) then
    path.isDir = true
      path.filename = nil
  end

  return path
end"]
// END RANK codeblock_230

codeblock_231 -> leaf_236
leaf_236  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __concat(head_path, tail_path)
  local new_path = clone(head_path)
  if type(tail_path) == 'string' then
    -- use the stringbuilder
      if not endsMatch(head_path[#head_path], tail_path) then
         return nil
      end
    local path_parts = stringAwk({}, tail_path)
    for _, v in ipairs(path_parts) do
      new_path[#new_path + 1] = v
    end

    new_path.str = new_path.str .. tail_path
    if isdir(new_path.str) then
      new_path.isDir = true
      new_path.filename = nil
    else
      new_path.filename = path_parts.filename
    end

    if __Paths[new_path.str] then
      return __Paths[new_path.str]
    end

      __Paths[new_path.str] = new_path
    return new_path
  else
    s:complain(\"NYI\", \"can only concatenate string at present\")
  end
end"]
// END RANK codeblock_231

section_11 -> { header_237 prose_238 codeblock_239}
{rank=same; header_237 prose_238 codeblock_239}

header_237 [label="2 : Path.parentDir(path)"]

prose_238 [label="prose"]

codeblock_239 [label="code block 231-243"]


// END RANK section_11

header_237 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ocal p_last = string.sub"]
// END RANK header_237

prose_238 -> { raw_241 prespace_242 literal_243 raw_244}
{rank=same; raw_241 prespace_242 literal_243 raw_244}

raw_241 [label="raw"]

prespace_242 [label="prespace"]

literal_243 [label="literal"]

raw_244 [label="raw"]


// END RANK prose_238

raw_241 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns the parent directory Path of"]
// END RANK raw_241

prespace_242 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_242

literal_243 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="path"]
// END RANK literal_243

raw_244 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_244

codeblock_239 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Path.parentDir(path)
   local parent = string.sub(path.str, 1, - (#path[#path] + 1))
   local p_last = string.sub(parent, -1)
   if p_last == \"/\" then
      return new(string.sub(parent, 1, -2))
   else
      return new(parent)
   end
end

"]
// END RANK codeblock_239

section_12 -> { header_250 prose_251 codeblock_252 section_253 section_254 section_255 section_256 section_257}
{rank=same; header_250 prose_251 codeblock_252 section_253 section_254 section_255 section_256 section_257}

header_250 [label="2 : __tostring"]

prose_251 [label="prose"]

codeblock_252 [label="code block 250-254"]

section_253 [label="section: 258-268"]

section_254 [label="section: 269-279"]

section_255 [label="section: 280-298"]

section_256 [label="section: 299-328"]

section_257 [label="section: 329-364"]


// END RANK section_12

header_250 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a builder func"]
// END RANK header_250

prose_251 -> { raw_259}
{rank=same; raw_259}

raw_259 [label="raw"]


// END RANK prose_251

raw_259 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Since we always have a path as a string, we simply return it.
"]
// END RANK raw_259

codeblock_252 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __tostring(path)
  return path.str
end"]
// END RANK codeblock_252

section_253 -> { header_262 prose_263 codeblock_264}
{rank=same; header_262 prose_263 codeblock_264}

header_262 [label="3 : fromString(str)"]

prose_263 [label="prose"]

codeblock_264 [label="code block 262-267"]


// END RANK section_253

header_262 -> leaf_265
leaf_265  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Awk(path, str, div, "]
// END RANK header_262

prose_263 -> { raw_266}
{rank=same; raw_266}

raw_266 [label="raw"]


// END RANK prose_263

raw_266 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a builder function and hence private.
"]
// END RANK raw_266

codeblock_264 -> leaf_268
leaf_268  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function fromString(path, str)
  local div, div_patt = Path.divider, Path.div_patt
  return stringAwk(path, str, div, div_patt)
end"]
// END RANK codeblock_264

section_254 -> { header_269 prose_270 codeblock_271}
{rank=same; header_269 prose_270 codeblock_271}

header_269 [label="3 : Path.relPath(path, rel)"]

prose_270 [label="prose"]

codeblock_271 [label="code block 271-277"]


// END RANK section_254

header_269 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Path.has(path, substr)

Retu"]
// END RANK header_269

prose_270 -> { raw_273}
{rank=same; raw_273}

raw_273 [label="raw"]


// END RANK prose_270

raw_273 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_273

codeblock_271 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Path.relPath(path, rel)
   local rel = tostring(rel)
   local rel_str = relpath(path.str, rel)
   return new(rel_str)
end"]
// END RANK codeblock_271

section_255 -> { header_276 prose_277 prose_278 codeblock_279}
{rank=same; header_276 prose_277 prose_278 codeblock_279}

header_276 [label="3 : Path.has(path, substr)"]

prose_277 [label="prose"]

prose_278 [label="prose"]

codeblock_279 [label="code block 286-296"]


// END RANK section_255

header_276 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for _, v in ipairs(path) d"]
// END RANK header_276

prose_277 -> { raw_281 prespace_282 literal_283 raw_284 prespace_285 literal_286 raw_287}
{rank=same; raw_281 prespace_282 literal_283 raw_284 prespace_285 literal_286 raw_287}

raw_281 [label="raw"]

prespace_282 [label="prespace"]

literal_283 [label="literal"]

raw_284 [label="raw"]

prespace_285 [label="prespace"]

literal_286 [label="literal"]

raw_287 [label="raw"]


// END RANK prose_277

raw_281 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns"]
// END RANK raw_281

prespace_282 -> leaf_289
leaf_289  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_282

literal_283 -> leaf_290
leaf_290  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_283

raw_284 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if the substring is present,"]
// END RANK raw_284

prespace_285 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_285

literal_286 -> leaf_293
leaf_293  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false"]
// END RANK literal_286

raw_287 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" otherwise.
"]
// END RANK raw_287

prose_278 -> { raw_295}
{rank=same; raw_295}

raw_295 [label="raw"]


// END RANK prose_278

raw_295 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Does not work with globs or partial matches.
"]
// END RANK raw_295

codeblock_279 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Path.has(path, substr)
   for _, v in ipairs(path) do
      if v == substr then
         return true
      end
   end

   return false
end"]
// END RANK codeblock_279

section_256 -> { header_298 prose_299 prose_300 codeblock_301}
{rank=same; header_298 prose_299 prose_300 codeblock_301}

header_298 [label="3 : new"]

prose_299 [label="prose"]

prose_300 [label="prose"]

codeblock_301 [label="code block 305-326"]


// END RANK section_256

header_298 -> leaf_302
leaf_302  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   __tos"]
// END RANK header_298

prose_299 -> { raw_303}
{rank=same; raw_303}

raw_303 [label="raw"]


// END RANK prose_299

raw_303 -> leaf_304
leaf_304  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Builds a Path from, currently, a string.
"]
// END RANK raw_303

prose_300 -> { raw_305}
{rank=same; raw_305}

raw_305 [label="raw"]


// END RANK prose_300

raw_305 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is the important use case.
"]
// END RANK raw_305

codeblock_301 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local PathMeta = {__index = Path,
                  __concat = __concat,
                  __tostring = __tostring}

new  = function (path_seed)
  if __Paths[path_seed] then
    return __Paths[path_seed]
  end
  local path = setmetatable({}, PathMeta)
  if type(path_seed) == 'string' then
    path.str = path_seed
    path =  fromString(path, path_seed)
  elseif type(path_seed) == 'table' then
    s:complain(\"NYI\", 'construction from a Path or other table is not yet implemented')
  end

  __Paths[path_seed] = path

  return path
end"]
// END RANK codeblock_301

section_257 -> { header_308 prose_309 prose_310 codeblock_311}
{rank=same; header_308 prose_309 prose_310 codeblock_311}

header_308 [label="3 : Constructor and flag"]

prose_309 [label="prose"]

prose_310 [label="prose"]

codeblock_311 [label="code block 337-342"]


// END RANK section_257

header_308 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ect can be compared to th"]
// END RANK header_308

prose_309 -> { raw_313}
{rank=same; raw_313}

raw_313 [label="raw"]


// END RANK prose_309

raw_313 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I think this does what I want for this class: it generates a Path on call,
and provides a table for reference equality.
"]
// END RANK raw_313

prose_310 -> { raw_315}
{rank=same; raw_315}

raw_315 [label="raw"]


// END RANK prose_310

raw_315 -> leaf_316
leaf_316  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The idea is that some aspect of an instance object can be compared to the
module as produced from \"require\".
"]
// END RANK raw_315

codeblock_311 -> leaf_317
leaf_317  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local PathCall = setmetatable({}, {__call = new})
Path.isPath = new
Path.idEst = new
return new"]
// END RANK codeblock_311


}
