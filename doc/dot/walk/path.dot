digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 291"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-193"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9 section_10 section_11}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9 section_10 section_11}

header_2 [label="1 : Path"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

section_8 [label="section: 20-68"]

section_9 [label="section: 69-71"]

section_10 [label="section: 72-122"]

section_11 [label="section: 194-223"]


// END RANK section_1

header_2 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Path"]
// END RANK header_2

prose_3 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


// END RANK prose_3

raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


Let's make a little Path class that isn't just a string.
"]
// END RANK raw_13

prose_4 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


// END RANK prose_4

raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They need to be:
"]
// END RANK raw_15

prose_5 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


// END RANK prose_5

raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
-  Immutable. Adding to a path or substituting within it
   produces a new path; a path can't be changed once it's
   established.
"]
// END RANK raw_17

prose_6 -> { raw_19 prespace_20 literal_21 raw_22}
{rank=same; raw_19 prespace_20 literal_21 raw_22}

raw_19 [label="raw"]

prespace_20 [label="prespace"]

literal_21 [label="literal"]

raw_22 [label="raw"]


// END RANK prose_6

raw_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
-  Stringy. "]
// END RANK raw_19

prespace_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_20

literal_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_21

raw_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" gives us the literal string rep of
   the Path, __concat works (but immutably), and so on.
"]
// END RANK raw_22

prose_7 -> { raw_27}
{rank=same; raw_27}

raw_27 [label="raw"]


// END RANK prose_7

raw_27 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Paths are going to be heavily re-used and extended, first by Directories
and Files, and then we'll want to take a pass a making them grammatical
and extending their properties to the URI class.

"]
// END RANK raw_27

section_8 -> { header_29 prose_30 prose_31 prose_32 prose_33 prose_34 prose_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 codeblock_42}
{rank=same; header_29 prose_30 prose_31 prose_32 prose_33 prose_34 prose_35 prose_36 prose_37 prose_38 prose_39 prose_40 prose_41 codeblock_42}

header_29 [label="2 : Fields"]

prose_30 [label="prose"]

prose_31 [label="prose"]

prose_32 [label="prose"]

prose_33 [label="prose"]

prose_34 [label="prose"]

prose_35 [label="prose"]

prose_36 [label="prose"]

prose_37 [label="prose"]

prose_38 [label="prose"]

prose_39 [label="prose"]

prose_40 [label="prose"]

prose_41 [label="prose"]

codeblock_42 [label="code block 52-66"]


// END RANK section_8

header_29 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Fields"]
// END RANK header_29

prose_30 -> { raw_44}
{rank=same; raw_44}

raw_44 [label="raw"]


// END RANK prose_30

raw_44 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The array portion of Path tables is entirely strings.
"]
// END RANK raw_44

prose_31 -> { raw_46}
{rank=same; raw_46}

raw_46 [label="raw"]


// END RANK prose_31

raw_46 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Special characters, notably \"/\", are represented, by themselves,
as strings.
"]
// END RANK raw_46

prose_32 -> { raw_48}
{rank=same; raw_48}

raw_48 [label="raw"]


// END RANK prose_32

raw_48 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- Prototype
"]
// END RANK raw_48

prose_33 -> { raw_50 prespace_51 literal_52 raw_53}
{rank=same; raw_50 prespace_51 literal_52 raw_53}

raw_50 [label="raw"]

prespace_51 [label="prespace"]

literal_52 [label="literal"]

raw_53 [label="raw"]


// END RANK prose_33

raw_50 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  divider:  The dividing character,"]
// END RANK raw_50

prespace_51 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_51

literal_52 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/"]
// END RANK literal_52

raw_53 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in all sensible realms.
"]
// END RANK raw_53

prose_34 -> { raw_58 prespace_59 literal_60 raw_61}
{rank=same; raw_58 prespace_59 literal_60 raw_61}

raw_58 [label="raw"]

prespace_59 [label="prespace"]

literal_60 [label="literal"]

raw_61 [label="raw"]


// END RANK prose_34

raw_58 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  div_patt:  This is"]
// END RANK raw_58

prespace_59 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_59

literal_60 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%/"]
// END RANK literal_60

raw_61 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", in a quirk of Lua.
"]
// END RANK raw_61

prose_35 -> { raw_66}
{rank=same; raw_66}

raw_66 [label="raw"]


// END RANK prose_35

raw_66 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  parent_dir, same_dir:  Not currently used.
"]
// END RANK raw_66

prose_36 -> { raw_68}
{rank=same; raw_68}

raw_68 [label="raw"]


// END RANK prose_36

raw_68 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  isPath:  Always equal to the Path table.
"]
// END RANK raw_68

prose_37 -> { raw_70}
{rank=same; raw_70}

raw_70 [label="raw"]


// END RANK prose_37

raw_70 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- Instance
"]
// END RANK raw_70

prose_38 -> { raw_72 prespace_73 literal_74 raw_75}
{rank=same; raw_72 prespace_73 literal_74 raw_75}

raw_72 [label="raw"]

prespace_73 [label="prespace"]

literal_74 [label="literal"]

raw_75 [label="raw"]


// END RANK prose_38

raw_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  filename:  If present, the name of the file.  This will always be
               "]
// END RANK raw_72

prespace_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_73

literal_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_74

raw_75 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for a directory.
"]
// END RANK raw_75

prose_39 -> { raw_80 prespace_81 literal_82 raw_83 prespace_84 bold_85 raw_86}
{rank=same; raw_80 prespace_81 literal_82 raw_83 prespace_84 bold_85 raw_86}

raw_80 [label="raw"]

prespace_81 [label="prespace"]

literal_82 [label="literal"]

raw_83 [label="raw"]

prespace_84 [label="prespace"]

bold_85 [label="bold"]

raw_86 [label="raw"]


// END RANK prose_39

raw_80 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  isDir:  If"]
// END RANK raw_80

prespace_81 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_81

literal_82 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_82

raw_83 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", indicates the Path is structured to be a directory.
        It does"]
// END RANK raw_83

prespace_84 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_84

bold_85 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="not"]
// END RANK bold_85

raw_86 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" indicate that there is a real directory at this path.
"]
// END RANK raw_86

prose_40 -> { raw_94 prespace_95 literal_96 raw_97}
{rank=same; raw_94 prespace_95 literal_96 raw_97}

raw_94 [label="raw"]

prespace_95 [label="prespace"]

literal_96 [label="literal"]

raw_97 [label="raw"]


// END RANK prose_40

raw_94 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  str:  The string form of the path. "]
// END RANK raw_94

prespace_95 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_95

literal_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__tostring"]
// END RANK literal_96

raw_97 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" simply returns this,
           it is in-contract to read from this field.  Nothing but Path
           should write to it, which we won't enforce until we can do so
           at compile time.
"]
// END RANK raw_97

prose_41 -> { raw_102 prespace_103 literal_104 raw_105 prespace_106 literal_107 raw_108}
{rank=same; raw_102 prespace_103 literal_104 raw_105 prespace_106 literal_107 raw_108}

raw_102 [label="raw"]

prespace_103 [label="prespace"]

literal_104 [label="literal"]

raw_105 [label="raw"]

prespace_106 [label="prespace"]

literal_107 [label="literal"]

raw_108 [label="raw"]


// END RANK prose_41

raw_102 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ] #todo   Check memoized"]
// END RANK raw_102

prespace_103 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_103

literal_104 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__Path"]
// END RANK literal_104

raw_105 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" table during"]
// END RANK raw_105

prespace_106 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_106

literal_107 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__concat"]
// END RANK literal_107

raw_108 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_108

codeblock_42 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Path = setmetatable({}, {__index = Path})
local __Paths = {} -- one Path per real Path

local s = require \"status\" ()
s.angry = false
Path.isPath = Path

Path.it = require \"core/check\"

Path.divider = \"/\"
Path.div_patt = \"%/\"
Path.parent_dir = \"..\"
Path.same_dir = \".\""]
// END RANK codeblock_42

section_9 -> { header_117 prose_118}
{rank=same; header_117 prose_118}

header_117 [label="2 : Methods"]

prose_118 [label="prose"]


// END RANK section_9

header_117 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
** __conca"]
// END RANK header_117

prose_118 -> { raw_120}
{rank=same; raw_120}

raw_120 [label="raw"]


// END RANK prose_118

raw_120 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_120

section_10 -> { header_122 prose_123 prose_124 prose_125 prose_126 prose_127 prose_128 prose_129 prose_130 prose_131 section_132 section_133}
{rank=same; header_122 prose_123 prose_124 prose_125 prose_126 prose_127 prose_128 prose_129 prose_130 prose_131 section_132 section_133}

header_122 [label="2 : __concat"]

prose_123 [label="prose"]

prose_124 [label="prose"]

prose_125 [label="prose"]

prose_126 [label="prose"]

prose_127 [label="prose"]

prose_128 [label="prose"]

prose_129 [label="prose"]

prose_130 [label="prose"]

prose_131 [label="prose"]

section_132 [label="section: 106-122"]

section_133 [label="section: 123-193"]


// END RANK section_10

header_122 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Concat retu"]
// END RANK header_122

prose_123 -> { raw_135}
{rank=same; raw_135}

raw_135 [label="raw"]


// END RANK prose_123

raw_135 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Concat returns a new path that is the synthesis of either a
string or another path.
"]
// END RANK raw_135

prose_124 -> { raw_137}
{rank=same; raw_137}

raw_137 [label="raw"]


// END RANK prose_124

raw_137 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- params
"]
// END RANK raw_137

prose_125 -> { raw_139}
{rank=same; raw_139}

raw_139 [label="raw"]


// END RANK prose_125

raw_139 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  head_path:  A Path. Cloned before concatenation.
"]
// END RANK raw_139

prose_126 -> { raw_141}
{rank=same; raw_141}

raw_141 [label="raw"]


// END RANK prose_126

raw_141 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  tail_path:  If a String, this is concatenated.  If the result is
           not a structurally valid string, this is complained about
           and nil is returned.
"]
// END RANK raw_141

prose_127 -> { raw_143}
{rank=same; raw_143}

raw_143 [label="raw"]


// END RANK prose_127

raw_143 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           If it's another Path, we want to do the right thing, and not
           make developers guess what that might be, so:
"]
// END RANK raw_143

prose_128 -> { raw_145 prespace_146 bold_147 raw_148 prespace_149 literal_150 raw_151 prespace_152 literal_153 raw_154}
{rank=same; raw_145 prespace_146 bold_147 raw_148 prespace_149 literal_150 raw_151 prespace_152 literal_153 raw_154}

raw_145 [label="raw"]

prespace_146 [label="prespace"]

bold_147 [label="bold"]

raw_148 [label="raw"]

prespace_149 [label="prespace"]

literal_150 [label="literal"]

raw_151 [label="raw"]

prespace_152 [label="prespace"]

literal_153 [label="literal"]

raw_154 [label="raw"]


// END RANK prose_128

raw_145 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           If it's two absolute Paths, then"]
// END RANK raw_145

prespace_146 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_146

bold_147 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label="iff"]
// END RANK bold_147

raw_148 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" the tail_path nests in the
           head_path, the tail_path is returned.  So"]
// END RANK raw_148

prespace_149 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_149

literal_150 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"/usr/\" .. \"/usr/bin/\""]
// END RANK literal_150

raw_151 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           returns"]
// END RANK raw_151

prespace_152 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_152

literal_153 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"/usr/bin\""]
// END RANK literal_153

raw_154 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_154

prose_129 -> { raw_165 prespace_166 italic_167 raw_168 prespace_169 literal_170 raw_171 prespace_172 literal_173 raw_174 prespace_175 literal_176 raw_177}
{rank=same; raw_165 prespace_166 italic_167 raw_168 prespace_169 literal_170 raw_171 prespace_172 literal_173 raw_174 prespace_175 literal_176 raw_177}

raw_165 [label="raw"]

prespace_166 [label="prespace"]

italic_167 [label="italic"]

raw_168 [label="raw"]

prespace_169 [label="prespace"]

literal_170 [label="literal"]

raw_171 [label="raw"]

prespace_172 [label="prespace"]

literal_173 [label="literal"]

raw_174 [label="raw"]

prespace_175 [label="prespace"]

literal_176 [label="literal"]

raw_177 [label="raw"]


// END RANK prose_129

raw_165 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           If the tail_path is relative, then it's flexibly applied to the
           head_path. For a path that"]
// END RANK raw_165

prespace_166 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_166

italic_167 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label="doesn't"]
// END RANK italic_167

raw_168 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" start with"]
// END RANK raw_168

prespace_169 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_169

literal_170 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="."]
// END RANK literal_170

raw_171 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_171

prespace_172 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_172

literal_173 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".."]
// END RANK literal_173

raw_174 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", or"]
// END RANK raw_174

prespace_175 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_175

literal_176 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
// END RANK literal_176

raw_177 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
           this is simple concatenation.
"]
// END RANK raw_177

prose_130 -> { raw_191 prespace_192 literal_193 raw_194 prespace_195 literal_196 raw_197}
{rank=same; raw_191 prespace_192 literal_193 raw_194 prespace_195 literal_196 raw_197}

raw_191 [label="raw"]

prespace_192 [label="prespace"]

literal_193 [label="literal"]

raw_194 [label="raw"]

prespace_195 [label="prespace"]

literal_196 [label="literal"]

raw_197 [label="raw"]


// END RANK prose_130

raw_191 -> leaf_198
leaf_198  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           Note that"]
// END RANK raw_191

prespace_192 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_192

literal_193 -> leaf_200
leaf_200  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__concat"]
// END RANK literal_193

raw_194 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" refuses to make \"foo//bar\" from \"foo/\"
           and \"/bar\", and similarly won't make \"/foobar\" from \"/foo\" and \"bar\". Both
           of these will return"]
// END RANK raw_194

prespace_195 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_195

literal_196 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_196

raw_197 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and the malformed string as the error. #nyi


"]
// END RANK raw_197

prose_131 -> { raw_205}
{rank=same; raw_205}

raw_205 [label="raw"]


// END RANK prose_131

raw_205 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- return
  - A new Path.

"]
// END RANK raw_205

section_132 -> { header_207 prose_208 codeblock_209}
{rank=same; header_207 prose_208 codeblock_209}

header_207 [label="3 : clone(path)"]

prose_208 [label="prose"]

codeblock_209 [label="code block 110-120"]


// END RANK section_132

header_207 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ble stolen.

#!l"]
// END RANK header_207

prose_208 -> { raw_211}
{rank=same; raw_211}

raw_211 [label="raw"]


// END RANK prose_208

raw_211 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This returns a copy of the path with the metatable stolen.
"]
// END RANK raw_211

codeblock_209 -> leaf_213
leaf_213  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function clone(path)
  local new_path = {}
  for k,v in pairs(path) do
    new_path[k] = v
  end
  setmetatable(new_path, getmetatable(path))
  return new_path
end
"]
// END RANK codeblock_209

section_133 -> { header_214 prose_215 codeblock_216 prose_217 codeblock_218}
{rank=same; header_214 prose_215 codeblock_216 prose_217 codeblock_218}

header_214 [label="3 : stringAwk"]

prose_215 [label="prose"]

codeblock_216 [label="code block 127-160"]

prose_217 [label="prose"]

codeblock_218 [label="code block 168-191"]


// END RANK section_133

header_214 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" add to them."]
// END RANK header_214

prose_215 -> { raw_220}
{rank=same; raw_220}

raw_220 [label="raw"]


// END RANK prose_215

raw_220 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is used twice, once to build new paths, and once to add to them.
"]
// END RANK raw_220

codeblock_216 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function stringAwk(path, str)
  local div, div_patt = Path.divider, Path.div_patt
  local phrase = \"\"
  local remain = string.sub(str, 2)
  path[1] = div
    -- chew the string like Pac Man
  while remain  do
    local dir_index = string.find(remain, div_patt)
    if dir_index then
      -- add the handle minus div
      path[#path + 1] = string.sub(remain, 1, dir_index - 1)
      -- then the div
      path[#path + 1] = div
      local new_remain = string.sub(remain, dir_index + 1)
      assert(#new_remain < #remain, \"remain must decrease\")
      remain = new_remain
      if remain == \"\" then
        remain = nil
      end
    else
      -- file
      path[#path + 1] = remain
      path.filename = remain
      remain = nil
    end
  end
  if not path.filename then
    path.isDir = true
  end

  return path
end"]
// END RANK codeblock_216

prose_217 -> { raw_223}
{rank=same; raw_223}

raw_223 [label="raw"]


// END RANK prose_217

raw_223 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ]  #todo add a guard against file-file and dir-dir
       interaction, if this actually happens enough to get
       annoying.
"]
// END RANK raw_223

codeblock_218 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __concat(head_path, tail_path)
  local new_path = clone(head_path)
  if type(tail_path) == 'string' then
    -- use the stringbuilder
    local path_parts = stringAwk({}, tail_path)
    for _, v in ipairs(path_parts) do
      new_path[#new_path + 1] = v
    end

    new_path.str = new_path.str .. tail_path
    if string.sub(new_path.str, -1) == Path.divider then
      new_path.isDir = true
      new_path.filename = nil
    else
      new_path.filename = path_parts.filename
    end

    return new_path
  else
    s:complain(\"NYI\", \"can only concatenate string at present\")
  end
end"]
// END RANK codeblock_218

section_11 -> { header_226 prose_227 codeblock_228 section_229 section_230}
{rank=same; header_226 prose_227 codeblock_228 section_229 section_230}

header_226 [label="2 : __tostring"]

prose_227 [label="prose"]

codeblock_228 [label="code block 198-202"]

section_229 [label="section: 206-223"]

section_230 [label="section: 224-291"]


// END RANK section_11

header_226 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label="is is a builde"]
// END RANK header_226

prose_227 -> { raw_232}
{rank=same; raw_232}

raw_232 [label="raw"]


// END RANK prose_227

raw_232 -> leaf_233
leaf_233  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Since we always have a path as a string, we simply return it.
"]
// END RANK raw_232

codeblock_228 -> leaf_234
leaf_234  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __tostring(path)
  return path.str
end"]
// END RANK codeblock_228

section_229 -> { header_235 prose_236 codeblock_237}
{rank=same; header_235 prose_236 codeblock_237}

header_235 [label="3 : fromString(str)"]

prose_236 [label="prose"]

codeblock_237 [label="code block 210-221"]


// END RANK section_229

header_235 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ng.sub(str, 1, 1) ~="]
// END RANK header_235

prose_236 -> { raw_239}
{rank=same; raw_239}

raw_239 [label="raw"]


// END RANK prose_236

raw_239 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a builder function and hence private.
"]
// END RANK raw_239

codeblock_237 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function fromString(path, str)
  local div, div_patt = Path.divider, Path.div_patt
  if string.sub(str, 1, 1) ~= div and not catting then
    local msg = \"Paths must be absolute and start with \" .. div
    s:complain(\"validation error\", msg)
    return nil, msg
  else
    return stringAwk(path, str, div, div_patt)
  end
end"]
// END RANK codeblock_237

section_230 -> { header_242 prose_243 prose_244 codeblock_245 prose_246 codeblock_247 codeblock_248}
{rank=same; header_242 prose_243 prose_244 codeblock_245 prose_246 codeblock_247 codeblock_248}

header_242 [label="3 : new"]

prose_243 [label="prose"]

prose_244 [label="prose"]

codeblock_245 [label="code block 230-249"]

prose_246 [label="prose"]

codeblock_247 [label="code block 253-265"]

codeblock_248 [label="code block 267-269"]


// END RANK section_230

header_242 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nd
	loca"]
// END RANK header_242

prose_243 -> { raw_250}
{rank=same; raw_250}

raw_250 [label="raw"]


// END RANK prose_243

raw_250 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Builds a Path from, currently, a string.
"]
// END RANK raw_250

prose_244 -> { raw_252}
{rank=same; raw_252}

raw_252 [label="raw"]


// END RANK prose_244

raw_252 -> leaf_253
leaf_253  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is the important use case.
"]
// END RANK raw_252

codeblock_245 -> leaf_254
leaf_254  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new (_, path_seed)
  if __Paths[path_seed] then
    return __Paths[path_seed]
  end
  local path = setmetatable({}, {__index = Path,
                               __concat = __concat,
                               __tostring = __tostring})
  if type(path_seed) == 'string' then
    path.str = path_seed
    path =  fromString(path, path_seed)
  elseif type(path_seed) == 'table' then
    s:complain(\"NYI\", 'construction from a Path or other table is not yet implemented')
  end

  __Paths[path_seed] = path

  return path
end"]
// END RANK codeblock_245

prose_246 -> { raw_255}
{rank=same; raw_255}

raw_255 [label="raw"]


// END RANK prose_246

raw_255 -> leaf_256
leaf_256  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is complex and worse, it isn't working.
"]
// END RANK raw_255

codeblock_247 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Path.spec(path)
  local a = new(_, \"/core/build/\")
  assert(#a == 5, \"a must equal 5 not\" .. #a)
  assert(a[1] == \"/\", \"a must start with /\")
  local b = clone(a)
  assert(#b == 5, \"b must equal 5\")
  assert(b[1] == \"/\", \"b must start with /\")
  assert(a.str == b.str, \"a and b must have the same str\")
  local c = a .. \"/bar\"
end
Path.spec()"]
// END RANK codeblock_247

codeblock_248 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return setmetatable({}, {__call = new})"]
// END RANK codeblock_248


}
