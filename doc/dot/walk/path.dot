digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 288"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-194"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9 section_10 section_11}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9 section_10 section_11}

header_2 [label="1 : Path #Todo"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

section_8 [label="section: 20-61"]

section_9 [label="section: 62-64"]

section_10 [label="section: 65-119"]

section_11 [label="section: 195-224"]


// END RANK section_1

header_2 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Path #Todo"]
// END RANK header_2

prose_3 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


// END RANK prose_3

raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


Let's make a little Path class that isn't just a string.
"]
// END RANK raw_13

prose_4 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


// END RANK prose_4

raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They need to be:
"]
// END RANK raw_15

prose_5 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


// END RANK prose_5

raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
-  Immutable. Adding to a path or substituting within it
   produces a new path; a path can't be changed once it's
   established.
"]
// END RANK raw_17

prose_6 -> { raw_19 prespace_20 literal_21 raw_22}
{rank=same; raw_19 prespace_20 literal_21 raw_22}

raw_19 [label="raw"]

prespace_20 [label="prespace"]

literal_21 [label="literal"]

raw_22 [label="raw"]


// END RANK prose_6

raw_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
-  Stringy. "]
// END RANK raw_19

prespace_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_20

literal_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_21

raw_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" gives us the literal string rep of
   the Path, __concat works (but immutably), and so on.
"]
// END RANK raw_22

prose_7 -> { raw_27}
{rank=same; raw_27}

raw_27 [label="raw"]


// END RANK prose_7

raw_27 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Paths are going to be heavily re-used and extended, first by Directories
and Files, and then we'll want to take a pass a making them grammatical
and extending their properties to the URI class.

"]
// END RANK raw_27

section_8 -> { header_29 prose_30 prose_31 prose_32 prose_33 prose_34 prose_35 prose_36 prose_37 prose_38 prose_39 prose_40 codeblock_41}
{rank=same; header_29 prose_30 prose_31 prose_32 prose_33 prose_34 prose_35 prose_36 prose_37 prose_38 prose_39 prose_40 codeblock_41}

header_29 [label="2 : Fields"]

prose_30 [label="prose"]

prose_31 [label="prose"]

prose_32 [label="prose"]

prose_33 [label="prose"]

prose_34 [label="prose"]

prose_35 [label="prose"]

prose_36 [label="prose"]

prose_37 [label="prose"]

prose_38 [label="prose"]

prose_39 [label="prose"]

prose_40 [label="prose"]

codeblock_41 [label="code block 47-59"]


// END RANK section_8

header_29 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Fields"]
// END RANK header_29

prose_30 -> { raw_43}
{rank=same; raw_43}

raw_43 [label="raw"]


// END RANK prose_30

raw_43 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The array portion of Path tables is entirely strings.
"]
// END RANK raw_43

prose_31 -> { raw_45}
{rank=same; raw_45}

raw_45 [label="raw"]


// END RANK prose_31

raw_45 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Special characters, notably \"/\", are represented, by themselves,
as strings.
"]
// END RANK raw_45

prose_32 -> { raw_47}
{rank=same; raw_47}

raw_47 [label="raw"]


// END RANK prose_32

raw_47 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- Prototype
"]
// END RANK raw_47

prose_33 -> { raw_49 prespace_50 literal_51 raw_52}
{rank=same; raw_49 prespace_50 literal_51 raw_52}

raw_49 [label="raw"]

prespace_50 [label="prespace"]

literal_51 [label="literal"]

raw_52 [label="raw"]


// END RANK prose_33

raw_49 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  divider:  The dividing character,"]
// END RANK raw_49

prespace_50 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_50

literal_51 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/"]
// END RANK literal_51

raw_52 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in all sensible realms.
"]
// END RANK raw_52

prose_34 -> { raw_57 prespace_58 literal_59 raw_60}
{rank=same; raw_57 prespace_58 literal_59 raw_60}

raw_57 [label="raw"]

prespace_58 [label="prespace"]

literal_59 [label="literal"]

raw_60 [label="raw"]


// END RANK prose_34

raw_57 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  div_patt:  This is"]
// END RANK raw_57

prespace_58 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_58

literal_59 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%/"]
// END RANK literal_59

raw_60 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", in a quirk of Lua.
"]
// END RANK raw_60

prose_35 -> { raw_65}
{rank=same; raw_65}

raw_65 [label="raw"]


// END RANK prose_35

raw_65 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  parent_dir, same_dir:  Not currently used.
"]
// END RANK raw_65

prose_36 -> { raw_67}
{rank=same; raw_67}

raw_67 [label="raw"]


// END RANK prose_36

raw_67 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  isPath:  Always equal to the Path table.
"]
// END RANK raw_67

prose_37 -> { raw_69}
{rank=same; raw_69}

raw_69 [label="raw"]


// END RANK prose_37

raw_69 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- Instance
"]
// END RANK raw_69

prose_38 -> { raw_71}
{rank=same; raw_71}

raw_71 [label="raw"]


// END RANK prose_38

raw_71 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  filename:  If present, the name of the file.
"]
// END RANK raw_71

prose_39 -> { raw_73 prespace_74 literal_75 raw_76 prespace_77 bold_78 raw_79}
{rank=same; raw_73 prespace_74 literal_75 raw_76 prespace_77 bold_78 raw_79}

raw_73 [label="raw"]

prespace_74 [label="prespace"]

literal_75 [label="literal"]

raw_76 [label="raw"]

prespace_77 [label="prespace"]

bold_78 [label="bold"]

raw_79 [label="raw"]


// END RANK prose_39

raw_73 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  isDir:  If"]
// END RANK raw_73

prespace_74 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_74

literal_75 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_75

raw_76 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", indicates the Path is structured to be a directory.
        It does"]
// END RANK raw_76

prespace_77 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_77

bold_78 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="not"]
// END RANK bold_78

raw_79 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" indicate that there is a real directory at this path.
"]
// END RANK raw_79

prose_40 -> { raw_87}
{rank=same; raw_87}

raw_87 [label="raw"]


// END RANK prose_40

raw_87 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  str:  The string form of the path.

"]
// END RANK raw_87

codeblock_41 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Path = {}
local s = require \"status\" ()
s.angry = true

Path.__index = Path
Path.isPath = Path

Path.divider = \"/\"
Path.div_patt = \"%/\"
Path.parent_dir = \"..\"
Path.same_dir = \".\""]
// END RANK codeblock_41

section_9 -> { header_90 prose_91}
{rank=same; header_90 prose_91}

header_90 [label="2 : Methods"]

prose_91 [label="prose"]


// END RANK section_9

header_90 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ds


** __c"]
// END RANK header_90

prose_91 -> { raw_93}
{rank=same; raw_93}

raw_93 [label="raw"]


// END RANK prose_91

raw_93 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_93

section_10 -> { header_95 prose_96 prose_97 prose_98 prose_99 prose_100 prose_101 prose_102 prose_103 prose_104 codeblock_105 section_106 section_107}
{rank=same; header_95 prose_96 prose_97 prose_98 prose_99 prose_100 prose_101 prose_102 prose_103 prose_104 codeblock_105 section_106 section_107}

header_95 [label="2 : __concat"]

prose_96 [label="prose"]

prose_97 [label="prose"]

prose_98 [label="prose"]

prose_99 [label="prose"]

prose_100 [label="prose"]

prose_101 [label="prose"]

prose_102 [label="prose"]

prose_103 [label="prose"]

prose_104 [label="prose"]

codeblock_105 [label="code block 98-100"]

section_106 [label="section: 103-119"]

section_107 [label="section: 120-194"]


// END RANK section_10

header_95 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cat

Concat "]
// END RANK header_95

prose_96 -> { raw_109}
{rank=same; raw_109}

raw_109 [label="raw"]


// END RANK prose_96

raw_109 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Concat returns a new path that is the synthesis of either a
string or another path.
"]
// END RANK raw_109

prose_97 -> { raw_111}
{rank=same; raw_111}

raw_111 [label="raw"]


// END RANK prose_97

raw_111 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- params
"]
// END RANK raw_111

prose_98 -> { raw_113}
{rank=same; raw_113}

raw_113 [label="raw"]


// END RANK prose_98

raw_113 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  head_path:  A Path. Cloned before concatenation.
"]
// END RANK raw_113

prose_99 -> { raw_115}
{rank=same; raw_115}

raw_115 [label="raw"]


// END RANK prose_99

raw_115 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  tail_path:  If a String, this is concatenated.  If the result is
           not a structurally valid string, this is complained about
           and nil is returned.
"]
// END RANK raw_115

prose_100 -> { raw_117}
{rank=same; raw_117}

raw_117 [label="raw"]


// END RANK prose_100

raw_117 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           If it's another Path, we want to do the right thing, and not
           make developers guess what that might be, so:
"]
// END RANK raw_117

prose_101 -> { raw_119 prespace_120 bold_121 raw_122 prespace_123 literal_124 raw_125 prespace_126 literal_127 raw_128}
{rank=same; raw_119 prespace_120 bold_121 raw_122 prespace_123 literal_124 raw_125 prespace_126 literal_127 raw_128}

raw_119 [label="raw"]

prespace_120 [label="prespace"]

bold_121 [label="bold"]

raw_122 [label="raw"]

prespace_123 [label="prespace"]

literal_124 [label="literal"]

raw_125 [label="raw"]

prespace_126 [label="prespace"]

literal_127 [label="literal"]

raw_128 [label="raw"]


// END RANK prose_101

raw_119 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           If it's two absolute Paths, then"]
// END RANK raw_119

prespace_120 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_120

bold_121 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="iff"]
// END RANK bold_121

raw_122 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" the tail_path nests in the
           head_path, the tail_path is returned.  So"]
// END RANK raw_122

prespace_123 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_123

literal_124 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"/usr/\" .. \"/usr/bin/\""]
// END RANK literal_124

raw_125 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           returns"]
// END RANK raw_125

prespace_126 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_126

literal_127 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"/usr/bin\""]
// END RANK literal_127

raw_128 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_128

prose_102 -> { raw_139 prespace_140 italic_141 raw_142 prespace_143 literal_144 raw_145 prespace_146 literal_147 raw_148 prespace_149 literal_150 raw_151}
{rank=same; raw_139 prespace_140 italic_141 raw_142 prespace_143 literal_144 raw_145 prespace_146 literal_147 raw_148 prespace_149 literal_150 raw_151}

raw_139 [label="raw"]

prespace_140 [label="prespace"]

italic_141 [label="italic"]

raw_142 [label="raw"]

prespace_143 [label="prespace"]

literal_144 [label="literal"]

raw_145 [label="raw"]

prespace_146 [label="prespace"]

literal_147 [label="literal"]

raw_148 [label="raw"]

prespace_149 [label="prespace"]

literal_150 [label="literal"]

raw_151 [label="raw"]


// END RANK prose_102

raw_139 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           If the tail_path is relative, then it's flexibly applied to the
           head_path. For a path that"]
// END RANK raw_139

prespace_140 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_140

italic_141 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="doesn't"]
// END RANK italic_141

raw_142 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" start with"]
// END RANK raw_142

prespace_143 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_143

literal_144 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label="."]
// END RANK literal_144

raw_145 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_145

prespace_146 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_146

literal_147 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".."]
// END RANK literal_147

raw_148 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", or"]
// END RANK raw_148

prespace_149 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_149

literal_150 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
// END RANK literal_150

raw_151 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
           this is simple concatenation.
"]
// END RANK raw_151

prose_103 -> { raw_165 prespace_166 literal_167 raw_168 prespace_169 literal_170 raw_171}
{rank=same; raw_165 prespace_166 literal_167 raw_168 prespace_169 literal_170 raw_171}

raw_165 [label="raw"]

prespace_166 [label="prespace"]

literal_167 [label="literal"]

raw_168 [label="raw"]

prespace_169 [label="prespace"]

literal_170 [label="literal"]

raw_171 [label="raw"]


// END RANK prose_103

raw_165 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           Note that"]
// END RANK raw_165

prespace_166 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_166

literal_167 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__concat"]
// END RANK literal_167

raw_168 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" refuses to make \"foo//bar\" from \"foo/\"
           and \"/bar\", and similarly won't make \"/foobar\" from \"/foo\" and \"bar\". Both
           of these will return"]
// END RANK raw_168

prespace_169 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_169

literal_170 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_170

raw_171 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and the malformed string as the error. #nyi


"]
// END RANK raw_171

prose_104 -> { raw_179}
{rank=same; raw_179}

raw_179 [label="raw"]


// END RANK prose_104

raw_179 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- return
  - A new Path.
"]
// END RANK raw_179

codeblock_105 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local new      -- function"]
// END RANK codeblock_105

section_106 -> { header_182 prose_183 codeblock_184}
{rank=same; header_182 prose_183 codeblock_184}

header_182 [label="3 : clone(path)"]

prose_183 [label="prose"]

codeblock_184 [label="code block 107-117"]


// END RANK section_106

header_182 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tatable stolen."]
// END RANK header_182

prose_183 -> { raw_186}
{rank=same; raw_186}

raw_186 [label="raw"]


// END RANK prose_183

raw_186 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This returns a copy of the path with the metatable stolen.
"]
// END RANK raw_186

codeblock_184 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function clone(path)
  local new_path = {}
  for k,v in pairs(path) do
    new_path[k] = v
  end
  setmetatable(new_path, getmetatable(path))
  return new_path
end
"]
// END RANK codeblock_184

section_107 -> { header_189 prose_190 codeblock_191 codeblock_192 codeblock_193}
{rank=same; header_189 prose_190 codeblock_191 codeblock_192 codeblock_193}

header_189 [label="3 : stringAwk"]

prose_190 [label="prose"]

codeblock_191 [label="code block 124-157"]

codeblock_192 [label="code block 159-167"]

codeblock_193 [label="code block 169-192"]


// END RANK section_107

header_189 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label="e to add to th"]
// END RANK header_189

prose_190 -> { raw_195}
{rank=same; raw_195}

raw_195 [label="raw"]


// END RANK prose_190

raw_195 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is used twice, once to build new paths, and once to add to them.
"]
// END RANK raw_195

codeblock_191 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function stringAwk(path, str)
  local div, div_patt = Path.divider, Path.div_patt
  local phrase = \"\"
  local remain = string.sub(str, 2)
  path[1] = div
    -- chew the string like Pac Man
  while remain  do
    local dir_index = string.find(remain, div_patt)
    if dir_index then
      -- add the handle minus div
      path[#path + 1] = string.sub(remain, 1, dir_index - 1)
      -- then the div
      path[#path + 1] = div
      local new_remain = string.sub(remain, dir_index + 1)
      assert(#new_remain < #remain, \"remain must decrease\")
      remain = new_remain
      if remain == \"\" then
        remain = nil
      end
    else
      -- file
      path[#path + 1] = remain
      path.filename = remain
      remain = nil
    end
  end
  if not path.filename then
    path.isDir = true
  end

  return path
end"]
// END RANK codeblock_191

codeblock_192 -> leaf_198
leaf_198  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __eq(left, right)
  local isEq = false
  for i = 1, #left do
    isEq = isEq and left[i] == right[i]
  end
  return isEq
end"]
// END RANK codeblock_192

codeblock_193 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __concat(head_path, tail_path)
  local new_path = clone(head_path)
  if type(tail_path) == 'string' then
    -- use the stringbuilder
    local path_parts = stringAwk({}, tail_path)
    for _, v in ipairs(path_parts) do
      new_path[#new_path + 1] = v
    end

    new_path.str = new_path.str .. tail_path
    if string.sub(new_path.str, -1) == Path.divider then
      new_path.isDir = true
      new_path.filename = nil
    else
      new_path.filename = path_parts.filename
    end

    return new_path
  else
    s:complain(\"NYI\", \"can only concatenate string at present\")
  end
end"]
// END RANK codeblock_193

section_11 -> { header_200 prose_201 codeblock_202 section_203 section_204}
{rank=same; header_200 prose_201 codeblock_202 section_203 section_204}

header_200 [label="2 : __tostring"]

prose_201 [label="prose"]

codeblock_202 [label="code block 199-203"]

section_203 [label="section: 207-224"]

section_204 [label="section: 225-288"]


// END RANK section_11

header_200 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is a builder "]
// END RANK header_200

prose_201 -> { raw_206}
{rank=same; raw_206}

raw_206 [label="raw"]


// END RANK prose_201

raw_206 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Since we always have a path as a string, we simply return it.
"]
// END RANK raw_206

codeblock_202 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __tostring(path)
  return path.str
end"]
// END RANK codeblock_202

section_203 -> { header_209 prose_210 codeblock_211}
{rank=same; header_209 prose_210 codeblock_211}

header_209 [label="3 : fromString(str)"]

prose_210 [label="prose"]

codeblock_211 [label="code block 211-222"]


// END RANK section_203

header_209 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".sub(str, 1, 1) ~= d"]
// END RANK header_209

prose_210 -> { raw_213}
{rank=same; raw_213}

raw_213 [label="raw"]


// END RANK prose_210

raw_213 -> leaf_214
leaf_214  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a builder function and hence private.
"]
// END RANK raw_213

codeblock_211 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function fromString(path, str)
  local div, div_patt = Path.divider, Path.div_patt
  if string.sub(str, 1, 1) ~= div and not catting then
    local msg = \"Paths must be absolute and start with \" .. div
    s:complain(\"validation error\", msg)
    return nil, msg
  else
    return stringAwk(path, str, div, div_patt)
  end
end"]
// END RANK codeblock_211

section_204 -> { header_216 prose_217 prose_218 codeblock_219 prose_220 codeblock_221 codeblock_222}
{rank=same; header_216 prose_217 prose_218 codeblock_219 prose_220 codeblock_221 codeblock_222}

header_216 [label="3 : new"]

prose_217 [label="prose"]

prose_218 [label="prose"]

codeblock_219 [label="code block 231-246"]

prose_220 [label="prose"]

codeblock_221 [label="code block 250-262"]

codeblock_222 [label="code block 264-266"]


// END RANK section_204

header_216 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="        "]
// END RANK header_216

prose_217 -> { raw_224}
{rank=same; raw_224}

raw_224 [label="raw"]


// END RANK prose_217

raw_224 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Builds a Path from, currently, a string.
"]
// END RANK raw_224

prose_218 -> { raw_226}
{rank=same; raw_226}

raw_226 [label="raw"]


// END RANK prose_218

raw_226 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is the important use case.
"]
// END RANK raw_226

codeblock_219 -> leaf_228
leaf_228  [color=Gray,shape=rectangle,fontname=Inconsolata,label="new = function (Path, path_seed)
  local path = setmetatable({}, {__index = Path,
                               __concat = __concat,
                               __eq  = __eq,
                               __tostring = __tostring})
  if type(path_seed) == 'string' then
    path.str = path_seed
    path =  fromString(path, path_seed)
  elseif type(path_seed) == 'table' then
    s:complain(\"NYI\", 'construction from a Path or other table is not yet implemented')
  end

  return path
end"]
// END RANK codeblock_219

prose_220 -> { raw_229}
{rank=same; raw_229}

raw_229 [label="raw"]


// END RANK prose_220

raw_229 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is complex and worse, it isn't working.
"]
// END RANK raw_229

codeblock_221 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Path.spec(path)
  local a = new(_, \"/core/build/\")
  assert(#a == 5, \"a must equal 5 not\" .. #a)
  assert(a[1] == \"/\", \"a must start with /\")
  local b = clone(a)
  assert(#b == 5, \"b must equal 5\")
  assert(b[1] == \"/\", \"b must start with /\")
  assert(a.str == b.str, \"a and b must have the same str\")
  local c = a .. \"/bar\"
end
Path.spec()"]
// END RANK codeblock_221

codeblock_222 -> leaf_232
leaf_232  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return setmetatable({}, {__call = new})"]
// END RANK codeblock_222


}
