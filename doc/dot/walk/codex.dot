digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 210"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-78"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 prose_4 section_5 section_6 section_7}

header_2 [label="1 : Codex"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 8-64"]

section_6 [label="section: 65-78"]

section_7 [label="section: 79-170"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Codex"]
// END RANK header_2

prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A Codex is currently a directory in our Orb-style format.
"]
// END RANK raw_9

prose_4 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


// END RANK prose_4

raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We're trying to work our way into a proper database.

"]
// END RANK raw_11

section_5 -> { header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 prose_21 prose_22 prose_23 codeblock_24 codeblock_25 codeblock_26}
{rank=same; header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 prose_21 prose_22 prose_23 codeblock_24 codeblock_25 codeblock_26}

header_13 [label="2 : Instance Fields"]

prose_14 [label="prose"]

prose_15 [label="prose"]

prose_16 [label="prose"]

prose_17 [label="prose"]

prose_18 [label="prose"]

prose_19 [label="prose"]

prose_20 [label="prose"]

prose_21 [label="prose"]

prose_22 [label="prose"]

prose_23 [label="prose"]

codeblock_24 [label="code block 37-40"]

codeblock_25 [label="code block 42-55"]

codeblock_26 [label="code block 58-62"]


// END RANK section_5

header_13 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Instance Fields"]
// END RANK header_13

prose_14 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


// END RANK prose_14

raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

- docs:  Array keyed by full path name of file, and the spun-up Doc as
         the value.
"]
// END RANK raw_28

prose_15 -> { raw_30}
{rank=same; raw_30}

raw_30 [label="raw"]


// END RANK prose_15

raw_30 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- files:  Array keyed by full path name of file, and a string of the read file
          as the value. I think. #todo check
"]
// END RANK raw_30

prose_16 -> { raw_32}
{rank=same; raw_32}

raw_32 [label="raw"]


// END RANK prose_16

raw_32 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- srcs:  Array keyed by Path of file, and a string of the knit
         source files. This might also be a File; God what a mess.
"]
// END RANK raw_32

prose_17 -> { raw_34}
{rank=same; raw_34}

raw_34 [label="raw"]


// END RANK prose_17

raw_34 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- bytecodes: Array indexted by Path of file, value is a string that is a dump
             of the bytecode of the compiled sorcery.
"]
// END RANK raw_34

prose_18 -> { raw_36 link_37 raw_38 prespace_39 literal_40 raw_41}
{rank=same; raw_36 link_37 raw_38 prespace_39 literal_40 raw_41}

raw_36 [label="raw"]

link_37 [label="link"]

raw_38 [label="raw"]

prespace_39 [label="prespace"]

literal_40 [label="literal"]

raw_41 [label="raw"]


// END RANK prose_18

raw_36 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- serve:  A "]
// END RANK raw_36

link_37 -> { anchortext_43 url_44}
{rank=same; anchortext_43 url_44}

anchortext_43 [label="anchortext"]

url_44 [label="url"]


// END RANK link_37

anchortext_43 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Watcher"]
// END RANK anchortext_43

url_44 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_44

raw_38 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for file changes.  Only present when
          initialized with"]
// END RANK raw_38

prespace_39 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_39

literal_40 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb serve"]
// END RANK literal_40

raw_41 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_41

prose_19 -> { raw_51 link_52 raw_53}
{rank=same; raw_51 link_52 raw_53}

raw_51 [label="raw"]

link_52 [label="link"]

raw_53 [label="raw"]


// END RANK prose_19

raw_51 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- root:  The root "]
// END RANK raw_51

link_52 -> { anchortext_55 url_56}
{rank=same; anchortext_55 url_56}

anchortext_55 [label="anchortext"]

url_56 [label="url"]


// END RANK link_52

anchortext_55 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="deck"]
// END RANK anchortext_55

url_56 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_56

raw_53 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for the codex.
"]
// END RANK raw_53

prose_20 -> { raw_60}
{rank=same; raw_60}

raw_60 [label="raw"]


// END RANK prose_20

raw_60 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- orb:  The deck containing the source Orb files.
"]
// END RANK raw_60

prose_21 -> { raw_62}
{rank=same; raw_62}

raw_62 [label="raw"]


// END RANK prose_21

raw_62 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- src:  The deck containing the knit src files.
"]
// END RANK raw_62

prose_22 -> { raw_64}
{rank=same; raw_64}

raw_64 [label="raw"]


// END RANK prose_22

raw_64 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- lib:  The deck containing the lib files. #NB: In the process of phasing this
        out in favor of a database of modules.
"]
// END RANK raw_64

prose_23 -> { raw_66}
{rank=same; raw_66}

raw_66 [label="raw"]


// END RANK prose_23

raw_66 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- srcLib: The deck which is just a symlink of lib and I don't know what I was
          thinking when I thought this was a good idea. JFC.
"]
// END RANK raw_66

codeblock_24 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pl_file = require \"pl.file\"
local write = pl_file.write"]
// END RANK codeblock_24

codeblock_25 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local s = require \"kore/status\" ()
s.verbose = true

local Dir  = require \"walk/directory\"
local File = require \"walk/file\"
local Path = require \"walk/path\"
local Deck = require \"walk/deck\"
local ops  = require \"walk/ops\"

local knitter = require \"knit/knitter\"

local Watcher = require \"femto/watcher\""]
// END RANK codeblock_25

codeblock_26 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Codex = {}
Codex.__index = Codex
local __Codices = {} -- One codex per directory"]
// END RANK codeblock_26

section_6 -> { header_71 prose_72 prose_73 prose_74 codeblock_75}
{rank=same; header_71 prose_72 prose_73 prose_74 codeblock_75}

header_71 [label="2 : spin"]

prose_72 [label="prose"]

prose_73 [label="prose"]

prose_74 [label="prose"]

codeblock_75 [label="code block 73-77"]


// END RANK section_6

header_71 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** spin"]
// END RANK header_71

prose_72 -> { raw_77}
{rank=same; raw_77}

raw_77 [label="raw"]


// END RANK prose_72

raw_77 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The spin step is passed through to the Orb deck.
"]
// END RANK raw_77

prose_73 -> { raw_79}
{rank=same; raw_79}

raw_79 [label="raw"]


// END RANK prose_73

raw_79 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This needs to generalize on a per-file basis.
"]
// END RANK raw_79

prose_74 -> { raw_81}
{rank=same; raw_81}

raw_81 [label="raw"]


// END RANK prose_74

raw_81 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Currently spinning just loads files into the Deck(s).
"]
// END RANK raw_81

codeblock_75 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Codex.spin(codex)
   codex.orb:spin()
end"]
// END RANK codeblock_75

section_7 -> { header_84 prose_85 codeblock_86 section_87 section_88}
{rank=same; header_84 prose_85 codeblock_86 section_87 section_88}

header_84 [label="2 : serve"]

prose_85 [label="prose"]

codeblock_86 [label="code block 81-115"]

section_87 [label="section: 120-170"]

section_88 [label="section: 171-210"]


// END RANK section_7

header_84 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** serve"]
// END RANK header_84

prose_85 -> { raw_90}
{rank=same; raw_90}

raw_90 [label="raw"]


// END RANK prose_85

raw_90 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_90

codeblock_86 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function changer(codex)
   local function onchange(watcher, fname)
      local full_name = tostring(codex.orb) .. \"/\" .. fname
      print (\"changed \" .. full_name)
      if codex.docs[full_name] and full_name:sub(-4) == \".orb\" then
         local doc = Doc(codex.files[full_name]:read())
         local knit_doc = knitter:knit(doc)
         local knit_name = tostring(codex.src) .. \"/\"
                           .. fname : sub(1, -5) .. \".lua\"
         local written = write(knit_name, tostring(knit_doc))
         print(\"knit_doc is type \" .. type   (knit_doc))
      else
         print(\"false\")
      end
   end

   return onchange
end


local function renamer(codex)
   local function onrename(watcher, fname)
      print (\"renamed \" .. fname)
   end

   return onrename
end

function Codex.serve(codex)
   codex.server = Watcher { onchange = changer(codex),
                            onrename = renamer(codex) }
   codex.server(tostring(codex.orb))
end"]
// END RANK codeblock_86

section_87 -> { header_93 prose_94 prose_95 codeblock_96}
{rank=same; header_93 prose_94 prose_95 codeblock_96}

header_93 [label="3 : isACodex"]

prose_94 [label="prose"]

prose_95 [label="prose"]

codeblock_96 [label="code block 131-168"]


// END RANK section_87

header_93 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** isACodex"]
// END RANK header_93

prose_94 -> { raw_98 link_99 raw_100 prespace_101 literal_102 raw_103 prespace_104 literal_105 raw_106}
{rank=same; raw_98 link_99 raw_100 prespace_101 literal_102 raw_103 prespace_104 literal_105 raw_106}

raw_98 [label="raw"]

link_99 [label="link"]

raw_100 [label="raw"]

prespace_101 [label="prespace"]

literal_102 [label="literal"]

raw_103 [label="raw"]

prespace_104 [label="prespace"]

literal_105 [label="literal"]

raw_106 [label="raw"]


// END RANK prose_94

raw_98 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Used in our constructor to determine to what degree the local
directory fits the Codex format.  If it meets all the "]
// END RANK raw_98

link_99 -> { anchortext_108 url_109}
{rank=same; anchortext_108 url_109}

anchortext_108 [label="anchortext"]

url_109 [label="url"]


// END RANK link_99

anchortext_108 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="critera"]
// END RANK anchortext_108

url_109 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_109

raw_100 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
then"]
// END RANK raw_100

prespace_101 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_101

literal_102 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="codex.codex"]
// END RANK literal_102

raw_103 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is set to"]
// END RANK raw_103

prespace_104 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_104

literal_105 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_105

raw_106 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_106

prose_95 -> { raw_119}
{rank=same; raw_119}

raw_119 [label="raw"]


// END RANK prose_95

raw_119 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Any partial matches are added to the Codex as they are found.
"]
// END RANK raw_119

codeblock_96 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function isACodex(dir, codex)
   local isCo = false
   local orbDir, srcDir, libDir, srcLibDir = nil, nil, nil, nil
   codex.root = dir
   dir:getsubdirs()
   for i, sub in ipairs(dir.subdirs) do
      local name = sub:basename()
      if name == \"orb\" then
         s:verb(\"orb: \" .. tostring(sub))
         orbDir = sub
         codex.orb = sub
      elseif name == \"src\" then
         s:verb(\"src: \" .. tostring(sub))
         srcDir = Dir(sub)
         codex.src = sub
         srcDir:getsubdirs()
         for j, subsub in ipairs(sub.subdirs) do
            local subname = subsub:basename()
            if subname == \"lib\" then
               s:verb(\"src/lib: \" .. tostring(subsub))
               srcLibDir = subsub
            end
         end
          --]]
      elseif name == \"lib\" then
         s:verb(\"lib: \" .. tostring(sub))
         libDir = sub
         codex.lib = sub
      end
   end
   if orbDir and srcDir and libDir and srcLibDir then
      -- check equality of /lib and /src/lib
      codex.codex = true
   end
   return codex
end"]
// END RANK codeblock_96

section_88 -> { header_122 prose_123 structure_124 prose_125 codeblock_126 codeblock_127}
{rank=same; header_122 prose_123 structure_124 prose_125 codeblock_126 codeblock_127}

header_122 [label="3 : Codex(dir)"]

prose_123 [label="prose"]

structure_124 [label="structure"]

prose_125 [label="prose"]

codeblock_126 [label="code block 183-203"]

codeblock_127 [label="code block 206-209"]


// END RANK section_88

header_122 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Codex(dir)"]
// END RANK header_122

prose_123 -> { raw_129}
{rank=same; raw_129}

raw_129 [label="raw"]


// END RANK prose_123

raw_129 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Makes a codex given a directory, in string or Path form.
"]
// END RANK raw_129

structure_124 -> { hashline_131}
{rank=same; hashline_131}

hashline_131 [label="hashline"]


// END RANK structure_124

hashline_131 -> { hashtag_132}
{rank=same; hashtag_132}

hashtag_132 [label="hashtag"]


// END RANK hashline_131

hashtag_132 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="NB"]
// END RANK hashtag_132

prose_125 -> { raw_134}
{rank=same; raw_134}

raw_134 [label="raw"]


// END RANK prose_125

raw_134 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
corresponding to the root of the project. Wish me luck.
"]
// END RANK raw_134

codeblock_126 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(dir)
   if type(dir) == \"string\" then
      dir = Dir(dir)
   end
   if __Codices[dir] then
      return __Codices[dir]
   end
   local codex = setmetatable({}, Codex)
   codex = isACodex(dir, codex)
   codex.project = dir.path[#dir.path] -- hmmm?
   if codex.orb then
      codex.orb = Deck(codex, codex.orb)
   end
   codex.docs  = {}
   codex.files = {}
   codex.srcs  = {}
   codex.bytecodes = {}
   return codex
end"]
// END RANK codeblock_126

codeblock_127 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Codex.idEst = new
return new"]
// END RANK codeblock_127


}
