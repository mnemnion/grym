digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 183"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-54"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 prose_4 section_5 section_6 section_7}

header_2 [label="1 : Codex"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 8-40"]

section_6 [label="section: 41-54"]

section_7 [label="section: 55-94"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Codex"]
// END RANK header_2

prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A Codex is currently a directory in our Orb-style format.
"]
// END RANK raw_9

prose_4 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


// END RANK prose_4

raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We're trying to work our way into a proper database.

"]
// END RANK raw_11

section_5 -> { header_13 prose_14 prose_15 codeblock_16 codeblock_17}
{rank=same; header_13 prose_14 prose_15 codeblock_16 codeblock_17}

header_13 [label="2 : Instance Fields"]

prose_14 [label="prose"]

prose_15 [label="prose"]

codeblock_16 [label="code block 18-31"]

codeblock_17 [label="code block 34-38"]


// END RANK section_5

header_13 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Instance Fields"]
// END RANK header_13

prose_14 -> { raw_19}
{rank=same; raw_19}

raw_19 [label="raw"]


// END RANK prose_14

raw_19 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

- docs :  Array keyed by full path name of file, and the spun-up Doc as
          the value.
"]
// END RANK raw_19

prose_15 -> { raw_21 prespace_22 literal_23 raw_24}
{rank=same; raw_21 prespace_22 literal_23 raw_24}

raw_21 [label="raw"]

prespace_22 [label="prespace"]

literal_23 [label="literal"]

raw_24 [label="raw"]


// END RANK prose_15

raw_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- serve :  A [[Watcher][link in bio]] for file changes.  Only present when
           initialized with"]
// END RANK raw_21

prespace_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_22

literal_23 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb serve"]
// END RANK literal_23

raw_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".


"]
// END RANK raw_24

codeblock_16 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local s = require \"core/status\" ()
s.verbose = true


local Dir  = require \"walk/directory\"
local File = require \"walk/file\"
local Path = require \"walk/path\"
local Deck = require \"walk/deck\"

local knitter = require \"knit/knitter\"

local Watcher = require \"femto/watcher\""]
// END RANK codeblock_16

codeblock_17 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Codex = {}
Codex.__index = Codex
local __Codices = {} -- One codex per directory"]
// END RANK codeblock_17

section_6 -> { header_31 prose_32 prose_33 prose_34 codeblock_35}
{rank=same; header_31 prose_32 prose_33 prose_34 codeblock_35}

header_31 [label="2 : spin"]

prose_32 [label="prose"]

prose_33 [label="prose"]

prose_34 [label="prose"]

codeblock_35 [label="code block 49-53"]


// END RANK section_6

header_31 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** spin"]
// END RANK header_31

prose_32 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


// END RANK prose_32

raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The spin step is passed through to the Orb deck.
"]
// END RANK raw_37

prose_33 -> { raw_39}
{rank=same; raw_39}

raw_39 [label="raw"]


// END RANK prose_33

raw_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This needs to generalize on a per-file basis.
"]
// END RANK raw_39

prose_34 -> { raw_41}
{rank=same; raw_41}

raw_41 [label="raw"]


// END RANK prose_34

raw_41 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Currently spinning just loads files into the Deck(s).
"]
// END RANK raw_41

codeblock_35 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Codex.spin(codex)
   codex.orb:spin()
end"]
// END RANK codeblock_35

section_7 -> { header_44 prose_45 codeblock_46 section_47}
{rank=same; header_44 prose_45 codeblock_46 section_47}

header_44 [label="2 : serve"]

prose_45 [label="prose"]

codeblock_46 [label="code block 57-90"]

section_47 [label="section: 95-183"]


// END RANK section_7

header_44 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** serve"]
// END RANK header_44

prose_45 -> { raw_49}
{rank=same; raw_49}

raw_49 [label="raw"]


// END RANK prose_45

raw_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_49

codeblock_46 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function changer(codex)
   local function onchange(watcher, fname)
      local full_name = tostring(codex.orb) .. \"/\" .. fname
      print (\"changed \" .. full_name)
      if codex.docs[full_name] then
         print(\"true\")
         -- read the file (stubbed)
         local doc = codex.files[full_name]:read()

         print(doc)
      else
         print(\"false\")
      end
   end

   return onchange
end


local function renamer(codex)
   local function onrename(watcher, fname)
      print (\"renamed \" .. fname)
   end

   return onrename
end

function Codex.serve(codex)
   codex.server = Watcher { onchange = changer(codex),
                            onrename = renamer(codex) }
   codex.server(tostring(codex.orb))
end"]
// END RANK codeblock_46

section_47 -> { header_52 prose_53 prose_54 codeblock_55 codeblock_56 codeblock_57}
{rank=same; header_52 prose_53 prose_54 codeblock_55 codeblock_56 codeblock_57}

header_52 [label="3 : isACodex"]

prose_53 [label="prose"]

prose_54 [label="prose"]

codeblock_55 [label="code block 103-140"]

codeblock_56 [label="code block 142-160"]

codeblock_57 [label="code block 163-166"]


// END RANK section_47

header_52 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** isACodex"]
// END RANK header_52

prose_53 -> { raw_59 link_60 raw_61 prespace_62 literal_63 raw_64 prespace_65 literal_66 raw_67}
{rank=same; raw_59 link_60 raw_61 prespace_62 literal_63 raw_64 prespace_65 literal_66 raw_67}

raw_59 [label="raw"]

link_60 [label="link"]

raw_61 [label="raw"]

prespace_62 [label="prespace"]

literal_63 [label="literal"]

raw_64 [label="raw"]

prespace_65 [label="prespace"]

literal_66 [label="literal"]

raw_67 [label="raw"]


// END RANK prose_53

raw_59 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Used in our constructor to determine to what degree the local
directory fits the Codex format.  If it meets all the "]
// END RANK raw_59

link_60 -> { anchortext_69 url_70}
{rank=same; anchortext_69 url_70}

anchortext_69 [label="anchortext"]

url_70 [label="url"]


// END RANK link_60

anchortext_69 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="critera"]
// END RANK anchortext_69

url_70 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_70

raw_61 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
then"]
// END RANK raw_61

prespace_62 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_62

literal_63 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="codex.codex"]
// END RANK literal_63

raw_64 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is set to"]
// END RANK raw_64

prespace_65 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_65

literal_66 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_66

raw_67 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_67

prose_54 -> { raw_80}
{rank=same; raw_80}

raw_80 [label="raw"]


// END RANK prose_54

raw_80 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Any partial matches are added to the Codex as they are found.
"]
// END RANK raw_80

codeblock_55 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function isACodex(dir, codex)
   local isCo = false
   local orbDir, srcDir, libDir, srcLibDir = nil, nil, nil, nil
   codex.root = dir
   dir:getsubdirs()
   for i, sub in ipairs(dir.subdirs) do
      local name = sub:basename()
      if name == \"orb\" then
         s:verb(\"orb: \" .. tostring(sub))
         orbDir = sub
         codex.orb = sub
      elseif name == \"src\" then
         s:verb(\"src: \" .. tostring(sub))
         srcDir = Dir(sub)
         codex.src = sub
         srcDir:getsubdirs()
         for j, subsub in ipairs(sub.subdirs) do
            local subname = subsub:basename()
            if subname == \"lib\" then
               s:verb(\"src/lib: \" .. tostring(subsub))
               subLibDir = subsub
            end
         end
          --]]
      elseif name == \"lib\" then
         s:verb(\"lib: \" .. tostring(sub))
         libDir = sub
         codex.lib = sub
      end
   end
   if orbDir and srcDir and libDir and subLibDir then
      -- check equality of /lib and /src/lib
      codex.codex = true
   end
   return codex
end"]
// END RANK codeblock_55

codeblock_56 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(dir)
   if type(dir) == \"string\" then
      dir = Dir(dir)
   end
   if __Codices[dir] then
      return __Codices[dir]
   end
   local codex = setmetatable({}, Codex)
   codex = isACodex(dir, codex)
   if codex.orb then
      codex.orb = Deck(codex, codex.orb)
   end
   codex.docs = {}
   codex.files = {}
   codex.srcs = {}
   return codex
end"]
// END RANK codeblock_56

codeblock_57 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Codex.idEst = new
return new --  yo!"]
// END RANK codeblock_57


}
