digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 171"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-57"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 prose_4 section_5 section_6 section_7}

header_2 [label="1 : Codex"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 8-43"]

section_6 [label="section: 44-57"]

section_7 [label="section: 58-98"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Codex"]
// END RANK header_2

prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A Codex is currently a directory in our Orb-style format.
"]
// END RANK raw_9

prose_4 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


// END RANK prose_4

raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We're trying to work our way into a proper database.

"]
// END RANK raw_11

section_5 -> { header_13 prose_14 prose_15 codeblock_16 codeblock_17 codeblock_18}
{rank=same; header_13 prose_14 prose_15 codeblock_16 codeblock_17 codeblock_18}

header_13 [label="2 : Instance Fields"]

prose_14 [label="prose"]

prose_15 [label="prose"]

codeblock_16 [label="code block 16-19"]

codeblock_17 [label="code block 21-34"]

codeblock_18 [label="code block 37-41"]


// END RANK section_5

header_13 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Instance Fields"]
// END RANK header_13

prose_14 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


// END RANK prose_14

raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

- docs :  Array keyed by full path name of file, and the spun-up Doc as
          the value.
"]
// END RANK raw_20

prose_15 -> { raw_22 prespace_23 literal_24 raw_25}
{rank=same; raw_22 prespace_23 literal_24 raw_25}

raw_22 [label="raw"]

prespace_23 [label="prespace"]

literal_24 [label="literal"]

raw_25 [label="raw"]


// END RANK prose_15

raw_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- serve :  A [[Watcher][link in bio]] for file changes.  Only present when
           initialized with"]
// END RANK raw_22

prespace_23 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_23

literal_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb serve"]
// END RANK literal_24

raw_25 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_25

codeblock_16 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pl_file = require \"pl.file\"
local write = pl_file.write"]
// END RANK codeblock_16

codeblock_17 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local s = require \"core/status\" ()
s.verbose = true

local Dir  = require \"walk/directory\"
local File = require \"walk/file\"
local Path = require \"walk/path\"
local Deck = require \"walk/deck\"
local ops  = require \"walk/ops\"

local knitter = require \"knit/knitter\"

local Watcher = require \"femto/watcher\""]
// END RANK codeblock_17

codeblock_18 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Codex = {}
Codex.__index = Codex
local __Codices = {} -- One codex per directory"]
// END RANK codeblock_18

section_6 -> { header_33 prose_34 prose_35 prose_36 codeblock_37}
{rank=same; header_33 prose_34 prose_35 prose_36 codeblock_37}

header_33 [label="2 : spin"]

prose_34 [label="prose"]

prose_35 [label="prose"]

prose_36 [label="prose"]

codeblock_37 [label="code block 52-56"]


// END RANK section_6

header_33 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** spin"]
// END RANK header_33

prose_34 -> { raw_39}
{rank=same; raw_39}

raw_39 [label="raw"]


// END RANK prose_34

raw_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The spin step is passed through to the Orb deck.
"]
// END RANK raw_39

prose_35 -> { raw_41}
{rank=same; raw_41}

raw_41 [label="raw"]


// END RANK prose_35

raw_41 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This needs to generalize on a per-file basis.
"]
// END RANK raw_41

prose_36 -> { raw_43}
{rank=same; raw_43}

raw_43 [label="raw"]


// END RANK prose_36

raw_43 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Currently spinning just loads files into the Deck(s).
"]
// END RANK raw_43

codeblock_37 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Codex.spin(codex)
   codex.orb:spin()
end"]
// END RANK codeblock_37

section_7 -> { header_46 prose_47 codeblock_48 section_49}
{rank=same; header_46 prose_47 codeblock_48 section_49}

header_46 [label="2 : serve"]

prose_47 [label="prose"]

codeblock_48 [label="code block 60-94"]

section_49 [label="section: 99-171"]


// END RANK section_7

header_46 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** serve"]
// END RANK header_46

prose_47 -> { raw_51}
{rank=same; raw_51}

raw_51 [label="raw"]


// END RANK prose_47

raw_51 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_51

codeblock_48 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function changer(codex)
   local function onchange(watcher, fname)
      local full_name = tostring(codex.orb) .. \"/\" .. fname
      print (\"changed \" .. full_name)
      if codex.docs[full_name] and full_name:sub(-4) == \".orb\" then
         local doc = Doc(codex.files[full_name]:read())
         local knit_doc = knitter:knit(doc)
         local knit_name = tostring(codex.src) .. \"/\"
                           .. fname : sub(1, -5) .. \".lua\"
         local written = write(knit_name, tostring(knit_doc))
         print(\"knit_doc is type \" .. type   (knit_doc))
      else
         print(\"false\")
      end
   end

   return onchange
end


local function renamer(codex)
   local function onrename(watcher, fname)
      print (\"renamed \" .. fname)
   end

   return onrename
end

function Codex.serve(codex)
   codex.server = Watcher { onchange = changer(codex),
                            onrename = renamer(codex) }
   codex.server(tostring(codex.orb))
end"]
// END RANK codeblock_48

section_49 -> { header_54 prose_55 prose_56 codeblock_57 codeblock_58 codeblock_59}
{rank=same; header_54 prose_55 prose_56 codeblock_57 codeblock_58 codeblock_59}

header_54 [label="3 : isACodex"]

prose_55 [label="prose"]

prose_56 [label="prose"]

codeblock_57 [label="code block 107-144"]

codeblock_58 [label="code block 146-164"]

codeblock_59 [label="code block 167-170"]


// END RANK section_49

header_54 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** isACodex"]
// END RANK header_54

prose_55 -> { raw_61 link_62 raw_63 prespace_64 literal_65 raw_66 prespace_67 literal_68 raw_69}
{rank=same; raw_61 link_62 raw_63 prespace_64 literal_65 raw_66 prespace_67 literal_68 raw_69}

raw_61 [label="raw"]

link_62 [label="link"]

raw_63 [label="raw"]

prespace_64 [label="prespace"]

literal_65 [label="literal"]

raw_66 [label="raw"]

prespace_67 [label="prespace"]

literal_68 [label="literal"]

raw_69 [label="raw"]


// END RANK prose_55

raw_61 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Used in our constructor to determine to what degree the local
directory fits the Codex format.  If it meets all the "]
// END RANK raw_61

link_62 -> { anchortext_71 url_72}
{rank=same; anchortext_71 url_72}

anchortext_71 [label="anchortext"]

url_72 [label="url"]


// END RANK link_62

anchortext_71 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="critera"]
// END RANK anchortext_71

url_72 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_72

raw_63 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
then"]
// END RANK raw_63

prespace_64 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_64

literal_65 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="codex.codex"]
// END RANK literal_65

raw_66 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is set to"]
// END RANK raw_66

prespace_67 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_67

literal_68 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_68

raw_69 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_69

prose_56 -> { raw_82}
{rank=same; raw_82}

raw_82 [label="raw"]


// END RANK prose_56

raw_82 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Any partial matches are added to the Codex as they are found.
"]
// END RANK raw_82

codeblock_57 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function isACodex(dir, codex)
   local isCo = false
   local orbDir, srcDir, libDir, srcLibDir = nil, nil, nil, nil
   codex.root = dir
   dir:getsubdirs()
   for i, sub in ipairs(dir.subdirs) do
      local name = sub:basename()
      if name == \"orb\" then
         s:verb(\"orb: \" .. tostring(sub))
         orbDir = sub
         codex.orb = sub
      elseif name == \"src\" then
         s:verb(\"src: \" .. tostring(sub))
         srcDir = Dir(sub)
         codex.src = sub
         srcDir:getsubdirs()
         for j, subsub in ipairs(sub.subdirs) do
            local subname = subsub:basename()
            if subname == \"lib\" then
               s:verb(\"src/lib: \" .. tostring(subsub))
               srcLibDir = subsub
            end
         end
          --]]
      elseif name == \"lib\" then
         s:verb(\"lib: \" .. tostring(sub))
         libDir = sub
         codex.lib = sub
      end
   end
   if orbDir and srcDir and libDir and srcLibDir then
      -- check equality of /lib and /src/lib
      codex.codex = true
   end
   return codex
end"]
// END RANK codeblock_57

codeblock_58 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(dir)
   if type(dir) == \"string\" then
      dir = Dir(dir)
   end
   if __Codices[dir] then
      return __Codices[dir]
   end
   local codex = setmetatable({}, Codex)
   codex = isACodex(dir, codex)
   if codex.orb then
      codex.orb = Deck(codex, codex.orb)
   end
   codex.docs  = {}
   codex.files = {}
   codex.srcs  = {}
   return codex
end"]
// END RANK codeblock_58

codeblock_59 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Codex.idEst = new
return new"]
// END RANK codeblock_59


}
