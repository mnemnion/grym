digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 56"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-56"]


// END RANK doc_0

section_1 -> { header_2 prose_3 codeblock_4 codeblock_5 codeblock_6}
{rank=same; header_2 prose_3 codeblock_4 codeblock_5 codeblock_6}

header_2 [label="1 : Codex"]

prose_3 [label="prose"]

codeblock_4 [label="code block 6-11"]

codeblock_5 [label="code block 14-16"]

codeblock_6 [label="code block 19-55"]


// END RANK section_1

header_2 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Codex"]
// END RANK header_2

prose_3 -> { raw_8}
{rank=same; raw_8}

raw_8 [label="raw"]


// END RANK prose_3

raw_8 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Now that we have some abstractions over the parts of a Codex,
let's write a class that's singlehandedly responsible for them.
"]
// END RANK raw_8

codeblock_4 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local s = require \"core/status\" ()
s.verbose = true
local walk = require \"walk\"
local Dir, File, Path = walk.Dir, walk.Path, walk.File"]
// END RANK codeblock_4

codeblock_5 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Codex = {}"]
// END RANK codeblock_5

codeblock_6 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function isACodex(dir)
   local isCo = false
   local orbDir, srcDir, libDir, srcLibDir = nil, nil, nil, nil
   dir:getsubdirs()
   for i, sub in ipairs(dir.subdirs) do
      local name = sub:basename()
      if name == \"orb\" then
         s:verb(\"orb: \" .. tostring(sub))
         orbDir = sub
      elseif name == \"src\" then
         s:verb(\"src: \" .. tostring(sub))
         srcDir = Dir(sub)
         s:verb(\"idEst srcDir: \" .. tostring(srcDir.idEst == Dir))
         srcDir:getsubdirs()
         for j, subsub in ipairs(sub.subdirs) do
            local subname = subsub:basename()
            if subname == \"lib\" then
               s:verb(\"src/lib: \" .. tostring(subsub))
               subLibDir = subsub
            end
         end
          --]]
      elseif name == \"lib\" then
         s:verb(\"lib: \" .. tostring(sub))
         libDir = sub
      end
   end
   if orbDir and srcDir and libDir and subLibDir then
      -- check equality of /lib and /src/lib
      isCo = true
   end
   return isCo
end

return isACodex -- shim"]
// END RANK codeblock_6


}
