digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 129"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-28"]


// END RANK doc_0

section_1 -> { header_2 prose_3 section_4 section_5}
{rank=same; header_2 prose_3 section_4 section_5}

header_2 [label="1 : Codex"]

prose_3 [label="prose"]

section_4 [label="section: 7-28"]

section_5 [label="section: 29-41"]


// END RANK section_1

header_2 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Codex"]
// END RANK header_2

prose_3 -> { raw_7}
{rank=same; raw_7}

raw_7 [label="raw"]


// END RANK prose_3

raw_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Now that we have some abstractions over the parts of a Codex,
let's write a class that's singlehandedly responsible for them.

"]
// END RANK raw_7

section_4 -> { header_9 prose_10 codeblock_11 codeblock_12}
{rank=same; header_9 prose_10 codeblock_11 codeblock_12}

header_9 [label="2 : Instance Fields"]

prose_10 [label="prose"]

codeblock_11 [label="code block 12-19"]

codeblock_12 [label="code block 22-26"]


// END RANK section_4

header_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Instance Fields"]
// END RANK header_9

prose_10 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


// END RANK prose_10

raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

- docs :  Array keyed by full path name of file, and the spun-up Doc as
          the value.
"]
// END RANK raw_14

codeblock_11 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local s = require \"core/status\" ()
s.verbose = true
local Dir  = require \"walk/directory\"
local File = require \"walk/file\"
local Path = require \"walk/path\"
local Deck = require \"walk/deck\""]
// END RANK codeblock_11

codeblock_12 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Codex = {}
Codex.__index = Codex
local __Codices = {} -- One codex per directory"]
// END RANK codeblock_12

section_5 -> { header_18 prose_19 codeblock_20 section_21}
{rank=same; header_18 prose_19 codeblock_20 section_21}

header_18 [label="2 : knit"]

prose_19 [label="prose"]

codeblock_20 [label="code block 35-39"]

section_21 [label="section: 42-129"]


// END RANK section_5

header_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** knit"]
// END RANK header_18

prose_19 -> { raw_23}
{rank=same; raw_23}

raw_23 [label="raw"]


// END RANK prose_19

raw_23 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Now to work out the specifics of how knitting happens on a deck.


"]
// END RANK raw_23

codeblock_20 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Codex.spin(codex)
   codex.orb:spin()
end"]
// END RANK codeblock_20

section_21 -> { header_26 prose_27 prose_28 codeblock_29 codeblock_30 codeblock_31}
{rank=same; header_26 prose_27 prose_28 codeblock_29 codeblock_30 codeblock_31}

header_26 [label="3 : isACodex"]

prose_27 [label="prose"]

prose_28 [label="prose"]

codeblock_29 [label="code block 50-87"]

codeblock_30 [label="code block 89-106"]

codeblock_31 [label="code block 109-112"]


// END RANK section_21

header_26 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** isACodex"]
// END RANK header_26

prose_27 -> { raw_33 link_34 raw_35 prespace_36 literal_37 raw_38 prespace_39 literal_40 raw_41}
{rank=same; raw_33 link_34 raw_35 prespace_36 literal_37 raw_38 prespace_39 literal_40 raw_41}

raw_33 [label="raw"]

link_34 [label="link"]

raw_35 [label="raw"]

prespace_36 [label="prespace"]

literal_37 [label="literal"]

raw_38 [label="raw"]

prespace_39 [label="prespace"]

literal_40 [label="literal"]

raw_41 [label="raw"]


// END RANK prose_27

raw_33 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Used in our constructor to determine to what degree the local
directory fits the Codex format.  If it meets all the "]
// END RANK raw_33

link_34 -> { anchortext_43 url_44}
{rank=same; anchortext_43 url_44}

anchortext_43 [label="anchortext"]

url_44 [label="url"]


// END RANK link_34

anchortext_43 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="critera"]
// END RANK anchortext_43

url_44 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_44

raw_35 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
then"]
// END RANK raw_35

prespace_36 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_36

literal_37 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="codex.codex"]
// END RANK literal_37

raw_38 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is set to"]
// END RANK raw_38

prespace_39 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_39

literal_40 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_40

raw_41 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_41

prose_28 -> { raw_54}
{rank=same; raw_54}

raw_54 [label="raw"]


// END RANK prose_28

raw_54 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Any partial matches are added to the Codex as they are found.
"]
// END RANK raw_54

codeblock_29 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function isACodex(dir, codex)
   local isCo = false
   local orbDir, srcDir, libDir, srcLibDir = nil, nil, nil, nil
   codex.root = dir
   dir:getsubdirs()
   for i, sub in ipairs(dir.subdirs) do
      local name = sub:basename()
      if name == \"orb\" then
         s:verb(\"orb: \" .. tostring(sub))
         orbDir = sub
         codex.orb = sub
      elseif name == \"src\" then
         s:verb(\"src: \" .. tostring(sub))
         srcDir = Dir(sub)
         codex.src = sub
         srcDir:getsubdirs()
         for j, subsub in ipairs(sub.subdirs) do
            local subname = subsub:basename()
            if subname == \"lib\" then
               s:verb(\"src/lib: \" .. tostring(subsub))
               subLibDir = subsub
            end
         end
          --]]
      elseif name == \"lib\" then
         s:verb(\"lib: \" .. tostring(sub))
         libDir = sub
         codex.lib = sub
      end
   end
   if orbDir and srcDir and libDir and subLibDir then
      -- check equality of /lib and /src/lib
      codex.codex = true
   end
   return codex
end"]
// END RANK codeblock_29

codeblock_30 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(dir)
   if type(dir) == \"string\" then
      dir = Dir(dir)
   end
   if __Codices[dir] then
      return __Codices[dir]
   end
   local codex = setmetatable({}, Codex)
   codex = isACodex(dir, codex)
   if codex.orb then
      codex.orb = Deck(codex, codex.orb)
   end
   codex.docs = {}
   codex.srcs = {}
   return codex
end"]
// END RANK codeblock_30

codeblock_31 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Codex.idEst = new
return new"]
// END RANK codeblock_31


}
