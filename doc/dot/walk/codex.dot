digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 192"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-75"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 prose_4 section_5 section_6 section_7}

header_2 [label="1 : Codex"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 8-61"]

section_6 [label="section: 62-75"]

section_7 [label="section: 76-116"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Codex"]
// END RANK header_2

prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A Codex is currently a directory in our Orb-style format.
"]
// END RANK raw_9

prose_4 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


// END RANK prose_4

raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We're trying to work our way into a proper database.

"]
// END RANK raw_11

section_5 -> { header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 prose_21 prose_22 codeblock_23 codeblock_24 codeblock_25}
{rank=same; header_13 prose_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 prose_21 prose_22 codeblock_23 codeblock_24 codeblock_25}

header_13 [label="2 : Instance Fields"]

prose_14 [label="prose"]

prose_15 [label="prose"]

prose_16 [label="prose"]

prose_17 [label="prose"]

prose_18 [label="prose"]

prose_19 [label="prose"]

prose_20 [label="prose"]

prose_21 [label="prose"]

prose_22 [label="prose"]

codeblock_23 [label="code block 34-37"]

codeblock_24 [label="code block 39-52"]

codeblock_25 [label="code block 55-59"]


// END RANK section_5

header_13 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Instance Fields"]
// END RANK header_13

prose_14 -> { raw_27}
{rank=same; raw_27}

raw_27 [label="raw"]


// END RANK prose_14

raw_27 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

- docs:  Array keyed by full path name of file, and the spun-up Doc as
         the value.
"]
// END RANK raw_27

prose_15 -> { raw_29}
{rank=same; raw_29}

raw_29 [label="raw"]


// END RANK prose_15

raw_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- files:  Array keyed by full path name of file, and a string of the read file
          as the value. I think. #todo check
"]
// END RANK raw_29

prose_16 -> { raw_31}
{rank=same; raw_31}

raw_31 [label="raw"]


// END RANK prose_16

raw_31 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- srcs:  Array keyed by Path of file, and a string of the knit
         source files. This might also be a File; God what a mess.
"]
// END RANK raw_31

prose_17 -> { raw_33 link_34 raw_35 prespace_36 literal_37 raw_38}
{rank=same; raw_33 link_34 raw_35 prespace_36 literal_37 raw_38}

raw_33 [label="raw"]

link_34 [label="link"]

raw_35 [label="raw"]

prespace_36 [label="prespace"]

literal_37 [label="literal"]

raw_38 [label="raw"]


// END RANK prose_17

raw_33 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- serve:  A "]
// END RANK raw_33

link_34 -> { anchortext_40 url_41}
{rank=same; anchortext_40 url_41}

anchortext_40 [label="anchortext"]

url_41 [label="url"]


// END RANK link_34

anchortext_40 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Watcher"]
// END RANK anchortext_40

url_41 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_41

raw_35 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for file changes.  Only present when
          initialized with"]
// END RANK raw_35

prespace_36 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_36

literal_37 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb serve"]
// END RANK literal_37

raw_38 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_38

prose_18 -> { raw_48 link_49 raw_50}
{rank=same; raw_48 link_49 raw_50}

raw_48 [label="raw"]

link_49 [label="link"]

raw_50 [label="raw"]


// END RANK prose_18

raw_48 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- root:  The root "]
// END RANK raw_48

link_49 -> { anchortext_52 url_53}
{rank=same; anchortext_52 url_53}

anchortext_52 [label="anchortext"]

url_53 [label="url"]


// END RANK link_49

anchortext_52 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="deck"]
// END RANK anchortext_52

url_53 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_53

raw_50 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for the codex.
"]
// END RANK raw_50

prose_19 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


// END RANK prose_19

raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- orb:  The deck containing the source Orb files.
"]
// END RANK raw_57

prose_20 -> { raw_59}
{rank=same; raw_59}

raw_59 [label="raw"]


// END RANK prose_20

raw_59 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- src:  The deck containing the knit src files.
"]
// END RANK raw_59

prose_21 -> { raw_61}
{rank=same; raw_61}

raw_61 [label="raw"]


// END RANK prose_21

raw_61 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- lib:  The deck containing the lib files. #NB: In the process of phasing this
        out in favor of a database of modules.
"]
// END RANK raw_61

prose_22 -> { raw_63}
{rank=same; raw_63}

raw_63 [label="raw"]


// END RANK prose_22

raw_63 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- srcLib: The deck which is just a symlink of lib and I don't know what I was
          thinking when I thought this was a good idea. JFC.
"]
// END RANK raw_63

codeblock_23 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pl_file = require \"pl.file\"
local write = pl_file.write"]
// END RANK codeblock_23

codeblock_24 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local s = require \"kore/status\" ()
s.verbose = true

local Dir  = require \"walk/directory\"
local File = require \"walk/file\"
local Path = require \"walk/path\"
local Deck = require \"walk/deck\"
local ops  = require \"walk/ops\"

local knitter = require \"knit/knitter\"

local Watcher = require \"femto/watcher\""]
// END RANK codeblock_24

codeblock_25 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Codex = {}
Codex.__index = Codex
local __Codices = {} -- One codex per directory"]
// END RANK codeblock_25

section_6 -> { header_68 prose_69 prose_70 prose_71 codeblock_72}
{rank=same; header_68 prose_69 prose_70 prose_71 codeblock_72}

header_68 [label="2 : spin"]

prose_69 [label="prose"]

prose_70 [label="prose"]

prose_71 [label="prose"]

codeblock_72 [label="code block 70-74"]


// END RANK section_6

header_68 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** spin"]
// END RANK header_68

prose_69 -> { raw_74}
{rank=same; raw_74}

raw_74 [label="raw"]


// END RANK prose_69

raw_74 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The spin step is passed through to the Orb deck.
"]
// END RANK raw_74

prose_70 -> { raw_76}
{rank=same; raw_76}

raw_76 [label="raw"]


// END RANK prose_70

raw_76 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This needs to generalize on a per-file basis.
"]
// END RANK raw_76

prose_71 -> { raw_78}
{rank=same; raw_78}

raw_78 [label="raw"]


// END RANK prose_71

raw_78 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Currently spinning just loads files into the Deck(s).
"]
// END RANK raw_78

codeblock_72 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Codex.spin(codex)
   codex.orb:spin()
end"]
// END RANK codeblock_72

section_7 -> { header_81 prose_82 codeblock_83 section_84}
{rank=same; header_81 prose_82 codeblock_83 section_84}

header_81 [label="2 : serve"]

prose_82 [label="prose"]

codeblock_83 [label="code block 78-112"]

section_84 [label="section: 117-192"]


// END RANK section_7

header_81 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** serve"]
// END RANK header_81

prose_82 -> { raw_86}
{rank=same; raw_86}

raw_86 [label="raw"]


// END RANK prose_82

raw_86 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_86

codeblock_83 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function changer(codex)
   local function onchange(watcher, fname)
      local full_name = tostring(codex.orb) .. \"/\" .. fname
      print (\"changed \" .. full_name)
      if codex.docs[full_name] and full_name:sub(-4) == \".orb\" then
         local doc = Doc(codex.files[full_name]:read())
         local knit_doc = knitter:knit(doc)
         local knit_name = tostring(codex.src) .. \"/\"
                           .. fname : sub(1, -5) .. \".lua\"
         local written = write(knit_name, tostring(knit_doc))
         print(\"knit_doc is type \" .. type   (knit_doc))
      else
         print(\"false\")
      end
   end

   return onchange
end


local function renamer(codex)
   local function onrename(watcher, fname)
      print (\"renamed \" .. fname)
   end

   return onrename
end

function Codex.serve(codex)
   codex.server = Watcher { onchange = changer(codex),
                            onrename = renamer(codex) }
   codex.server(tostring(codex.orb))
end"]
// END RANK codeblock_83

section_84 -> { header_89 prose_90 prose_91 codeblock_92 codeblock_93 codeblock_94}
{rank=same; header_89 prose_90 prose_91 codeblock_92 codeblock_93 codeblock_94}

header_89 [label="3 : isACodex"]

prose_90 [label="prose"]

prose_91 [label="prose"]

codeblock_92 [label="code block 128-165"]

codeblock_93 [label="code block 167-185"]

codeblock_94 [label="code block 188-191"]


// END RANK section_84

header_89 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** isACodex"]
// END RANK header_89

prose_90 -> { raw_96 link_97 raw_98 prespace_99 literal_100 raw_101 prespace_102 literal_103 raw_104}
{rank=same; raw_96 link_97 raw_98 prespace_99 literal_100 raw_101 prespace_102 literal_103 raw_104}

raw_96 [label="raw"]

link_97 [label="link"]

raw_98 [label="raw"]

prespace_99 [label="prespace"]

literal_100 [label="literal"]

raw_101 [label="raw"]

prespace_102 [label="prespace"]

literal_103 [label="literal"]

raw_104 [label="raw"]


// END RANK prose_90

raw_96 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Used in our constructor to determine to what degree the local
directory fits the Codex format.  If it meets all the "]
// END RANK raw_96

link_97 -> { anchortext_106 url_107}
{rank=same; anchortext_106 url_107}

anchortext_106 [label="anchortext"]

url_107 [label="url"]


// END RANK link_97

anchortext_106 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="critera"]
// END RANK anchortext_106

url_107 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_107

raw_98 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
then"]
// END RANK raw_98

prespace_99 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_99

literal_100 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="codex.codex"]
// END RANK literal_100

raw_101 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is set to"]
// END RANK raw_101

prespace_102 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_102

literal_103 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_103

raw_104 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_104

prose_91 -> { raw_117}
{rank=same; raw_117}

raw_117 [label="raw"]


// END RANK prose_91

raw_117 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Any partial matches are added to the Codex as they are found.
"]
// END RANK raw_117

codeblock_92 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function isACodex(dir, codex)
   local isCo = false
   local orbDir, srcDir, libDir, srcLibDir = nil, nil, nil, nil
   codex.root = dir
   dir:getsubdirs()
   for i, sub in ipairs(dir.subdirs) do
      local name = sub:basename()
      if name == \"orb\" then
         s:verb(\"orb: \" .. tostring(sub))
         orbDir = sub
         codex.orb = sub
      elseif name == \"src\" then
         s:verb(\"src: \" .. tostring(sub))
         srcDir = Dir(sub)
         codex.src = sub
         srcDir:getsubdirs()
         for j, subsub in ipairs(sub.subdirs) do
            local subname = subsub:basename()
            if subname == \"lib\" then
               s:verb(\"src/lib: \" .. tostring(subsub))
               srcLibDir = subsub
            end
         end
          --]]
      elseif name == \"lib\" then
         s:verb(\"lib: \" .. tostring(sub))
         libDir = sub
         codex.lib = sub
      end
   end
   if orbDir and srcDir and libDir and srcLibDir then
      -- check equality of /lib and /src/lib
      codex.codex = true
   end
   return codex
end"]
// END RANK codeblock_92

codeblock_93 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(dir)
   if type(dir) == \"string\" then
      dir = Dir(dir)
   end
   if __Codices[dir] then
      return __Codices[dir]
   end
   local codex = setmetatable({}, Codex)
   codex = isACodex(dir, codex)
   if codex.orb then
      codex.orb = Deck(codex, codex.orb)
   end
   codex.docs  = {}
   codex.files = {}
   codex.srcs  = {}
   return codex
end"]
// END RANK codeblock_93

codeblock_94 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Codex.idEst = new
return new"]
// END RANK codeblock_94


}
