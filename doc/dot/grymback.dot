digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 103"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-11"]


section_1 -> { header_2}
{rank=same; header_2}

header_2 [label="1 : Grymback"]


section_3 -> { header_4}
{rank=same; header_4}

header_4 [label="3 : includes"]


codeblock_5 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local s = require \"lib/status\"
local u = require \"lib/util\"
local a = require \"lib/ansi\"
s.chatty = true

local epeg = require \"peg/epeg\"

local pl_file = require \"pl.file\"
local pl_dir = require \"pl.dir\"
local pl_path = require \"pl.path\"
local getfiles = pl_dir.getfiles
local getdirectories = pl_dir.getdirectories
local makepath = pl_dir.makepath
local extension = pl_path.extension
local dirname = pl_path.dirname
local basename = pl_path.basename
local read = pl_file.read
local write = pl_file.write
local delete = pl_file.delete
local isdir = pl_path.isdir

local walk = \"walk\""]
codeblock_6 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local pwd = \"\"

if (arg) then
  pwd = table.remove(arg, 1)
else
  os.exit(\"Must be called with a root codex directory\", 1)
end

io.write(\"pwd: \" .. pwd .. \"\\n\")

local grymback_rc = read(pwd .. \"/.grymback\")
if not grymback_rc then
  s:chat(\"No contents in grymback.  No action taken.\")
  os.exit()
else
  for _,v in ipairs(epeg.split(grymback_rc, \"\\n\")) do
    if v ~= \"\" then
      s:chat(\"Reverting \" .. a.cyan(grymback_rc))
      s:chat(\"Reading \" .. a.green(pwd .. \"/tmp\" .. v))
      local new_tmp = read(pwd .. \"/tmp\" .. v)
      if new_tmp then
        s:chat(\"  - writing\")
        write(v, read(pwd .. \"/tmp\" .. v))
      end
    end
  end
end"]

}
