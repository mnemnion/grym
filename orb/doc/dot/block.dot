digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 180"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-126"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9 section_10 section_11}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 section_8 section_9 section_10 section_11}

header_2 [label="1 : Block module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

section_8 [label="section: 33-50"]

section_9 [label="section: 51-75"]

section_10 [label="section: 76-91"]

section_11 [label="section: 127-180"]


// END RANK section_1

header_2 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Block module"]
// END RANK header_2

prose_3 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


// END RANK prose_3

raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   A Block is the container for the next level of granularity below
 a Section. Any Section has a Header and one or more Blocks. Both the
 Header and the Block may be virtual, that is, without contents.
"]
// END RANK raw_13

prose_4 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


// END RANK prose_4

raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 The most general premise is that Blocks are delineated by blank line
 whitespace. 

"]
// END RANK raw_15

prose_5 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


// END RANK prose_5

raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 A paragraph of prose is the simplest block, and the default.  A list with
 a tag line is a block also, as is a table.  Most importantly for our short
 path, code blocks are enclosed in blocks as well.
"]
// END RANK raw_17

prose_6 -> { raw_19 prespace_20 interpolated_21 raw_22}
{rank=same; raw_19 prespace_20 interpolated_21 raw_22}

raw_19 [label="raw"]

prespace_20 [label="prespace"]

interpolated_21 [label="interpolated"]

raw_22 [label="raw"]


// END RANK prose_6

raw_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Blocking needs to identify when it has structure, and when prose, on a 
 line-by-line basis.  It must also apply the cling rule to make sure that
 e.g. tags are part of the block indicated by whitespacing. 
 
 Blocking need not, and mostly should not, parse within structure or prose.
 These categories are determined by the beginning of a line, making this
 tractable. 
 
 The cling rule requires lookahead. LPEG is quite capable of this, as is 
 packrat PEG parsing generally.  In the bootstrap implementation, we will
 parse once for ownership, again (in the"]
// END RANK raw_19

prespace_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_20

interpolated_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="lines"]
// END RANK interpolated_21

raw_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" array of each Section) for
 blocking, and a final time to parse within blocks. 
"]
// END RANK raw_22

prose_7 -> { raw_27 prespace_28 interpolated_29 raw_30 prespace_31 interpolated_32 raw_33}
{rank=same; raw_27 prespace_28 interpolated_29 raw_30 prespace_31 interpolated_32 raw_33}

raw_27 [label="raw"]

prespace_28 [label="prespace"]

interpolated_29 [label="interpolated"]

raw_30 [label="raw"]

prespace_31 [label="prespace"]

interpolated_32 [label="interpolated"]

raw_33 [label="raw"]


// END RANK prose_7

raw_27 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Grimoire is intended to work, in linear time, as a single-pass PEG
 grammar.  Presently (Feb 2018) I'm intending to prototype that with 
 PEGylator and port it to"]
// END RANK raw_27

prespace_28 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_28

interpolated_29 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hammer"]
// END RANK interpolated_29

raw_30 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" with a"]
// END RANK raw_30

prespace_31 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_31

interpolated_32 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="quipu"]
// END RANK interpolated_32

raw_33 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" back-end. 

"]
// END RANK raw_33

section_8 -> { header_41 prose_42 codeblock_43}
{rank=same; header_41 prose_42 codeblock_43}

header_41 [label="3 : includes"]

prose_42 [label="prose"]

codeblock_43 [label="code block 35-48"]


// END RANK section_8

header_41 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** includes"]
// END RANK header_41

prose_42 -> { raw_45}
{rank=same; raw_45}

raw_45 [label="raw"]


// END RANK prose_42

raw_45 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_45

codeblock_43 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local Node = require \"node/node\"
local Codeblock = require \"orb/codeblock\"
local Structure = require \"orb/structure\"
local Prose = require \"orb/prose\"

local s = require \"status\"

local m = require \"orb/morphemes\"
local util = require \"../lib/util\"
local freeze = util.freeze"]
// END RANK codeblock_43

section_9 -> { header_48 prose_49 codeblock_50}
{rank=same; header_48 prose_49 codeblock_50}

header_48 [label="2 : Metatable for Blocks"]

prose_49 [label="prose"]

codeblock_50 [label="code block 53-73"]


// END RANK section_9

header_48 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Metatable for Blocks"]
// END RANK header_48

prose_49 -> { raw_52}
{rank=same; raw_52}

raw_52 [label="raw"]


// END RANK prose_49

raw_52 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_52

codeblock_50 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local B = setmetatable({}, { __index = Node })
B.__index = B

B.__tostring = function(block) 
    return \"Block\"
end

function B.addLine(block, line)
    if L.match(m.tagline_hash_p, line) then
        block[#block + 1] = Structure(line, \"hashline\", block.str)
    elseif L.match(m.tagline_handle_p, line) then
        block[#block + 1] = Structure(line, \"handleline\", block.str)
        -- Eventually Blocks won't have lines, meantime:
    else
        block.lines[#block.lines + 1] = line
    end

    return block
end"]
// END RANK codeblock_50

section_10 -> { header_55 prose_56 codeblock_57 section_58}
{rank=same; header_55 prose_56 codeblock_57 section_58}

header_55 [label="2 : Parse the prose within a block"]

prose_56 [label="prose"]

codeblock_57 [label="code block 78-90"]

section_58 [label="section: 92-126"]


// END RANK section_10

header_55 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Parse the prose within a block"]
// END RANK header_55

prose_56 -> { raw_60}
{rank=same; raw_60}

raw_60 [label="raw"]


// END RANK prose_56

raw_60 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_60

codeblock_57 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function B.parseProse(block)
    if block[1] then
        if block[1].id == \"codeblock\" then
            return \"\"
        end
    else
        block[1] = Prose(block)
        block.lines = nil
        return block[1]
    end
end"]
// END RANK codeblock_57

section_58 -> { header_63 prose_64 codeblock_65}
{rank=same; header_63 prose_64 codeblock_65}

header_63 [label="3 : toValue"]

prose_64 [label="prose"]

codeblock_65 [label="code block 97-124"]


// END RANK section_58

header_63 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** toValue"]
// END RANK header_63

prose_64 -> { raw_67}
{rank=same; raw_67}

raw_67 [label="raw"]


// END RANK prose_64

raw_67 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 Adds a .val field which is the union of all lines.
 Useful in visualization. 
"]
// END RANK raw_67

codeblock_65 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function B.toString(block)
    local phrase = \"\"
    for _,v in ipairs(block.lines) do
        phrase = phrase .. v .. \"\\n\"
    end
    return phrase
end

function B.toValue(block)
    block.val = block:toString()
    return block.val
end

function B.toMarkdown(block)
    if block[1] and (block[1].id == \"codeblock\"
      or block[1].id == \"prose\") then
        return block[1]:toMarkdown()
    else
        return block:toString()
    end
end

function B.dotLabel(block)
    return \"block \" .. tostring(block.line_first) 
        .. \"-\" .. tostring(block.line_last)
end"]
// END RANK codeblock_65

section_11 -> { header_70 prose_71 codeblock_72 prose_73 codeblock_74}
{rank=same; header_70 prose_71 codeblock_72 prose_73 codeblock_74}

header_70 [label="2 : Constructor/module"]

prose_71 [label="prose"]

codeblock_72 [label="code block 129-151"]

prose_73 [label="prose"]

codeblock_74 [label="code block 163-179"]


// END RANK section_11

header_70 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Constructor/module"]
// END RANK header_70

prose_71 -> { raw_76}
{rank=same; raw_76}

raw_76 [label="raw"]


// END RANK prose_71

raw_76 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_76

codeblock_72 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local b = {}

local function new(Block, lines, linum, str)
    local block = setmetatable({}, B)
    block.lines = {}
    block.line_first = linum
    if (lines) then 
        if type(lines) == \"string\" then
            block:addLine(lines)
        elseif type(lines) == \"table\" then
            for _, l in ipairs(lines) do
                block:addLine(l)
            end
        else
            freeze(\"Error: in block.new type of `lines` is \" .. type(lines))
        end
    end

    block.id = \"block\"
    return block
end"]
// END RANK codeblock_72

prose_73 -> { raw_79}
{rank=same; raw_79}

raw_79 [label="raw"]


// END RANK prose_73

raw_79 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - returns: 
        1. true for structure, false for prose
        2. id of structure line or \"\" for prose

"]
// END RANK raw_79

codeblock_74 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function structureOrProse(line)
    if L.match(m.tagline_p, line) then
        return true, \"tagline\"
    elseif L.match(m.listline_p, line) then
        return true, \"listline\"
    elseif L.match(m.tableline_p, line) then
        return true, \"tableline\"
    end
    return false, \"\"
end

b[\"__call\"] = new
b[\"__index\"] = b

return setmetatable({}, b)"]
// END RANK codeblock_74


}
