* File


File is going to mutate a few times fairly rapidly.

Right now a File has a Path and isn't a Directory.

It has a Directory also.

It can tell if it =exists()=, like the others, it doesn't have to.


Most importantly, a File is not just unique, but won't construct twice.

For a Path or a Dir, trying to create a new one just gets you the old one.

But files lock and otherwise hold resources open, so they only get created
once.

There is no protection against uniqueness of the resulting pointer, but it's
a cheap way to find out we may have contention.

We also don't retain a reference, weak or otherwise, to the File.

#!lua
local Path = require "walk/path"
local lfs = require "lfs"
local pl_path = require "pl.path"
local isfile = pl_path.isfile
#/lua

#!lua
local function __tostring(file)
   return file.path.str
end
#/lua


#!lua
local File = {}
local __Files = {}
File.it = require "core/check"
#/lua

#!lua
function File.exists(file)
   return isfile(file.path.str)
end
#/lua



#!lua

local FileMeta = { __index = File,
                   __tostring = __tostring}

local function new(file_path)
   file_str = tostring(file_path)
   if __Files[file_str] then
      return nil, "won't make the same file twice"
   end

   local file = setmetatable({}, FileMeta)
   if type(file_path) == "string" then
      file.path = Path(file_path)
   elseif file_path.idEst == Path
      and not file_path.isDir then
      file.path = file_path
   end
   __Files[file_str] = true

   return file
end

#/lua

#!lua
File.idEst = new
return new
#/lua