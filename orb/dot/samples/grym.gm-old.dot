digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 90"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-90"]


section_1 -> { header_2 block_3 block_4 block_5 block_6 block_7 block_8}
{rank=same; header_2 block_3 block_4 block_5 block_6 block_7 block_8}

header_2 [label="0 : "]

block_3 [label="block 1-3"]

block_4 [label="block 4-31"]

block_5 [label="block 32-33"]

block_6 [label="block 34-69"]

block_7 [label="block 70-71"]

block_8 [label="block 72-90"]


block_3 -> { prose_9}
{rank=same; prose_9}

prose_9 [label="prose"]


prose_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Grimoire, a metalanguage for magic spells
"]
block_4 -> { codeblock_11}
{rank=same; codeblock_11}

codeblock_11 [label="code block 4-30"]


codeblock_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="require \"pl.strict\"

local verbose = false


local pl_file = require \"pl.file\"
local pl_dir = require \"pl.dir\"
local pl_path = require \"pl.path\"
local getfiles = pl_dir.getfiles
local getdirectories = pl_dir.getdirectories
local read = pl_file.read
local write = pl_file.write
local isdir = pl_path.isdir

local L = require \"lpeg\"

local ansi = require \"lib/ansi\"
local ast = require \"peg/ast\"
local epeg = require \"peg/epeg\"

local P_grym = require \"grym/grymmyr\" 
local m = require \"grym/morphemes\"

local invert = require \"invert\"
local knit = require \"knit\""]
block_5 -> { prose_13}
{rank=same; prose_13}

prose_13 [label="prose"]


prose_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Argument parsing goes here
"]
block_6 -> { codeblock_15}
{rank=same; codeblock_15}

codeblock_15 [label="code block 34-67"]


codeblock_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pwd, verb = \"\", \"\"

if (arg) then
    pwd = table.remove(arg, 1)
    verb = table.remove(arg, 1)
    for _, v in ipairs(arg) do
        io.write(ansi.yellow(v)..\"\\n\")
    end
end



local grym = {}

grym.invert = invert
grym.knit = knit

local function parse(str) 
    return ast.parse(P_grym, str)
end

samples = getfiles(\"samples\")

local own = require \"grym/own\"

if verb == \"invert\" then
    invert:invert_all(pwd)
elseif verb == \"knit\" then
    -- knitter goes here
    local doc = own.parse(read \"../org/grym.gm\")
    io.write(knit:knit(doc))
end"]
block_7 -> { prose_17}
{rank=same; prose_17}

prose_17 [label="prose"]


prose_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" Run the samples and make dotfiles
"]
block_8 -> { codeblock_19}
{rank=same; codeblock_19}

codeblock_19 [label="code block 72-90"]


codeblock_19 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="---[[
for _,v in ipairs(samples) do
    if v:match(\"~\") == nil then
        if verbose then io.write(v) end
        local sample = read(v)
        --io.write(v..\"\\n\")
        local doc = own.parse(sample)
        local doc_dot = doc:dot()
        local old_dot = read(\"../org/dot/\" .. v .. \".dot\")
        if old_dot and old_dot ~= doc_dot then
            io.write(\"   -- changed dotfile: \" .. v)
            write(\"../org/dot/\" .. v .. \"-old.dot\", old_dot)
        end
        write(\"../org/dot/\" .. v .. \".dot\", doc:dot())
    end
end
--]]"]

}
